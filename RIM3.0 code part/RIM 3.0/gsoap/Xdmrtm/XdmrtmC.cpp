/* XdmrtmC.cpp
   Generated by gSOAP 2.8.2 from Xdmrtm.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "XdmrtmH.h"

namespace Xdmrtm {

SOAP_SOURCE_STAMP("@(#) XdmrtmC.cpp ver 2.8.2 2015-05-14 03:11:46 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_Xdmrtm_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_Xdmrtm_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_Xdmrtm_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_Xdmrtm_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_Xdmrtm_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_Xdmrtm_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_Xdmrtm_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_Xdmrtm_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray:
		return soap_in_Xdmrtm__AlarmArray(soap, NULL, NULL, "Xdmrtm:AlarmArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm:
		return soap_in_Xdmrtm__Alarm(soap, NULL, NULL, "Xdmrtm:Alarm");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray:
		return soap_in_Xdmrtm__MonAnalysisReportAttachmentArray(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportAttachmentArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment:
		return soap_in_Xdmrtm__MonAnalysisReportAttachment(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray:
		return soap_in_Xdmrtm__MonAnalysisReportArray(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport:
		return soap_in_Xdmrtm__MonAnalysisReport(soap, NULL, NULL, "Xdmrtm:MonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray:
		return soap_in_Xdmrtm__PlanTaskArray(soap, NULL, NULL, "Xdmrtm:PlanTaskArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask:
		return soap_in_Xdmrtm__PlanTask(soap, NULL, NULL, "Xdmrtm:PlanTask");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray:
		return soap_in_Xdmrtm__PlanTaskIDArray(soap, NULL, NULL, "Xdmrtm:PlanTaskIDArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID:
		return soap_in_Xdmrtm__PlanTaskID(soap, NULL, NULL, "Xdmrtm:PlanTaskID");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray:
		return soap_in_Xdmrtm__FreqLayoutArray(soap, NULL, NULL, "Xdmrtm:FreqLayoutArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout:
		return soap_in_Xdmrtm__FreqLayout(soap, NULL, NULL, "Xdmrtm:FreqLayout");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray:
		return soap_in_Xdmrtm__DeviceUseingInfoArray(soap, NULL, NULL, "Xdmrtm:DeviceUseingInfoArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo:
		return soap_in_Xdmrtm__DeviceUseingInfo(soap, NULL, NULL, "Xdmrtm:DeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer:
		return soap_in_Xdmrtm__LoadbalancingServer(soap, NULL, NULL, "Xdmrtm:LoadbalancingServer");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray:
		return soap_in_Xdmrtm__LicenseStationArray(soap, NULL, NULL, "Xdmrtm:LicenseStationArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation:
		return soap_in_Xdmrtm__LicenseStation(soap, NULL, NULL, "Xdmrtm:LicenseStation");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray:
		return soap_in_Xdmrtm__DeviceFuncArray(soap, NULL, NULL, "Xdmrtm:DeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc:
		return soap_in_Xdmrtm__DeviceFunc(soap, NULL, NULL, "Xdmrtm:DeviceFunc");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray:
		return soap_in_Xdmrtm__DeviceFuncAntennaArray(soap, NULL, NULL, "Xdmrtm:DeviceFuncAntennaArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna:
		return soap_in_Xdmrtm__DeviceFuncAntenna(soap, NULL, NULL, "Xdmrtm:DeviceFuncAntenna");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray:
		return soap_in_Xdmrtm__AntArray(soap, NULL, NULL, "Xdmrtm:AntArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Ant:
		return soap_in_Xdmrtm__Ant(soap, NULL, NULL, "Xdmrtm:Ant");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray:
		return soap_in_Xdmrtm__RNCArray(soap, NULL, NULL, "Xdmrtm:RNCArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNC:
		return soap_in_Xdmrtm__RNC(soap, NULL, NULL, "Xdmrtm:RNC");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray:
		return soap_in_Xdmrtm__DeviceArray(soap, NULL, NULL, "Xdmrtm:DeviceArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Device:
		return soap_in_Xdmrtm__Device(soap, NULL, NULL, "Xdmrtm:Device");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray:
		return soap_in_Xdmrtm__StationArray(soap, NULL, NULL, "Xdmrtm:StationArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Station:
		return soap_in_Xdmrtm__Station(soap, NULL, NULL, "Xdmrtm:Station");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray:
		return soap_in_Xdmrtm__DeviceUsedLogArray(soap, NULL, NULL, "Xdmrtm:DeviceUsedLogArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog:
		return soap_in_Xdmrtm__DeviceUsedLog(soap, NULL, NULL, "Xdmrtm:DeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray:
		return soap_in_Xdmrtm__MonControlCenterArray(soap, NULL, NULL, "Xdmrtm:MonControlCenterArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter:
		return soap_in_Xdmrtm__MonControlCenter(soap, NULL, NULL, "Xdmrtm:MonControlCenter");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray:
		return soap_in_Xdmrtm__MonOrganizationArray(soap, NULL, NULL, "Xdmrtm:MonOrganizationArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization:
		return soap_in_Xdmrtm__MonOrganization(soap, NULL, NULL, "Xdmrtm:MonOrganization");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray:
		return soap_in_Xdmrtm__RefDeviceModelFuncParamArray(soap, NULL, NULL, "Xdmrtm:RefDeviceModelFuncParamArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam:
		return soap_in_Xdmrtm__RefDeviceModelFuncParam(soap, NULL, NULL, "Xdmrtm:RefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray:
		return soap_in_Xdmrtm__RefDeviceFuncArray(soap, NULL, NULL, "Xdmrtm:RefDeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc:
		return soap_in_Xdmrtm__RefDeviceFunc(soap, NULL, NULL, "Xdmrtm:RefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray:
		return soap_in_Xdmrtm__RefDeviceModelArray(soap, NULL, NULL, "Xdmrtm:RefDeviceModelArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel:
		return soap_in_Xdmrtm__RefDeviceModel(soap, NULL, NULL, "Xdmrtm:RefDeviceModel");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray:
		return soap_in_Xdmrtm__RefDeviceProtocolArray(soap, NULL, NULL, "Xdmrtm:RefDeviceProtocolArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol:
		return soap_in_Xdmrtm__RefDeviceProtocol(soap, NULL, NULL, "Xdmrtm:RefDeviceProtocol");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray:
		return soap_in_Xdmrtm__RefDeviceTypeArray(soap, NULL, NULL, "Xdmrtm:RefDeviceTypeArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType:
		return soap_in_Xdmrtm__RefDeviceType(soap, NULL, NULL, "Xdmrtm:RefDeviceType");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray:
		return soap_in_Xdmrtm__RefStationTypeArray(soap, NULL, NULL, "Xdmrtm:RefStationTypeArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType:
		return soap_in_Xdmrtm__RefStationType(soap, NULL, NULL, "Xdmrtm:RefStationType");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfoResponse:
		return soap_in_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(soap, NULL, NULL, "Xdmrtm:SubmitAlarmInfoResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfo:
		return soap_in_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, NULL, NULL, "Xdmrtm:SubmitAlarmInfo");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisResponse:
		return soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(soap, NULL, NULL, "Xdmrtm:DeleteMonAnalysisResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisReport:
		return soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, NULL, NULL, "Xdmrtm:DeleteMonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReportResponse:
		return soap_in_PointerTo_Xdmrtm__IsAnalysisReportResponse(soap, NULL, NULL, "Xdmrtm:IsAnalysisReportResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReport:
		return soap_in_PointerTo_Xdmrtm__IsAnalysisReport(soap, NULL, NULL, "Xdmrtm:IsAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		return soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, NULL, NULL, "Xdmrtm:DownloadMonAnalysisReportAttachmentResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment:
		return soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, NULL, NULL, "Xdmrtm:DownloadMonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		return soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, NULL, NULL, "Xdmrtm:QueryMonAnalysisReportAttachmentResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment:
		return soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, NULL, NULL, "Xdmrtm:QueryMonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse:
		return soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(soap, NULL, NULL, "Xdmrtm:QueryMonAnalysisReportResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReport:
		return soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, NULL, NULL, "Xdmrtm:QueryMonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse:
		return soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(soap, NULL, NULL, "Xdmrtm:SubmitMonAnalysisReportResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReport:
		return soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, NULL, NULL, "Xdmrtm:SubmitMonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse:
		return soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(soap, NULL, NULL, "Xdmrtm:SubmitPlanTaskLogResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLog:
		return soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, NULL, NULL, "Xdmrtm:SubmitPlanTaskLog");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTaskResponse:
		return soap_in_PointerTo_Xdmrtm__ResumePlanTaskResponse(soap, NULL, NULL, "Xdmrtm:ResumePlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTask:
		return soap_in_PointerTo_Xdmrtm__ResumePlanTask(soap, NULL, NULL, "Xdmrtm:ResumePlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTaskResponse:
		return soap_in_PointerTo_Xdmrtm__SuspendPlanTaskResponse(soap, NULL, NULL, "Xdmrtm:SuspendPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTask:
		return soap_in_PointerTo_Xdmrtm__SuspendPlanTask(soap, NULL, NULL, "Xdmrtm:SuspendPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTaskResponse:
		return soap_in_PointerTo_Xdmrtm__StopPlanTaskResponse(soap, NULL, NULL, "Xdmrtm:StopPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTask:
		return soap_in_PointerTo_Xdmrtm__StopPlanTask(soap, NULL, NULL, "Xdmrtm:StopPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTaskResponse:
		return soap_in_PointerTo_Xdmrtm__StartPlanTaskResponse(soap, NULL, NULL, "Xdmrtm:StartPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTask:
		return soap_in_PointerTo_Xdmrtm__StartPlanTask(soap, NULL, NULL, "Xdmrtm:StartPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse:
		return soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(soap, NULL, NULL, "Xdmrtm:QueryCurExecPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTask:
		return soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, NULL, NULL, "Xdmrtm:QueryCurExecPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTaskResponse:
		return soap_in_PointerTo_Xdmrtm__QueryPlanTaskResponse(soap, NULL, NULL, "Xdmrtm:QueryPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTask:
		return soap_in_PointerTo_Xdmrtm__QueryPlanTask(soap, NULL, NULL, "Xdmrtm:QueryPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse:
		return soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, NULL, NULL, "Xdmrtm:QueryCurExecPlanTaskIDResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskID:
		return soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, NULL, NULL, "Xdmrtm:QueryCurExecPlanTaskID");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayoutResponse:
		return soap_in_PointerTo_Xdmrtm__QueryFreqLayoutResponse(soap, NULL, NULL, "Xdmrtm:QueryFreqLayoutResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayout:
		return soap_in_PointerTo_Xdmrtm__QueryFreqLayout(soap, NULL, NULL, "Xdmrtm:QueryFreqLayout");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, NULL, NULL, "Xdmrtm:QueryDeviceUseingInfoByUserResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, NULL, NULL, "Xdmrtm:QueryDeviceUseingInfoByUser");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, NULL, NULL, "Xdmrtm:QueryDeviceUseingInfoByDeviceResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, NULL, NULL, "Xdmrtm:QueryDeviceUseingInfoByDevice");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(soap, NULL, NULL, "Xdmrtm:QueryDeviceUseingInfoResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfo:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, NULL, NULL, "Xdmrtm:QueryDeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse:
		return soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(soap, NULL, NULL, "Xdmrtm:SubmitDeviceUsedLogResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLog:
		return soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, NULL, NULL, "Xdmrtm:SubmitDeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse:
		return soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(soap, NULL, NULL, "Xdmrtm:AllocLoadbalancingServerResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServer:
		return soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, NULL, NULL, "Xdmrtm:AllocLoadbalancingServer");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStationResponse:
		return soap_in_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(soap, NULL, NULL, "Xdmrtm:QueryUserLicenseStationResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStation:
		return soap_in_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, NULL, NULL, "Xdmrtm:QueryUserLicenseStation");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(soap, NULL, NULL, "Xdmrtm:QueryDeviceFuncAntResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAnt:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, NULL, NULL, "Xdmrtm:QueryDeviceFuncAnt");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncResponse:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceFuncResponse(soap, NULL, NULL, "Xdmrtm:QueryDeviceFuncResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFunc:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceFunc(soap, NULL, NULL, "Xdmrtm:QueryDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAntResponse:
		return soap_in_PointerTo_Xdmrtm__QueryAntResponse(soap, NULL, NULL, "Xdmrtm:QueryAntResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAnt:
		return soap_in_PointerTo_Xdmrtm__QueryAnt(soap, NULL, NULL, "Xdmrtm:QueryAnt");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNCResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRNCResponse(soap, NULL, NULL, "Xdmrtm:QueryRNCResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNC:
		return soap_in_PointerTo_Xdmrtm__QueryRNC(soap, NULL, NULL, "Xdmrtm:QueryRNC");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceResponse:
		return soap_in_PointerTo_Xdmrtm__QueryDeviceResponse(soap, NULL, NULL, "Xdmrtm:QueryDeviceResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDevice:
		return soap_in_PointerTo_Xdmrtm__QueryDevice(soap, NULL, NULL, "Xdmrtm:QueryDevice");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStationResponse:
		return soap_in_PointerTo_Xdmrtm__QueryStationResponse(soap, NULL, NULL, "Xdmrtm:QueryStationResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStation:
		return soap_in_PointerTo_Xdmrtm__QueryStation(soap, NULL, NULL, "Xdmrtm:QueryStation");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenterResponse:
		return soap_in_PointerTo_Xdmrtm__QueryMonControlCenterResponse(soap, NULL, NULL, "Xdmrtm:QueryMonControlCenterResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenter:
		return soap_in_PointerTo_Xdmrtm__QueryMonControlCenter(soap, NULL, NULL, "Xdmrtm:QueryMonControlCenter");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganizationResponse:
		return soap_in_PointerTo_Xdmrtm__QueryMonOrganizationResponse(soap, NULL, NULL, "Xdmrtm:QueryMonOrganizationResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganization:
		return soap_in_PointerTo_Xdmrtm__QueryMonOrganization(soap, NULL, NULL, "Xdmrtm:QueryMonOrganization");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceModelFuncParamResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceFuncResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFunc:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceModelResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModel:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceModel");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceProtocolTypeResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolType:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceProtocolType");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceTypeResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceType:
		return soap_in_PointerTo_Xdmrtm__QueryRefDeviceType(soap, NULL, NULL, "Xdmrtm:QueryRefDeviceType");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationTypeResponse:
		return soap_in_PointerTo_Xdmrtm__QueryRefStationTypeResponse(soap, NULL, NULL, "Xdmrtm:QueryRefStationTypeResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationType:
		return soap_in_PointerTo_Xdmrtm__QueryRefStationType(soap, NULL, NULL, "Xdmrtm:QueryRefStationType");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachmentArray:
		return soap_in_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportAttachmentArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportArray:
		return soap_in_PointerToXdmrtm__MonAnalysisReportArray(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskArray:
		return soap_in_PointerToXdmrtm__PlanTaskArray(soap, NULL, NULL, "Xdmrtm:PlanTaskArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskIDArray:
		return soap_in_PointerToXdmrtm__PlanTaskIDArray(soap, NULL, NULL, "Xdmrtm:PlanTaskIDArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayoutArray:
		return soap_in_PointerToXdmrtm__FreqLayoutArray(soap, NULL, NULL, "Xdmrtm:FreqLayoutArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfoArray:
		return soap_in_PointerToXdmrtm__DeviceUseingInfoArray(soap, NULL, NULL, "Xdmrtm:DeviceUseingInfoArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LoadbalancingServer:
		return soap_in_PointerToXdmrtm__LoadbalancingServer(soap, NULL, NULL, "Xdmrtm:LoadbalancingServer");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStationArray:
		return soap_in_PointerToXdmrtm__LicenseStationArray(soap, NULL, NULL, "Xdmrtm:LicenseStationArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntennaArray:
		return soap_in_PointerToXdmrtm__DeviceFuncAntennaArray(soap, NULL, NULL, "Xdmrtm:DeviceFuncAntennaArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncArray:
		return soap_in_PointerToXdmrtm__DeviceFuncArray(soap, NULL, NULL, "Xdmrtm:DeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__AntArray:
		return soap_in_PointerToXdmrtm__AntArray(soap, NULL, NULL, "Xdmrtm:AntArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNCArray:
		return soap_in_PointerToXdmrtm__RNCArray(soap, NULL, NULL, "Xdmrtm:RNCArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceArray:
		return soap_in_PointerToXdmrtm__DeviceArray(soap, NULL, NULL, "Xdmrtm:DeviceArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__StationArray:
		return soap_in_PointerToXdmrtm__StationArray(soap, NULL, NULL, "Xdmrtm:StationArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenterArray:
		return soap_in_PointerToXdmrtm__MonControlCenterArray(soap, NULL, NULL, "Xdmrtm:MonControlCenterArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganizationArray:
		return soap_in_PointerToXdmrtm__MonOrganizationArray(soap, NULL, NULL, "Xdmrtm:MonOrganizationArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParamArray:
		return soap_in_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, NULL, NULL, "Xdmrtm:RefDeviceModelFuncParamArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFuncArray:
		return soap_in_PointerToXdmrtm__RefDeviceFuncArray(soap, NULL, NULL, "Xdmrtm:RefDeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelArray:
		return soap_in_PointerToXdmrtm__RefDeviceModelArray(soap, NULL, NULL, "Xdmrtm:RefDeviceModelArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocolArray:
		return soap_in_PointerToXdmrtm__RefDeviceProtocolArray(soap, NULL, NULL, "Xdmrtm:RefDeviceProtocolArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceTypeArray:
		return soap_in_PointerToXdmrtm__RefDeviceTypeArray(soap, NULL, NULL, "Xdmrtm:RefDeviceTypeArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationTypeArray:
		return soap_in_PointerToXdmrtm__RefStationTypeArray(soap, NULL, NULL, "Xdmrtm:RefStationTypeArray");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Alarm:
		return soap_in_PointerToPointerToXdmrtm__Alarm(soap, NULL, NULL, "Xdmrtm:Alarm");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm:
		return soap_in_PointerToXdmrtm__Alarm(soap, NULL, NULL, "Xdmrtm:Alarm");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReportAttachment:
		return soap_in_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment:
		return soap_in_PointerToXdmrtm__MonAnalysisReportAttachment(soap, NULL, NULL, "Xdmrtm:MonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReport:
		return soap_in_PointerToPointerToXdmrtm__MonAnalysisReport(soap, NULL, NULL, "Xdmrtm:MonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport:
		return soap_in_PointerToXdmrtm__MonAnalysisReport(soap, NULL, NULL, "Xdmrtm:MonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTask:
		return soap_in_PointerToPointerToXdmrtm__PlanTask(soap, NULL, NULL, "Xdmrtm:PlanTask");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask:
		return soap_in_PointerToXdmrtm__PlanTask(soap, NULL, NULL, "Xdmrtm:PlanTask");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTaskID:
		return soap_in_PointerToPointerToXdmrtm__PlanTaskID(soap, NULL, NULL, "Xdmrtm:PlanTaskID");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID:
		return soap_in_PointerToXdmrtm__PlanTaskID(soap, NULL, NULL, "Xdmrtm:PlanTaskID");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__FreqLayout:
		return soap_in_PointerToPointerToXdmrtm__FreqLayout(soap, NULL, NULL, "Xdmrtm:FreqLayout");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout:
		return soap_in_PointerToXdmrtm__FreqLayout(soap, NULL, NULL, "Xdmrtm:FreqLayout");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUseingInfo:
		return soap_in_PointerToPointerToXdmrtm__DeviceUseingInfo(soap, NULL, NULL, "Xdmrtm:DeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo:
		return soap_in_PointerToXdmrtm__DeviceUseingInfo(soap, NULL, NULL, "Xdmrtm:DeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__LicenseStation:
		return soap_in_PointerToPointerToXdmrtm__LicenseStation(soap, NULL, NULL, "Xdmrtm:LicenseStation");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation:
		return soap_in_PointerToXdmrtm__LicenseStation(soap, NULL, NULL, "Xdmrtm:LicenseStation");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFunc:
		return soap_in_PointerToPointerToXdmrtm__DeviceFunc(soap, NULL, NULL, "Xdmrtm:DeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc:
		return soap_in_PointerToXdmrtm__DeviceFunc(soap, NULL, NULL, "Xdmrtm:DeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFuncAntenna:
		return soap_in_PointerToPointerToXdmrtm__DeviceFuncAntenna(soap, NULL, NULL, "Xdmrtm:DeviceFuncAntenna");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna:
		return soap_in_PointerToXdmrtm__DeviceFuncAntenna(soap, NULL, NULL, "Xdmrtm:DeviceFuncAntenna");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Ant:
		return soap_in_PointerToPointerToXdmrtm__Ant(soap, NULL, NULL, "Xdmrtm:Ant");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant:
		return soap_in_PointerToXdmrtm__Ant(soap, NULL, NULL, "Xdmrtm:Ant");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RNC:
		return soap_in_PointerToPointerToXdmrtm__RNC(soap, NULL, NULL, "Xdmrtm:RNC");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC:
		return soap_in_PointerToXdmrtm__RNC(soap, NULL, NULL, "Xdmrtm:RNC");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Device:
		return soap_in_PointerToPointerToXdmrtm__Device(soap, NULL, NULL, "Xdmrtm:Device");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device:
		return soap_in_PointerToXdmrtm__Device(soap, NULL, NULL, "Xdmrtm:Device");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Station:
		return soap_in_PointerToPointerToXdmrtm__Station(soap, NULL, NULL, "Xdmrtm:Station");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station:
		return soap_in_PointerToXdmrtm__Station(soap, NULL, NULL, "Xdmrtm:Station");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUsedLog:
		return soap_in_PointerToPointerToXdmrtm__DeviceUsedLog(soap, NULL, NULL, "Xdmrtm:DeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog:
		return soap_in_PointerToXdmrtm__DeviceUsedLog(soap, NULL, NULL, "Xdmrtm:DeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonControlCenter:
		return soap_in_PointerToPointerToXdmrtm__MonControlCenter(soap, NULL, NULL, "Xdmrtm:MonControlCenter");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter:
		return soap_in_PointerToXdmrtm__MonControlCenter(soap, NULL, NULL, "Xdmrtm:MonControlCenter");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonOrganization:
		return soap_in_PointerToPointerToXdmrtm__MonOrganization(soap, NULL, NULL, "Xdmrtm:MonOrganization");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization:
		return soap_in_PointerToXdmrtm__MonOrganization(soap, NULL, NULL, "Xdmrtm:MonOrganization");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModelFuncParam:
		return soap_in_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(soap, NULL, NULL, "Xdmrtm:RefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam:
		return soap_in_PointerToXdmrtm__RefDeviceModelFuncParam(soap, NULL, NULL, "Xdmrtm:RefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceFunc:
		return soap_in_PointerToPointerToXdmrtm__RefDeviceFunc(soap, NULL, NULL, "Xdmrtm:RefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc:
		return soap_in_PointerToXdmrtm__RefDeviceFunc(soap, NULL, NULL, "Xdmrtm:RefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModel:
		return soap_in_PointerToPointerToXdmrtm__RefDeviceModel(soap, NULL, NULL, "Xdmrtm:RefDeviceModel");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel:
		return soap_in_PointerToXdmrtm__RefDeviceModel(soap, NULL, NULL, "Xdmrtm:RefDeviceModel");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceProtocol:
		return soap_in_PointerToPointerToXdmrtm__RefDeviceProtocol(soap, NULL, NULL, "Xdmrtm:RefDeviceProtocol");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol:
		return soap_in_PointerToXdmrtm__RefDeviceProtocol(soap, NULL, NULL, "Xdmrtm:RefDeviceProtocol");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceType:
		return soap_in_PointerToPointerToXdmrtm__RefDeviceType(soap, NULL, NULL, "Xdmrtm:RefDeviceType");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType:
		return soap_in_PointerToXdmrtm__RefDeviceType(soap, NULL, NULL, "Xdmrtm:RefDeviceType");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefStationType:
		return soap_in_PointerToPointerToXdmrtm__RefStationType(soap, NULL, NULL, "Xdmrtm:RefStationType");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType:
		return soap_in_PointerToXdmrtm__RefStationType(soap, NULL, NULL, "Xdmrtm:RefStationType");
	case SOAP_TYPE_Xdmrtm__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_Xdmrtm_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_Xdmrtm_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:AlarmArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray;
			return soap_in_Xdmrtm__AlarmArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:Alarm"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm;
			return soap_in_Xdmrtm__Alarm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonAnalysisReportAttachmentArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray;
			return soap_in_Xdmrtm__MonAnalysisReportAttachmentArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonAnalysisReportAttachment"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment;
			return soap_in_Xdmrtm__MonAnalysisReportAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonAnalysisReportArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray;
			return soap_in_Xdmrtm__MonAnalysisReportArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonAnalysisReport"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport;
			return soap_in_Xdmrtm__MonAnalysisReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:PlanTaskArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray;
			return soap_in_Xdmrtm__PlanTaskArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:PlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask;
			return soap_in_Xdmrtm__PlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:PlanTaskIDArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray;
			return soap_in_Xdmrtm__PlanTaskIDArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:PlanTaskID"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID;
			return soap_in_Xdmrtm__PlanTaskID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:FreqLayoutArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray;
			return soap_in_Xdmrtm__FreqLayoutArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:FreqLayout"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout;
			return soap_in_Xdmrtm__FreqLayout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceUseingInfoArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray;
			return soap_in_Xdmrtm__DeviceUseingInfoArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceUseingInfo"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo;
			return soap_in_Xdmrtm__DeviceUseingInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:LoadbalancingServer"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer;
			return soap_in_Xdmrtm__LoadbalancingServer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:LicenseStationArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray;
			return soap_in_Xdmrtm__LicenseStationArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:LicenseStation"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation;
			return soap_in_Xdmrtm__LicenseStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceFuncArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray;
			return soap_in_Xdmrtm__DeviceFuncArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceFunc"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc;
			return soap_in_Xdmrtm__DeviceFunc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceFuncAntennaArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray;
			return soap_in_Xdmrtm__DeviceFuncAntennaArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceFuncAntenna"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna;
			return soap_in_Xdmrtm__DeviceFuncAntenna(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:AntArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray;
			return soap_in_Xdmrtm__AntArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:Ant"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__Ant;
			return soap_in_Xdmrtm__Ant(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RNCArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray;
			return soap_in_Xdmrtm__RNCArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RNC"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RNC;
			return soap_in_Xdmrtm__RNC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray;
			return soap_in_Xdmrtm__DeviceArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:Device"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__Device;
			return soap_in_Xdmrtm__Device(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:StationArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray;
			return soap_in_Xdmrtm__StationArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:Station"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__Station;
			return soap_in_Xdmrtm__Station(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceUsedLogArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray;
			return soap_in_Xdmrtm__DeviceUsedLogArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeviceUsedLog"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog;
			return soap_in_Xdmrtm__DeviceUsedLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonControlCenterArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray;
			return soap_in_Xdmrtm__MonControlCenterArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonControlCenter"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter;
			return soap_in_Xdmrtm__MonControlCenter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonOrganizationArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray;
			return soap_in_Xdmrtm__MonOrganizationArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:MonOrganization"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization;
			return soap_in_Xdmrtm__MonOrganization(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceModelFuncParamArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray;
			return soap_in_Xdmrtm__RefDeviceModelFuncParamArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceModelFuncParam"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam;
			return soap_in_Xdmrtm__RefDeviceModelFuncParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceFuncArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray;
			return soap_in_Xdmrtm__RefDeviceFuncArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceFunc"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc;
			return soap_in_Xdmrtm__RefDeviceFunc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceModelArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray;
			return soap_in_Xdmrtm__RefDeviceModelArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceModel"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel;
			return soap_in_Xdmrtm__RefDeviceModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceProtocolArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray;
			return soap_in_Xdmrtm__RefDeviceProtocolArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceProtocol"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol;
			return soap_in_Xdmrtm__RefDeviceProtocol(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceTypeArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray;
			return soap_in_Xdmrtm__RefDeviceTypeArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefDeviceType"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType;
			return soap_in_Xdmrtm__RefDeviceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefStationTypeArray"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray;
			return soap_in_Xdmrtm__RefStationTypeArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:RefStationType"))
		{	*type = SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType;
			return soap_in_Xdmrtm__RefStationType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_Xdmrtm_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_Xdmrtm_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_Xdmrtm_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_Xdmrtm_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_Xdmrtm_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_Xdmrtm_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_Xdmrtm_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_Xdmrtm__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_Xdmrtm_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitAlarmInfoResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse;
			return soap_in__Xdmrtm__SubmitAlarmInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitAlarmInfo"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo;
			return soap_in__Xdmrtm__SubmitAlarmInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeleteMonAnalysisResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse;
			return soap_in__Xdmrtm__DeleteMonAnalysisResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DeleteMonAnalysisReport"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport;
			return soap_in__Xdmrtm__DeleteMonAnalysisReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:IsAnalysisReportResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse;
			return soap_in__Xdmrtm__IsAnalysisReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:IsAnalysisReport"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport;
			return soap_in__Xdmrtm__IsAnalysisReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DownloadMonAnalysisReportAttachmentResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse;
			return soap_in__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:DownloadMonAnalysisReportAttachment"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment;
			return soap_in__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonAnalysisReportAttachmentResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse;
			return soap_in__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonAnalysisReportAttachment"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment;
			return soap_in__Xdmrtm__QueryMonAnalysisReportAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonAnalysisReportResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse;
			return soap_in__Xdmrtm__QueryMonAnalysisReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonAnalysisReport"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport;
			return soap_in__Xdmrtm__QueryMonAnalysisReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitMonAnalysisReportResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse;
			return soap_in__Xdmrtm__SubmitMonAnalysisReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitMonAnalysisReport"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport;
			return soap_in__Xdmrtm__SubmitMonAnalysisReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitPlanTaskLogResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse;
			return soap_in__Xdmrtm__SubmitPlanTaskLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitPlanTaskLog"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog;
			return soap_in__Xdmrtm__SubmitPlanTaskLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:ResumePlanTaskResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse;
			return soap_in__Xdmrtm__ResumePlanTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:ResumePlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask;
			return soap_in__Xdmrtm__ResumePlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SuspendPlanTaskResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse;
			return soap_in__Xdmrtm__SuspendPlanTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SuspendPlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask;
			return soap_in__Xdmrtm__SuspendPlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:StopPlanTaskResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse;
			return soap_in__Xdmrtm__StopPlanTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:StopPlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask;
			return soap_in__Xdmrtm__StopPlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:StartPlanTaskResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse;
			return soap_in__Xdmrtm__StartPlanTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:StartPlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask;
			return soap_in__Xdmrtm__StartPlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryCurExecPlanTaskResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse;
			return soap_in__Xdmrtm__QueryCurExecPlanTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryCurExecPlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask;
			return soap_in__Xdmrtm__QueryCurExecPlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryPlanTaskResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse;
			return soap_in__Xdmrtm__QueryPlanTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryPlanTask"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask;
			return soap_in__Xdmrtm__QueryPlanTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryCurExecPlanTaskIDResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse;
			return soap_in__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryCurExecPlanTaskID"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID;
			return soap_in__Xdmrtm__QueryCurExecPlanTaskID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryFreqLayoutResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse;
			return soap_in__Xdmrtm__QueryFreqLayoutResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryFreqLayout"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout;
			return soap_in__Xdmrtm__QueryFreqLayout(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceUseingInfoByUserResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse;
			return soap_in__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceUseingInfoByUser"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser;
			return soap_in__Xdmrtm__QueryDeviceUseingInfoByUser(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceUseingInfoByDeviceResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse;
			return soap_in__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceUseingInfoByDevice"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice;
			return soap_in__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceUseingInfoResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse;
			return soap_in__Xdmrtm__QueryDeviceUseingInfoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceUseingInfo"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo;
			return soap_in__Xdmrtm__QueryDeviceUseingInfo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitDeviceUsedLogResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse;
			return soap_in__Xdmrtm__SubmitDeviceUsedLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:SubmitDeviceUsedLog"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog;
			return soap_in__Xdmrtm__SubmitDeviceUsedLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:AllocLoadbalancingServerResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse;
			return soap_in__Xdmrtm__AllocLoadbalancingServerResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:AllocLoadbalancingServer"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer;
			return soap_in__Xdmrtm__AllocLoadbalancingServer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryUserLicenseStationResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse;
			return soap_in__Xdmrtm__QueryUserLicenseStationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryUserLicenseStation"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation;
			return soap_in__Xdmrtm__QueryUserLicenseStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceFuncAntResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse;
			return soap_in__Xdmrtm__QueryDeviceFuncAntResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceFuncAnt"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt;
			return soap_in__Xdmrtm__QueryDeviceFuncAnt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceFuncResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse;
			return soap_in__Xdmrtm__QueryDeviceFuncResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceFunc"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc;
			return soap_in__Xdmrtm__QueryDeviceFunc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryAntResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse;
			return soap_in__Xdmrtm__QueryAntResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryAnt"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt;
			return soap_in__Xdmrtm__QueryAnt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRNCResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse;
			return soap_in__Xdmrtm__QueryRNCResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRNC"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC;
			return soap_in__Xdmrtm__QueryRNC(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDeviceResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse;
			return soap_in__Xdmrtm__QueryDeviceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryDevice"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice;
			return soap_in__Xdmrtm__QueryDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryStationResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse;
			return soap_in__Xdmrtm__QueryStationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryStation"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation;
			return soap_in__Xdmrtm__QueryStation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonControlCenterResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse;
			return soap_in__Xdmrtm__QueryMonControlCenterResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonControlCenter"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter;
			return soap_in__Xdmrtm__QueryMonControlCenter(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonOrganizationResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse;
			return soap_in__Xdmrtm__QueryMonOrganizationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryMonOrganization"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization;
			return soap_in__Xdmrtm__QueryMonOrganization(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceModelFuncParamResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse;
			return soap_in__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceModelFuncParam"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam;
			return soap_in__Xdmrtm__QueryRefDeviceModelFuncParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceFuncResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse;
			return soap_in__Xdmrtm__QueryRefDeviceFuncResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceFunc"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc;
			return soap_in__Xdmrtm__QueryRefDeviceFunc(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceModelResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse;
			return soap_in__Xdmrtm__QueryRefDeviceModelResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceModel"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel;
			return soap_in__Xdmrtm__QueryRefDeviceModel(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceProtocolTypeResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse;
			return soap_in__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceProtocolType"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType;
			return soap_in__Xdmrtm__QueryRefDeviceProtocolType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceTypeResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse;
			return soap_in__Xdmrtm__QueryRefDeviceTypeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefDeviceType"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType;
			return soap_in__Xdmrtm__QueryRefDeviceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefStationTypeResponse"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse;
			return soap_in__Xdmrtm__QueryRefStationTypeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Xdmrtm:QueryRefStationType"))
		{	*type = SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType;
			return soap_in__Xdmrtm__QueryRefStationType(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_Xdmrtm_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_Xdmrtm_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_Xdmrtm_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_Xdmrtm_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_Xdmrtm_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_Xdmrtm_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_Xdmrtm_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_Xdmrtm_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse:
		return ((_Xdmrtm__SubmitAlarmInfoResponse *)ptr)->soap_out(soap, "Xdmrtm:SubmitAlarmInfoResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo:
		return ((_Xdmrtm__SubmitAlarmInfo *)ptr)->soap_out(soap, "Xdmrtm:SubmitAlarmInfo", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse:
		return ((_Xdmrtm__DeleteMonAnalysisResponse *)ptr)->soap_out(soap, "Xdmrtm:DeleteMonAnalysisResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport:
		return ((_Xdmrtm__DeleteMonAnalysisReport *)ptr)->soap_out(soap, "Xdmrtm:DeleteMonAnalysisReport", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse:
		return ((_Xdmrtm__IsAnalysisReportResponse *)ptr)->soap_out(soap, "Xdmrtm:IsAnalysisReportResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport:
		return ((_Xdmrtm__IsAnalysisReport *)ptr)->soap_out(soap, "Xdmrtm:IsAnalysisReport", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		return ((_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *)ptr)->soap_out(soap, "Xdmrtm:DownloadMonAnalysisReportAttachmentResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment:
		return ((_Xdmrtm__DownloadMonAnalysisReportAttachment *)ptr)->soap_out(soap, "Xdmrtm:DownloadMonAnalysisReportAttachment", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		return ((_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryMonAnalysisReportAttachmentResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment:
		return ((_Xdmrtm__QueryMonAnalysisReportAttachment *)ptr)->soap_out(soap, "Xdmrtm:QueryMonAnalysisReportAttachment", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse:
		return ((_Xdmrtm__QueryMonAnalysisReportResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryMonAnalysisReportResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport:
		return ((_Xdmrtm__QueryMonAnalysisReport *)ptr)->soap_out(soap, "Xdmrtm:QueryMonAnalysisReport", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse:
		return ((_Xdmrtm__SubmitMonAnalysisReportResponse *)ptr)->soap_out(soap, "Xdmrtm:SubmitMonAnalysisReportResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport:
		return ((_Xdmrtm__SubmitMonAnalysisReport *)ptr)->soap_out(soap, "Xdmrtm:SubmitMonAnalysisReport", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse:
		return ((_Xdmrtm__SubmitPlanTaskLogResponse *)ptr)->soap_out(soap, "Xdmrtm:SubmitPlanTaskLogResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog:
		return ((_Xdmrtm__SubmitPlanTaskLog *)ptr)->soap_out(soap, "Xdmrtm:SubmitPlanTaskLog", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse:
		return ((_Xdmrtm__ResumePlanTaskResponse *)ptr)->soap_out(soap, "Xdmrtm:ResumePlanTaskResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask:
		return ((_Xdmrtm__ResumePlanTask *)ptr)->soap_out(soap, "Xdmrtm:ResumePlanTask", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse:
		return ((_Xdmrtm__SuspendPlanTaskResponse *)ptr)->soap_out(soap, "Xdmrtm:SuspendPlanTaskResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask:
		return ((_Xdmrtm__SuspendPlanTask *)ptr)->soap_out(soap, "Xdmrtm:SuspendPlanTask", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse:
		return ((_Xdmrtm__StopPlanTaskResponse *)ptr)->soap_out(soap, "Xdmrtm:StopPlanTaskResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask:
		return ((_Xdmrtm__StopPlanTask *)ptr)->soap_out(soap, "Xdmrtm:StopPlanTask", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse:
		return ((_Xdmrtm__StartPlanTaskResponse *)ptr)->soap_out(soap, "Xdmrtm:StartPlanTaskResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask:
		return ((_Xdmrtm__StartPlanTask *)ptr)->soap_out(soap, "Xdmrtm:StartPlanTask", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse:
		return ((_Xdmrtm__QueryCurExecPlanTaskResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryCurExecPlanTaskResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask:
		return ((_Xdmrtm__QueryCurExecPlanTask *)ptr)->soap_out(soap, "Xdmrtm:QueryCurExecPlanTask", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse:
		return ((_Xdmrtm__QueryPlanTaskResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryPlanTaskResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask:
		return ((_Xdmrtm__QueryPlanTask *)ptr)->soap_out(soap, "Xdmrtm:QueryPlanTask", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse:
		return ((_Xdmrtm__QueryCurExecPlanTaskIDResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryCurExecPlanTaskIDResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID:
		return ((_Xdmrtm__QueryCurExecPlanTaskID *)ptr)->soap_out(soap, "Xdmrtm:QueryCurExecPlanTaskID", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse:
		return ((_Xdmrtm__QueryFreqLayoutResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryFreqLayoutResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout:
		return ((_Xdmrtm__QueryFreqLayout *)ptr)->soap_out(soap, "Xdmrtm:QueryFreqLayout", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		return ((_Xdmrtm__QueryDeviceUseingInfoByUserResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceUseingInfoByUserResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser:
		return ((_Xdmrtm__QueryDeviceUseingInfoByUser *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceUseingInfoByUser", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		return ((_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceUseingInfoByDeviceResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice:
		return ((_Xdmrtm__QueryDeviceUseingInfoByDevice *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceUseingInfoByDevice", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse:
		return ((_Xdmrtm__QueryDeviceUseingInfoResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceUseingInfoResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo:
		return ((_Xdmrtm__QueryDeviceUseingInfo *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceUseingInfo", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse:
		return ((_Xdmrtm__SubmitDeviceUsedLogResponse *)ptr)->soap_out(soap, "Xdmrtm:SubmitDeviceUsedLogResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog:
		return ((_Xdmrtm__SubmitDeviceUsedLog *)ptr)->soap_out(soap, "Xdmrtm:SubmitDeviceUsedLog", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse:
		return ((_Xdmrtm__AllocLoadbalancingServerResponse *)ptr)->soap_out(soap, "Xdmrtm:AllocLoadbalancingServerResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer:
		return ((_Xdmrtm__AllocLoadbalancingServer *)ptr)->soap_out(soap, "Xdmrtm:AllocLoadbalancingServer", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse:
		return ((_Xdmrtm__QueryUserLicenseStationResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryUserLicenseStationResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation:
		return ((_Xdmrtm__QueryUserLicenseStation *)ptr)->soap_out(soap, "Xdmrtm:QueryUserLicenseStation", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse:
		return ((_Xdmrtm__QueryDeviceFuncAntResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceFuncAntResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt:
		return ((_Xdmrtm__QueryDeviceFuncAnt *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceFuncAnt", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse:
		return ((_Xdmrtm__QueryDeviceFuncResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceFuncResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc:
		return ((_Xdmrtm__QueryDeviceFunc *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceFunc", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse:
		return ((_Xdmrtm__QueryAntResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryAntResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt:
		return ((_Xdmrtm__QueryAnt *)ptr)->soap_out(soap, "Xdmrtm:QueryAnt", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse:
		return ((_Xdmrtm__QueryRNCResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRNCResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC:
		return ((_Xdmrtm__QueryRNC *)ptr)->soap_out(soap, "Xdmrtm:QueryRNC", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse:
		return ((_Xdmrtm__QueryDeviceResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryDeviceResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice:
		return ((_Xdmrtm__QueryDevice *)ptr)->soap_out(soap, "Xdmrtm:QueryDevice", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse:
		return ((_Xdmrtm__QueryStationResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryStationResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation:
		return ((_Xdmrtm__QueryStation *)ptr)->soap_out(soap, "Xdmrtm:QueryStation", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse:
		return ((_Xdmrtm__QueryMonControlCenterResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryMonControlCenterResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter:
		return ((_Xdmrtm__QueryMonControlCenter *)ptr)->soap_out(soap, "Xdmrtm:QueryMonControlCenter", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse:
		return ((_Xdmrtm__QueryMonOrganizationResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryMonOrganizationResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization:
		return ((_Xdmrtm__QueryMonOrganization *)ptr)->soap_out(soap, "Xdmrtm:QueryMonOrganization", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		return ((_Xdmrtm__QueryRefDeviceModelFuncParamResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceModelFuncParamResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam:
		return ((_Xdmrtm__QueryRefDeviceModelFuncParam *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceModelFuncParam", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse:
		return ((_Xdmrtm__QueryRefDeviceFuncResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceFuncResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc:
		return ((_Xdmrtm__QueryRefDeviceFunc *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceFunc", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse:
		return ((_Xdmrtm__QueryRefDeviceModelResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceModelResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel:
		return ((_Xdmrtm__QueryRefDeviceModel *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceModel", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		return ((_Xdmrtm__QueryRefDeviceProtocolTypeResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceProtocolTypeResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType:
		return ((_Xdmrtm__QueryRefDeviceProtocolType *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceProtocolType", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse:
		return ((_Xdmrtm__QueryRefDeviceTypeResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceTypeResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType:
		return ((_Xdmrtm__QueryRefDeviceType *)ptr)->soap_out(soap, "Xdmrtm:QueryRefDeviceType", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse:
		return ((_Xdmrtm__QueryRefStationTypeResponse *)ptr)->soap_out(soap, "Xdmrtm:QueryRefStationTypeResponse", id, NULL);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType:
		return ((_Xdmrtm__QueryRefStationType *)ptr)->soap_out(soap, "Xdmrtm:QueryRefStationType", id, NULL);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray:
		return ((Xdmrtm__AlarmArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:AlarmArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm:
		return ((Xdmrtm__Alarm *)ptr)->soap_out(soap, tag, id, "Xdmrtm:Alarm");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray:
		return ((Xdmrtm__MonAnalysisReportAttachmentArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonAnalysisReportAttachmentArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment:
		return ((Xdmrtm__MonAnalysisReportAttachment *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray:
		return ((Xdmrtm__MonAnalysisReportArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonAnalysisReportArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport:
		return ((Xdmrtm__MonAnalysisReport *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray:
		return ((Xdmrtm__PlanTaskArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:PlanTaskArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask:
		return ((Xdmrtm__PlanTask *)ptr)->soap_out(soap, tag, id, "Xdmrtm:PlanTask");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray:
		return ((Xdmrtm__PlanTaskIDArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:PlanTaskIDArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID:
		return ((Xdmrtm__PlanTaskID *)ptr)->soap_out(soap, tag, id, "Xdmrtm:PlanTaskID");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray:
		return ((Xdmrtm__FreqLayoutArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:FreqLayoutArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout:
		return ((Xdmrtm__FreqLayout *)ptr)->soap_out(soap, tag, id, "Xdmrtm:FreqLayout");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray:
		return ((Xdmrtm__DeviceUseingInfoArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceUseingInfoArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo:
		return ((Xdmrtm__DeviceUseingInfo *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer:
		return ((Xdmrtm__LoadbalancingServer *)ptr)->soap_out(soap, tag, id, "Xdmrtm:LoadbalancingServer");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray:
		return ((Xdmrtm__LicenseStationArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:LicenseStationArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation:
		return ((Xdmrtm__LicenseStation *)ptr)->soap_out(soap, tag, id, "Xdmrtm:LicenseStation");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray:
		return ((Xdmrtm__DeviceFuncArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc:
		return ((Xdmrtm__DeviceFunc *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceFunc");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray:
		return ((Xdmrtm__DeviceFuncAntennaArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceFuncAntennaArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna:
		return ((Xdmrtm__DeviceFuncAntenna *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceFuncAntenna");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray:
		return ((Xdmrtm__AntArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:AntArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Ant:
		return ((Xdmrtm__Ant *)ptr)->soap_out(soap, tag, id, "Xdmrtm:Ant");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray:
		return ((Xdmrtm__RNCArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RNCArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNC:
		return ((Xdmrtm__RNC *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RNC");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray:
		return ((Xdmrtm__DeviceArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Device:
		return ((Xdmrtm__Device *)ptr)->soap_out(soap, tag, id, "Xdmrtm:Device");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray:
		return ((Xdmrtm__StationArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:StationArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Station:
		return ((Xdmrtm__Station *)ptr)->soap_out(soap, tag, id, "Xdmrtm:Station");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray:
		return ((Xdmrtm__DeviceUsedLogArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceUsedLogArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog:
		return ((Xdmrtm__DeviceUsedLog *)ptr)->soap_out(soap, tag, id, "Xdmrtm:DeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray:
		return ((Xdmrtm__MonControlCenterArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonControlCenterArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter:
		return ((Xdmrtm__MonControlCenter *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonControlCenter");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray:
		return ((Xdmrtm__MonOrganizationArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonOrganizationArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization:
		return ((Xdmrtm__MonOrganization *)ptr)->soap_out(soap, tag, id, "Xdmrtm:MonOrganization");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray:
		return ((Xdmrtm__RefDeviceModelFuncParamArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceModelFuncParamArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam:
		return ((Xdmrtm__RefDeviceModelFuncParam *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray:
		return ((Xdmrtm__RefDeviceFuncArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc:
		return ((Xdmrtm__RefDeviceFunc *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray:
		return ((Xdmrtm__RefDeviceModelArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceModelArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel:
		return ((Xdmrtm__RefDeviceModel *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceModel");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray:
		return ((Xdmrtm__RefDeviceProtocolArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceProtocolArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol:
		return ((Xdmrtm__RefDeviceProtocol *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceProtocol");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray:
		return ((Xdmrtm__RefDeviceTypeArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceTypeArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType:
		return ((Xdmrtm__RefDeviceType *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefDeviceType");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray:
		return ((Xdmrtm__RefStationTypeArray *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefStationTypeArray");
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType:
		return ((Xdmrtm__RefStationType *)ptr)->soap_out(soap, tag, id, "Xdmrtm:RefStationType");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfoResponse:
		return soap_out_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(soap, tag, id, (_Xdmrtm__SubmitAlarmInfoResponse *const*)ptr, "Xdmrtm:SubmitAlarmInfoResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfo:
		return soap_out_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, tag, id, (_Xdmrtm__SubmitAlarmInfo *const*)ptr, "Xdmrtm:SubmitAlarmInfo");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisResponse:
		return soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(soap, tag, id, (_Xdmrtm__DeleteMonAnalysisResponse *const*)ptr, "Xdmrtm:DeleteMonAnalysisResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisReport:
		return soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, tag, id, (_Xdmrtm__DeleteMonAnalysisReport *const*)ptr, "Xdmrtm:DeleteMonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReportResponse:
		return soap_out_PointerTo_Xdmrtm__IsAnalysisReportResponse(soap, tag, id, (_Xdmrtm__IsAnalysisReportResponse *const*)ptr, "Xdmrtm:IsAnalysisReportResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReport:
		return soap_out_PointerTo_Xdmrtm__IsAnalysisReport(soap, tag, id, (_Xdmrtm__IsAnalysisReport *const*)ptr, "Xdmrtm:IsAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		return soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, tag, id, (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *const*)ptr, "Xdmrtm:DownloadMonAnalysisReportAttachmentResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment:
		return soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag, id, (_Xdmrtm__DownloadMonAnalysisReportAttachment *const*)ptr, "Xdmrtm:DownloadMonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		return soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, tag, id, (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *const*)ptr, "Xdmrtm:QueryMonAnalysisReportAttachmentResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment:
		return soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag, id, (_Xdmrtm__QueryMonAnalysisReportAttachment *const*)ptr, "Xdmrtm:QueryMonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse:
		return soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(soap, tag, id, (_Xdmrtm__QueryMonAnalysisReportResponse *const*)ptr, "Xdmrtm:QueryMonAnalysisReportResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReport:
		return soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, tag, id, (_Xdmrtm__QueryMonAnalysisReport *const*)ptr, "Xdmrtm:QueryMonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse:
		return soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(soap, tag, id, (_Xdmrtm__SubmitMonAnalysisReportResponse *const*)ptr, "Xdmrtm:SubmitMonAnalysisReportResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReport:
		return soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, tag, id, (_Xdmrtm__SubmitMonAnalysisReport *const*)ptr, "Xdmrtm:SubmitMonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse:
		return soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(soap, tag, id, (_Xdmrtm__SubmitPlanTaskLogResponse *const*)ptr, "Xdmrtm:SubmitPlanTaskLogResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLog:
		return soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, tag, id, (_Xdmrtm__SubmitPlanTaskLog *const*)ptr, "Xdmrtm:SubmitPlanTaskLog");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTaskResponse:
		return soap_out_PointerTo_Xdmrtm__ResumePlanTaskResponse(soap, tag, id, (_Xdmrtm__ResumePlanTaskResponse *const*)ptr, "Xdmrtm:ResumePlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTask:
		return soap_out_PointerTo_Xdmrtm__ResumePlanTask(soap, tag, id, (_Xdmrtm__ResumePlanTask *const*)ptr, "Xdmrtm:ResumePlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTaskResponse:
		return soap_out_PointerTo_Xdmrtm__SuspendPlanTaskResponse(soap, tag, id, (_Xdmrtm__SuspendPlanTaskResponse *const*)ptr, "Xdmrtm:SuspendPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTask:
		return soap_out_PointerTo_Xdmrtm__SuspendPlanTask(soap, tag, id, (_Xdmrtm__SuspendPlanTask *const*)ptr, "Xdmrtm:SuspendPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTaskResponse:
		return soap_out_PointerTo_Xdmrtm__StopPlanTaskResponse(soap, tag, id, (_Xdmrtm__StopPlanTaskResponse *const*)ptr, "Xdmrtm:StopPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTask:
		return soap_out_PointerTo_Xdmrtm__StopPlanTask(soap, tag, id, (_Xdmrtm__StopPlanTask *const*)ptr, "Xdmrtm:StopPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTaskResponse:
		return soap_out_PointerTo_Xdmrtm__StartPlanTaskResponse(soap, tag, id, (_Xdmrtm__StartPlanTaskResponse *const*)ptr, "Xdmrtm:StartPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTask:
		return soap_out_PointerTo_Xdmrtm__StartPlanTask(soap, tag, id, (_Xdmrtm__StartPlanTask *const*)ptr, "Xdmrtm:StartPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse:
		return soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(soap, tag, id, (_Xdmrtm__QueryCurExecPlanTaskResponse *const*)ptr, "Xdmrtm:QueryCurExecPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTask:
		return soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, tag, id, (_Xdmrtm__QueryCurExecPlanTask *const*)ptr, "Xdmrtm:QueryCurExecPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTaskResponse:
		return soap_out_PointerTo_Xdmrtm__QueryPlanTaskResponse(soap, tag, id, (_Xdmrtm__QueryPlanTaskResponse *const*)ptr, "Xdmrtm:QueryPlanTaskResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTask:
		return soap_out_PointerTo_Xdmrtm__QueryPlanTask(soap, tag, id, (_Xdmrtm__QueryPlanTask *const*)ptr, "Xdmrtm:QueryPlanTask");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse:
		return soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, tag, id, (_Xdmrtm__QueryCurExecPlanTaskIDResponse *const*)ptr, "Xdmrtm:QueryCurExecPlanTaskIDResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskID:
		return soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, tag, id, (_Xdmrtm__QueryCurExecPlanTaskID *const*)ptr, "Xdmrtm:QueryCurExecPlanTaskID");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayoutResponse:
		return soap_out_PointerTo_Xdmrtm__QueryFreqLayoutResponse(soap, tag, id, (_Xdmrtm__QueryFreqLayoutResponse *const*)ptr, "Xdmrtm:QueryFreqLayoutResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayout:
		return soap_out_PointerTo_Xdmrtm__QueryFreqLayout(soap, tag, id, (_Xdmrtm__QueryFreqLayout *const*)ptr, "Xdmrtm:QueryFreqLayout");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, tag, id, (_Xdmrtm__QueryDeviceUseingInfoByUserResponse *const*)ptr, "Xdmrtm:QueryDeviceUseingInfoByUserResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag, id, (_Xdmrtm__QueryDeviceUseingInfoByUser *const*)ptr, "Xdmrtm:QueryDeviceUseingInfoByUser");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, tag, id, (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *const*)ptr, "Xdmrtm:QueryDeviceUseingInfoByDeviceResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag, id, (_Xdmrtm__QueryDeviceUseingInfoByDevice *const*)ptr, "Xdmrtm:QueryDeviceUseingInfoByDevice");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(soap, tag, id, (_Xdmrtm__QueryDeviceUseingInfoResponse *const*)ptr, "Xdmrtm:QueryDeviceUseingInfoResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfo:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, tag, id, (_Xdmrtm__QueryDeviceUseingInfo *const*)ptr, "Xdmrtm:QueryDeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse:
		return soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(soap, tag, id, (_Xdmrtm__SubmitDeviceUsedLogResponse *const*)ptr, "Xdmrtm:SubmitDeviceUsedLogResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLog:
		return soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, tag, id, (_Xdmrtm__SubmitDeviceUsedLog *const*)ptr, "Xdmrtm:SubmitDeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse:
		return soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(soap, tag, id, (_Xdmrtm__AllocLoadbalancingServerResponse *const*)ptr, "Xdmrtm:AllocLoadbalancingServerResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServer:
		return soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, tag, id, (_Xdmrtm__AllocLoadbalancingServer *const*)ptr, "Xdmrtm:AllocLoadbalancingServer");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStationResponse:
		return soap_out_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(soap, tag, id, (_Xdmrtm__QueryUserLicenseStationResponse *const*)ptr, "Xdmrtm:QueryUserLicenseStationResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStation:
		return soap_out_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, tag, id, (_Xdmrtm__QueryUserLicenseStation *const*)ptr, "Xdmrtm:QueryUserLicenseStation");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(soap, tag, id, (_Xdmrtm__QueryDeviceFuncAntResponse *const*)ptr, "Xdmrtm:QueryDeviceFuncAntResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAnt:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, tag, id, (_Xdmrtm__QueryDeviceFuncAnt *const*)ptr, "Xdmrtm:QueryDeviceFuncAnt");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncResponse:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceFuncResponse(soap, tag, id, (_Xdmrtm__QueryDeviceFuncResponse *const*)ptr, "Xdmrtm:QueryDeviceFuncResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFunc:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceFunc(soap, tag, id, (_Xdmrtm__QueryDeviceFunc *const*)ptr, "Xdmrtm:QueryDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAntResponse:
		return soap_out_PointerTo_Xdmrtm__QueryAntResponse(soap, tag, id, (_Xdmrtm__QueryAntResponse *const*)ptr, "Xdmrtm:QueryAntResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAnt:
		return soap_out_PointerTo_Xdmrtm__QueryAnt(soap, tag, id, (_Xdmrtm__QueryAnt *const*)ptr, "Xdmrtm:QueryAnt");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNCResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRNCResponse(soap, tag, id, (_Xdmrtm__QueryRNCResponse *const*)ptr, "Xdmrtm:QueryRNCResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNC:
		return soap_out_PointerTo_Xdmrtm__QueryRNC(soap, tag, id, (_Xdmrtm__QueryRNC *const*)ptr, "Xdmrtm:QueryRNC");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceResponse:
		return soap_out_PointerTo_Xdmrtm__QueryDeviceResponse(soap, tag, id, (_Xdmrtm__QueryDeviceResponse *const*)ptr, "Xdmrtm:QueryDeviceResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDevice:
		return soap_out_PointerTo_Xdmrtm__QueryDevice(soap, tag, id, (_Xdmrtm__QueryDevice *const*)ptr, "Xdmrtm:QueryDevice");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStationResponse:
		return soap_out_PointerTo_Xdmrtm__QueryStationResponse(soap, tag, id, (_Xdmrtm__QueryStationResponse *const*)ptr, "Xdmrtm:QueryStationResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStation:
		return soap_out_PointerTo_Xdmrtm__QueryStation(soap, tag, id, (_Xdmrtm__QueryStation *const*)ptr, "Xdmrtm:QueryStation");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenterResponse:
		return soap_out_PointerTo_Xdmrtm__QueryMonControlCenterResponse(soap, tag, id, (_Xdmrtm__QueryMonControlCenterResponse *const*)ptr, "Xdmrtm:QueryMonControlCenterResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenter:
		return soap_out_PointerTo_Xdmrtm__QueryMonControlCenter(soap, tag, id, (_Xdmrtm__QueryMonControlCenter *const*)ptr, "Xdmrtm:QueryMonControlCenter");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganizationResponse:
		return soap_out_PointerTo_Xdmrtm__QueryMonOrganizationResponse(soap, tag, id, (_Xdmrtm__QueryMonOrganizationResponse *const*)ptr, "Xdmrtm:QueryMonOrganizationResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganization:
		return soap_out_PointerTo_Xdmrtm__QueryMonOrganization(soap, tag, id, (_Xdmrtm__QueryMonOrganization *const*)ptr, "Xdmrtm:QueryMonOrganization");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, tag, id, (_Xdmrtm__QueryRefDeviceModelFuncParamResponse *const*)ptr, "Xdmrtm:QueryRefDeviceModelFuncParamResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag, id, (_Xdmrtm__QueryRefDeviceModelFuncParam *const*)ptr, "Xdmrtm:QueryRefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(soap, tag, id, (_Xdmrtm__QueryRefDeviceFuncResponse *const*)ptr, "Xdmrtm:QueryRefDeviceFuncResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFunc:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, tag, id, (_Xdmrtm__QueryRefDeviceFunc *const*)ptr, "Xdmrtm:QueryRefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(soap, tag, id, (_Xdmrtm__QueryRefDeviceModelResponse *const*)ptr, "Xdmrtm:QueryRefDeviceModelResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModel:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, tag, id, (_Xdmrtm__QueryRefDeviceModel *const*)ptr, "Xdmrtm:QueryRefDeviceModel");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, tag, id, (_Xdmrtm__QueryRefDeviceProtocolTypeResponse *const*)ptr, "Xdmrtm:QueryRefDeviceProtocolTypeResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolType:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, tag, id, (_Xdmrtm__QueryRefDeviceProtocolType *const*)ptr, "Xdmrtm:QueryRefDeviceProtocolType");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(soap, tag, id, (_Xdmrtm__QueryRefDeviceTypeResponse *const*)ptr, "Xdmrtm:QueryRefDeviceTypeResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceType:
		return soap_out_PointerTo_Xdmrtm__QueryRefDeviceType(soap, tag, id, (_Xdmrtm__QueryRefDeviceType *const*)ptr, "Xdmrtm:QueryRefDeviceType");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationTypeResponse:
		return soap_out_PointerTo_Xdmrtm__QueryRefStationTypeResponse(soap, tag, id, (_Xdmrtm__QueryRefStationTypeResponse *const*)ptr, "Xdmrtm:QueryRefStationTypeResponse");
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationType:
		return soap_out_PointerTo_Xdmrtm__QueryRefStationType(soap, tag, id, (_Xdmrtm__QueryRefStationType *const*)ptr, "Xdmrtm:QueryRefStationType");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachmentArray:
		return soap_out_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, tag, id, (Xdmrtm__MonAnalysisReportAttachmentArray *const*)ptr, "Xdmrtm:MonAnalysisReportAttachmentArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportArray:
		return soap_out_PointerToXdmrtm__MonAnalysisReportArray(soap, tag, id, (Xdmrtm__MonAnalysisReportArray *const*)ptr, "Xdmrtm:MonAnalysisReportArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskArray:
		return soap_out_PointerToXdmrtm__PlanTaskArray(soap, tag, id, (Xdmrtm__PlanTaskArray *const*)ptr, "Xdmrtm:PlanTaskArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskIDArray:
		return soap_out_PointerToXdmrtm__PlanTaskIDArray(soap, tag, id, (Xdmrtm__PlanTaskIDArray *const*)ptr, "Xdmrtm:PlanTaskIDArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayoutArray:
		return soap_out_PointerToXdmrtm__FreqLayoutArray(soap, tag, id, (Xdmrtm__FreqLayoutArray *const*)ptr, "Xdmrtm:FreqLayoutArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfoArray:
		return soap_out_PointerToXdmrtm__DeviceUseingInfoArray(soap, tag, id, (Xdmrtm__DeviceUseingInfoArray *const*)ptr, "Xdmrtm:DeviceUseingInfoArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LoadbalancingServer:
		return soap_out_PointerToXdmrtm__LoadbalancingServer(soap, tag, id, (Xdmrtm__LoadbalancingServer *const*)ptr, "Xdmrtm:LoadbalancingServer");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStationArray:
		return soap_out_PointerToXdmrtm__LicenseStationArray(soap, tag, id, (Xdmrtm__LicenseStationArray *const*)ptr, "Xdmrtm:LicenseStationArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntennaArray:
		return soap_out_PointerToXdmrtm__DeviceFuncAntennaArray(soap, tag, id, (Xdmrtm__DeviceFuncAntennaArray *const*)ptr, "Xdmrtm:DeviceFuncAntennaArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncArray:
		return soap_out_PointerToXdmrtm__DeviceFuncArray(soap, tag, id, (Xdmrtm__DeviceFuncArray *const*)ptr, "Xdmrtm:DeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__AntArray:
		return soap_out_PointerToXdmrtm__AntArray(soap, tag, id, (Xdmrtm__AntArray *const*)ptr, "Xdmrtm:AntArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNCArray:
		return soap_out_PointerToXdmrtm__RNCArray(soap, tag, id, (Xdmrtm__RNCArray *const*)ptr, "Xdmrtm:RNCArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceArray:
		return soap_out_PointerToXdmrtm__DeviceArray(soap, tag, id, (Xdmrtm__DeviceArray *const*)ptr, "Xdmrtm:DeviceArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__StationArray:
		return soap_out_PointerToXdmrtm__StationArray(soap, tag, id, (Xdmrtm__StationArray *const*)ptr, "Xdmrtm:StationArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenterArray:
		return soap_out_PointerToXdmrtm__MonControlCenterArray(soap, tag, id, (Xdmrtm__MonControlCenterArray *const*)ptr, "Xdmrtm:MonControlCenterArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganizationArray:
		return soap_out_PointerToXdmrtm__MonOrganizationArray(soap, tag, id, (Xdmrtm__MonOrganizationArray *const*)ptr, "Xdmrtm:MonOrganizationArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParamArray:
		return soap_out_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, tag, id, (Xdmrtm__RefDeviceModelFuncParamArray *const*)ptr, "Xdmrtm:RefDeviceModelFuncParamArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFuncArray:
		return soap_out_PointerToXdmrtm__RefDeviceFuncArray(soap, tag, id, (Xdmrtm__RefDeviceFuncArray *const*)ptr, "Xdmrtm:RefDeviceFuncArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelArray:
		return soap_out_PointerToXdmrtm__RefDeviceModelArray(soap, tag, id, (Xdmrtm__RefDeviceModelArray *const*)ptr, "Xdmrtm:RefDeviceModelArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocolArray:
		return soap_out_PointerToXdmrtm__RefDeviceProtocolArray(soap, tag, id, (Xdmrtm__RefDeviceProtocolArray *const*)ptr, "Xdmrtm:RefDeviceProtocolArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceTypeArray:
		return soap_out_PointerToXdmrtm__RefDeviceTypeArray(soap, tag, id, (Xdmrtm__RefDeviceTypeArray *const*)ptr, "Xdmrtm:RefDeviceTypeArray");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationTypeArray:
		return soap_out_PointerToXdmrtm__RefStationTypeArray(soap, tag, id, (Xdmrtm__RefStationTypeArray *const*)ptr, "Xdmrtm:RefStationTypeArray");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Alarm:
		return soap_out_PointerToPointerToXdmrtm__Alarm(soap, tag, id, (Xdmrtm__Alarm **const*)ptr, "Xdmrtm:Alarm");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm:
		return soap_out_PointerToXdmrtm__Alarm(soap, tag, id, (Xdmrtm__Alarm *const*)ptr, "Xdmrtm:Alarm");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReportAttachment:
		return soap_out_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(soap, tag, id, (Xdmrtm__MonAnalysisReportAttachment **const*)ptr, "Xdmrtm:MonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment:
		return soap_out_PointerToXdmrtm__MonAnalysisReportAttachment(soap, tag, id, (Xdmrtm__MonAnalysisReportAttachment *const*)ptr, "Xdmrtm:MonAnalysisReportAttachment");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReport:
		return soap_out_PointerToPointerToXdmrtm__MonAnalysisReport(soap, tag, id, (Xdmrtm__MonAnalysisReport **const*)ptr, "Xdmrtm:MonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport:
		return soap_out_PointerToXdmrtm__MonAnalysisReport(soap, tag, id, (Xdmrtm__MonAnalysisReport *const*)ptr, "Xdmrtm:MonAnalysisReport");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTask:
		return soap_out_PointerToPointerToXdmrtm__PlanTask(soap, tag, id, (Xdmrtm__PlanTask **const*)ptr, "Xdmrtm:PlanTask");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask:
		return soap_out_PointerToXdmrtm__PlanTask(soap, tag, id, (Xdmrtm__PlanTask *const*)ptr, "Xdmrtm:PlanTask");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTaskID:
		return soap_out_PointerToPointerToXdmrtm__PlanTaskID(soap, tag, id, (Xdmrtm__PlanTaskID **const*)ptr, "Xdmrtm:PlanTaskID");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID:
		return soap_out_PointerToXdmrtm__PlanTaskID(soap, tag, id, (Xdmrtm__PlanTaskID *const*)ptr, "Xdmrtm:PlanTaskID");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__FreqLayout:
		return soap_out_PointerToPointerToXdmrtm__FreqLayout(soap, tag, id, (Xdmrtm__FreqLayout **const*)ptr, "Xdmrtm:FreqLayout");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout:
		return soap_out_PointerToXdmrtm__FreqLayout(soap, tag, id, (Xdmrtm__FreqLayout *const*)ptr, "Xdmrtm:FreqLayout");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUseingInfo:
		return soap_out_PointerToPointerToXdmrtm__DeviceUseingInfo(soap, tag, id, (Xdmrtm__DeviceUseingInfo **const*)ptr, "Xdmrtm:DeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo:
		return soap_out_PointerToXdmrtm__DeviceUseingInfo(soap, tag, id, (Xdmrtm__DeviceUseingInfo *const*)ptr, "Xdmrtm:DeviceUseingInfo");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__LicenseStation:
		return soap_out_PointerToPointerToXdmrtm__LicenseStation(soap, tag, id, (Xdmrtm__LicenseStation **const*)ptr, "Xdmrtm:LicenseStation");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation:
		return soap_out_PointerToXdmrtm__LicenseStation(soap, tag, id, (Xdmrtm__LicenseStation *const*)ptr, "Xdmrtm:LicenseStation");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFunc:
		return soap_out_PointerToPointerToXdmrtm__DeviceFunc(soap, tag, id, (Xdmrtm__DeviceFunc **const*)ptr, "Xdmrtm:DeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc:
		return soap_out_PointerToXdmrtm__DeviceFunc(soap, tag, id, (Xdmrtm__DeviceFunc *const*)ptr, "Xdmrtm:DeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFuncAntenna:
		return soap_out_PointerToPointerToXdmrtm__DeviceFuncAntenna(soap, tag, id, (Xdmrtm__DeviceFuncAntenna **const*)ptr, "Xdmrtm:DeviceFuncAntenna");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna:
		return soap_out_PointerToXdmrtm__DeviceFuncAntenna(soap, tag, id, (Xdmrtm__DeviceFuncAntenna *const*)ptr, "Xdmrtm:DeviceFuncAntenna");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Ant:
		return soap_out_PointerToPointerToXdmrtm__Ant(soap, tag, id, (Xdmrtm__Ant **const*)ptr, "Xdmrtm:Ant");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant:
		return soap_out_PointerToXdmrtm__Ant(soap, tag, id, (Xdmrtm__Ant *const*)ptr, "Xdmrtm:Ant");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RNC:
		return soap_out_PointerToPointerToXdmrtm__RNC(soap, tag, id, (Xdmrtm__RNC **const*)ptr, "Xdmrtm:RNC");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC:
		return soap_out_PointerToXdmrtm__RNC(soap, tag, id, (Xdmrtm__RNC *const*)ptr, "Xdmrtm:RNC");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Device:
		return soap_out_PointerToPointerToXdmrtm__Device(soap, tag, id, (Xdmrtm__Device **const*)ptr, "Xdmrtm:Device");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device:
		return soap_out_PointerToXdmrtm__Device(soap, tag, id, (Xdmrtm__Device *const*)ptr, "Xdmrtm:Device");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Station:
		return soap_out_PointerToPointerToXdmrtm__Station(soap, tag, id, (Xdmrtm__Station **const*)ptr, "Xdmrtm:Station");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station:
		return soap_out_PointerToXdmrtm__Station(soap, tag, id, (Xdmrtm__Station *const*)ptr, "Xdmrtm:Station");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUsedLog:
		return soap_out_PointerToPointerToXdmrtm__DeviceUsedLog(soap, tag, id, (Xdmrtm__DeviceUsedLog **const*)ptr, "Xdmrtm:DeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog:
		return soap_out_PointerToXdmrtm__DeviceUsedLog(soap, tag, id, (Xdmrtm__DeviceUsedLog *const*)ptr, "Xdmrtm:DeviceUsedLog");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonControlCenter:
		return soap_out_PointerToPointerToXdmrtm__MonControlCenter(soap, tag, id, (Xdmrtm__MonControlCenter **const*)ptr, "Xdmrtm:MonControlCenter");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter:
		return soap_out_PointerToXdmrtm__MonControlCenter(soap, tag, id, (Xdmrtm__MonControlCenter *const*)ptr, "Xdmrtm:MonControlCenter");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonOrganization:
		return soap_out_PointerToPointerToXdmrtm__MonOrganization(soap, tag, id, (Xdmrtm__MonOrganization **const*)ptr, "Xdmrtm:MonOrganization");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization:
		return soap_out_PointerToXdmrtm__MonOrganization(soap, tag, id, (Xdmrtm__MonOrganization *const*)ptr, "Xdmrtm:MonOrganization");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModelFuncParam:
		return soap_out_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(soap, tag, id, (Xdmrtm__RefDeviceModelFuncParam **const*)ptr, "Xdmrtm:RefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam:
		return soap_out_PointerToXdmrtm__RefDeviceModelFuncParam(soap, tag, id, (Xdmrtm__RefDeviceModelFuncParam *const*)ptr, "Xdmrtm:RefDeviceModelFuncParam");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceFunc:
		return soap_out_PointerToPointerToXdmrtm__RefDeviceFunc(soap, tag, id, (Xdmrtm__RefDeviceFunc **const*)ptr, "Xdmrtm:RefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc:
		return soap_out_PointerToXdmrtm__RefDeviceFunc(soap, tag, id, (Xdmrtm__RefDeviceFunc *const*)ptr, "Xdmrtm:RefDeviceFunc");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModel:
		return soap_out_PointerToPointerToXdmrtm__RefDeviceModel(soap, tag, id, (Xdmrtm__RefDeviceModel **const*)ptr, "Xdmrtm:RefDeviceModel");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel:
		return soap_out_PointerToXdmrtm__RefDeviceModel(soap, tag, id, (Xdmrtm__RefDeviceModel *const*)ptr, "Xdmrtm:RefDeviceModel");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceProtocol:
		return soap_out_PointerToPointerToXdmrtm__RefDeviceProtocol(soap, tag, id, (Xdmrtm__RefDeviceProtocol **const*)ptr, "Xdmrtm:RefDeviceProtocol");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol:
		return soap_out_PointerToXdmrtm__RefDeviceProtocol(soap, tag, id, (Xdmrtm__RefDeviceProtocol *const*)ptr, "Xdmrtm:RefDeviceProtocol");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceType:
		return soap_out_PointerToPointerToXdmrtm__RefDeviceType(soap, tag, id, (Xdmrtm__RefDeviceType **const*)ptr, "Xdmrtm:RefDeviceType");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType:
		return soap_out_PointerToXdmrtm__RefDeviceType(soap, tag, id, (Xdmrtm__RefDeviceType *const*)ptr, "Xdmrtm:RefDeviceType");
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefStationType:
		return soap_out_PointerToPointerToXdmrtm__RefStationType(soap, tag, id, (Xdmrtm__RefStationType **const*)ptr, "Xdmrtm:RefStationType");
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType:
		return soap_out_PointerToXdmrtm__RefStationType(soap, tag, id, (Xdmrtm__RefStationType *const*)ptr, "Xdmrtm:RefStationType");
	case SOAP_TYPE_Xdmrtm__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_Xdmrtm_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_Xdmrtm_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse:
		((_Xdmrtm__SubmitAlarmInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo:
		((_Xdmrtm__SubmitAlarmInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse:
		((_Xdmrtm__DeleteMonAnalysisResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport:
		((_Xdmrtm__DeleteMonAnalysisReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse:
		((_Xdmrtm__IsAnalysisReportResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport:
		((_Xdmrtm__IsAnalysisReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		((_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment:
		((_Xdmrtm__DownloadMonAnalysisReportAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		((_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment:
		((_Xdmrtm__QueryMonAnalysisReportAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse:
		((_Xdmrtm__QueryMonAnalysisReportResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport:
		((_Xdmrtm__QueryMonAnalysisReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse:
		((_Xdmrtm__SubmitMonAnalysisReportResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport:
		((_Xdmrtm__SubmitMonAnalysisReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse:
		((_Xdmrtm__SubmitPlanTaskLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog:
		((_Xdmrtm__SubmitPlanTaskLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse:
		((_Xdmrtm__ResumePlanTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask:
		((_Xdmrtm__ResumePlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse:
		((_Xdmrtm__SuspendPlanTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask:
		((_Xdmrtm__SuspendPlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse:
		((_Xdmrtm__StopPlanTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask:
		((_Xdmrtm__StopPlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse:
		((_Xdmrtm__StartPlanTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask:
		((_Xdmrtm__StartPlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse:
		((_Xdmrtm__QueryCurExecPlanTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask:
		((_Xdmrtm__QueryCurExecPlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse:
		((_Xdmrtm__QueryPlanTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask:
		((_Xdmrtm__QueryPlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse:
		((_Xdmrtm__QueryCurExecPlanTaskIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID:
		((_Xdmrtm__QueryCurExecPlanTaskID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse:
		((_Xdmrtm__QueryFreqLayoutResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout:
		((_Xdmrtm__QueryFreqLayout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		((_Xdmrtm__QueryDeviceUseingInfoByUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser:
		((_Xdmrtm__QueryDeviceUseingInfoByUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		((_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice:
		((_Xdmrtm__QueryDeviceUseingInfoByDevice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse:
		((_Xdmrtm__QueryDeviceUseingInfoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo:
		((_Xdmrtm__QueryDeviceUseingInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse:
		((_Xdmrtm__SubmitDeviceUsedLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog:
		((_Xdmrtm__SubmitDeviceUsedLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse:
		((_Xdmrtm__AllocLoadbalancingServerResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer:
		((_Xdmrtm__AllocLoadbalancingServer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse:
		((_Xdmrtm__QueryUserLicenseStationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation:
		((_Xdmrtm__QueryUserLicenseStation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse:
		((_Xdmrtm__QueryDeviceFuncAntResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt:
		((_Xdmrtm__QueryDeviceFuncAnt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse:
		((_Xdmrtm__QueryDeviceFuncResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc:
		((_Xdmrtm__QueryDeviceFunc *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse:
		((_Xdmrtm__QueryAntResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt:
		((_Xdmrtm__QueryAnt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse:
		((_Xdmrtm__QueryRNCResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC:
		((_Xdmrtm__QueryRNC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse:
		((_Xdmrtm__QueryDeviceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice:
		((_Xdmrtm__QueryDevice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse:
		((_Xdmrtm__QueryStationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation:
		((_Xdmrtm__QueryStation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse:
		((_Xdmrtm__QueryMonControlCenterResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter:
		((_Xdmrtm__QueryMonControlCenter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse:
		((_Xdmrtm__QueryMonOrganizationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization:
		((_Xdmrtm__QueryMonOrganization *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		((_Xdmrtm__QueryRefDeviceModelFuncParamResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam:
		((_Xdmrtm__QueryRefDeviceModelFuncParam *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse:
		((_Xdmrtm__QueryRefDeviceFuncResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc:
		((_Xdmrtm__QueryRefDeviceFunc *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse:
		((_Xdmrtm__QueryRefDeviceModelResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel:
		((_Xdmrtm__QueryRefDeviceModel *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		((_Xdmrtm__QueryRefDeviceProtocolTypeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType:
		((_Xdmrtm__QueryRefDeviceProtocolType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse:
		((_Xdmrtm__QueryRefDeviceTypeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType:
		((_Xdmrtm__QueryRefDeviceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse:
		((_Xdmrtm__QueryRefStationTypeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType:
		((_Xdmrtm__QueryRefStationType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray:
		((Xdmrtm__AlarmArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm:
		((Xdmrtm__Alarm *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray:
		((Xdmrtm__MonAnalysisReportAttachmentArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment:
		((Xdmrtm__MonAnalysisReportAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray:
		((Xdmrtm__MonAnalysisReportArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport:
		((Xdmrtm__MonAnalysisReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray:
		((Xdmrtm__PlanTaskArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask:
		((Xdmrtm__PlanTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray:
		((Xdmrtm__PlanTaskIDArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID:
		((Xdmrtm__PlanTaskID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray:
		((Xdmrtm__FreqLayoutArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout:
		((Xdmrtm__FreqLayout *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray:
		((Xdmrtm__DeviceUseingInfoArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo:
		((Xdmrtm__DeviceUseingInfo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer:
		((Xdmrtm__LoadbalancingServer *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray:
		((Xdmrtm__LicenseStationArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation:
		((Xdmrtm__LicenseStation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray:
		((Xdmrtm__DeviceFuncArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc:
		((Xdmrtm__DeviceFunc *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray:
		((Xdmrtm__DeviceFuncAntennaArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna:
		((Xdmrtm__DeviceFuncAntenna *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray:
		((Xdmrtm__AntArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Ant:
		((Xdmrtm__Ant *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray:
		((Xdmrtm__RNCArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNC:
		((Xdmrtm__RNC *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray:
		((Xdmrtm__DeviceArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Device:
		((Xdmrtm__Device *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray:
		((Xdmrtm__StationArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Station:
		((Xdmrtm__Station *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray:
		((Xdmrtm__DeviceUsedLogArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog:
		((Xdmrtm__DeviceUsedLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray:
		((Xdmrtm__MonControlCenterArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter:
		((Xdmrtm__MonControlCenter *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray:
		((Xdmrtm__MonOrganizationArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization:
		((Xdmrtm__MonOrganization *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray:
		((Xdmrtm__RefDeviceModelFuncParamArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam:
		((Xdmrtm__RefDeviceModelFuncParam *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray:
		((Xdmrtm__RefDeviceFuncArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc:
		((Xdmrtm__RefDeviceFunc *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray:
		((Xdmrtm__RefDeviceModelArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel:
		((Xdmrtm__RefDeviceModel *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray:
		((Xdmrtm__RefDeviceProtocolArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol:
		((Xdmrtm__RefDeviceProtocol *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray:
		((Xdmrtm__RefDeviceTypeArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType:
		((Xdmrtm__RefDeviceType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray:
		((Xdmrtm__RefStationTypeArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType:
		((Xdmrtm__RefStationType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo:
		soap_serialize___Xdmrtm__SubmitAlarmInfo(soap, (const struct __Xdmrtm__SubmitAlarmInfo *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport:
		soap_serialize___Xdmrtm__DeleteMonAnalysisReport(soap, (const struct __Xdmrtm__DeleteMonAnalysisReport *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport:
		soap_serialize___Xdmrtm__IsAnalysisReport(soap, (const struct __Xdmrtm__IsAnalysisReport *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment:
		soap_serialize___Xdmrtm__DownloadMonAnalysisReportAttachment(soap, (const struct __Xdmrtm__DownloadMonAnalysisReportAttachment *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment:
		soap_serialize___Xdmrtm__QueryMonAnalysisReportAttachment(soap, (const struct __Xdmrtm__QueryMonAnalysisReportAttachment *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport:
		soap_serialize___Xdmrtm__QueryMonAnalysisReport(soap, (const struct __Xdmrtm__QueryMonAnalysisReport *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport:
		soap_serialize___Xdmrtm__SubmitMonAnalysisReport(soap, (const struct __Xdmrtm__SubmitMonAnalysisReport *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog:
		soap_serialize___Xdmrtm__SubmitPlanTaskLog(soap, (const struct __Xdmrtm__SubmitPlanTaskLog *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask:
		soap_serialize___Xdmrtm__ResumePlanTask(soap, (const struct __Xdmrtm__ResumePlanTask *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask:
		soap_serialize___Xdmrtm__SuspendPlanTask(soap, (const struct __Xdmrtm__SuspendPlanTask *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask:
		soap_serialize___Xdmrtm__StopPlanTask(soap, (const struct __Xdmrtm__StopPlanTask *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask:
		soap_serialize___Xdmrtm__StartPlanTask(soap, (const struct __Xdmrtm__StartPlanTask *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask:
		soap_serialize___Xdmrtm__QueryCurExecPlanTask(soap, (const struct __Xdmrtm__QueryCurExecPlanTask *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask:
		soap_serialize___Xdmrtm__QueryPlanTask(soap, (const struct __Xdmrtm__QueryPlanTask *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID:
		soap_serialize___Xdmrtm__QueryCurExecPlanTaskID(soap, (const struct __Xdmrtm__QueryCurExecPlanTaskID *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout:
		soap_serialize___Xdmrtm__QueryFreqLayout(soap, (const struct __Xdmrtm__QueryFreqLayout *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser:
		soap_serialize___Xdmrtm__QueryDeviceUseingInfoByUser(soap, (const struct __Xdmrtm__QueryDeviceUseingInfoByUser *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice:
		soap_serialize___Xdmrtm__QueryDeviceUseingInfoByDevice(soap, (const struct __Xdmrtm__QueryDeviceUseingInfoByDevice *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo:
		soap_serialize___Xdmrtm__QueryDeviceUseingInfo(soap, (const struct __Xdmrtm__QueryDeviceUseingInfo *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog:
		soap_serialize___Xdmrtm__SubmitDeviceUsedLog(soap, (const struct __Xdmrtm__SubmitDeviceUsedLog *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer:
		soap_serialize___Xdmrtm__AllocLoadbalancingServer(soap, (const struct __Xdmrtm__AllocLoadbalancingServer *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation:
		soap_serialize___Xdmrtm__QueryUserLicenseStation(soap, (const struct __Xdmrtm__QueryUserLicenseStation *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt:
		soap_serialize___Xdmrtm__QueryDeviceFuncAnt(soap, (const struct __Xdmrtm__QueryDeviceFuncAnt *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc:
		soap_serialize___Xdmrtm__QueryDeviceFunc(soap, (const struct __Xdmrtm__QueryDeviceFunc *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt:
		soap_serialize___Xdmrtm__QueryAnt(soap, (const struct __Xdmrtm__QueryAnt *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC:
		soap_serialize___Xdmrtm__QueryRNC(soap, (const struct __Xdmrtm__QueryRNC *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice:
		soap_serialize___Xdmrtm__QueryDevice(soap, (const struct __Xdmrtm__QueryDevice *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation:
		soap_serialize___Xdmrtm__QueryStation(soap, (const struct __Xdmrtm__QueryStation *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter:
		soap_serialize___Xdmrtm__QueryMonControlCenter(soap, (const struct __Xdmrtm__QueryMonControlCenter *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization:
		soap_serialize___Xdmrtm__QueryMonOrganization(soap, (const struct __Xdmrtm__QueryMonOrganization *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam:
		soap_serialize___Xdmrtm__QueryRefDeviceModelFuncParam(soap, (const struct __Xdmrtm__QueryRefDeviceModelFuncParam *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc:
		soap_serialize___Xdmrtm__QueryRefDeviceFunc(soap, (const struct __Xdmrtm__QueryRefDeviceFunc *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel:
		soap_serialize___Xdmrtm__QueryRefDeviceModel(soap, (const struct __Xdmrtm__QueryRefDeviceModel *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType:
		soap_serialize___Xdmrtm__QueryRefDeviceProtocolType(soap, (const struct __Xdmrtm__QueryRefDeviceProtocolType *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType:
		soap_serialize___Xdmrtm__QueryRefDeviceType(soap, (const struct __Xdmrtm__QueryRefDeviceType *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType:
		soap_serialize___Xdmrtm__QueryRefStationType(soap, (const struct __Xdmrtm__QueryRefStationType *)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfoResponse:
		soap_serialize_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(soap, (_Xdmrtm__SubmitAlarmInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfo:
		soap_serialize_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, (_Xdmrtm__SubmitAlarmInfo *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisResponse:
		soap_serialize_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(soap, (_Xdmrtm__DeleteMonAnalysisResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisReport:
		soap_serialize_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, (_Xdmrtm__DeleteMonAnalysisReport *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReportResponse:
		soap_serialize_PointerTo_Xdmrtm__IsAnalysisReportResponse(soap, (_Xdmrtm__IsAnalysisReportResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReport:
		soap_serialize_PointerTo_Xdmrtm__IsAnalysisReport(soap, (_Xdmrtm__IsAnalysisReport *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		soap_serialize_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment:
		soap_serialize_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, (_Xdmrtm__DownloadMonAnalysisReportAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment:
		soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, (_Xdmrtm__QueryMonAnalysisReportAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(soap, (_Xdmrtm__QueryMonAnalysisReportResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReport:
		soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, (_Xdmrtm__QueryMonAnalysisReport *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse:
		soap_serialize_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(soap, (_Xdmrtm__SubmitMonAnalysisReportResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReport:
		soap_serialize_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, (_Xdmrtm__SubmitMonAnalysisReport *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse:
		soap_serialize_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(soap, (_Xdmrtm__SubmitPlanTaskLogResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLog:
		soap_serialize_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, (_Xdmrtm__SubmitPlanTaskLog *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTaskResponse:
		soap_serialize_PointerTo_Xdmrtm__ResumePlanTaskResponse(soap, (_Xdmrtm__ResumePlanTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTask:
		soap_serialize_PointerTo_Xdmrtm__ResumePlanTask(soap, (_Xdmrtm__ResumePlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTaskResponse:
		soap_serialize_PointerTo_Xdmrtm__SuspendPlanTaskResponse(soap, (_Xdmrtm__SuspendPlanTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTask:
		soap_serialize_PointerTo_Xdmrtm__SuspendPlanTask(soap, (_Xdmrtm__SuspendPlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTaskResponse:
		soap_serialize_PointerTo_Xdmrtm__StopPlanTaskResponse(soap, (_Xdmrtm__StopPlanTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTask:
		soap_serialize_PointerTo_Xdmrtm__StopPlanTask(soap, (_Xdmrtm__StopPlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTaskResponse:
		soap_serialize_PointerTo_Xdmrtm__StartPlanTaskResponse(soap, (_Xdmrtm__StartPlanTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTask:
		soap_serialize_PointerTo_Xdmrtm__StartPlanTask(soap, (_Xdmrtm__StartPlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(soap, (_Xdmrtm__QueryCurExecPlanTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTask:
		soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, (_Xdmrtm__QueryCurExecPlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTaskResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryPlanTaskResponse(soap, (_Xdmrtm__QueryPlanTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTask:
		soap_serialize_PointerTo_Xdmrtm__QueryPlanTask(soap, (_Xdmrtm__QueryPlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, (_Xdmrtm__QueryCurExecPlanTaskIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskID:
		soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, (_Xdmrtm__QueryCurExecPlanTaskID *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayoutResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryFreqLayoutResponse(soap, (_Xdmrtm__QueryFreqLayoutResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayout:
		soap_serialize_PointerTo_Xdmrtm__QueryFreqLayout(soap, (_Xdmrtm__QueryFreqLayout *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, (_Xdmrtm__QueryDeviceUseingInfoByUserResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, (_Xdmrtm__QueryDeviceUseingInfoByUser *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, (_Xdmrtm__QueryDeviceUseingInfoByDevice *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(soap, (_Xdmrtm__QueryDeviceUseingInfoResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfo:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, (_Xdmrtm__QueryDeviceUseingInfo *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse:
		soap_serialize_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(soap, (_Xdmrtm__SubmitDeviceUsedLogResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLog:
		soap_serialize_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, (_Xdmrtm__SubmitDeviceUsedLog *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse:
		soap_serialize_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(soap, (_Xdmrtm__AllocLoadbalancingServerResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServer:
		soap_serialize_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, (_Xdmrtm__AllocLoadbalancingServer *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStationResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(soap, (_Xdmrtm__QueryUserLicenseStationResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStation:
		soap_serialize_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, (_Xdmrtm__QueryUserLicenseStation *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(soap, (_Xdmrtm__QueryDeviceFuncAntResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAnt:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, (_Xdmrtm__QueryDeviceFuncAnt *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncResponse(soap, (_Xdmrtm__QueryDeviceFuncResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFunc:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceFunc(soap, (_Xdmrtm__QueryDeviceFunc *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAntResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryAntResponse(soap, (_Xdmrtm__QueryAntResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAnt:
		soap_serialize_PointerTo_Xdmrtm__QueryAnt(soap, (_Xdmrtm__QueryAnt *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNCResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRNCResponse(soap, (_Xdmrtm__QueryRNCResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNC:
		soap_serialize_PointerTo_Xdmrtm__QueryRNC(soap, (_Xdmrtm__QueryRNC *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryDeviceResponse(soap, (_Xdmrtm__QueryDeviceResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDevice:
		soap_serialize_PointerTo_Xdmrtm__QueryDevice(soap, (_Xdmrtm__QueryDevice *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStationResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryStationResponse(soap, (_Xdmrtm__QueryStationResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStation:
		soap_serialize_PointerTo_Xdmrtm__QueryStation(soap, (_Xdmrtm__QueryStation *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenterResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryMonControlCenterResponse(soap, (_Xdmrtm__QueryMonControlCenterResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenter:
		soap_serialize_PointerTo_Xdmrtm__QueryMonControlCenter(soap, (_Xdmrtm__QueryMonControlCenter *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganizationResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryMonOrganizationResponse(soap, (_Xdmrtm__QueryMonOrganizationResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganization:
		soap_serialize_PointerTo_Xdmrtm__QueryMonOrganization(soap, (_Xdmrtm__QueryMonOrganization *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, (_Xdmrtm__QueryRefDeviceModelFuncParamResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, (_Xdmrtm__QueryRefDeviceModelFuncParam *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(soap, (_Xdmrtm__QueryRefDeviceFuncResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFunc:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, (_Xdmrtm__QueryRefDeviceFunc *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(soap, (_Xdmrtm__QueryRefDeviceModelResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModel:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, (_Xdmrtm__QueryRefDeviceModel *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, (_Xdmrtm__QueryRefDeviceProtocolTypeResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolType:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, (_Xdmrtm__QueryRefDeviceProtocolType *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(soap, (_Xdmrtm__QueryRefDeviceTypeResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceType:
		soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceType(soap, (_Xdmrtm__QueryRefDeviceType *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationTypeResponse:
		soap_serialize_PointerTo_Xdmrtm__QueryRefStationTypeResponse(soap, (_Xdmrtm__QueryRefStationTypeResponse *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationType:
		soap_serialize_PointerTo_Xdmrtm__QueryRefStationType(soap, (_Xdmrtm__QueryRefStationType *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachmentArray:
		soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, (Xdmrtm__MonAnalysisReportAttachmentArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportArray:
		soap_serialize_PointerToXdmrtm__MonAnalysisReportArray(soap, (Xdmrtm__MonAnalysisReportArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskArray:
		soap_serialize_PointerToXdmrtm__PlanTaskArray(soap, (Xdmrtm__PlanTaskArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskIDArray:
		soap_serialize_PointerToXdmrtm__PlanTaskIDArray(soap, (Xdmrtm__PlanTaskIDArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayoutArray:
		soap_serialize_PointerToXdmrtm__FreqLayoutArray(soap, (Xdmrtm__FreqLayoutArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfoArray:
		soap_serialize_PointerToXdmrtm__DeviceUseingInfoArray(soap, (Xdmrtm__DeviceUseingInfoArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LoadbalancingServer:
		soap_serialize_PointerToXdmrtm__LoadbalancingServer(soap, (Xdmrtm__LoadbalancingServer *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStationArray:
		soap_serialize_PointerToXdmrtm__LicenseStationArray(soap, (Xdmrtm__LicenseStationArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntennaArray:
		soap_serialize_PointerToXdmrtm__DeviceFuncAntennaArray(soap, (Xdmrtm__DeviceFuncAntennaArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncArray:
		soap_serialize_PointerToXdmrtm__DeviceFuncArray(soap, (Xdmrtm__DeviceFuncArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__AntArray:
		soap_serialize_PointerToXdmrtm__AntArray(soap, (Xdmrtm__AntArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNCArray:
		soap_serialize_PointerToXdmrtm__RNCArray(soap, (Xdmrtm__RNCArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceArray:
		soap_serialize_PointerToXdmrtm__DeviceArray(soap, (Xdmrtm__DeviceArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__StationArray:
		soap_serialize_PointerToXdmrtm__StationArray(soap, (Xdmrtm__StationArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenterArray:
		soap_serialize_PointerToXdmrtm__MonControlCenterArray(soap, (Xdmrtm__MonControlCenterArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganizationArray:
		soap_serialize_PointerToXdmrtm__MonOrganizationArray(soap, (Xdmrtm__MonOrganizationArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParamArray:
		soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, (Xdmrtm__RefDeviceModelFuncParamArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFuncArray:
		soap_serialize_PointerToXdmrtm__RefDeviceFuncArray(soap, (Xdmrtm__RefDeviceFuncArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelArray:
		soap_serialize_PointerToXdmrtm__RefDeviceModelArray(soap, (Xdmrtm__RefDeviceModelArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocolArray:
		soap_serialize_PointerToXdmrtm__RefDeviceProtocolArray(soap, (Xdmrtm__RefDeviceProtocolArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceTypeArray:
		soap_serialize_PointerToXdmrtm__RefDeviceTypeArray(soap, (Xdmrtm__RefDeviceTypeArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationTypeArray:
		soap_serialize_PointerToXdmrtm__RefStationTypeArray(soap, (Xdmrtm__RefStationTypeArray *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Alarm:
		soap_serialize_PointerToPointerToXdmrtm__Alarm(soap, (Xdmrtm__Alarm **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm:
		soap_serialize_PointerToXdmrtm__Alarm(soap, (Xdmrtm__Alarm *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReportAttachment:
		soap_serialize_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(soap, (Xdmrtm__MonAnalysisReportAttachment **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment:
		soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachment(soap, (Xdmrtm__MonAnalysisReportAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReport:
		soap_serialize_PointerToPointerToXdmrtm__MonAnalysisReport(soap, (Xdmrtm__MonAnalysisReport **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport:
		soap_serialize_PointerToXdmrtm__MonAnalysisReport(soap, (Xdmrtm__MonAnalysisReport *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTask:
		soap_serialize_PointerToPointerToXdmrtm__PlanTask(soap, (Xdmrtm__PlanTask **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask:
		soap_serialize_PointerToXdmrtm__PlanTask(soap, (Xdmrtm__PlanTask *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTaskID:
		soap_serialize_PointerToPointerToXdmrtm__PlanTaskID(soap, (Xdmrtm__PlanTaskID **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID:
		soap_serialize_PointerToXdmrtm__PlanTaskID(soap, (Xdmrtm__PlanTaskID *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__FreqLayout:
		soap_serialize_PointerToPointerToXdmrtm__FreqLayout(soap, (Xdmrtm__FreqLayout **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout:
		soap_serialize_PointerToXdmrtm__FreqLayout(soap, (Xdmrtm__FreqLayout *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUseingInfo:
		soap_serialize_PointerToPointerToXdmrtm__DeviceUseingInfo(soap, (Xdmrtm__DeviceUseingInfo **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo:
		soap_serialize_PointerToXdmrtm__DeviceUseingInfo(soap, (Xdmrtm__DeviceUseingInfo *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__LicenseStation:
		soap_serialize_PointerToPointerToXdmrtm__LicenseStation(soap, (Xdmrtm__LicenseStation **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation:
		soap_serialize_PointerToXdmrtm__LicenseStation(soap, (Xdmrtm__LicenseStation *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFunc:
		soap_serialize_PointerToPointerToXdmrtm__DeviceFunc(soap, (Xdmrtm__DeviceFunc **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc:
		soap_serialize_PointerToXdmrtm__DeviceFunc(soap, (Xdmrtm__DeviceFunc *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFuncAntenna:
		soap_serialize_PointerToPointerToXdmrtm__DeviceFuncAntenna(soap, (Xdmrtm__DeviceFuncAntenna **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna:
		soap_serialize_PointerToXdmrtm__DeviceFuncAntenna(soap, (Xdmrtm__DeviceFuncAntenna *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Ant:
		soap_serialize_PointerToPointerToXdmrtm__Ant(soap, (Xdmrtm__Ant **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant:
		soap_serialize_PointerToXdmrtm__Ant(soap, (Xdmrtm__Ant *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RNC:
		soap_serialize_PointerToPointerToXdmrtm__RNC(soap, (Xdmrtm__RNC **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC:
		soap_serialize_PointerToXdmrtm__RNC(soap, (Xdmrtm__RNC *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Device:
		soap_serialize_PointerToPointerToXdmrtm__Device(soap, (Xdmrtm__Device **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device:
		soap_serialize_PointerToXdmrtm__Device(soap, (Xdmrtm__Device *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Station:
		soap_serialize_PointerToPointerToXdmrtm__Station(soap, (Xdmrtm__Station **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station:
		soap_serialize_PointerToXdmrtm__Station(soap, (Xdmrtm__Station *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUsedLog:
		soap_serialize_PointerToPointerToXdmrtm__DeviceUsedLog(soap, (Xdmrtm__DeviceUsedLog **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog:
		soap_serialize_PointerToXdmrtm__DeviceUsedLog(soap, (Xdmrtm__DeviceUsedLog *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonControlCenter:
		soap_serialize_PointerToPointerToXdmrtm__MonControlCenter(soap, (Xdmrtm__MonControlCenter **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter:
		soap_serialize_PointerToXdmrtm__MonControlCenter(soap, (Xdmrtm__MonControlCenter *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonOrganization:
		soap_serialize_PointerToPointerToXdmrtm__MonOrganization(soap, (Xdmrtm__MonOrganization **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization:
		soap_serialize_PointerToXdmrtm__MonOrganization(soap, (Xdmrtm__MonOrganization *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModelFuncParam:
		soap_serialize_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(soap, (Xdmrtm__RefDeviceModelFuncParam **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam:
		soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParam(soap, (Xdmrtm__RefDeviceModelFuncParam *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceFunc:
		soap_serialize_PointerToPointerToXdmrtm__RefDeviceFunc(soap, (Xdmrtm__RefDeviceFunc **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc:
		soap_serialize_PointerToXdmrtm__RefDeviceFunc(soap, (Xdmrtm__RefDeviceFunc *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModel:
		soap_serialize_PointerToPointerToXdmrtm__RefDeviceModel(soap, (Xdmrtm__RefDeviceModel **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel:
		soap_serialize_PointerToXdmrtm__RefDeviceModel(soap, (Xdmrtm__RefDeviceModel *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceProtocol:
		soap_serialize_PointerToPointerToXdmrtm__RefDeviceProtocol(soap, (Xdmrtm__RefDeviceProtocol **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol:
		soap_serialize_PointerToXdmrtm__RefDeviceProtocol(soap, (Xdmrtm__RefDeviceProtocol *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceType:
		soap_serialize_PointerToPointerToXdmrtm__RefDeviceType(soap, (Xdmrtm__RefDeviceType **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType:
		soap_serialize_PointerToXdmrtm__RefDeviceType(soap, (Xdmrtm__RefDeviceType *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefStationType:
		soap_serialize_PointerToPointerToXdmrtm__RefStationType(soap, (Xdmrtm__RefStationType **const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType:
		soap_serialize_PointerToXdmrtm__RefStationType(soap, (Xdmrtm__RefStationType *const*)ptr);
		break;
	case SOAP_TYPE_Xdmrtm__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_Xdmrtm_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 Xdmrtm_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_Xdmrtm_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType:
		return (void*)soap_instantiate_Xdmrtm__RefStationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray:
		return (void*)soap_instantiate_Xdmrtm__RefStationTypeArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceTypeArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceProtocol(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceProtocolArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceModel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceModelArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceFunc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceFuncArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceModelFuncParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray:
		return (void*)soap_instantiate_Xdmrtm__RefDeviceModelFuncParamArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization:
		return (void*)soap_instantiate_Xdmrtm__MonOrganization(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray:
		return (void*)soap_instantiate_Xdmrtm__MonOrganizationArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter:
		return (void*)soap_instantiate_Xdmrtm__MonControlCenter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray:
		return (void*)soap_instantiate_Xdmrtm__MonControlCenterArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog:
		return (void*)soap_instantiate_Xdmrtm__DeviceUsedLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray:
		return (void*)soap_instantiate_Xdmrtm__DeviceUsedLogArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Station:
		return (void*)soap_instantiate_Xdmrtm__Station(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray:
		return (void*)soap_instantiate_Xdmrtm__StationArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Device:
		return (void*)soap_instantiate_Xdmrtm__Device(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray:
		return (void*)soap_instantiate_Xdmrtm__DeviceArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNC:
		return (void*)soap_instantiate_Xdmrtm__RNC(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray:
		return (void*)soap_instantiate_Xdmrtm__RNCArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Ant:
		return (void*)soap_instantiate_Xdmrtm__Ant(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray:
		return (void*)soap_instantiate_Xdmrtm__AntArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna:
		return (void*)soap_instantiate_Xdmrtm__DeviceFuncAntenna(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray:
		return (void*)soap_instantiate_Xdmrtm__DeviceFuncAntennaArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc:
		return (void*)soap_instantiate_Xdmrtm__DeviceFunc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray:
		return (void*)soap_instantiate_Xdmrtm__DeviceFuncArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation:
		return (void*)soap_instantiate_Xdmrtm__LicenseStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray:
		return (void*)soap_instantiate_Xdmrtm__LicenseStationArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer:
		return (void*)soap_instantiate_Xdmrtm__LoadbalancingServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo:
		return (void*)soap_instantiate_Xdmrtm__DeviceUseingInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray:
		return (void*)soap_instantiate_Xdmrtm__DeviceUseingInfoArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout:
		return (void*)soap_instantiate_Xdmrtm__FreqLayout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray:
		return (void*)soap_instantiate_Xdmrtm__FreqLayoutArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID:
		return (void*)soap_instantiate_Xdmrtm__PlanTaskID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray:
		return (void*)soap_instantiate_Xdmrtm__PlanTaskIDArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask:
		return (void*)soap_instantiate_Xdmrtm__PlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray:
		return (void*)soap_instantiate_Xdmrtm__PlanTaskArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport:
		return (void*)soap_instantiate_Xdmrtm__MonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray:
		return (void*)soap_instantiate_Xdmrtm__MonAnalysisReportArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment:
		return (void*)soap_instantiate_Xdmrtm__MonAnalysisReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray:
		return (void*)soap_instantiate_Xdmrtm__MonAnalysisReportAttachmentArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm:
		return (void*)soap_instantiate_Xdmrtm__Alarm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray:
		return (void*)soap_instantiate_Xdmrtm__AlarmArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType:
		return (void*)soap_instantiate__Xdmrtm__QueryRefStationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRefStationTypeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceTypeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceProtocolType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceModel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceModelResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceFunc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceFuncResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization:
		return (void*)soap_instantiate__Xdmrtm__QueryMonOrganization(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryMonOrganizationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter:
		return (void*)soap_instantiate__Xdmrtm__QueryMonControlCenter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryMonControlCenterResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation:
		return (void*)soap_instantiate__Xdmrtm__QueryStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryStationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice:
		return (void*)soap_instantiate__Xdmrtm__QueryDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC:
		return (void*)soap_instantiate__Xdmrtm__QueryRNC(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryRNCResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt:
		return (void*)soap_instantiate__Xdmrtm__QueryAnt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryAntResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceFunc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceFuncResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceFuncAnt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceFuncAntResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation:
		return (void*)soap_instantiate__Xdmrtm__QueryUserLicenseStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryUserLicenseStationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer:
		return (void*)soap_instantiate__Xdmrtm__AllocLoadbalancingServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse:
		return (void*)soap_instantiate__Xdmrtm__AllocLoadbalancingServerResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog:
		return (void*)soap_instantiate__Xdmrtm__SubmitDeviceUsedLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse:
		return (void*)soap_instantiate__Xdmrtm__SubmitDeviceUsedLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceUseingInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout:
		return (void*)soap_instantiate__Xdmrtm__QueryFreqLayout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryFreqLayoutResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID:
		return (void*)soap_instantiate__Xdmrtm__QueryCurExecPlanTaskID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask:
		return (void*)soap_instantiate__Xdmrtm__QueryPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryPlanTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask:
		return (void*)soap_instantiate__Xdmrtm__QueryCurExecPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryCurExecPlanTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask:
		return (void*)soap_instantiate__Xdmrtm__StartPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse:
		return (void*)soap_instantiate__Xdmrtm__StartPlanTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask:
		return (void*)soap_instantiate__Xdmrtm__StopPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse:
		return (void*)soap_instantiate__Xdmrtm__StopPlanTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask:
		return (void*)soap_instantiate__Xdmrtm__SuspendPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse:
		return (void*)soap_instantiate__Xdmrtm__SuspendPlanTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask:
		return (void*)soap_instantiate__Xdmrtm__ResumePlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse:
		return (void*)soap_instantiate__Xdmrtm__ResumePlanTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog:
		return (void*)soap_instantiate__Xdmrtm__SubmitPlanTaskLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse:
		return (void*)soap_instantiate__Xdmrtm__SubmitPlanTaskLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport:
		return (void*)soap_instantiate__Xdmrtm__SubmitMonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse:
		return (void*)soap_instantiate__Xdmrtm__SubmitMonAnalysisReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport:
		return (void*)soap_instantiate__Xdmrtm__QueryMonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryMonAnalysisReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment:
		return (void*)soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		return (void*)soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment:
		return (void*)soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		return (void*)soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport:
		return (void*)soap_instantiate__Xdmrtm__IsAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse:
		return (void*)soap_instantiate__Xdmrtm__IsAnalysisReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport:
		return (void*)soap_instantiate__Xdmrtm__DeleteMonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse:
		return (void*)soap_instantiate__Xdmrtm__DeleteMonAnalysisResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo:
		return (void*)soap_instantiate__Xdmrtm__SubmitAlarmInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse:
		return (void*)soap_instantiate__Xdmrtm__SubmitAlarmInfoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType:
		return (void*)soap_instantiate___Xdmrtm__QueryRefStationType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType:
		return (void*)soap_instantiate___Xdmrtm__QueryRefDeviceType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType:
		return (void*)soap_instantiate___Xdmrtm__QueryRefDeviceProtocolType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel:
		return (void*)soap_instantiate___Xdmrtm__QueryRefDeviceModel(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc:
		return (void*)soap_instantiate___Xdmrtm__QueryRefDeviceFunc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam:
		return (void*)soap_instantiate___Xdmrtm__QueryRefDeviceModelFuncParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization:
		return (void*)soap_instantiate___Xdmrtm__QueryMonOrganization(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter:
		return (void*)soap_instantiate___Xdmrtm__QueryMonControlCenter(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation:
		return (void*)soap_instantiate___Xdmrtm__QueryStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice:
		return (void*)soap_instantiate___Xdmrtm__QueryDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC:
		return (void*)soap_instantiate___Xdmrtm__QueryRNC(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt:
		return (void*)soap_instantiate___Xdmrtm__QueryAnt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc:
		return (void*)soap_instantiate___Xdmrtm__QueryDeviceFunc(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt:
		return (void*)soap_instantiate___Xdmrtm__QueryDeviceFuncAnt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation:
		return (void*)soap_instantiate___Xdmrtm__QueryUserLicenseStation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer:
		return (void*)soap_instantiate___Xdmrtm__AllocLoadbalancingServer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog:
		return (void*)soap_instantiate___Xdmrtm__SubmitDeviceUsedLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo:
		return (void*)soap_instantiate___Xdmrtm__QueryDeviceUseingInfo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice:
		return (void*)soap_instantiate___Xdmrtm__QueryDeviceUseingInfoByDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser:
		return (void*)soap_instantiate___Xdmrtm__QueryDeviceUseingInfoByUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout:
		return (void*)soap_instantiate___Xdmrtm__QueryFreqLayout(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID:
		return (void*)soap_instantiate___Xdmrtm__QueryCurExecPlanTaskID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask:
		return (void*)soap_instantiate___Xdmrtm__QueryPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask:
		return (void*)soap_instantiate___Xdmrtm__QueryCurExecPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask:
		return (void*)soap_instantiate___Xdmrtm__StartPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask:
		return (void*)soap_instantiate___Xdmrtm__StopPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask:
		return (void*)soap_instantiate___Xdmrtm__SuspendPlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask:
		return (void*)soap_instantiate___Xdmrtm__ResumePlanTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog:
		return (void*)soap_instantiate___Xdmrtm__SubmitPlanTaskLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport:
		return (void*)soap_instantiate___Xdmrtm__SubmitMonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport:
		return (void*)soap_instantiate___Xdmrtm__QueryMonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment:
		return (void*)soap_instantiate___Xdmrtm__QueryMonAnalysisReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment:
		return (void*)soap_instantiate___Xdmrtm__DownloadMonAnalysisReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport:
		return (void*)soap_instantiate___Xdmrtm__IsAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport:
		return (void*)soap_instantiate___Xdmrtm__DeleteMonAnalysisReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo:
		return (void*)soap_instantiate___Xdmrtm__SubmitAlarmInfo(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 Xdmrtm_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_Xdmrtm_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefStationType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefStationType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefStationTypeArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefStationTypeArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceTypeArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceTypeArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceProtocol*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceProtocol*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceProtocolArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceProtocolArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceModel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceModel*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceModelArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceModelArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceFunc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceFunc*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceFuncArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceFuncArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceModelFuncParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceModelFuncParam*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RefDeviceModelFuncParamArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RefDeviceModelFuncParamArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonOrganization*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonOrganization*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonOrganizationArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonOrganizationArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonControlCenter*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonControlCenter*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonControlCenterArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonControlCenterArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceUsedLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceUsedLog*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceUsedLogArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceUsedLogArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Station:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__Station*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__Station*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__StationArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__StationArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Device:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__Device*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__Device*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNC:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RNC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RNC*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__RNCArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__RNCArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Ant:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__Ant*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__Ant*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__AntArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__AntArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceFuncAntenna*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceFuncAntenna*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceFuncAntennaArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceFuncAntennaArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceFunc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceFunc*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceFuncArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceFuncArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__LicenseStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__LicenseStation*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__LicenseStationArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__LicenseStationArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__LoadbalancingServer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__LoadbalancingServer*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceUseingInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceUseingInfo*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__DeviceUseingInfoArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__DeviceUseingInfoArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__FreqLayout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__FreqLayout*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__FreqLayoutArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__FreqLayoutArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__PlanTaskID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__PlanTaskID*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__PlanTaskIDArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__PlanTaskIDArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__PlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__PlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__PlanTaskArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__PlanTaskArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonAnalysisReportArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonAnalysisReportArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonAnalysisReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonAnalysisReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__MonAnalysisReportAttachmentArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__MonAnalysisReportAttachmentArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__Alarm*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__Alarm*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray:
		if (p->size < 0)
			SOAP_DELETE((Xdmrtm__AlarmArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Xdmrtm__AlarmArray*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefStationType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefStationType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefStationTypeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefStationTypeResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceTypeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceTypeResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceProtocolType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceProtocolType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceModel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceModel*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceModelResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceModelResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceFunc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceFunc*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceFuncResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceFuncResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceModelFuncParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceModelFuncParam*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonOrganization*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonOrganization*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonOrganizationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonOrganizationResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonControlCenter*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonControlCenter*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonControlCenterResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonControlCenterResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryStation*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryStationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryStationResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDevice*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRNC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRNC*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryRNCResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryRNCResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryAnt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryAnt*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryAntResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryAntResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceFunc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceFunc*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceFuncResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceFuncResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceFuncAnt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceFuncAnt*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceFuncAntResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceFuncAntResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryUserLicenseStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryUserLicenseStation*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryUserLicenseStationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryUserLicenseStationResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__AllocLoadbalancingServer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__AllocLoadbalancingServer*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__AllocLoadbalancingServerResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__AllocLoadbalancingServerResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitDeviceUsedLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitDeviceUsedLog*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitDeviceUsedLogResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitDeviceUsedLogResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceUseingInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceUseingInfo*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceUseingInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceUseingInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceUseingInfoByDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceUseingInfoByDevice*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceUseingInfoByUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceUseingInfoByUser*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryFreqLayout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryFreqLayout*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryFreqLayoutResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryFreqLayoutResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryCurExecPlanTaskID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryCurExecPlanTaskID*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryCurExecPlanTaskIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryCurExecPlanTaskIDResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryPlanTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryPlanTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryCurExecPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryCurExecPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryCurExecPlanTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryCurExecPlanTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__StartPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__StartPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__StartPlanTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__StartPlanTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__StopPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__StopPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__StopPlanTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__StopPlanTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SuspendPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SuspendPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SuspendPlanTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SuspendPlanTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__ResumePlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__ResumePlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__ResumePlanTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__ResumePlanTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitPlanTaskLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitPlanTaskLog*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitPlanTaskLogResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitPlanTaskLogResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitMonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitMonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitMonAnalysisReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitMonAnalysisReportResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonAnalysisReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonAnalysisReportResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonAnalysisReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonAnalysisReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__DownloadMonAnalysisReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__DownloadMonAnalysisReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__IsAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__IsAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__IsAnalysisReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__IsAnalysisReportResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__DeleteMonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__DeleteMonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__DeleteMonAnalysisResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__DeleteMonAnalysisResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitAlarmInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitAlarmInfo*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse:
		if (p->size < 0)
			SOAP_DELETE((_Xdmrtm__SubmitAlarmInfoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Xdmrtm__SubmitAlarmInfoResponse*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRefStationType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRefStationType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRefDeviceType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRefDeviceType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRefDeviceProtocolType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRefDeviceProtocolType*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRefDeviceModel*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRefDeviceModel*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRefDeviceFunc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRefDeviceFunc*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRefDeviceModelFuncParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRefDeviceModelFuncParam*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryMonOrganization*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryMonOrganization*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryMonControlCenter*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryMonControlCenter*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryStation*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryDevice*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryRNC*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryRNC*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryAnt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryAnt*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryDeviceFunc*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryDeviceFunc*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryDeviceFuncAnt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryDeviceFuncAnt*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryUserLicenseStation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryUserLicenseStation*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__AllocLoadbalancingServer*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__AllocLoadbalancingServer*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__SubmitDeviceUsedLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__SubmitDeviceUsedLog*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryDeviceUseingInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryDeviceUseingInfo*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryDeviceUseingInfoByDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryDeviceUseingInfoByDevice*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryDeviceUseingInfoByUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryDeviceUseingInfoByUser*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryFreqLayout*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryFreqLayout*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryCurExecPlanTaskID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryCurExecPlanTaskID*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryCurExecPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryCurExecPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__StartPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__StartPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__StopPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__StopPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__SuspendPlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__SuspendPlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__ResumePlanTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__ResumePlanTask*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__SubmitPlanTaskLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__SubmitPlanTaskLog*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__SubmitMonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__SubmitMonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryMonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryMonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__QueryMonAnalysisReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__QueryMonAnalysisReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__DownloadMonAnalysisReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__DownloadMonAnalysisReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__IsAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__IsAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__DeleteMonAnalysisReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__DeleteMonAnalysisReport*)p->ptr);
		break;
	case SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo:
		if (p->size < 0)
			SOAP_DELETE((struct __Xdmrtm__SubmitAlarmInfo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Xdmrtm__SubmitAlarmInfo*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, Xdmrtm_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_Xdmrtm_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_Xdmrtm_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_Xdmrtm_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_Xdmrtm_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_Xdmrtm_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_Xdmrtm_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_Xdmrtm_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Xdmrtm_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Xdmrtm_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_Xdmrtm_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_std__string, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _Xdmrtm__SubmitAlarmInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__SubmitAlarmInfoResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__SubmitAlarmInfoResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__SubmitAlarmInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__SubmitAlarmInfoResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitAlarmInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitAlarmInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitAlarmInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__SubmitAlarmInfoResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__SubmitAlarmInfoResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitAlarmInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitAlarmInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfoResponse * SOAP_FMAC4 soap_in__Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitAlarmInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitAlarmInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse, sizeof(_Xdmrtm__SubmitAlarmInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitAlarmInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__SubmitAlarmInfoResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__SubmitAlarmInfoResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitAlarmInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse, 0, sizeof(_Xdmrtm__SubmitAlarmInfoResponse), 0, soap_copy__Xdmrtm__SubmitAlarmInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitAlarmInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitAlarmInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitAlarmInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitAlarmInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfoResponse * SOAP_FMAC4 soap_get__Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, _Xdmrtm__SubmitAlarmInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitAlarmInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitAlarmInfoResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitAlarmInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitAlarmInfoResponse);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitAlarmInfoResponse);
		((_Xdmrtm__SubmitAlarmInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitAlarmInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitAlarmInfoResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitAlarmInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitAlarmInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitAlarmInfoResponse %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitAlarmInfoResponse*)p = *(_Xdmrtm__SubmitAlarmInfoResponse*)q;
}

void _Xdmrtm__SubmitAlarmInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Xdmrtm__SubmitAlarmInfo::Alarm = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__SubmitAlarmInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToXdmrtm__Alarm(soap, &this->_Xdmrtm__SubmitAlarmInfo::Alarm);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitAlarmInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitAlarmInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitAlarmInfo(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitAlarmInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo), type))
		return soap->error;
	if (a->_Xdmrtm__SubmitAlarmInfo::Alarm)
	{	if (soap_out_PointerToXdmrtm__Alarm(soap, "Alarm", -1, &a->_Xdmrtm__SubmitAlarmInfo::Alarm, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "Alarm"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitAlarmInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitAlarmInfo(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfo * SOAP_FMAC4 soap_in__Xdmrtm__SubmitAlarmInfo(struct soap *soap, const char *tag, _Xdmrtm__SubmitAlarmInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitAlarmInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo, sizeof(_Xdmrtm__SubmitAlarmInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitAlarmInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Alarm1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Alarm1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__Alarm(soap, "Alarm", &(a->_Xdmrtm__SubmitAlarmInfo::Alarm), "Xdmrtm:Alarm"))
				{	soap_flag_Alarm1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitAlarmInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo, 0, sizeof(_Xdmrtm__SubmitAlarmInfo), 0, soap_copy__Xdmrtm__SubmitAlarmInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Alarm1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitAlarmInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitAlarmInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitAlarmInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitAlarmInfo(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfo * SOAP_FMAC4 soap_get__Xdmrtm__SubmitAlarmInfo(struct soap *soap, _Xdmrtm__SubmitAlarmInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitAlarmInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitAlarmInfo * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitAlarmInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitAlarmInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitAlarmInfo);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitAlarmInfo);
		((_Xdmrtm__SubmitAlarmInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitAlarmInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitAlarmInfo);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitAlarmInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitAlarmInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitAlarmInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitAlarmInfo %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitAlarmInfo*)p = *(_Xdmrtm__SubmitAlarmInfo*)q;
}

void _Xdmrtm__DeleteMonAnalysisResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__DeleteMonAnalysisResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__DeleteMonAnalysisResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__DeleteMonAnalysisResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__DeleteMonAnalysisResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__DeleteMonAnalysisResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__DeleteMonAnalysisResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__DeleteMonAnalysisResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__DeleteMonAnalysisResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__DeleteMonAnalysisResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__DeleteMonAnalysisResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__DeleteMonAnalysisResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisResponse * SOAP_FMAC4 soap_in__Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, const char *tag, _Xdmrtm__DeleteMonAnalysisResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__DeleteMonAnalysisResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse, sizeof(_Xdmrtm__DeleteMonAnalysisResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__DeleteMonAnalysisResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__DeleteMonAnalysisResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__DeleteMonAnalysisResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__DeleteMonAnalysisResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse, 0, sizeof(_Xdmrtm__DeleteMonAnalysisResponse), 0, soap_copy__Xdmrtm__DeleteMonAnalysisResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__DeleteMonAnalysisResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeleteMonAnalysisResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__DeleteMonAnalysisResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__DeleteMonAnalysisResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisResponse * SOAP_FMAC4 soap_get__Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, _Xdmrtm__DeleteMonAnalysisResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__DeleteMonAnalysisResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__DeleteMonAnalysisResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__DeleteMonAnalysisResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DeleteMonAnalysisResponse);
		if (size)
			*size = sizeof(_Xdmrtm__DeleteMonAnalysisResponse);
		((_Xdmrtm__DeleteMonAnalysisResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DeleteMonAnalysisResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__DeleteMonAnalysisResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__DeleteMonAnalysisResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__DeleteMonAnalysisResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__DeleteMonAnalysisResponse %p -> %p\n", q, p));
	*(_Xdmrtm__DeleteMonAnalysisResponse*)p = *(_Xdmrtm__DeleteMonAnalysisResponse*)q;
}

void _Xdmrtm__DeleteMonAnalysisReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__DeleteMonAnalysisReport::sStationNO);
	soap_default_LONG64(soap, &this->_Xdmrtm__DeleteMonAnalysisReport::nFreq);
	soap_default_LONG64(soap, &this->_Xdmrtm__DeleteMonAnalysisReport::nBeginDate);
	soap_default_LONG64(soap, &this->_Xdmrtm__DeleteMonAnalysisReport::nEndDate);
	/* transient soap skipped */
}

void _Xdmrtm__DeleteMonAnalysisReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__DeleteMonAnalysisReport::sStationNO);
	/* transient soap skipped */
}

int _Xdmrtm__DeleteMonAnalysisReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__DeleteMonAnalysisReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const char *tag, int id, const _Xdmrtm__DeleteMonAnalysisReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->_Xdmrtm__DeleteMonAnalysisReport::sStationNO), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nFreq", -1, &(a->_Xdmrtm__DeleteMonAnalysisReport::nFreq), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nBeginDate", -1, &(a->_Xdmrtm__DeleteMonAnalysisReport::nBeginDate), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nEndDate", -1, &(a->_Xdmrtm__DeleteMonAnalysisReport::nEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__DeleteMonAnalysisReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__DeleteMonAnalysisReport(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisReport * SOAP_FMAC4 soap_in__Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__DeleteMonAnalysisReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__DeleteMonAnalysisReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport, sizeof(_Xdmrtm__DeleteMonAnalysisReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__DeleteMonAnalysisReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_nFreq1 = 1;
	size_t soap_flag_nBeginDate1 = 1;
	size_t soap_flag_nEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->_Xdmrtm__DeleteMonAnalysisReport::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_nFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nFreq", &(a->_Xdmrtm__DeleteMonAnalysisReport::nFreq), "xsd:long"))
				{	soap_flag_nFreq1--;
					continue;
				}
			if (soap_flag_nBeginDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nBeginDate", &(a->_Xdmrtm__DeleteMonAnalysisReport::nBeginDate), "xsd:long"))
				{	soap_flag_nBeginDate1--;
					continue;
				}
			if (soap_flag_nEndDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nEndDate", &(a->_Xdmrtm__DeleteMonAnalysisReport::nEndDate), "xsd:long"))
				{	soap_flag_nEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__DeleteMonAnalysisReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport, 0, sizeof(_Xdmrtm__DeleteMonAnalysisReport), 0, soap_copy__Xdmrtm__DeleteMonAnalysisReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_nFreq1 > 0 || soap_flag_nBeginDate1 > 0 || soap_flag_nEndDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__DeleteMonAnalysisReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeleteMonAnalysisReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__DeleteMonAnalysisReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__DeleteMonAnalysisReport(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisReport * SOAP_FMAC4 soap_get__Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, _Xdmrtm__DeleteMonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__DeleteMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__DeleteMonAnalysisReport * SOAP_FMAC2 soap_instantiate__Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__DeleteMonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DeleteMonAnalysisReport);
		if (size)
			*size = sizeof(_Xdmrtm__DeleteMonAnalysisReport);
		((_Xdmrtm__DeleteMonAnalysisReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DeleteMonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__DeleteMonAnalysisReport);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__DeleteMonAnalysisReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__DeleteMonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__DeleteMonAnalysisReport %p -> %p\n", q, p));
	*(_Xdmrtm__DeleteMonAnalysisReport*)p = *(_Xdmrtm__DeleteMonAnalysisReport*)q;
}

void _Xdmrtm__IsAnalysisReportResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__IsAnalysisReportResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__IsAnalysisReportResponse::sResult);
	soap_default_int(soap, &this->_Xdmrtm__IsAnalysisReportResponse::nStatus);
	/* transient soap skipped */
}

void _Xdmrtm__IsAnalysisReportResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__IsAnalysisReportResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__IsAnalysisReportResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__IsAnalysisReportResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__IsAnalysisReportResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__IsAnalysisReportResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__IsAnalysisReportResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__IsAnalysisReportResponse::sResult), ""))
		return soap->error;
	if (soap_out_int(soap, "nStatus", -1, &(a->_Xdmrtm__IsAnalysisReportResponse::nStatus), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__IsAnalysisReportResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__IsAnalysisReportResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReportResponse * SOAP_FMAC4 soap_in__Xdmrtm__IsAnalysisReportResponse(struct soap *soap, const char *tag, _Xdmrtm__IsAnalysisReportResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__IsAnalysisReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse, sizeof(_Xdmrtm__IsAnalysisReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__IsAnalysisReportResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_nStatus1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__IsAnalysisReportResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__IsAnalysisReportResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_nStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStatus", &(a->_Xdmrtm__IsAnalysisReportResponse::nStatus), "xsd:int"))
				{	soap_flag_nStatus1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__IsAnalysisReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse, 0, sizeof(_Xdmrtm__IsAnalysisReportResponse), 0, soap_copy__Xdmrtm__IsAnalysisReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_nStatus1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__IsAnalysisReportResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:IsAnalysisReportResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__IsAnalysisReportResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__IsAnalysisReportResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReportResponse * SOAP_FMAC4 soap_get__Xdmrtm__IsAnalysisReportResponse(struct soap *soap, _Xdmrtm__IsAnalysisReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__IsAnalysisReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__IsAnalysisReportResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__IsAnalysisReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__IsAnalysisReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__IsAnalysisReportResponse);
		if (size)
			*size = sizeof(_Xdmrtm__IsAnalysisReportResponse);
		((_Xdmrtm__IsAnalysisReportResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__IsAnalysisReportResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__IsAnalysisReportResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__IsAnalysisReportResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__IsAnalysisReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__IsAnalysisReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__IsAnalysisReportResponse %p -> %p\n", q, p));
	*(_Xdmrtm__IsAnalysisReportResponse*)p = *(_Xdmrtm__IsAnalysisReportResponse*)q;
}

void _Xdmrtm__IsAnalysisReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__IsAnalysisReport::sStationNO);
	soap_default_LONG64(soap, &this->_Xdmrtm__IsAnalysisReport::nFreq);
	/* transient soap skipped */
}

void _Xdmrtm__IsAnalysisReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__IsAnalysisReport::sStationNO);
	/* transient soap skipped */
}

int _Xdmrtm__IsAnalysisReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__IsAnalysisReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__IsAnalysisReport(struct soap *soap, const char *tag, int id, const _Xdmrtm__IsAnalysisReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->_Xdmrtm__IsAnalysisReport::sStationNO), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nFreq", -1, &(a->_Xdmrtm__IsAnalysisReport::nFreq), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__IsAnalysisReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__IsAnalysisReport(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReport * SOAP_FMAC4 soap_in__Xdmrtm__IsAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__IsAnalysisReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__IsAnalysisReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport, sizeof(_Xdmrtm__IsAnalysisReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__IsAnalysisReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_nFreq1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->_Xdmrtm__IsAnalysisReport::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_nFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nFreq", &(a->_Xdmrtm__IsAnalysisReport::nFreq), "xsd:long"))
				{	soap_flag_nFreq1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__IsAnalysisReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport, 0, sizeof(_Xdmrtm__IsAnalysisReport), 0, soap_copy__Xdmrtm__IsAnalysisReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_nFreq1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__IsAnalysisReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:IsAnalysisReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__IsAnalysisReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__IsAnalysisReport(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReport * SOAP_FMAC4 soap_get__Xdmrtm__IsAnalysisReport(struct soap *soap, _Xdmrtm__IsAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__IsAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__IsAnalysisReport * SOAP_FMAC2 soap_instantiate__Xdmrtm__IsAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__IsAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__IsAnalysisReport);
		if (size)
			*size = sizeof(_Xdmrtm__IsAnalysisReport);
		((_Xdmrtm__IsAnalysisReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__IsAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__IsAnalysisReport);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__IsAnalysisReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__IsAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__IsAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__IsAnalysisReport %p -> %p\n", q, p));
	*(_Xdmrtm__IsAnalysisReport*)p = *(_Xdmrtm__IsAnalysisReport*)q;
}

void _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sResult);
	soap_default_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sAttchmentFullPath);
	/* transient soap skipped */
}

void _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sResult);
	soap_serialize_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sAttchmentFullPath);
	/* transient soap skipped */
}

int _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAttchmentFullPath", -1, &(a->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sAttchmentFullPath), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse * SOAP_FMAC4 soap_in__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_sAttchmentFullPath1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_sAttchmentFullPath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAttchmentFullPath", &(a->_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::sAttchmentFullPath), "xsd:string"))
				{	soap_flag_sAttchmentFullPath1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse, 0, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse), 0, soap_copy__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_sAttchmentFullPath1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DownloadMonAnalysisReportAttachmentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse * SOAP_FMAC4 soap_get__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
		if (size)
			*size = sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
		((_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse %p -> %p\n", q, p));
	*(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)p = *(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse*)q;
}

void _Xdmrtm__DownloadMonAnalysisReportAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachment::sReportID);
	soap_default_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachment::sAttchmentID);
	/* transient soap skipped */
}

void _Xdmrtm__DownloadMonAnalysisReportAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachment::sReportID);
	soap_serialize_std__string(soap, &this->_Xdmrtm__DownloadMonAnalysisReportAttachment::sAttchmentID);
	/* transient soap skipped */
}

int _Xdmrtm__DownloadMonAnalysisReportAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, const _Xdmrtm__DownloadMonAnalysisReportAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "sReportID", -1, &(a->_Xdmrtm__DownloadMonAnalysisReportAttachment::sReportID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAttchmentID", -1, &(a->_Xdmrtm__DownloadMonAnalysisReportAttachment::sAttchmentID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__DownloadMonAnalysisReportAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachment * SOAP_FMAC4 soap_in__Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const char *tag, _Xdmrtm__DownloadMonAnalysisReportAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__DownloadMonAnalysisReportAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__DownloadMonAnalysisReportAttachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sReportID1 = 1;
	size_t soap_flag_sAttchmentID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sReportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sReportID", &(a->_Xdmrtm__DownloadMonAnalysisReportAttachment::sReportID), "xsd:string"))
				{	soap_flag_sReportID1--;
					continue;
				}
			if (soap_flag_sAttchmentID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAttchmentID", &(a->_Xdmrtm__DownloadMonAnalysisReportAttachment::sAttchmentID), "xsd:string"))
				{	soap_flag_sAttchmentID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__DownloadMonAnalysisReportAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment, 0, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachment), 0, soap_copy__Xdmrtm__DownloadMonAnalysisReportAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sReportID1 > 0 || soap_flag_sAttchmentID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__DownloadMonAnalysisReportAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DownloadMonAnalysisReportAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__DownloadMonAnalysisReportAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachment * SOAP_FMAC4 soap_get__Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__DownloadMonAnalysisReportAttachment * SOAP_FMAC2 soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DownloadMonAnalysisReportAttachment);
		if (size)
			*size = sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachment);
		((_Xdmrtm__DownloadMonAnalysisReportAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__DownloadMonAnalysisReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachment);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__DownloadMonAnalysisReportAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__DownloadMonAnalysisReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__DownloadMonAnalysisReportAttachment %p -> %p\n", q, p));
	*(_Xdmrtm__DownloadMonAnalysisReportAttachment*)p = *(_Xdmrtm__DownloadMonAnalysisReportAttachment*)q;
}

void _Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::sResult);
	this->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::MonAnalysisReportAttachMentArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::sResult);
	soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, &this->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::MonAnalysisReportAttachMentArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonAnalysisReportAttachmentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::MonAnalysisReportAttachMentArray)
	{	if (soap_out_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, "MonAnalysisReportAttachMentArray", -1, &a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::MonAnalysisReportAttachMentArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "MonAnalysisReportAttachMentArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachmentResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_MonAnalysisReportAttachMentArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_MonAnalysisReportAttachMentArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, "MonAnalysisReportAttachMentArray", &(a->_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::MonAnalysisReportAttachMentArray), "Xdmrtm:MonAnalysisReportAttachmentArray"))
				{	soap_flag_MonAnalysisReportAttachMentArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse, 0, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse), 0, soap_copy__Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_MonAnalysisReportAttachMentArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReportAttachmentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachmentResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonAnalysisReportAttachmentResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
		((_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonAnalysisReportAttachmentResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)p = *(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse*)q;
}

void _Xdmrtm__QueryMonAnalysisReportAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReportAttachment::sReportID);
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonAnalysisReportAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReportAttachment::sReportID);
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonAnalysisReportAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonAnalysisReportAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "sReportID", -1, &(a->_Xdmrtm__QueryMonAnalysisReportAttachment::sReportID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonAnalysisReportAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachment * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReportAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonAnalysisReportAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonAnalysisReportAttachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sReportID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sReportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sReportID", &(a->_Xdmrtm__QueryMonAnalysisReportAttachment::sReportID), "xsd:string"))
				{	soap_flag_sReportID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonAnalysisReportAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment, 0, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachment), 0, soap_copy__Xdmrtm__QueryMonAnalysisReportAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sReportID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonAnalysisReportAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReportAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonAnalysisReportAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonAnalysisReportAttachment(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachment * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonAnalysisReportAttachment * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReportAttachment);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonAnalysisReportAttachment);
		((_Xdmrtm__QueryMonAnalysisReportAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonAnalysisReportAttachment);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonAnalysisReportAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonAnalysisReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonAnalysisReportAttachment %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonAnalysisReportAttachment*)p = *(_Xdmrtm__QueryMonAnalysisReportAttachment*)q;
}

void _Xdmrtm__QueryMonAnalysisReportResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryMonAnalysisReportResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReportResponse::sResult);
	this->_Xdmrtm__QueryMonAnalysisReportResponse::MonAnalysisReportArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonAnalysisReportResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReportResponse::sResult);
	soap_serialize_PointerToXdmrtm__MonAnalysisReportArray(soap, &this->_Xdmrtm__QueryMonAnalysisReportResponse::MonAnalysisReportArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonAnalysisReportResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonAnalysisReportResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonAnalysisReportResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryMonAnalysisReportResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryMonAnalysisReportResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryMonAnalysisReportResponse::MonAnalysisReportArray)
	{	if (soap_out_PointerToXdmrtm__MonAnalysisReportArray(soap, "MonAnalysisReportArray", -1, &a->_Xdmrtm__QueryMonAnalysisReportResponse::MonAnalysisReportArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "MonAnalysisReportArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonAnalysisReportResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonAnalysisReportResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReportResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonAnalysisReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse, sizeof(_Xdmrtm__QueryMonAnalysisReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonAnalysisReportResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_MonAnalysisReportArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryMonAnalysisReportResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryMonAnalysisReportResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_MonAnalysisReportArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__MonAnalysisReportArray(soap, "MonAnalysisReportArray", &(a->_Xdmrtm__QueryMonAnalysisReportResponse::MonAnalysisReportArray), "Xdmrtm:MonAnalysisReportArray"))
				{	soap_flag_MonAnalysisReportArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonAnalysisReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse, 0, sizeof(_Xdmrtm__QueryMonAnalysisReportResponse), 0, soap_copy__Xdmrtm__QueryMonAnalysisReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_MonAnalysisReportArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonAnalysisReportResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReportResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonAnalysisReportResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonAnalysisReportResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonAnalysisReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonAnalysisReportResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonAnalysisReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReportResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonAnalysisReportResponse);
		((_Xdmrtm__QueryMonAnalysisReportResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReportResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonAnalysisReportResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonAnalysisReportResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonAnalysisReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonAnalysisReportResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonAnalysisReportResponse*)p = *(_Xdmrtm__QueryMonAnalysisReportResponse*)q;
}

void _Xdmrtm__QueryMonAnalysisReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReport::sStationNO);
	soap_default_LONG64(soap, &this->_Xdmrtm__QueryMonAnalysisReport::nFreq);
	soap_default_LONG64(soap, &this->_Xdmrtm__QueryMonAnalysisReport::nBeginDate);
	soap_default_LONG64(soap, &this->_Xdmrtm__QueryMonAnalysisReport::nEndDate);
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonAnalysisReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryMonAnalysisReport::sStationNO);
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonAnalysisReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonAnalysisReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonAnalysisReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->_Xdmrtm__QueryMonAnalysisReport::sStationNO), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nFreq", -1, &(a->_Xdmrtm__QueryMonAnalysisReport::nFreq), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nBeginDate", -1, &(a->_Xdmrtm__QueryMonAnalysisReport::nBeginDate), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nEndDate", -1, &(a->_Xdmrtm__QueryMonAnalysisReport::nEndDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonAnalysisReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonAnalysisReport(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReport * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonAnalysisReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport, sizeof(_Xdmrtm__QueryMonAnalysisReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonAnalysisReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_nFreq1 = 1;
	size_t soap_flag_nBeginDate1 = 1;
	size_t soap_flag_nEndDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->_Xdmrtm__QueryMonAnalysisReport::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_nFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nFreq", &(a->_Xdmrtm__QueryMonAnalysisReport::nFreq), "xsd:long"))
				{	soap_flag_nFreq1--;
					continue;
				}
			if (soap_flag_nBeginDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nBeginDate", &(a->_Xdmrtm__QueryMonAnalysisReport::nBeginDate), "xsd:long"))
				{	soap_flag_nBeginDate1--;
					continue;
				}
			if (soap_flag_nEndDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nEndDate", &(a->_Xdmrtm__QueryMonAnalysisReport::nEndDate), "xsd:long"))
				{	soap_flag_nEndDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonAnalysisReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport, 0, sizeof(_Xdmrtm__QueryMonAnalysisReport), 0, soap_copy__Xdmrtm__QueryMonAnalysisReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_nFreq1 > 0 || soap_flag_nBeginDate1 > 0 || soap_flag_nEndDate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonAnalysisReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonAnalysisReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonAnalysisReport(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReport * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonAnalysisReport(struct soap *soap, _Xdmrtm__QueryMonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonAnalysisReport * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReport);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonAnalysisReport);
		((_Xdmrtm__QueryMonAnalysisReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonAnalysisReport);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonAnalysisReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonAnalysisReport %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonAnalysisReport*)p = *(_Xdmrtm__QueryMonAnalysisReport*)q;
}

void _Xdmrtm__SubmitMonAnalysisReportResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__SubmitMonAnalysisReportResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__SubmitMonAnalysisReportResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__SubmitMonAnalysisReportResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__SubmitMonAnalysisReportResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitMonAnalysisReportResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitMonAnalysisReportResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitMonAnalysisReportResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__SubmitMonAnalysisReportResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__SubmitMonAnalysisReportResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitMonAnalysisReportResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitMonAnalysisReportResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReportResponse * SOAP_FMAC4 soap_in__Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitMonAnalysisReportResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitMonAnalysisReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse, sizeof(_Xdmrtm__SubmitMonAnalysisReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitMonAnalysisReportResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__SubmitMonAnalysisReportResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__SubmitMonAnalysisReportResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitMonAnalysisReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse, 0, sizeof(_Xdmrtm__SubmitMonAnalysisReportResponse), 0, soap_copy__Xdmrtm__SubmitMonAnalysisReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitMonAnalysisReportResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitMonAnalysisReportResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitMonAnalysisReportResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitMonAnalysisReportResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReportResponse * SOAP_FMAC4 soap_get__Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitMonAnalysisReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitMonAnalysisReportResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitMonAnalysisReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitMonAnalysisReportResponse);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitMonAnalysisReportResponse);
		((_Xdmrtm__SubmitMonAnalysisReportResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitMonAnalysisReportResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitMonAnalysisReportResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitMonAnalysisReportResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitMonAnalysisReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitMonAnalysisReportResponse %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitMonAnalysisReportResponse*)p = *(_Xdmrtm__SubmitMonAnalysisReportResponse*)q;
}

void _Xdmrtm__SubmitMonAnalysisReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Xdmrtm__SubmitMonAnalysisReport::Report = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__SubmitMonAnalysisReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToXdmrtm__MonAnalysisReport(soap, &this->_Xdmrtm__SubmitMonAnalysisReport::Report);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitMonAnalysisReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitMonAnalysisReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitMonAnalysisReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport), type))
		return soap->error;
	if (a->_Xdmrtm__SubmitMonAnalysisReport::Report)
	{	if (soap_out_PointerToXdmrtm__MonAnalysisReport(soap, "Report", -1, &a->_Xdmrtm__SubmitMonAnalysisReport::Report, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "Report"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitMonAnalysisReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitMonAnalysisReport(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReport * SOAP_FMAC4 soap_in__Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__SubmitMonAnalysisReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitMonAnalysisReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport, sizeof(_Xdmrtm__SubmitMonAnalysisReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitMonAnalysisReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Report1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Report1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__MonAnalysisReport(soap, "Report", &(a->_Xdmrtm__SubmitMonAnalysisReport::Report), "Xdmrtm:MonAnalysisReport"))
				{	soap_flag_Report1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitMonAnalysisReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport, 0, sizeof(_Xdmrtm__SubmitMonAnalysisReport), 0, soap_copy__Xdmrtm__SubmitMonAnalysisReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Report1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitMonAnalysisReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitMonAnalysisReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitMonAnalysisReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitMonAnalysisReport(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReport * SOAP_FMAC4 soap_get__Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitMonAnalysisReport * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitMonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitMonAnalysisReport);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitMonAnalysisReport);
		((_Xdmrtm__SubmitMonAnalysisReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitMonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitMonAnalysisReport);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitMonAnalysisReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitMonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitMonAnalysisReport %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitMonAnalysisReport*)p = *(_Xdmrtm__SubmitMonAnalysisReport*)q;
}

void _Xdmrtm__SubmitPlanTaskLogResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__SubmitPlanTaskLogResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__SubmitPlanTaskLogResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__SubmitPlanTaskLogResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__SubmitPlanTaskLogResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitPlanTaskLogResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitPlanTaskLogResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitPlanTaskLogResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__SubmitPlanTaskLogResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__SubmitPlanTaskLogResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitPlanTaskLogResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitPlanTaskLogResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLogResponse * SOAP_FMAC4 soap_in__Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitPlanTaskLogResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitPlanTaskLogResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse, sizeof(_Xdmrtm__SubmitPlanTaskLogResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitPlanTaskLogResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__SubmitPlanTaskLogResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__SubmitPlanTaskLogResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitPlanTaskLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse, 0, sizeof(_Xdmrtm__SubmitPlanTaskLogResponse), 0, soap_copy__Xdmrtm__SubmitPlanTaskLogResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitPlanTaskLogResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitPlanTaskLogResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitPlanTaskLogResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitPlanTaskLogResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLogResponse * SOAP_FMAC4 soap_get__Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, _Xdmrtm__SubmitPlanTaskLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitPlanTaskLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitPlanTaskLogResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitPlanTaskLogResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitPlanTaskLogResponse);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitPlanTaskLogResponse);
		((_Xdmrtm__SubmitPlanTaskLogResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitPlanTaskLogResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitPlanTaskLogResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitPlanTaskLogResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitPlanTaskLogResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitPlanTaskLogResponse %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitPlanTaskLogResponse*)p = *(_Xdmrtm__SubmitPlanTaskLogResponse*)q;
}

void _Xdmrtm__SubmitPlanTaskLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_Xdmrtm__SubmitPlanTaskLog::nPlanTaskID);
	soap_default_int(soap, &this->_Xdmrtm__SubmitPlanTaskLog::nType);
	soap_default_std__string(soap, &this->_Xdmrtm__SubmitPlanTaskLog::sLog);
	/* transient soap skipped */
}

void _Xdmrtm__SubmitPlanTaskLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__SubmitPlanTaskLog::sLog);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitPlanTaskLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitPlanTaskLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitPlanTaskLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nPlanTaskID", -1, &(a->_Xdmrtm__SubmitPlanTaskLog::nPlanTaskID), ""))
		return soap->error;
	if (soap_out_int(soap, "nType", -1, &(a->_Xdmrtm__SubmitPlanTaskLog::nType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sLog", -1, &(a->_Xdmrtm__SubmitPlanTaskLog::sLog), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitPlanTaskLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitPlanTaskLog(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLog * SOAP_FMAC4 soap_in__Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const char *tag, _Xdmrtm__SubmitPlanTaskLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitPlanTaskLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog, sizeof(_Xdmrtm__SubmitPlanTaskLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitPlanTaskLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nPlanTaskID1 = 1;
	size_t soap_flag_nType1 = 1;
	size_t soap_flag_sLog1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nPlanTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nPlanTaskID", &(a->_Xdmrtm__SubmitPlanTaskLog::nPlanTaskID), "xsd:long"))
				{	soap_flag_nPlanTaskID1--;
					continue;
				}
			if (soap_flag_nType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nType", &(a->_Xdmrtm__SubmitPlanTaskLog::nType), "xsd:int"))
				{	soap_flag_nType1--;
					continue;
				}
			if (soap_flag_sLog1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sLog", &(a->_Xdmrtm__SubmitPlanTaskLog::sLog), "xsd:string"))
				{	soap_flag_sLog1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitPlanTaskLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog, 0, sizeof(_Xdmrtm__SubmitPlanTaskLog), 0, soap_copy__Xdmrtm__SubmitPlanTaskLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlanTaskID1 > 0 || soap_flag_nType1 > 0 || soap_flag_sLog1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitPlanTaskLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitPlanTaskLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitPlanTaskLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitPlanTaskLog(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLog * SOAP_FMAC4 soap_get__Xdmrtm__SubmitPlanTaskLog(struct soap *soap, _Xdmrtm__SubmitPlanTaskLog *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitPlanTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitPlanTaskLog * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitPlanTaskLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitPlanTaskLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitPlanTaskLog);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitPlanTaskLog);
		((_Xdmrtm__SubmitPlanTaskLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitPlanTaskLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitPlanTaskLog);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitPlanTaskLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitPlanTaskLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitPlanTaskLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitPlanTaskLog %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitPlanTaskLog*)p = *(_Xdmrtm__SubmitPlanTaskLog*)q;
}

void _Xdmrtm__ResumePlanTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__ResumePlanTaskResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__ResumePlanTaskResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__ResumePlanTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__ResumePlanTaskResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__ResumePlanTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__ResumePlanTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__ResumePlanTaskResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__ResumePlanTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__ResumePlanTaskResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__ResumePlanTaskResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__ResumePlanTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__ResumePlanTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTaskResponse * SOAP_FMAC4 soap_in__Xdmrtm__ResumePlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__ResumePlanTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__ResumePlanTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse, sizeof(_Xdmrtm__ResumePlanTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__ResumePlanTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__ResumePlanTaskResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__ResumePlanTaskResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__ResumePlanTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse, 0, sizeof(_Xdmrtm__ResumePlanTaskResponse), 0, soap_copy__Xdmrtm__ResumePlanTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__ResumePlanTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:ResumePlanTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__ResumePlanTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__ResumePlanTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTaskResponse * SOAP_FMAC4 soap_get__Xdmrtm__ResumePlanTaskResponse(struct soap *soap, _Xdmrtm__ResumePlanTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__ResumePlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__ResumePlanTaskResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__ResumePlanTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__ResumePlanTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__ResumePlanTaskResponse);
		if (size)
			*size = sizeof(_Xdmrtm__ResumePlanTaskResponse);
		((_Xdmrtm__ResumePlanTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__ResumePlanTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__ResumePlanTaskResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__ResumePlanTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__ResumePlanTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__ResumePlanTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__ResumePlanTaskResponse %p -> %p\n", q, p));
	*(_Xdmrtm__ResumePlanTaskResponse*)p = *(_Xdmrtm__ResumePlanTaskResponse*)q;
}

void _Xdmrtm__ResumePlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_Xdmrtm__ResumePlanTask::nPlanTaskID);
	/* transient soap skipped */
}

void _Xdmrtm__ResumePlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__ResumePlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__ResumePlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__ResumePlanTask(struct soap *soap, const char *tag, int id, const _Xdmrtm__ResumePlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nPlanTaskID", -1, &(a->_Xdmrtm__ResumePlanTask::nPlanTaskID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__ResumePlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__ResumePlanTask(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTask * SOAP_FMAC4 soap_in__Xdmrtm__ResumePlanTask(struct soap *soap, const char *tag, _Xdmrtm__ResumePlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__ResumePlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask, sizeof(_Xdmrtm__ResumePlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__ResumePlanTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nPlanTaskID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nPlanTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nPlanTaskID", &(a->_Xdmrtm__ResumePlanTask::nPlanTaskID), "xsd:long"))
				{	soap_flag_nPlanTaskID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__ResumePlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask, 0, sizeof(_Xdmrtm__ResumePlanTask), 0, soap_copy__Xdmrtm__ResumePlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlanTaskID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__ResumePlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:ResumePlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__ResumePlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__ResumePlanTask(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTask * SOAP_FMAC4 soap_get__Xdmrtm__ResumePlanTask(struct soap *soap, _Xdmrtm__ResumePlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__ResumePlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__ResumePlanTask * SOAP_FMAC2 soap_instantiate__Xdmrtm__ResumePlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__ResumePlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__ResumePlanTask);
		if (size)
			*size = sizeof(_Xdmrtm__ResumePlanTask);
		((_Xdmrtm__ResumePlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__ResumePlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__ResumePlanTask);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__ResumePlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__ResumePlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__ResumePlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__ResumePlanTask %p -> %p\n", q, p));
	*(_Xdmrtm__ResumePlanTask*)p = *(_Xdmrtm__ResumePlanTask*)q;
}

void _Xdmrtm__SuspendPlanTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__SuspendPlanTaskResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__SuspendPlanTaskResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__SuspendPlanTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__SuspendPlanTaskResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__SuspendPlanTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SuspendPlanTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__SuspendPlanTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__SuspendPlanTaskResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__SuspendPlanTaskResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SuspendPlanTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SuspendPlanTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTaskResponse * SOAP_FMAC4 soap_in__Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__SuspendPlanTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SuspendPlanTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse, sizeof(_Xdmrtm__SuspendPlanTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SuspendPlanTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__SuspendPlanTaskResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__SuspendPlanTaskResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SuspendPlanTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse, 0, sizeof(_Xdmrtm__SuspendPlanTaskResponse), 0, soap_copy__Xdmrtm__SuspendPlanTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SuspendPlanTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SuspendPlanTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SuspendPlanTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SuspendPlanTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTaskResponse * SOAP_FMAC4 soap_get__Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, _Xdmrtm__SuspendPlanTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SuspendPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SuspendPlanTaskResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SuspendPlanTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SuspendPlanTaskResponse);
		if (size)
			*size = sizeof(_Xdmrtm__SuspendPlanTaskResponse);
		((_Xdmrtm__SuspendPlanTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SuspendPlanTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SuspendPlanTaskResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SuspendPlanTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SuspendPlanTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SuspendPlanTaskResponse %p -> %p\n", q, p));
	*(_Xdmrtm__SuspendPlanTaskResponse*)p = *(_Xdmrtm__SuspendPlanTaskResponse*)q;
}

void _Xdmrtm__SuspendPlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_Xdmrtm__SuspendPlanTask::nPlanTaskID);
	/* transient soap skipped */
}

void _Xdmrtm__SuspendPlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__SuspendPlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SuspendPlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SuspendPlanTask(struct soap *soap, const char *tag, int id, const _Xdmrtm__SuspendPlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nPlanTaskID", -1, &(a->_Xdmrtm__SuspendPlanTask::nPlanTaskID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SuspendPlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SuspendPlanTask(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTask * SOAP_FMAC4 soap_in__Xdmrtm__SuspendPlanTask(struct soap *soap, const char *tag, _Xdmrtm__SuspendPlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SuspendPlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask, sizeof(_Xdmrtm__SuspendPlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SuspendPlanTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nPlanTaskID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nPlanTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nPlanTaskID", &(a->_Xdmrtm__SuspendPlanTask::nPlanTaskID), "xsd:long"))
				{	soap_flag_nPlanTaskID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SuspendPlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask, 0, sizeof(_Xdmrtm__SuspendPlanTask), 0, soap_copy__Xdmrtm__SuspendPlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlanTaskID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SuspendPlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SuspendPlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SuspendPlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SuspendPlanTask(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTask * SOAP_FMAC4 soap_get__Xdmrtm__SuspendPlanTask(struct soap *soap, _Xdmrtm__SuspendPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SuspendPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SuspendPlanTask * SOAP_FMAC2 soap_instantiate__Xdmrtm__SuspendPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SuspendPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SuspendPlanTask);
		if (size)
			*size = sizeof(_Xdmrtm__SuspendPlanTask);
		((_Xdmrtm__SuspendPlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SuspendPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SuspendPlanTask);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SuspendPlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SuspendPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SuspendPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SuspendPlanTask %p -> %p\n", q, p));
	*(_Xdmrtm__SuspendPlanTask*)p = *(_Xdmrtm__SuspendPlanTask*)q;
}

void _Xdmrtm__StopPlanTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__StopPlanTaskResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__StopPlanTaskResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__StopPlanTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__StopPlanTaskResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__StopPlanTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__StopPlanTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__StopPlanTaskResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__StopPlanTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__StopPlanTaskResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__StopPlanTaskResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__StopPlanTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__StopPlanTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTaskResponse * SOAP_FMAC4 soap_in__Xdmrtm__StopPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__StopPlanTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__StopPlanTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse, sizeof(_Xdmrtm__StopPlanTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__StopPlanTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__StopPlanTaskResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__StopPlanTaskResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__StopPlanTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse, 0, sizeof(_Xdmrtm__StopPlanTaskResponse), 0, soap_copy__Xdmrtm__StopPlanTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__StopPlanTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:StopPlanTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__StopPlanTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__StopPlanTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTaskResponse * SOAP_FMAC4 soap_get__Xdmrtm__StopPlanTaskResponse(struct soap *soap, _Xdmrtm__StopPlanTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__StopPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__StopPlanTaskResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__StopPlanTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__StopPlanTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StopPlanTaskResponse);
		if (size)
			*size = sizeof(_Xdmrtm__StopPlanTaskResponse);
		((_Xdmrtm__StopPlanTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StopPlanTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__StopPlanTaskResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__StopPlanTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__StopPlanTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__StopPlanTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__StopPlanTaskResponse %p -> %p\n", q, p));
	*(_Xdmrtm__StopPlanTaskResponse*)p = *(_Xdmrtm__StopPlanTaskResponse*)q;
}

void _Xdmrtm__StopPlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_Xdmrtm__StopPlanTask::nPlanTaskID);
	/* transient soap skipped */
}

void _Xdmrtm__StopPlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__StopPlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__StopPlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__StopPlanTask(struct soap *soap, const char *tag, int id, const _Xdmrtm__StopPlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nPlanTaskID", -1, &(a->_Xdmrtm__StopPlanTask::nPlanTaskID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__StopPlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__StopPlanTask(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTask * SOAP_FMAC4 soap_in__Xdmrtm__StopPlanTask(struct soap *soap, const char *tag, _Xdmrtm__StopPlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__StopPlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask, sizeof(_Xdmrtm__StopPlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__StopPlanTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nPlanTaskID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nPlanTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nPlanTaskID", &(a->_Xdmrtm__StopPlanTask::nPlanTaskID), "xsd:long"))
				{	soap_flag_nPlanTaskID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__StopPlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask, 0, sizeof(_Xdmrtm__StopPlanTask), 0, soap_copy__Xdmrtm__StopPlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlanTaskID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__StopPlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:StopPlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__StopPlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__StopPlanTask(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTask * SOAP_FMAC4 soap_get__Xdmrtm__StopPlanTask(struct soap *soap, _Xdmrtm__StopPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__StopPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__StopPlanTask * SOAP_FMAC2 soap_instantiate__Xdmrtm__StopPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__StopPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StopPlanTask);
		if (size)
			*size = sizeof(_Xdmrtm__StopPlanTask);
		((_Xdmrtm__StopPlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StopPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__StopPlanTask);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__StopPlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__StopPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__StopPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__StopPlanTask %p -> %p\n", q, p));
	*(_Xdmrtm__StopPlanTask*)p = *(_Xdmrtm__StopPlanTask*)q;
}

void _Xdmrtm__StartPlanTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__StartPlanTaskResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__StartPlanTaskResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__StartPlanTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__StartPlanTaskResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__StartPlanTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__StartPlanTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__StartPlanTaskResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__StartPlanTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__StartPlanTaskResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__StartPlanTaskResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__StartPlanTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__StartPlanTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTaskResponse * SOAP_FMAC4 soap_in__Xdmrtm__StartPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__StartPlanTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__StartPlanTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse, sizeof(_Xdmrtm__StartPlanTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__StartPlanTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__StartPlanTaskResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__StartPlanTaskResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__StartPlanTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse, 0, sizeof(_Xdmrtm__StartPlanTaskResponse), 0, soap_copy__Xdmrtm__StartPlanTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__StartPlanTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:StartPlanTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__StartPlanTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__StartPlanTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTaskResponse * SOAP_FMAC4 soap_get__Xdmrtm__StartPlanTaskResponse(struct soap *soap, _Xdmrtm__StartPlanTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__StartPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__StartPlanTaskResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__StartPlanTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__StartPlanTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StartPlanTaskResponse);
		if (size)
			*size = sizeof(_Xdmrtm__StartPlanTaskResponse);
		((_Xdmrtm__StartPlanTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StartPlanTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__StartPlanTaskResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__StartPlanTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__StartPlanTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__StartPlanTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__StartPlanTaskResponse %p -> %p\n", q, p));
	*(_Xdmrtm__StartPlanTaskResponse*)p = *(_Xdmrtm__StartPlanTaskResponse*)q;
}

void _Xdmrtm__StartPlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_Xdmrtm__StartPlanTask::nPlanTaskID);
	/* transient soap skipped */
}

void _Xdmrtm__StartPlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__StartPlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__StartPlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__StartPlanTask(struct soap *soap, const char *tag, int id, const _Xdmrtm__StartPlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nPlanTaskID", -1, &(a->_Xdmrtm__StartPlanTask::nPlanTaskID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__StartPlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__StartPlanTask(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTask * SOAP_FMAC4 soap_in__Xdmrtm__StartPlanTask(struct soap *soap, const char *tag, _Xdmrtm__StartPlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__StartPlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask, sizeof(_Xdmrtm__StartPlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__StartPlanTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nPlanTaskID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nPlanTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nPlanTaskID", &(a->_Xdmrtm__StartPlanTask::nPlanTaskID), "xsd:long"))
				{	soap_flag_nPlanTaskID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__StartPlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask, 0, sizeof(_Xdmrtm__StartPlanTask), 0, soap_copy__Xdmrtm__StartPlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlanTaskID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__StartPlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:StartPlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__StartPlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__StartPlanTask(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTask * SOAP_FMAC4 soap_get__Xdmrtm__StartPlanTask(struct soap *soap, _Xdmrtm__StartPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__StartPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__StartPlanTask * SOAP_FMAC2 soap_instantiate__Xdmrtm__StartPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__StartPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StartPlanTask);
		if (size)
			*size = sizeof(_Xdmrtm__StartPlanTask);
		((_Xdmrtm__StartPlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__StartPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__StartPlanTask);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__StartPlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__StartPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__StartPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__StartPlanTask %p -> %p\n", q, p));
	*(_Xdmrtm__StartPlanTask*)p = *(_Xdmrtm__StartPlanTask*)q;
}

void _Xdmrtm__QueryCurExecPlanTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryCurExecPlanTaskResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryCurExecPlanTaskResponse::sResult);
	this->_Xdmrtm__QueryCurExecPlanTaskResponse::PlanTaskArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryCurExecPlanTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryCurExecPlanTaskResponse::sResult);
	soap_serialize_PointerToXdmrtm__PlanTaskArray(soap, &this->_Xdmrtm__QueryCurExecPlanTaskResponse::PlanTaskArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryCurExecPlanTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryCurExecPlanTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryCurExecPlanTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryCurExecPlanTaskResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryCurExecPlanTaskResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryCurExecPlanTaskResponse::PlanTaskArray)
	{	if (soap_out_PointerToXdmrtm__PlanTaskArray(soap, "PlanTaskArray", -1, &a->_Xdmrtm__QueryCurExecPlanTaskResponse::PlanTaskArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "PlanTaskArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryCurExecPlanTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryCurExecPlanTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryCurExecPlanTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse, sizeof(_Xdmrtm__QueryCurExecPlanTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryCurExecPlanTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_PlanTaskArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryCurExecPlanTaskResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryCurExecPlanTaskResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_PlanTaskArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__PlanTaskArray(soap, "PlanTaskArray", &(a->_Xdmrtm__QueryCurExecPlanTaskResponse::PlanTaskArray), "Xdmrtm:PlanTaskArray"))
				{	soap_flag_PlanTaskArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryCurExecPlanTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse, 0, sizeof(_Xdmrtm__QueryCurExecPlanTaskResponse), 0, soap_copy__Xdmrtm__QueryCurExecPlanTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_PlanTaskArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryCurExecPlanTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryCurExecPlanTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryCurExecPlanTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryCurExecPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryCurExecPlanTaskResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryCurExecPlanTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTaskResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryCurExecPlanTaskResponse);
		((_Xdmrtm__QueryCurExecPlanTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryCurExecPlanTaskResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryCurExecPlanTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryCurExecPlanTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryCurExecPlanTaskResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryCurExecPlanTaskResponse*)p = *(_Xdmrtm__QueryCurExecPlanTaskResponse*)q;
}

void _Xdmrtm__QueryCurExecPlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryCurExecPlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryCurExecPlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryCurExecPlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryCurExecPlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryCurExecPlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryCurExecPlanTask(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTask * SOAP_FMAC4 soap_in__Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryCurExecPlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask, sizeof(_Xdmrtm__QueryCurExecPlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryCurExecPlanTask *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryCurExecPlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask, 0, sizeof(_Xdmrtm__QueryCurExecPlanTask), 0, soap_copy__Xdmrtm__QueryCurExecPlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryCurExecPlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryCurExecPlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryCurExecPlanTask(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTask * SOAP_FMAC4 soap_get__Xdmrtm__QueryCurExecPlanTask(struct soap *soap, _Xdmrtm__QueryCurExecPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryCurExecPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryCurExecPlanTask * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryCurExecPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryCurExecPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTask);
		if (size)
			*size = sizeof(_Xdmrtm__QueryCurExecPlanTask);
		((_Xdmrtm__QueryCurExecPlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryCurExecPlanTask);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryCurExecPlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryCurExecPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryCurExecPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryCurExecPlanTask %p -> %p\n", q, p));
	*(_Xdmrtm__QueryCurExecPlanTask*)p = *(_Xdmrtm__QueryCurExecPlanTask*)q;
}

void _Xdmrtm__QueryPlanTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryPlanTaskResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryPlanTaskResponse::sResult);
	this->_Xdmrtm__QueryPlanTaskResponse::PlanTask = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryPlanTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryPlanTaskResponse::sResult);
	soap_serialize_PointerToXdmrtm__PlanTask(soap, &this->_Xdmrtm__QueryPlanTaskResponse::PlanTask);
	/* transient soap skipped */
}

int _Xdmrtm__QueryPlanTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryPlanTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryPlanTaskResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryPlanTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryPlanTaskResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryPlanTaskResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryPlanTaskResponse::PlanTask)
	{	if (soap_out_PointerToXdmrtm__PlanTask(soap, "PlanTask", -1, &a->_Xdmrtm__QueryPlanTaskResponse::PlanTask, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "PlanTask"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryPlanTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryPlanTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTaskResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryPlanTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryPlanTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse, sizeof(_Xdmrtm__QueryPlanTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryPlanTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_PlanTask1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryPlanTaskResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryPlanTaskResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_PlanTask1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__PlanTask(soap, "PlanTask", &(a->_Xdmrtm__QueryPlanTaskResponse::PlanTask), "Xdmrtm:PlanTask"))
				{	soap_flag_PlanTask1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryPlanTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse, 0, sizeof(_Xdmrtm__QueryPlanTaskResponse), 0, soap_copy__Xdmrtm__QueryPlanTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_PlanTask1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryPlanTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryPlanTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryPlanTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryPlanTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTaskResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryPlanTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryPlanTaskResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryPlanTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryPlanTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryPlanTaskResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryPlanTaskResponse);
		((_Xdmrtm__QueryPlanTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryPlanTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryPlanTaskResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryPlanTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryPlanTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryPlanTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryPlanTaskResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryPlanTaskResponse*)p = *(_Xdmrtm__QueryPlanTaskResponse*)q;
}

void _Xdmrtm__QueryPlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->_Xdmrtm__QueryPlanTask::nPlanTaskID);
	/* transient soap skipped */
}

void _Xdmrtm__QueryPlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryPlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryPlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryPlanTask(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryPlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nPlanTaskID", -1, &(a->_Xdmrtm__QueryPlanTask::nPlanTaskID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryPlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryPlanTask(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTask * SOAP_FMAC4 soap_in__Xdmrtm__QueryPlanTask(struct soap *soap, const char *tag, _Xdmrtm__QueryPlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryPlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask, sizeof(_Xdmrtm__QueryPlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryPlanTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nPlanTaskID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nPlanTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nPlanTaskID", &(a->_Xdmrtm__QueryPlanTask::nPlanTaskID), "xsd:long"))
				{	soap_flag_nPlanTaskID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryPlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask, 0, sizeof(_Xdmrtm__QueryPlanTask), 0, soap_copy__Xdmrtm__QueryPlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nPlanTaskID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryPlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryPlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryPlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryPlanTask(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTask * SOAP_FMAC4 soap_get__Xdmrtm__QueryPlanTask(struct soap *soap, _Xdmrtm__QueryPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryPlanTask * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryPlanTask);
		if (size)
			*size = sizeof(_Xdmrtm__QueryPlanTask);
		((_Xdmrtm__QueryPlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryPlanTask);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryPlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryPlanTask %p -> %p\n", q, p));
	*(_Xdmrtm__QueryPlanTask*)p = *(_Xdmrtm__QueryPlanTask*)q;
}

void _Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryCurExecPlanTaskIDResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryCurExecPlanTaskIDResponse::sResult);
	this->_Xdmrtm__QueryCurExecPlanTaskIDResponse::PlanTaskIDArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryCurExecPlanTaskIDResponse::sResult);
	soap_serialize_PointerToXdmrtm__PlanTaskIDArray(soap, &this->_Xdmrtm__QueryCurExecPlanTaskIDResponse::PlanTaskIDArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryCurExecPlanTaskIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::PlanTaskIDArray)
	{	if (soap_out_PointerToXdmrtm__PlanTaskIDArray(soap, "PlanTaskIDArray", -1, &a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::PlanTaskIDArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "PlanTaskIDArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskIDResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTaskIDResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryCurExecPlanTaskIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse, sizeof(_Xdmrtm__QueryCurExecPlanTaskIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryCurExecPlanTaskIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_PlanTaskIDArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_PlanTaskIDArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__PlanTaskIDArray(soap, "PlanTaskIDArray", &(a->_Xdmrtm__QueryCurExecPlanTaskIDResponse::PlanTaskIDArray), "Xdmrtm:PlanTaskIDArray"))
				{	soap_flag_PlanTaskIDArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryCurExecPlanTaskIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse, 0, sizeof(_Xdmrtm__QueryCurExecPlanTaskIDResponse), 0, soap_copy__Xdmrtm__QueryCurExecPlanTaskIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_PlanTaskIDArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTaskIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskIDResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryCurExecPlanTaskIDResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryCurExecPlanTaskIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTaskIDResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryCurExecPlanTaskIDResponse);
		((_Xdmrtm__QueryCurExecPlanTaskIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTaskIDResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryCurExecPlanTaskIDResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryCurExecPlanTaskIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryCurExecPlanTaskIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryCurExecPlanTaskIDResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryCurExecPlanTaskIDResponse*)p = *(_Xdmrtm__QueryCurExecPlanTaskIDResponse*)q;
}

void _Xdmrtm__QueryCurExecPlanTaskID::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryCurExecPlanTaskID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryCurExecPlanTaskID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryCurExecPlanTaskID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryCurExecPlanTaskID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryCurExecPlanTaskID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryCurExecPlanTaskID(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskID * SOAP_FMAC4 soap_in__Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTaskID *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryCurExecPlanTaskID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID, sizeof(_Xdmrtm__QueryCurExecPlanTaskID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryCurExecPlanTaskID *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryCurExecPlanTaskID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID, 0, sizeof(_Xdmrtm__QueryCurExecPlanTaskID), 0, soap_copy__Xdmrtm__QueryCurExecPlanTaskID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryCurExecPlanTaskID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTaskID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryCurExecPlanTaskID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryCurExecPlanTaskID(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskID * SOAP_FMAC4 soap_get__Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskID *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryCurExecPlanTaskID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryCurExecPlanTaskID * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryCurExecPlanTaskID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTaskID);
		if (size)
			*size = sizeof(_Xdmrtm__QueryCurExecPlanTaskID);
		((_Xdmrtm__QueryCurExecPlanTaskID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryCurExecPlanTaskID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryCurExecPlanTaskID);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryCurExecPlanTaskID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryCurExecPlanTaskID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryCurExecPlanTaskID %p -> %p\n", q, p));
	*(_Xdmrtm__QueryCurExecPlanTaskID*)p = *(_Xdmrtm__QueryCurExecPlanTaskID*)q;
}

void _Xdmrtm__QueryFreqLayoutResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryFreqLayoutResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryFreqLayoutResponse::sResult);
	this->_Xdmrtm__QueryFreqLayoutResponse::FreqLayoutArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryFreqLayoutResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryFreqLayoutResponse::sResult);
	soap_serialize_PointerToXdmrtm__FreqLayoutArray(soap, &this->_Xdmrtm__QueryFreqLayoutResponse::FreqLayoutArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryFreqLayoutResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryFreqLayoutResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryFreqLayoutResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryFreqLayoutResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryFreqLayoutResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryFreqLayoutResponse::FreqLayoutArray)
	{	if (soap_out_PointerToXdmrtm__FreqLayoutArray(soap, "FreqLayoutArray", -1, &a->_Xdmrtm__QueryFreqLayoutResponse::FreqLayoutArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "FreqLayoutArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryFreqLayoutResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryFreqLayoutResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayoutResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryFreqLayoutResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryFreqLayoutResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse, sizeof(_Xdmrtm__QueryFreqLayoutResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryFreqLayoutResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_FreqLayoutArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryFreqLayoutResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryFreqLayoutResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_FreqLayoutArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__FreqLayoutArray(soap, "FreqLayoutArray", &(a->_Xdmrtm__QueryFreqLayoutResponse::FreqLayoutArray), "Xdmrtm:FreqLayoutArray"))
				{	soap_flag_FreqLayoutArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryFreqLayoutResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse, 0, sizeof(_Xdmrtm__QueryFreqLayoutResponse), 0, soap_copy__Xdmrtm__QueryFreqLayoutResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_FreqLayoutArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryFreqLayoutResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryFreqLayoutResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryFreqLayoutResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryFreqLayoutResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayoutResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, _Xdmrtm__QueryFreqLayoutResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryFreqLayoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryFreqLayoutResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryFreqLayoutResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryFreqLayoutResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryFreqLayoutResponse);
		((_Xdmrtm__QueryFreqLayoutResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryFreqLayoutResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryFreqLayoutResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryFreqLayoutResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryFreqLayoutResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryFreqLayoutResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryFreqLayoutResponse*)p = *(_Xdmrtm__QueryFreqLayoutResponse*)q;
}

void _Xdmrtm__QueryFreqLayout::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryFreqLayout::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryFreqLayout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryFreqLayout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryFreqLayout(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryFreqLayout *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryFreqLayout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryFreqLayout(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayout * SOAP_FMAC4 soap_in__Xdmrtm__QueryFreqLayout(struct soap *soap, const char *tag, _Xdmrtm__QueryFreqLayout *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryFreqLayout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout, sizeof(_Xdmrtm__QueryFreqLayout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryFreqLayout *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryFreqLayout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout, 0, sizeof(_Xdmrtm__QueryFreqLayout), 0, soap_copy__Xdmrtm__QueryFreqLayout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryFreqLayout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryFreqLayout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryFreqLayout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryFreqLayout(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayout * SOAP_FMAC4 soap_get__Xdmrtm__QueryFreqLayout(struct soap *soap, _Xdmrtm__QueryFreqLayout *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryFreqLayout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryFreqLayout * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryFreqLayout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryFreqLayout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryFreqLayout);
		if (size)
			*size = sizeof(_Xdmrtm__QueryFreqLayout);
		((_Xdmrtm__QueryFreqLayout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryFreqLayout[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryFreqLayout);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryFreqLayout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryFreqLayout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryFreqLayout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryFreqLayout %p -> %p\n", q, p));
	*(_Xdmrtm__QueryFreqLayout*)p = *(_Xdmrtm__QueryFreqLayout*)q;
}

void _Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::sResult);
	this->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::DeviceUseingInfoArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::sResult);
	soap_serialize_PointerToXdmrtm__DeviceUseingInfoArray(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::DeviceUseingInfoArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceUseingInfoByUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::DeviceUseingInfoArray)
	{	if (soap_out_PointerToXdmrtm__DeviceUseingInfoArray(soap, "DeviceUseingInfoArray", -1, &a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::DeviceUseingInfoArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceUseingInfoArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUserResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceUseingInfoByUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceUseingInfoByUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_DeviceUseingInfoArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_DeviceUseingInfoArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceUseingInfoArray(soap, "DeviceUseingInfoArray", &(a->_Xdmrtm__QueryDeviceUseingInfoByUserResponse::DeviceUseingInfoArray), "Xdmrtm:DeviceUseingInfoArray"))
				{	soap_flag_DeviceUseingInfoArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceUseingInfoByUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse, 0, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUserResponse), 0, soap_copy__Xdmrtm__QueryDeviceUseingInfoByUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_DeviceUseingInfoArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUserResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceUseingInfoByUserResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByUserResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceUseingInfoByUserResponse);
		((_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByUserResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceUseingInfoByUserResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceUseingInfoByUserResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)p = *(_Xdmrtm__QueryDeviceUseingInfoByUserResponse*)q;
}

void _Xdmrtm__QueryDeviceUseingInfoByUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByUser::sUser);
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceUseingInfoByUser::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByUser::sUser);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceUseingInfoByUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceUseingInfoByUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser), type))
		return soap->error;
	if (soap_out_std__string(soap, "sUser", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByUser::sUser), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceUseingInfoByUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUser * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceUseingInfoByUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceUseingInfoByUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sUser1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUser", &(a->_Xdmrtm__QueryDeviceUseingInfoByUser::sUser), "xsd:string"))
				{	soap_flag_sUser1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceUseingInfoByUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser, 0, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUser), 0, soap_copy__Xdmrtm__QueryDeviceUseingInfoByUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sUser1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceUseingInfoByUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceUseingInfoByUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceUseingInfoByUser(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUser * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceUseingInfoByUser * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByUser);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceUseingInfoByUser);
		((_Xdmrtm__QueryDeviceUseingInfoByUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceUseingInfoByUser);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceUseingInfoByUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceUseingInfoByUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceUseingInfoByUser %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceUseingInfoByUser*)p = *(_Xdmrtm__QueryDeviceUseingInfoByUser*)q;
}

void _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::sResult);
	this->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::DeviceUseingInfoArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::sResult);
	soap_serialize_PointerToXdmrtm__DeviceUseingInfoArray(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::DeviceUseingInfoArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::DeviceUseingInfoArray)
	{	if (soap_out_PointerToXdmrtm__DeviceUseingInfoArray(soap, "DeviceUseingInfoArray", -1, &a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::DeviceUseingInfoArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceUseingInfoArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_DeviceUseingInfoArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_DeviceUseingInfoArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceUseingInfoArray(soap, "DeviceUseingInfoArray", &(a->_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::DeviceUseingInfoArray), "Xdmrtm:DeviceUseingInfoArray"))
				{	soap_flag_DeviceUseingInfoArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse, 0, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse), 0, soap_copy__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_DeviceUseingInfoArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByDeviceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
		((_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)p = *(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse*)q;
}

void _Xdmrtm__QueryDeviceUseingInfoByDevice::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDevice::sStationNO);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDevice::sDeviceNO);
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceUseingInfoByDevice::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDevice::sStationNO);
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoByDevice::sDeviceNO);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceUseingInfoByDevice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceUseingInfoByDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByDevice::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoByDevice::sDeviceNO), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceUseingInfoByDevice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDevice * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByDevice *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceUseingInfoByDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceUseingInfoByDevice *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->_Xdmrtm__QueryDeviceUseingInfoByDevice::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->_Xdmrtm__QueryDeviceUseingInfoByDevice::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceUseingInfoByDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice, 0, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDevice), 0, soap_copy__Xdmrtm__QueryDeviceUseingInfoByDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNO1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceUseingInfoByDevice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByDevice", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceUseingInfoByDevice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDevice * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceUseingInfoByDevice * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByDevice);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceUseingInfoByDevice);
		((_Xdmrtm__QueryDeviceUseingInfoByDevice*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoByDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceUseingInfoByDevice);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceUseingInfoByDevice*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceUseingInfoByDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceUseingInfoByDevice %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceUseingInfoByDevice*)p = *(_Xdmrtm__QueryDeviceUseingInfoByDevice*)q;
}

void _Xdmrtm__QueryDeviceUseingInfoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryDeviceUseingInfoResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoResponse::sResult);
	this->_Xdmrtm__QueryDeviceUseingInfoResponse::DeviceUseingInfoArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceUseingInfoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceUseingInfoResponse::sResult);
	soap_serialize_PointerToXdmrtm__DeviceUseingInfoArray(soap, &this->_Xdmrtm__QueryDeviceUseingInfoResponse::DeviceUseingInfoArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceUseingInfoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceUseingInfoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceUseingInfoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryDeviceUseingInfoResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryDeviceUseingInfoResponse::DeviceUseingInfoArray)
	{	if (soap_out_PointerToXdmrtm__DeviceUseingInfoArray(soap, "DeviceUseingInfoArray", -1, &a->_Xdmrtm__QueryDeviceUseingInfoResponse::DeviceUseingInfoArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceUseingInfoArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceUseingInfoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceUseingInfoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceUseingInfoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse, sizeof(_Xdmrtm__QueryDeviceUseingInfoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceUseingInfoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_DeviceUseingInfoArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryDeviceUseingInfoResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryDeviceUseingInfoResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_DeviceUseingInfoArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceUseingInfoArray(soap, "DeviceUseingInfoArray", &(a->_Xdmrtm__QueryDeviceUseingInfoResponse::DeviceUseingInfoArray), "Xdmrtm:DeviceUseingInfoArray"))
				{	soap_flag_DeviceUseingInfoArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceUseingInfoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse, 0, sizeof(_Xdmrtm__QueryDeviceUseingInfoResponse), 0, soap_copy__Xdmrtm__QueryDeviceUseingInfoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_DeviceUseingInfoArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceUseingInfoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceUseingInfoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceUseingInfoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceUseingInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceUseingInfoResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceUseingInfoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceUseingInfoResponse);
		((_Xdmrtm__QueryDeviceUseingInfoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceUseingInfoResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceUseingInfoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceUseingInfoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceUseingInfoResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceUseingInfoResponse*)p = *(_Xdmrtm__QueryDeviceUseingInfoResponse*)q;
}

void _Xdmrtm__QueryDeviceUseingInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceUseingInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceUseingInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceUseingInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceUseingInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceUseingInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceUseingInfo(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfo * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceUseingInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo, sizeof(_Xdmrtm__QueryDeviceUseingInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceUseingInfo *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceUseingInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo, 0, sizeof(_Xdmrtm__QueryDeviceUseingInfo), 0, soap_copy__Xdmrtm__QueryDeviceUseingInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceUseingInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceUseingInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceUseingInfo(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfo * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceUseingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceUseingInfo * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceUseingInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfo);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceUseingInfo);
		((_Xdmrtm__QueryDeviceUseingInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceUseingInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceUseingInfo);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceUseingInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceUseingInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceUseingInfo %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceUseingInfo*)p = *(_Xdmrtm__QueryDeviceUseingInfo*)q;
}

void _Xdmrtm__SubmitDeviceUsedLogResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__SubmitDeviceUsedLogResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__SubmitDeviceUsedLogResponse::sResult);
	/* transient soap skipped */
}

void _Xdmrtm__SubmitDeviceUsedLogResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__SubmitDeviceUsedLogResponse::sResult);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitDeviceUsedLogResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitDeviceUsedLogResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitDeviceUsedLogResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__SubmitDeviceUsedLogResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__SubmitDeviceUsedLogResponse::sResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitDeviceUsedLogResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitDeviceUsedLogResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLogResponse * SOAP_FMAC4 soap_in__Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitDeviceUsedLogResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitDeviceUsedLogResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse, sizeof(_Xdmrtm__SubmitDeviceUsedLogResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitDeviceUsedLogResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__SubmitDeviceUsedLogResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__SubmitDeviceUsedLogResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitDeviceUsedLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse, 0, sizeof(_Xdmrtm__SubmitDeviceUsedLogResponse), 0, soap_copy__Xdmrtm__SubmitDeviceUsedLogResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitDeviceUsedLogResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitDeviceUsedLogResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitDeviceUsedLogResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitDeviceUsedLogResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLogResponse * SOAP_FMAC4 soap_get__Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitDeviceUsedLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitDeviceUsedLogResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitDeviceUsedLogResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitDeviceUsedLogResponse);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitDeviceUsedLogResponse);
		((_Xdmrtm__SubmitDeviceUsedLogResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitDeviceUsedLogResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitDeviceUsedLogResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitDeviceUsedLogResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitDeviceUsedLogResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitDeviceUsedLogResponse %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitDeviceUsedLogResponse*)p = *(_Xdmrtm__SubmitDeviceUsedLogResponse*)q;
}

void _Xdmrtm__SubmitDeviceUsedLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Xdmrtm__SubmitDeviceUsedLog::DeviceUsedLog = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__SubmitDeviceUsedLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToXdmrtm__DeviceUsedLog(soap, &this->_Xdmrtm__SubmitDeviceUsedLog::DeviceUsedLog);
	/* transient soap skipped */
}

int _Xdmrtm__SubmitDeviceUsedLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__SubmitDeviceUsedLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const char *tag, int id, const _Xdmrtm__SubmitDeviceUsedLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog), type))
		return soap->error;
	if (a->_Xdmrtm__SubmitDeviceUsedLog::DeviceUsedLog)
	{	if (soap_out_PointerToXdmrtm__DeviceUsedLog(soap, "DeviceUsedLog", -1, &a->_Xdmrtm__SubmitDeviceUsedLog::DeviceUsedLog, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceUsedLog"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__SubmitDeviceUsedLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__SubmitDeviceUsedLog(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLog * SOAP_FMAC4 soap_in__Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const char *tag, _Xdmrtm__SubmitDeviceUsedLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__SubmitDeviceUsedLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog, sizeof(_Xdmrtm__SubmitDeviceUsedLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__SubmitDeviceUsedLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DeviceUsedLog1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DeviceUsedLog1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceUsedLog(soap, "DeviceUsedLog", &(a->_Xdmrtm__SubmitDeviceUsedLog::DeviceUsedLog), "Xdmrtm:DeviceUsedLog"))
				{	soap_flag_DeviceUsedLog1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__SubmitDeviceUsedLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog, 0, sizeof(_Xdmrtm__SubmitDeviceUsedLog), 0, soap_copy__Xdmrtm__SubmitDeviceUsedLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DeviceUsedLog1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__SubmitDeviceUsedLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:SubmitDeviceUsedLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__SubmitDeviceUsedLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__SubmitDeviceUsedLog(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLog * SOAP_FMAC4 soap_get__Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLog *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__SubmitDeviceUsedLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__SubmitDeviceUsedLog * SOAP_FMAC2 soap_instantiate__Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__SubmitDeviceUsedLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitDeviceUsedLog);
		if (size)
			*size = sizeof(_Xdmrtm__SubmitDeviceUsedLog);
		((_Xdmrtm__SubmitDeviceUsedLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__SubmitDeviceUsedLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__SubmitDeviceUsedLog);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__SubmitDeviceUsedLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__SubmitDeviceUsedLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__SubmitDeviceUsedLog %p -> %p\n", q, p));
	*(_Xdmrtm__SubmitDeviceUsedLog*)p = *(_Xdmrtm__SubmitDeviceUsedLog*)q;
}

void _Xdmrtm__AllocLoadbalancingServerResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__AllocLoadbalancingServerResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__AllocLoadbalancingServerResponse::sResult);
	this->_Xdmrtm__AllocLoadbalancingServerResponse::LoadBalancingServer = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__AllocLoadbalancingServerResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__AllocLoadbalancingServerResponse::sResult);
	soap_serialize_PointerToXdmrtm__LoadbalancingServer(soap, &this->_Xdmrtm__AllocLoadbalancingServerResponse::LoadBalancingServer);
	/* transient soap skipped */
}

int _Xdmrtm__AllocLoadbalancingServerResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__AllocLoadbalancingServerResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__AllocLoadbalancingServerResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__AllocLoadbalancingServerResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__AllocLoadbalancingServerResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__AllocLoadbalancingServerResponse::LoadBalancingServer)
	{	if (soap_out_PointerToXdmrtm__LoadbalancingServer(soap, "LoadBalancingServer", -1, &a->_Xdmrtm__AllocLoadbalancingServerResponse::LoadBalancingServer, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "LoadBalancingServer"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__AllocLoadbalancingServerResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__AllocLoadbalancingServerResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServerResponse * SOAP_FMAC4 soap_in__Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, const char *tag, _Xdmrtm__AllocLoadbalancingServerResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__AllocLoadbalancingServerResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse, sizeof(_Xdmrtm__AllocLoadbalancingServerResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__AllocLoadbalancingServerResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_LoadBalancingServer1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__AllocLoadbalancingServerResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__AllocLoadbalancingServerResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_LoadBalancingServer1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__LoadbalancingServer(soap, "LoadBalancingServer", &(a->_Xdmrtm__AllocLoadbalancingServerResponse::LoadBalancingServer), "Xdmrtm:LoadbalancingServer"))
				{	soap_flag_LoadBalancingServer1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__AllocLoadbalancingServerResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse, 0, sizeof(_Xdmrtm__AllocLoadbalancingServerResponse), 0, soap_copy__Xdmrtm__AllocLoadbalancingServerResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_LoadBalancingServer1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__AllocLoadbalancingServerResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:AllocLoadbalancingServerResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__AllocLoadbalancingServerResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__AllocLoadbalancingServerResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServerResponse * SOAP_FMAC4 soap_get__Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, _Xdmrtm__AllocLoadbalancingServerResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__AllocLoadbalancingServerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__AllocLoadbalancingServerResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__AllocLoadbalancingServerResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__AllocLoadbalancingServerResponse);
		if (size)
			*size = sizeof(_Xdmrtm__AllocLoadbalancingServerResponse);
		((_Xdmrtm__AllocLoadbalancingServerResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__AllocLoadbalancingServerResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__AllocLoadbalancingServerResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__AllocLoadbalancingServerResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__AllocLoadbalancingServerResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__AllocLoadbalancingServerResponse %p -> %p\n", q, p));
	*(_Xdmrtm__AllocLoadbalancingServerResponse*)p = *(_Xdmrtm__AllocLoadbalancingServerResponse*)q;
}

void _Xdmrtm__AllocLoadbalancingServer::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__AllocLoadbalancingServer::sRegionNo);
	/* transient soap skipped */
}

void _Xdmrtm__AllocLoadbalancingServer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__AllocLoadbalancingServer::sRegionNo);
	/* transient soap skipped */
}

int _Xdmrtm__AllocLoadbalancingServer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__AllocLoadbalancingServer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const char *tag, int id, const _Xdmrtm__AllocLoadbalancingServer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer), type))
		return soap->error;
	if (soap_out_std__string(soap, "sRegionNo", -1, &(a->_Xdmrtm__AllocLoadbalancingServer::sRegionNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__AllocLoadbalancingServer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__AllocLoadbalancingServer(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServer * SOAP_FMAC4 soap_in__Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const char *tag, _Xdmrtm__AllocLoadbalancingServer *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__AllocLoadbalancingServer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer, sizeof(_Xdmrtm__AllocLoadbalancingServer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__AllocLoadbalancingServer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sRegionNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sRegionNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sRegionNo", &(a->_Xdmrtm__AllocLoadbalancingServer::sRegionNo), "xsd:string"))
				{	soap_flag_sRegionNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__AllocLoadbalancingServer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer, 0, sizeof(_Xdmrtm__AllocLoadbalancingServer), 0, soap_copy__Xdmrtm__AllocLoadbalancingServer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sRegionNo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__AllocLoadbalancingServer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:AllocLoadbalancingServer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__AllocLoadbalancingServer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__AllocLoadbalancingServer(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServer * SOAP_FMAC4 soap_get__Xdmrtm__AllocLoadbalancingServer(struct soap *soap, _Xdmrtm__AllocLoadbalancingServer *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__AllocLoadbalancingServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__AllocLoadbalancingServer * SOAP_FMAC2 soap_instantiate__Xdmrtm__AllocLoadbalancingServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__AllocLoadbalancingServer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__AllocLoadbalancingServer);
		if (size)
			*size = sizeof(_Xdmrtm__AllocLoadbalancingServer);
		((_Xdmrtm__AllocLoadbalancingServer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__AllocLoadbalancingServer[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__AllocLoadbalancingServer);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__AllocLoadbalancingServer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__AllocLoadbalancingServer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__AllocLoadbalancingServer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__AllocLoadbalancingServer %p -> %p\n", q, p));
	*(_Xdmrtm__AllocLoadbalancingServer*)p = *(_Xdmrtm__AllocLoadbalancingServer*)q;
}

void _Xdmrtm__QueryUserLicenseStationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryUserLicenseStationResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryUserLicenseStationResponse::sResult);
	this->_Xdmrtm__QueryUserLicenseStationResponse::StationArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryUserLicenseStationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryUserLicenseStationResponse::sResult);
	soap_serialize_PointerToXdmrtm__LicenseStationArray(soap, &this->_Xdmrtm__QueryUserLicenseStationResponse::StationArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryUserLicenseStationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryUserLicenseStationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryUserLicenseStationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryUserLicenseStationResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryUserLicenseStationResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryUserLicenseStationResponse::StationArray)
	{	if (soap_out_PointerToXdmrtm__LicenseStationArray(soap, "StationArray", -1, &a->_Xdmrtm__QueryUserLicenseStationResponse::StationArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "StationArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryUserLicenseStationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryUserLicenseStationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStationResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryUserLicenseStationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryUserLicenseStationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse, sizeof(_Xdmrtm__QueryUserLicenseStationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryUserLicenseStationResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_StationArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryUserLicenseStationResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryUserLicenseStationResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_StationArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__LicenseStationArray(soap, "StationArray", &(a->_Xdmrtm__QueryUserLicenseStationResponse::StationArray), "Xdmrtm:LicenseStationArray"))
				{	soap_flag_StationArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryUserLicenseStationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse, 0, sizeof(_Xdmrtm__QueryUserLicenseStationResponse), 0, soap_copy__Xdmrtm__QueryUserLicenseStationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_StationArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryUserLicenseStationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryUserLicenseStationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryUserLicenseStationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryUserLicenseStationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStationResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, _Xdmrtm__QueryUserLicenseStationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryUserLicenseStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryUserLicenseStationResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryUserLicenseStationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryUserLicenseStationResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryUserLicenseStationResponse);
		((_Xdmrtm__QueryUserLicenseStationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryUserLicenseStationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryUserLicenseStationResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryUserLicenseStationResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryUserLicenseStationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryUserLicenseStationResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryUserLicenseStationResponse*)p = *(_Xdmrtm__QueryUserLicenseStationResponse*)q;
}

void _Xdmrtm__QueryUserLicenseStation::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Xdmrtm__QueryUserLicenseStation::sUser);
	/* transient soap skipped */
}

void _Xdmrtm__QueryUserLicenseStation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryUserLicenseStation::sUser);
	/* transient soap skipped */
}

int _Xdmrtm__QueryUserLicenseStation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryUserLicenseStation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryUserLicenseStation(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryUserLicenseStation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation), type))
		return soap->error;
	if (soap_out_std__string(soap, "sUser", -1, &(a->_Xdmrtm__QueryUserLicenseStation::sUser), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryUserLicenseStation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryUserLicenseStation(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStation * SOAP_FMAC4 soap_in__Xdmrtm__QueryUserLicenseStation(struct soap *soap, const char *tag, _Xdmrtm__QueryUserLicenseStation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryUserLicenseStation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation, sizeof(_Xdmrtm__QueryUserLicenseStation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryUserLicenseStation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sUser1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUser", &(a->_Xdmrtm__QueryUserLicenseStation::sUser), "xsd:string"))
				{	soap_flag_sUser1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryUserLicenseStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation, 0, sizeof(_Xdmrtm__QueryUserLicenseStation), 0, soap_copy__Xdmrtm__QueryUserLicenseStation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sUser1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryUserLicenseStation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryUserLicenseStation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryUserLicenseStation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryUserLicenseStation(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStation * SOAP_FMAC4 soap_get__Xdmrtm__QueryUserLicenseStation(struct soap *soap, _Xdmrtm__QueryUserLicenseStation *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryUserLicenseStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryUserLicenseStation * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryUserLicenseStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryUserLicenseStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryUserLicenseStation);
		if (size)
			*size = sizeof(_Xdmrtm__QueryUserLicenseStation);
		((_Xdmrtm__QueryUserLicenseStation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryUserLicenseStation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryUserLicenseStation);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryUserLicenseStation*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryUserLicenseStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryUserLicenseStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryUserLicenseStation %p -> %p\n", q, p));
	*(_Xdmrtm__QueryUserLicenseStation*)p = *(_Xdmrtm__QueryUserLicenseStation*)q;
}

void _Xdmrtm__QueryDeviceFuncAntResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryDeviceFuncAntResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceFuncAntResponse::sResult);
	this->_Xdmrtm__QueryDeviceFuncAntResponse::DeviceFuncAntArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceFuncAntResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceFuncAntResponse::sResult);
	soap_serialize_PointerToXdmrtm__DeviceFuncAntennaArray(soap, &this->_Xdmrtm__QueryDeviceFuncAntResponse::DeviceFuncAntArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceFuncAntResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceFuncAntResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceFuncAntResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryDeviceFuncAntResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryDeviceFuncAntResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryDeviceFuncAntResponse::DeviceFuncAntArray)
	{	if (soap_out_PointerToXdmrtm__DeviceFuncAntennaArray(soap, "DeviceFuncAntArray", -1, &a->_Xdmrtm__QueryDeviceFuncAntResponse::DeviceFuncAntArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceFuncAntArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceFuncAntResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceFuncAntResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAntResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFuncAntResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceFuncAntResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse, sizeof(_Xdmrtm__QueryDeviceFuncAntResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceFuncAntResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_DeviceFuncAntArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryDeviceFuncAntResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryDeviceFuncAntResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_DeviceFuncAntArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceFuncAntennaArray(soap, "DeviceFuncAntArray", &(a->_Xdmrtm__QueryDeviceFuncAntResponse::DeviceFuncAntArray), "Xdmrtm:DeviceFuncAntennaArray"))
				{	soap_flag_DeviceFuncAntArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceFuncAntResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse, 0, sizeof(_Xdmrtm__QueryDeviceFuncAntResponse), 0, soap_copy__Xdmrtm__QueryDeviceFuncAntResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_DeviceFuncAntArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceFuncAntResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceFuncAntResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceFuncAntResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceFuncAntResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAntResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncAntResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceFuncAntResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceFuncAntResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceFuncAntResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFuncAntResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceFuncAntResponse);
		((_Xdmrtm__QueryDeviceFuncAntResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFuncAntResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceFuncAntResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceFuncAntResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceFuncAntResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceFuncAntResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceFuncAntResponse*)p = *(_Xdmrtm__QueryDeviceFuncAntResponse*)q;
}

void _Xdmrtm__QueryDeviceFuncAnt::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceFuncAnt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceFuncAnt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceFuncAnt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceFuncAnt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceFuncAnt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceFuncAnt(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAnt * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFuncAnt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceFuncAnt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt, sizeof(_Xdmrtm__QueryDeviceFuncAnt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceFuncAnt *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceFuncAnt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt, 0, sizeof(_Xdmrtm__QueryDeviceFuncAnt), 0, soap_copy__Xdmrtm__QueryDeviceFuncAnt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceFuncAnt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceFuncAnt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceFuncAnt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceFuncAnt(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAnt * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, _Xdmrtm__QueryDeviceFuncAnt *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceFuncAnt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceFuncAnt * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceFuncAnt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFuncAnt);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceFuncAnt);
		((_Xdmrtm__QueryDeviceFuncAnt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFuncAnt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceFuncAnt);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceFuncAnt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceFuncAnt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceFuncAnt %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceFuncAnt*)p = *(_Xdmrtm__QueryDeviceFuncAnt*)q;
}

void _Xdmrtm__QueryDeviceFuncResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryDeviceFuncResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceFuncResponse::sResult);
	this->_Xdmrtm__QueryDeviceFuncResponse::DeviceFuncArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceFuncResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceFuncResponse::sResult);
	soap_serialize_PointerToXdmrtm__DeviceFuncArray(soap, &this->_Xdmrtm__QueryDeviceFuncResponse::DeviceFuncArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceFuncResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceFuncResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceFuncResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryDeviceFuncResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryDeviceFuncResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryDeviceFuncResponse::DeviceFuncArray)
	{	if (soap_out_PointerToXdmrtm__DeviceFuncArray(soap, "DeviceFuncArray", -1, &a->_Xdmrtm__QueryDeviceFuncResponse::DeviceFuncArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceFuncArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceFuncResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceFuncResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFuncResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceFuncResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse, sizeof(_Xdmrtm__QueryDeviceFuncResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceFuncResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_DeviceFuncArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryDeviceFuncResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryDeviceFuncResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_DeviceFuncArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceFuncArray(soap, "DeviceFuncArray", &(a->_Xdmrtm__QueryDeviceFuncResponse::DeviceFuncArray), "Xdmrtm:DeviceFuncArray"))
				{	soap_flag_DeviceFuncArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceFuncResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse, 0, sizeof(_Xdmrtm__QueryDeviceFuncResponse), 0, soap_copy__Xdmrtm__QueryDeviceFuncResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_DeviceFuncArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceFuncResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceFuncResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceFuncResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceFuncResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceFuncResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceFuncResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceFuncResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFuncResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceFuncResponse);
		((_Xdmrtm__QueryDeviceFuncResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFuncResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceFuncResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceFuncResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceFuncResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceFuncResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceFuncResponse*)p = *(_Xdmrtm__QueryDeviceFuncResponse*)q;
}

void _Xdmrtm__QueryDeviceFunc::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceFunc::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceFunc::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceFunc(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceFunc(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceFunc *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceFunc::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceFunc(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFunc * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceFunc(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFunc *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceFunc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc, sizeof(_Xdmrtm__QueryDeviceFunc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceFunc *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceFunc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc, 0, sizeof(_Xdmrtm__QueryDeviceFunc), 0, soap_copy__Xdmrtm__QueryDeviceFunc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceFunc::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceFunc", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceFunc::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceFunc(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFunc * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceFunc(struct soap *soap, _Xdmrtm__QueryDeviceFunc *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceFunc * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceFunc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceFunc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFunc);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceFunc);
		((_Xdmrtm__QueryDeviceFunc*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceFunc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceFunc);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceFunc*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceFunc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceFunc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceFunc %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceFunc*)p = *(_Xdmrtm__QueryDeviceFunc*)q;
}

void _Xdmrtm__QueryAntResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryAntResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryAntResponse::sResult);
	this->_Xdmrtm__QueryAntResponse::AntArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryAntResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryAntResponse::sResult);
	soap_serialize_PointerToXdmrtm__AntArray(soap, &this->_Xdmrtm__QueryAntResponse::AntArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryAntResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryAntResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryAntResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryAntResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryAntResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryAntResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryAntResponse::AntArray)
	{	if (soap_out_PointerToXdmrtm__AntArray(soap, "AntArray", -1, &a->_Xdmrtm__QueryAntResponse::AntArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "AntArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryAntResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryAntResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryAntResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryAntResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryAntResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryAntResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse, sizeof(_Xdmrtm__QueryAntResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryAntResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_AntArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryAntResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryAntResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_AntArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__AntArray(soap, "AntArray", &(a->_Xdmrtm__QueryAntResponse::AntArray), "Xdmrtm:AntArray"))
				{	soap_flag_AntArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryAntResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse, 0, sizeof(_Xdmrtm__QueryAntResponse), 0, soap_copy__Xdmrtm__QueryAntResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_AntArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryAntResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryAntResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryAntResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryAntResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryAntResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryAntResponse(struct soap *soap, _Xdmrtm__QueryAntResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryAntResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryAntResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryAntResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryAntResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryAntResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryAntResponse);
		((_Xdmrtm__QueryAntResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryAntResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryAntResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryAntResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryAntResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryAntResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryAntResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryAntResponse*)p = *(_Xdmrtm__QueryAntResponse*)q;
}

void _Xdmrtm__QueryAnt::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryAnt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryAnt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryAnt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryAnt(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryAnt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryAnt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryAnt(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryAnt * SOAP_FMAC4 soap_in__Xdmrtm__QueryAnt(struct soap *soap, const char *tag, _Xdmrtm__QueryAnt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryAnt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt, sizeof(_Xdmrtm__QueryAnt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryAnt *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryAnt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt, 0, sizeof(_Xdmrtm__QueryAnt), 0, soap_copy__Xdmrtm__QueryAnt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryAnt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryAnt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryAnt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryAnt(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryAnt * SOAP_FMAC4 soap_get__Xdmrtm__QueryAnt(struct soap *soap, _Xdmrtm__QueryAnt *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryAnt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryAnt * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryAnt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryAnt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryAnt);
		if (size)
			*size = sizeof(_Xdmrtm__QueryAnt);
		((_Xdmrtm__QueryAnt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryAnt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryAnt);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryAnt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryAnt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryAnt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryAnt %p -> %p\n", q, p));
	*(_Xdmrtm__QueryAnt*)p = *(_Xdmrtm__QueryAnt*)q;
}

void _Xdmrtm__QueryRNCResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRNCResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRNCResponse::sResult);
	this->_Xdmrtm__QueryRNCResponse::RNCArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRNCResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRNCResponse::sResult);
	soap_serialize_PointerToXdmrtm__RNCArray(soap, &this->_Xdmrtm__QueryRNCResponse::RNCArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRNCResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRNCResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRNCResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRNCResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRNCResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRNCResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRNCResponse::RNCArray)
	{	if (soap_out_PointerToXdmrtm__RNCArray(soap, "RNCArray", -1, &a->_Xdmrtm__QueryRNCResponse::RNCArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RNCArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRNCResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRNCResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRNCResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRNCResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRNCResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRNCResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse, sizeof(_Xdmrtm__QueryRNCResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRNCResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RNCArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRNCResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRNCResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RNCArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RNCArray(soap, "RNCArray", &(a->_Xdmrtm__QueryRNCResponse::RNCArray), "Xdmrtm:RNCArray"))
				{	soap_flag_RNCArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRNCResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse, 0, sizeof(_Xdmrtm__QueryRNCResponse), 0, soap_copy__Xdmrtm__QueryRNCResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RNCArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRNCResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRNCResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRNCResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRNCResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRNCResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRNCResponse(struct soap *soap, _Xdmrtm__QueryRNCResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRNCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRNCResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRNCResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRNCResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRNCResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRNCResponse);
		((_Xdmrtm__QueryRNCResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRNCResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRNCResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRNCResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRNCResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRNCResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRNCResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRNCResponse*)p = *(_Xdmrtm__QueryRNCResponse*)q;
}

void _Xdmrtm__QueryRNC::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRNC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRNC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRNC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRNC(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRNC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRNC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRNC(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRNC * SOAP_FMAC4 soap_in__Xdmrtm__QueryRNC(struct soap *soap, const char *tag, _Xdmrtm__QueryRNC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRNC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC, sizeof(_Xdmrtm__QueryRNC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRNC *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRNC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC, 0, sizeof(_Xdmrtm__QueryRNC), 0, soap_copy__Xdmrtm__QueryRNC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRNC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRNC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRNC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRNC(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRNC * SOAP_FMAC4 soap_get__Xdmrtm__QueryRNC(struct soap *soap, _Xdmrtm__QueryRNC *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRNC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRNC * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRNC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRNC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRNC);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRNC);
		((_Xdmrtm__QueryRNC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRNC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRNC);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRNC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRNC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRNC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRNC %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRNC*)p = *(_Xdmrtm__QueryRNC*)q;
}

void _Xdmrtm__QueryDeviceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryDeviceResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryDeviceResponse::sResult);
	this->_Xdmrtm__QueryDeviceResponse::DeviceArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDeviceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryDeviceResponse::sResult);
	soap_serialize_PointerToXdmrtm__DeviceArray(soap, &this->_Xdmrtm__QueryDeviceResponse::DeviceArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryDeviceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDeviceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDeviceResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDeviceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryDeviceResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryDeviceResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryDeviceResponse::DeviceArray)
	{	if (soap_out_PointerToXdmrtm__DeviceArray(soap, "DeviceArray", -1, &a->_Xdmrtm__QueryDeviceResponse::DeviceArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "DeviceArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDeviceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDeviceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryDeviceResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDeviceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse, sizeof(_Xdmrtm__QueryDeviceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDeviceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_DeviceArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryDeviceResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryDeviceResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_DeviceArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__DeviceArray(soap, "DeviceArray", &(a->_Xdmrtm__QueryDeviceResponse::DeviceArray), "Xdmrtm:DeviceArray"))
				{	soap_flag_DeviceArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDeviceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse, 0, sizeof(_Xdmrtm__QueryDeviceResponse), 0, soap_copy__Xdmrtm__QueryDeviceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_DeviceArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDeviceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDeviceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDeviceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDeviceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDeviceResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDeviceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDeviceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDeviceResponse);
		((_Xdmrtm__QueryDeviceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDeviceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDeviceResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDeviceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDeviceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDeviceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDeviceResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDeviceResponse*)p = *(_Xdmrtm__QueryDeviceResponse*)q;
}

void _Xdmrtm__QueryDevice::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryDevice::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryDevice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryDevice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryDevice(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryDevice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryDevice(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDevice * SOAP_FMAC4 soap_in__Xdmrtm__QueryDevice(struct soap *soap, const char *tag, _Xdmrtm__QueryDevice *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice, sizeof(_Xdmrtm__QueryDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryDevice *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice, 0, sizeof(_Xdmrtm__QueryDevice), 0, soap_copy__Xdmrtm__QueryDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryDevice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryDevice", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryDevice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryDevice(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDevice * SOAP_FMAC4 soap_get__Xdmrtm__QueryDevice(struct soap *soap, _Xdmrtm__QueryDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryDevice * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDevice);
		if (size)
			*size = sizeof(_Xdmrtm__QueryDevice);
		((_Xdmrtm__QueryDevice*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryDevice);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryDevice*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryDevice %p -> %p\n", q, p));
	*(_Xdmrtm__QueryDevice*)p = *(_Xdmrtm__QueryDevice*)q;
}

void _Xdmrtm__QueryStationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryStationResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryStationResponse::sResult);
	this->_Xdmrtm__QueryStationResponse::StationArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryStationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryStationResponse::sResult);
	soap_serialize_PointerToXdmrtm__StationArray(soap, &this->_Xdmrtm__QueryStationResponse::StationArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryStationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryStationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryStationResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryStationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryStationResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryStationResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryStationResponse::StationArray)
	{	if (soap_out_PointerToXdmrtm__StationArray(soap, "StationArray", -1, &a->_Xdmrtm__QueryStationResponse::StationArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "StationArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryStationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryStationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryStationResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryStationResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryStationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryStationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse, sizeof(_Xdmrtm__QueryStationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryStationResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_StationArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryStationResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryStationResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_StationArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__StationArray(soap, "StationArray", &(a->_Xdmrtm__QueryStationResponse::StationArray), "Xdmrtm:StationArray"))
				{	soap_flag_StationArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryStationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse, 0, sizeof(_Xdmrtm__QueryStationResponse), 0, soap_copy__Xdmrtm__QueryStationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_StationArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryStationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryStationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryStationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryStationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryStationResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryStationResponse(struct soap *soap, _Xdmrtm__QueryStationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryStationResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryStationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryStationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryStationResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryStationResponse);
		((_Xdmrtm__QueryStationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryStationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryStationResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryStationResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryStationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryStationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryStationResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryStationResponse*)p = *(_Xdmrtm__QueryStationResponse*)q;
}

void _Xdmrtm__QueryStation::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryStation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryStation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryStation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryStation(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryStation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryStation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryStation(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryStation * SOAP_FMAC4 soap_in__Xdmrtm__QueryStation(struct soap *soap, const char *tag, _Xdmrtm__QueryStation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryStation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation, sizeof(_Xdmrtm__QueryStation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryStation *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation, 0, sizeof(_Xdmrtm__QueryStation), 0, soap_copy__Xdmrtm__QueryStation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryStation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryStation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryStation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryStation(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryStation * SOAP_FMAC4 soap_get__Xdmrtm__QueryStation(struct soap *soap, _Xdmrtm__QueryStation *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryStation * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryStation);
		if (size)
			*size = sizeof(_Xdmrtm__QueryStation);
		((_Xdmrtm__QueryStation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryStation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryStation);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryStation*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryStation %p -> %p\n", q, p));
	*(_Xdmrtm__QueryStation*)p = *(_Xdmrtm__QueryStation*)q;
}

void _Xdmrtm__QueryMonControlCenterResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryMonControlCenterResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryMonControlCenterResponse::sResult);
	this->_Xdmrtm__QueryMonControlCenterResponse::MonControlCenterArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonControlCenterResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryMonControlCenterResponse::sResult);
	soap_serialize_PointerToXdmrtm__MonControlCenterArray(soap, &this->_Xdmrtm__QueryMonControlCenterResponse::MonControlCenterArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonControlCenterResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonControlCenterResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonControlCenterResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryMonControlCenterResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryMonControlCenterResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryMonControlCenterResponse::MonControlCenterArray)
	{	if (soap_out_PointerToXdmrtm__MonControlCenterArray(soap, "MonControlCenterArray", -1, &a->_Xdmrtm__QueryMonControlCenterResponse::MonControlCenterArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "MonControlCenterArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonControlCenterResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonControlCenterResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenterResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonControlCenterResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonControlCenterResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse, sizeof(_Xdmrtm__QueryMonControlCenterResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonControlCenterResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_MonControlCenterArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryMonControlCenterResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryMonControlCenterResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_MonControlCenterArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__MonControlCenterArray(soap, "MonControlCenterArray", &(a->_Xdmrtm__QueryMonControlCenterResponse::MonControlCenterArray), "Xdmrtm:MonControlCenterArray"))
				{	soap_flag_MonControlCenterArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonControlCenterResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse, 0, sizeof(_Xdmrtm__QueryMonControlCenterResponse), 0, soap_copy__Xdmrtm__QueryMonControlCenterResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_MonControlCenterArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonControlCenterResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonControlCenterResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonControlCenterResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonControlCenterResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenterResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, _Xdmrtm__QueryMonControlCenterResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonControlCenterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonControlCenterResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonControlCenterResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonControlCenterResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonControlCenterResponse);
		((_Xdmrtm__QueryMonControlCenterResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonControlCenterResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonControlCenterResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonControlCenterResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonControlCenterResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonControlCenterResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonControlCenterResponse*)p = *(_Xdmrtm__QueryMonControlCenterResponse*)q;
}

void _Xdmrtm__QueryMonControlCenter::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonControlCenter::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonControlCenter::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonControlCenter(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonControlCenter(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonControlCenter *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonControlCenter::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonControlCenter(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenter * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonControlCenter(struct soap *soap, const char *tag, _Xdmrtm__QueryMonControlCenter *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonControlCenter *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter, sizeof(_Xdmrtm__QueryMonControlCenter), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonControlCenter *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonControlCenter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter, 0, sizeof(_Xdmrtm__QueryMonControlCenter), 0, soap_copy__Xdmrtm__QueryMonControlCenter);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonControlCenter::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonControlCenter", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonControlCenter::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonControlCenter(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenter * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonControlCenter(struct soap *soap, _Xdmrtm__QueryMonControlCenter *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonControlCenter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonControlCenter * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonControlCenter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonControlCenter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonControlCenter);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonControlCenter);
		((_Xdmrtm__QueryMonControlCenter*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonControlCenter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonControlCenter);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonControlCenter*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonControlCenter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonControlCenter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonControlCenter %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonControlCenter*)p = *(_Xdmrtm__QueryMonControlCenter*)q;
}

void _Xdmrtm__QueryMonOrganizationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryMonOrganizationResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryMonOrganizationResponse::sResult);
	this->_Xdmrtm__QueryMonOrganizationResponse::MonOrganizationArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonOrganizationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryMonOrganizationResponse::sResult);
	soap_serialize_PointerToXdmrtm__MonOrganizationArray(soap, &this->_Xdmrtm__QueryMonOrganizationResponse::MonOrganizationArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonOrganizationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonOrganizationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonOrganizationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryMonOrganizationResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryMonOrganizationResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryMonOrganizationResponse::MonOrganizationArray)
	{	if (soap_out_PointerToXdmrtm__MonOrganizationArray(soap, "MonOrganizationArray", -1, &a->_Xdmrtm__QueryMonOrganizationResponse::MonOrganizationArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "MonOrganizationArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonOrganizationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonOrganizationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganizationResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonOrganizationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonOrganizationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse, sizeof(_Xdmrtm__QueryMonOrganizationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonOrganizationResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_MonOrganizationArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryMonOrganizationResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryMonOrganizationResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_MonOrganizationArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__MonOrganizationArray(soap, "MonOrganizationArray", &(a->_Xdmrtm__QueryMonOrganizationResponse::MonOrganizationArray), "Xdmrtm:MonOrganizationArray"))
				{	soap_flag_MonOrganizationArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonOrganizationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse, 0, sizeof(_Xdmrtm__QueryMonOrganizationResponse), 0, soap_copy__Xdmrtm__QueryMonOrganizationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_MonOrganizationArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonOrganizationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonOrganizationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonOrganizationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonOrganizationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganizationResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, _Xdmrtm__QueryMonOrganizationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonOrganizationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonOrganizationResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonOrganizationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonOrganizationResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonOrganizationResponse);
		((_Xdmrtm__QueryMonOrganizationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonOrganizationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonOrganizationResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonOrganizationResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonOrganizationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonOrganizationResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonOrganizationResponse*)p = *(_Xdmrtm__QueryMonOrganizationResponse*)q;
}

void _Xdmrtm__QueryMonOrganization::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryMonOrganization::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryMonOrganization::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryMonOrganization(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryMonOrganization(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryMonOrganization *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryMonOrganization::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryMonOrganization(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganization * SOAP_FMAC4 soap_in__Xdmrtm__QueryMonOrganization(struct soap *soap, const char *tag, _Xdmrtm__QueryMonOrganization *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryMonOrganization *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization, sizeof(_Xdmrtm__QueryMonOrganization), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryMonOrganization *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryMonOrganization *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization, 0, sizeof(_Xdmrtm__QueryMonOrganization), 0, soap_copy__Xdmrtm__QueryMonOrganization);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryMonOrganization::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryMonOrganization", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryMonOrganization::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryMonOrganization(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganization * SOAP_FMAC4 soap_get__Xdmrtm__QueryMonOrganization(struct soap *soap, _Xdmrtm__QueryMonOrganization *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryMonOrganization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryMonOrganization * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryMonOrganization(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryMonOrganization(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonOrganization);
		if (size)
			*size = sizeof(_Xdmrtm__QueryMonOrganization);
		((_Xdmrtm__QueryMonOrganization*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryMonOrganization[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryMonOrganization);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryMonOrganization*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryMonOrganization*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryMonOrganization(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryMonOrganization %p -> %p\n", q, p));
	*(_Xdmrtm__QueryMonOrganization*)p = *(_Xdmrtm__QueryMonOrganization*)q;
}

void _Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::sResult);
	this->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::RefDeviceModelFuncArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::sResult);
	soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, &this->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::RefDeviceModelFuncArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceModelFuncParamResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::RefDeviceModelFuncArray)
	{	if (soap_out_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, "RefDeviceModelFuncArray", -1, &a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::RefDeviceModelFuncArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RefDeviceModelFuncArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParamResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModelFuncParamResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceModelFuncParamResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParamResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceModelFuncParamResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RefDeviceModelFuncArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RefDeviceModelFuncArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, "RefDeviceModelFuncArray", &(a->_Xdmrtm__QueryRefDeviceModelFuncParamResponse::RefDeviceModelFuncArray), "Xdmrtm:RefDeviceModelFuncParamArray"))
				{	soap_flag_RefDeviceModelFuncArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceModelFuncParamResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse, 0, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParamResponse), 0, soap_copy__Xdmrtm__QueryRefDeviceModelFuncParamResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RefDeviceModelFuncArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceModelFuncParamResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParamResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParamResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceModelFuncParamResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParamResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModelFuncParamResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceModelFuncParamResponse);
		((_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModelFuncParamResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceModelFuncParamResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceModelFuncParamResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)p = *(_Xdmrtm__QueryRefDeviceModelFuncParamResponse*)q;
}

void _Xdmrtm__QueryRefDeviceModelFuncParam::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceModelFuncParam::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceModelFuncParam::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceModelFuncParam *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceModelFuncParam::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParam * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModelFuncParam *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceModelFuncParam *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParam), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceModelFuncParam *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceModelFuncParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam, 0, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParam), 0, soap_copy__Xdmrtm__QueryRefDeviceModelFuncParam);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceModelFuncParam::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceModelFuncParam", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceModelFuncParam::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceModelFuncParam(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParam * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParam *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceModelFuncParam * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModelFuncParam);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceModelFuncParam);
		((_Xdmrtm__QueryRefDeviceModelFuncParam*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModelFuncParam[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceModelFuncParam);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceModelFuncParam*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceModelFuncParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceModelFuncParam %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceModelFuncParam*)p = *(_Xdmrtm__QueryRefDeviceModelFuncParam*)q;
}

void _Xdmrtm__QueryRefDeviceFuncResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRefDeviceFuncResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRefDeviceFuncResponse::sResult);
	this->_Xdmrtm__QueryRefDeviceFuncResponse::RefDeviceFuncArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceFuncResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRefDeviceFuncResponse::sResult);
	soap_serialize_PointerToXdmrtm__RefDeviceFuncArray(soap, &this->_Xdmrtm__QueryRefDeviceFuncResponse::RefDeviceFuncArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceFuncResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceFuncResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceFuncResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRefDeviceFuncResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRefDeviceFuncResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRefDeviceFuncResponse::RefDeviceFuncArray)
	{	if (soap_out_PointerToXdmrtm__RefDeviceFuncArray(soap, "RefDeviceFuncArray", -1, &a->_Xdmrtm__QueryRefDeviceFuncResponse::RefDeviceFuncArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RefDeviceFuncArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceFuncResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceFuncResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFuncResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceFuncResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceFuncResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse, sizeof(_Xdmrtm__QueryRefDeviceFuncResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceFuncResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RefDeviceFuncArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRefDeviceFuncResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRefDeviceFuncResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RefDeviceFuncArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RefDeviceFuncArray(soap, "RefDeviceFuncArray", &(a->_Xdmrtm__QueryRefDeviceFuncResponse::RefDeviceFuncArray), "Xdmrtm:RefDeviceFuncArray"))
				{	soap_flag_RefDeviceFuncArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceFuncResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse, 0, sizeof(_Xdmrtm__QueryRefDeviceFuncResponse), 0, soap_copy__Xdmrtm__QueryRefDeviceFuncResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RefDeviceFuncArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceFuncResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceFuncResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceFuncResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceFuncResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFuncResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceFuncResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceFuncResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceFuncResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceFuncResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceFuncResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceFuncResponse);
		((_Xdmrtm__QueryRefDeviceFuncResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceFuncResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceFuncResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceFuncResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceFuncResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceFuncResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceFuncResponse*)p = *(_Xdmrtm__QueryRefDeviceFuncResponse*)q;
}

void _Xdmrtm__QueryRefDeviceFunc::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceFunc::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceFunc::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceFunc(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceFunc *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceFunc::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceFunc(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFunc * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceFunc *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceFunc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc, sizeof(_Xdmrtm__QueryRefDeviceFunc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceFunc *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceFunc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc, 0, sizeof(_Xdmrtm__QueryRefDeviceFunc), 0, soap_copy__Xdmrtm__QueryRefDeviceFunc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceFunc::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceFunc", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceFunc::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceFunc(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFunc * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceFunc(struct soap *soap, _Xdmrtm__QueryRefDeviceFunc *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceFunc * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceFunc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceFunc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceFunc);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceFunc);
		((_Xdmrtm__QueryRefDeviceFunc*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceFunc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceFunc);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceFunc*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceFunc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceFunc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceFunc %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceFunc*)p = *(_Xdmrtm__QueryRefDeviceFunc*)q;
}

void _Xdmrtm__QueryRefDeviceModelResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRefDeviceModelResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRefDeviceModelResponse::sResult);
	this->_Xdmrtm__QueryRefDeviceModelResponse::RefDeviceModelArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceModelResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRefDeviceModelResponse::sResult);
	soap_serialize_PointerToXdmrtm__RefDeviceModelArray(soap, &this->_Xdmrtm__QueryRefDeviceModelResponse::RefDeviceModelArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceModelResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceModelResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceModelResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRefDeviceModelResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRefDeviceModelResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRefDeviceModelResponse::RefDeviceModelArray)
	{	if (soap_out_PointerToXdmrtm__RefDeviceModelArray(soap, "RefDeviceModelArray", -1, &a->_Xdmrtm__QueryRefDeviceModelResponse::RefDeviceModelArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RefDeviceModelArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceModelResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceModelResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModelResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceModelResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse, sizeof(_Xdmrtm__QueryRefDeviceModelResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceModelResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RefDeviceModelArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRefDeviceModelResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRefDeviceModelResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RefDeviceModelArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RefDeviceModelArray(soap, "RefDeviceModelArray", &(a->_Xdmrtm__QueryRefDeviceModelResponse::RefDeviceModelArray), "Xdmrtm:RefDeviceModelArray"))
				{	soap_flag_RefDeviceModelArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceModelResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse, 0, sizeof(_Xdmrtm__QueryRefDeviceModelResponse), 0, soap_copy__Xdmrtm__QueryRefDeviceModelResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RefDeviceModelArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceModelResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceModelResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceModelResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceModelResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceModelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceModelResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceModelResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModelResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceModelResponse);
		((_Xdmrtm__QueryRefDeviceModelResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModelResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceModelResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceModelResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceModelResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceModelResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceModelResponse*)p = *(_Xdmrtm__QueryRefDeviceModelResponse*)q;
}

void _Xdmrtm__QueryRefDeviceModel::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceModel::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceModel::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceModel(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceModel(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceModel *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceModel::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceModel(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModel * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceModel(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModel *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceModel *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel, sizeof(_Xdmrtm__QueryRefDeviceModel), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceModel *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceModel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel, 0, sizeof(_Xdmrtm__QueryRefDeviceModel), 0, soap_copy__Xdmrtm__QueryRefDeviceModel);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceModel::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceModel", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceModel::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceModel(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModel * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceModel(struct soap *soap, _Xdmrtm__QueryRefDeviceModel *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceModel * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceModel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceModel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModel);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceModel);
		((_Xdmrtm__QueryRefDeviceModel*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceModel[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceModel);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceModel*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceModel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceModel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceModel %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceModel*)p = *(_Xdmrtm__QueryRefDeviceModel*)q;
}

void _Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::sResult);
	this->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::RefProtocolTypeArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::sResult);
	soap_serialize_PointerToXdmrtm__RefDeviceProtocolArray(soap, &this->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::RefProtocolTypeArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceProtocolTypeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::RefProtocolTypeArray)
	{	if (soap_out_PointerToXdmrtm__RefDeviceProtocolArray(soap, "RefProtocolTypeArray", -1, &a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::RefProtocolTypeArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RefProtocolTypeArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolTypeResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceProtocolTypeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceProtocolTypeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse, sizeof(_Xdmrtm__QueryRefDeviceProtocolTypeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceProtocolTypeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RefProtocolTypeArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RefProtocolTypeArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RefDeviceProtocolArray(soap, "RefProtocolTypeArray", &(a->_Xdmrtm__QueryRefDeviceProtocolTypeResponse::RefProtocolTypeArray), "Xdmrtm:RefDeviceProtocolArray"))
				{	soap_flag_RefProtocolTypeArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceProtocolTypeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse, 0, sizeof(_Xdmrtm__QueryRefDeviceProtocolTypeResponse), 0, soap_copy__Xdmrtm__QueryRefDeviceProtocolTypeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RefProtocolTypeArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceProtocolTypeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolTypeResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolTypeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceProtocolTypeResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceProtocolTypeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceProtocolTypeResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceProtocolTypeResponse);
		((_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceProtocolTypeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceProtocolTypeResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceProtocolTypeResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)p = *(_Xdmrtm__QueryRefDeviceProtocolTypeResponse*)q;
}

void _Xdmrtm__QueryRefDeviceProtocolType::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceProtocolType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceProtocolType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceProtocolType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceProtocolType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceProtocolType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceProtocolType(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolType * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceProtocolType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceProtocolType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType, sizeof(_Xdmrtm__QueryRefDeviceProtocolType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceProtocolType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceProtocolType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType, 0, sizeof(_Xdmrtm__QueryRefDeviceProtocolType), 0, soap_copy__Xdmrtm__QueryRefDeviceProtocolType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceProtocolType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceProtocolType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceProtocolType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceProtocolType(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolType * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolType *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceProtocolType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceProtocolType * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceProtocolType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceProtocolType);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceProtocolType);
		((_Xdmrtm__QueryRefDeviceProtocolType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceProtocolType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceProtocolType);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceProtocolType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceProtocolType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceProtocolType %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceProtocolType*)p = *(_Xdmrtm__QueryRefDeviceProtocolType*)q;
}

void _Xdmrtm__QueryRefDeviceTypeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRefDeviceTypeResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRefDeviceTypeResponse::sResult);
	this->_Xdmrtm__QueryRefDeviceTypeResponse::RefDeviceTypeArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceTypeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRefDeviceTypeResponse::sResult);
	soap_serialize_PointerToXdmrtm__RefDeviceTypeArray(soap, &this->_Xdmrtm__QueryRefDeviceTypeResponse::RefDeviceTypeArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceTypeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceTypeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceTypeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRefDeviceTypeResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRefDeviceTypeResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRefDeviceTypeResponse::RefDeviceTypeArray)
	{	if (soap_out_PointerToXdmrtm__RefDeviceTypeArray(soap, "RefDeviceTypeArray", -1, &a->_Xdmrtm__QueryRefDeviceTypeResponse::RefDeviceTypeArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RefDeviceTypeArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceTypeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceTypeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceTypeResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceTypeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceTypeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse, sizeof(_Xdmrtm__QueryRefDeviceTypeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceTypeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RefDeviceTypeArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRefDeviceTypeResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRefDeviceTypeResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RefDeviceTypeArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RefDeviceTypeArray(soap, "RefDeviceTypeArray", &(a->_Xdmrtm__QueryRefDeviceTypeResponse::RefDeviceTypeArray), "Xdmrtm:RefDeviceTypeArray"))
				{	soap_flag_RefDeviceTypeArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceTypeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse, 0, sizeof(_Xdmrtm__QueryRefDeviceTypeResponse), 0, soap_copy__Xdmrtm__QueryRefDeviceTypeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RefDeviceTypeArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceTypeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceTypeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceTypeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceTypeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceTypeResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceTypeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceTypeResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceTypeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceTypeResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceTypeResponse);
		((_Xdmrtm__QueryRefDeviceTypeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceTypeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceTypeResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceTypeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceTypeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceTypeResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceTypeResponse*)p = *(_Xdmrtm__QueryRefDeviceTypeResponse*)q;
}

void _Xdmrtm__QueryRefDeviceType::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefDeviceType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefDeviceType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefDeviceType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefDeviceType(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefDeviceType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefDeviceType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefDeviceType(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceType * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefDeviceType(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefDeviceType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType, sizeof(_Xdmrtm__QueryRefDeviceType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefDeviceType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefDeviceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType, 0, sizeof(_Xdmrtm__QueryRefDeviceType), 0, soap_copy__Xdmrtm__QueryRefDeviceType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefDeviceType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefDeviceType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefDeviceType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefDeviceType(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceType * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefDeviceType(struct soap *soap, _Xdmrtm__QueryRefDeviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefDeviceType * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefDeviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefDeviceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceType);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefDeviceType);
		((_Xdmrtm__QueryRefDeviceType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefDeviceType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefDeviceType);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefDeviceType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefDeviceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefDeviceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefDeviceType %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefDeviceType*)p = *(_Xdmrtm__QueryRefDeviceType*)q;
}

void _Xdmrtm__QueryRefStationTypeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Xdmrtm__QueryRefStationTypeResponse::nResult);
	soap_default_std__string(soap, &this->_Xdmrtm__QueryRefStationTypeResponse::sResult);
	this->_Xdmrtm__QueryRefStationTypeResponse::RefStationTypeArray = NULL;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefStationTypeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->_Xdmrtm__QueryRefStationTypeResponse::sResult);
	soap_serialize_PointerToXdmrtm__RefStationTypeArray(soap, &this->_Xdmrtm__QueryRefStationTypeResponse::RefStationTypeArray);
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefStationTypeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefStationTypeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefStationTypeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse), type))
		return soap->error;
	if (soap_out_int(soap, "nResult", -1, &(a->_Xdmrtm__QueryRefStationTypeResponse::nResult), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResult", -1, &(a->_Xdmrtm__QueryRefStationTypeResponse::sResult), ""))
		return soap->error;
	if (a->_Xdmrtm__QueryRefStationTypeResponse::RefStationTypeArray)
	{	if (soap_out_PointerToXdmrtm__RefStationTypeArray(soap, "RefStationTypeArray", -1, &a->_Xdmrtm__QueryRefStationTypeResponse::RefStationTypeArray, ""))
			return soap->error;
	}
	else if (soap_element_nil(soap, "RefStationTypeArray"))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefStationTypeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefStationTypeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationTypeResponse * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefStationTypeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefStationTypeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse, sizeof(_Xdmrtm__QueryRefStationTypeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefStationTypeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nResult1 = 1;
	size_t soap_flag_sResult1 = 1;
	size_t soap_flag_RefStationTypeArray1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nResult", &(a->_Xdmrtm__QueryRefStationTypeResponse::nResult), "xsd:int"))
				{	soap_flag_nResult1--;
					continue;
				}
			if (soap_flag_sResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResult", &(a->_Xdmrtm__QueryRefStationTypeResponse::sResult), "xsd:string"))
				{	soap_flag_sResult1--;
					continue;
				}
			if (soap_flag_RefStationTypeArray1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToXdmrtm__RefStationTypeArray(soap, "RefStationTypeArray", &(a->_Xdmrtm__QueryRefStationTypeResponse::RefStationTypeArray), "Xdmrtm:RefStationTypeArray"))
				{	soap_flag_RefStationTypeArray1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefStationTypeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse, 0, sizeof(_Xdmrtm__QueryRefStationTypeResponse), 0, soap_copy__Xdmrtm__QueryRefStationTypeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nResult1 > 0 || soap_flag_sResult1 > 0 || soap_flag_RefStationTypeArray1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefStationTypeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefStationTypeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefStationTypeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefStationTypeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationTypeResponse * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, _Xdmrtm__QueryRefStationTypeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefStationTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefStationTypeResponse * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefStationTypeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefStationTypeResponse);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefStationTypeResponse);
		((_Xdmrtm__QueryRefStationTypeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefStationTypeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefStationTypeResponse);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefStationTypeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefStationTypeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefStationTypeResponse %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefStationTypeResponse*)p = *(_Xdmrtm__QueryRefStationTypeResponse*)q;
}

void _Xdmrtm__QueryRefStationType::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Xdmrtm__QueryRefStationType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Xdmrtm__QueryRefStationType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Xdmrtm__QueryRefStationType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Xdmrtm__QueryRefStationType(struct soap *soap, const char *tag, int id, const _Xdmrtm__QueryRefStationType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Xdmrtm__QueryRefStationType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Xdmrtm__QueryRefStationType(soap, tag, this, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationType * SOAP_FMAC4 soap_in__Xdmrtm__QueryRefStationType(struct soap *soap, const char *tag, _Xdmrtm__QueryRefStationType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Xdmrtm__QueryRefStationType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType, sizeof(_Xdmrtm__QueryRefStationType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Xdmrtm__QueryRefStationType *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Xdmrtm__QueryRefStationType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType, 0, sizeof(_Xdmrtm__QueryRefStationType), 0, soap_copy__Xdmrtm__QueryRefStationType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Xdmrtm__QueryRefStationType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:QueryRefStationType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Xdmrtm__QueryRefStationType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Xdmrtm__QueryRefStationType(soap, this, tag, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationType * SOAP_FMAC4 soap_get__Xdmrtm__QueryRefStationType(struct soap *soap, _Xdmrtm__QueryRefStationType *p, const char *tag, const char *type)
{
	if ((p = soap_in__Xdmrtm__QueryRefStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Xdmrtm__QueryRefStationType * SOAP_FMAC2 soap_instantiate__Xdmrtm__QueryRefStationType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Xdmrtm__QueryRefStationType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefStationType);
		if (size)
			*size = sizeof(_Xdmrtm__QueryRefStationType);
		((_Xdmrtm__QueryRefStationType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Xdmrtm__QueryRefStationType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Xdmrtm__QueryRefStationType);
		for (int i = 0; i < n; i++)
			((_Xdmrtm__QueryRefStationType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Xdmrtm__QueryRefStationType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Xdmrtm__QueryRefStationType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Xdmrtm__QueryRefStationType %p -> %p\n", q, p));
	*(_Xdmrtm__QueryRefStationType*)p = *(_Xdmrtm__QueryRefStationType*)q;
}

void Xdmrtm__AlarmArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__AlarmArray::__sizeitem = 0;
	this->Xdmrtm__AlarmArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__AlarmArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__AlarmArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__AlarmArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__Alarm(soap, this->Xdmrtm__AlarmArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__AlarmArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__AlarmArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__AlarmArray(struct soap *soap, const char *tag, int id, const Xdmrtm__AlarmArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray), type))
		return soap->error;
	if (a->Xdmrtm__AlarmArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__AlarmArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__Alarm(soap, "item", -1, a->Xdmrtm__AlarmArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__AlarmArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__AlarmArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__AlarmArray * SOAP_FMAC4 soap_in_Xdmrtm__AlarmArray(struct soap *soap, const char *tag, Xdmrtm__AlarmArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__AlarmArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray, sizeof(Xdmrtm__AlarmArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__AlarmArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__AlarmArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__AlarmArray::item = (Xdmrtm__Alarm **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__Alarm *));
					if (a->Xdmrtm__AlarmArray::item == NULL)
						return NULL;
					*a->Xdmrtm__AlarmArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__Alarm(soap, "item", a->Xdmrtm__AlarmArray::item, "Xdmrtm:Alarm"))
				{	a->Xdmrtm__AlarmArray::__sizeitem++;
					a->Xdmrtm__AlarmArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__AlarmArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__AlarmArray::__sizeitem)
			a->Xdmrtm__AlarmArray::item = (Xdmrtm__Alarm **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__AlarmArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__AlarmArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray, 0, sizeof(Xdmrtm__AlarmArray), 0, soap_copy_Xdmrtm__AlarmArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__AlarmArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:AlarmArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__AlarmArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__AlarmArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__AlarmArray * SOAP_FMAC4 soap_get_Xdmrtm__AlarmArray(struct soap *soap, Xdmrtm__AlarmArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__AlarmArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__AlarmArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__AlarmArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__AlarmArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__AlarmArray);
		if (size)
			*size = sizeof(Xdmrtm__AlarmArray);
		((Xdmrtm__AlarmArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__AlarmArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__AlarmArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__AlarmArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__AlarmArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__AlarmArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__AlarmArray %p -> %p\n", q, p));
	*(Xdmrtm__AlarmArray*)p = *(Xdmrtm__AlarmArray*)q;
}

void Xdmrtm__Alarm::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__Alarm::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__Alarm::sDeviceNo);
	soap_default_LONG64(soap, &this->Xdmrtm__Alarm::nFreq);
	soap_default_LONG64(soap, &this->Xdmrtm__Alarm::nDateTime);
	soap_default_std__string(soap, &this->Xdmrtm__Alarm::sContext);
	soap_default_std__string(soap, &this->Xdmrtm__Alarm::sUser);
	soap_default_std__string(soap, &this->Xdmrtm__Alarm::sDes);
	soap_default_float(soap, &this->Xdmrtm__Alarm::fLevel);
	/* transient soap skipped */
}

void Xdmrtm__Alarm::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__Alarm::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__Alarm::sDeviceNo);
	soap_serialize_std__string(soap, &this->Xdmrtm__Alarm::sContext);
	soap_serialize_std__string(soap, &this->Xdmrtm__Alarm::sUser);
	soap_serialize_std__string(soap, &this->Xdmrtm__Alarm::sDes);
	/* transient soap skipped */
}

int Xdmrtm__Alarm::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__Alarm(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__Alarm(struct soap *soap, const char *tag, int id, const Xdmrtm__Alarm *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__Alarm::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNo", -1, &(a->Xdmrtm__Alarm::sDeviceNo), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nFreq", -1, &(a->Xdmrtm__Alarm::nFreq), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nDateTime", -1, &(a->Xdmrtm__Alarm::nDateTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sContext", -1, &(a->Xdmrtm__Alarm::sContext), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sUser", -1, &(a->Xdmrtm__Alarm::sUser), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDes", -1, &(a->Xdmrtm__Alarm::sDes), ""))
		return soap->error;
	if (soap_out_float(soap, "fLevel", -1, &(a->Xdmrtm__Alarm::fLevel), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__Alarm::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__Alarm(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__Alarm * SOAP_FMAC4 soap_in_Xdmrtm__Alarm(struct soap *soap, const char *tag, Xdmrtm__Alarm *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__Alarm *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm, sizeof(Xdmrtm__Alarm), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__Alarm *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNo1 = 1;
	size_t soap_flag_nFreq1 = 1;
	size_t soap_flag_nDateTime1 = 1;
	size_t soap_flag_sContext1 = 1;
	size_t soap_flag_sUser1 = 1;
	size_t soap_flag_sDes1 = 1;
	size_t soap_flag_fLevel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__Alarm::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNo", &(a->Xdmrtm__Alarm::sDeviceNo), "xsd:string"))
				{	soap_flag_sDeviceNo1--;
					continue;
				}
			if (soap_flag_nFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nFreq", &(a->Xdmrtm__Alarm::nFreq), "xsd:long"))
				{	soap_flag_nFreq1--;
					continue;
				}
			if (soap_flag_nDateTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nDateTime", &(a->Xdmrtm__Alarm::nDateTime), "xsd:long"))
				{	soap_flag_nDateTime1--;
					continue;
				}
			if (soap_flag_sContext1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sContext", &(a->Xdmrtm__Alarm::sContext), "xsd:string"))
				{	soap_flag_sContext1--;
					continue;
				}
			if (soap_flag_sUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUser", &(a->Xdmrtm__Alarm::sUser), "xsd:string"))
				{	soap_flag_sUser1--;
					continue;
				}
			if (soap_flag_sDes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDes", &(a->Xdmrtm__Alarm::sDes), "xsd:string"))
				{	soap_flag_sDes1--;
					continue;
				}
			if (soap_flag_fLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "fLevel", &(a->Xdmrtm__Alarm::fLevel), "xsd:float"))
				{	soap_flag_fLevel1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Alarm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm, 0, sizeof(Xdmrtm__Alarm), 0, soap_copy_Xdmrtm__Alarm);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNo1 > 0 || soap_flag_nFreq1 > 0 || soap_flag_nDateTime1 > 0 || soap_flag_sContext1 > 0 || soap_flag_sUser1 > 0 || soap_flag_sDes1 > 0 || soap_flag_fLevel1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__Alarm::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:Alarm", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__Alarm::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__Alarm(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__Alarm * SOAP_FMAC4 soap_get_Xdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__Alarm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__Alarm * SOAP_FMAC2 soap_instantiate_Xdmrtm__Alarm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__Alarm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Alarm);
		if (size)
			*size = sizeof(Xdmrtm__Alarm);
		((Xdmrtm__Alarm*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Alarm[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__Alarm);
		for (int i = 0; i < n; i++)
			((Xdmrtm__Alarm*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__Alarm*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__Alarm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__Alarm %p -> %p\n", q, p));
	*(Xdmrtm__Alarm*)p = *(Xdmrtm__Alarm*)q;
}

void Xdmrtm__MonAnalysisReportAttachmentArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__MonAnalysisReportAttachmentArray::__sizeitem = 0;
	this->Xdmrtm__MonAnalysisReportAttachmentArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__MonAnalysisReportAttachmentArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__MonAnalysisReportAttachmentArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__MonAnalysisReportAttachmentArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachment(soap, this->Xdmrtm__MonAnalysisReportAttachmentArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__MonAnalysisReportAttachmentArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonAnalysisReportAttachmentArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, const char *tag, int id, const Xdmrtm__MonAnalysisReportAttachmentArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray), type))
		return soap->error;
	if (a->Xdmrtm__MonAnalysisReportAttachmentArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__MonAnalysisReportAttachmentArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__MonAnalysisReportAttachment(soap, "item", -1, a->Xdmrtm__MonAnalysisReportAttachmentArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonAnalysisReportAttachmentArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonAnalysisReportAttachmentArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachmentArray * SOAP_FMAC4 soap_in_Xdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportAttachmentArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonAnalysisReportAttachmentArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray, sizeof(Xdmrtm__MonAnalysisReportAttachmentArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonAnalysisReportAttachmentArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__MonAnalysisReportAttachmentArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__MonAnalysisReportAttachmentArray::item = (Xdmrtm__MonAnalysisReportAttachment **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__MonAnalysisReportAttachment *));
					if (a->Xdmrtm__MonAnalysisReportAttachmentArray::item == NULL)
						return NULL;
					*a->Xdmrtm__MonAnalysisReportAttachmentArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__MonAnalysisReportAttachment(soap, "item", a->Xdmrtm__MonAnalysisReportAttachmentArray::item, "Xdmrtm:MonAnalysisReportAttachment"))
				{	a->Xdmrtm__MonAnalysisReportAttachmentArray::__sizeitem++;
					a->Xdmrtm__MonAnalysisReportAttachmentArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__MonAnalysisReportAttachmentArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__MonAnalysisReportAttachmentArray::__sizeitem)
			a->Xdmrtm__MonAnalysisReportAttachmentArray::item = (Xdmrtm__MonAnalysisReportAttachment **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__MonAnalysisReportAttachmentArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonAnalysisReportAttachmentArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray, 0, sizeof(Xdmrtm__MonAnalysisReportAttachmentArray), 0, soap_copy_Xdmrtm__MonAnalysisReportAttachmentArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__MonAnalysisReportAttachmentArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonAnalysisReportAttachmentArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonAnalysisReportAttachmentArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonAnalysisReportAttachmentArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachmentArray * SOAP_FMAC4 soap_get_Xdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, Xdmrtm__MonAnalysisReportAttachmentArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonAnalysisReportAttachmentArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonAnalysisReportAttachmentArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonAnalysisReportAttachmentArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReportAttachmentArray);
		if (size)
			*size = sizeof(Xdmrtm__MonAnalysisReportAttachmentArray);
		((Xdmrtm__MonAnalysisReportAttachmentArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReportAttachmentArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonAnalysisReportAttachmentArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonAnalysisReportAttachmentArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonAnalysisReportAttachmentArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonAnalysisReportAttachmentArray %p -> %p\n", q, p));
	*(Xdmrtm__MonAnalysisReportAttachmentArray*)p = *(Xdmrtm__MonAnalysisReportAttachmentArray*)q;
}

void Xdmrtm__MonAnalysisReportAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sReportID);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sAttachmentID);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sFullPath);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sName);
	/* transient soap skipped */
}

void Xdmrtm__MonAnalysisReportAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sReportID);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sAttachmentID);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sFullPath);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReportAttachment::sName);
	/* transient soap skipped */
}

int Xdmrtm__MonAnalysisReportAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonAnalysisReportAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, const Xdmrtm__MonAnalysisReportAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "sReportID", -1, &(a->Xdmrtm__MonAnalysisReportAttachment::sReportID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAttachmentID", -1, &(a->Xdmrtm__MonAnalysisReportAttachment::sAttachmentID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sFullPath", -1, &(a->Xdmrtm__MonAnalysisReportAttachment::sFullPath), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__MonAnalysisReportAttachment::sName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonAnalysisReportAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonAnalysisReportAttachment(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachment * SOAP_FMAC4 soap_in_Xdmrtm__MonAnalysisReportAttachment(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonAnalysisReportAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment, sizeof(Xdmrtm__MonAnalysisReportAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonAnalysisReportAttachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sReportID1 = 1;
	size_t soap_flag_sAttachmentID1 = 1;
	size_t soap_flag_sFullPath1 = 1;
	size_t soap_flag_sName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sReportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sReportID", &(a->Xdmrtm__MonAnalysisReportAttachment::sReportID), "xsd:string"))
				{	soap_flag_sReportID1--;
					continue;
				}
			if (soap_flag_sAttachmentID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAttachmentID", &(a->Xdmrtm__MonAnalysisReportAttachment::sAttachmentID), "xsd:string"))
				{	soap_flag_sAttachmentID1--;
					continue;
				}
			if (soap_flag_sFullPath1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sFullPath", &(a->Xdmrtm__MonAnalysisReportAttachment::sFullPath), "xsd:string"))
				{	soap_flag_sFullPath1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__MonAnalysisReportAttachment::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonAnalysisReportAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment, 0, sizeof(Xdmrtm__MonAnalysisReportAttachment), 0, soap_copy_Xdmrtm__MonAnalysisReportAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sReportID1 > 0 || soap_flag_sAttachmentID1 > 0 || soap_flag_sFullPath1 > 0 || soap_flag_sName1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__MonAnalysisReportAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonAnalysisReportAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonAnalysisReportAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonAnalysisReportAttachment(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachment * SOAP_FMAC4 soap_get_Xdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonAnalysisReportAttachment * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonAnalysisReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonAnalysisReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReportAttachment);
		if (size)
			*size = sizeof(Xdmrtm__MonAnalysisReportAttachment);
		((Xdmrtm__MonAnalysisReportAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonAnalysisReportAttachment);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonAnalysisReportAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonAnalysisReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonAnalysisReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonAnalysisReportAttachment %p -> %p\n", q, p));
	*(Xdmrtm__MonAnalysisReportAttachment*)p = *(Xdmrtm__MonAnalysisReportAttachment*)q;
}

void Xdmrtm__MonAnalysisReportArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__MonAnalysisReportArray::__sizeitem = 0;
	this->Xdmrtm__MonAnalysisReportArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__MonAnalysisReportArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__MonAnalysisReportArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__MonAnalysisReportArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__MonAnalysisReport(soap, this->Xdmrtm__MonAnalysisReportArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__MonAnalysisReportArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonAnalysisReportArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonAnalysisReportArray(struct soap *soap, const char *tag, int id, const Xdmrtm__MonAnalysisReportArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray), type))
		return soap->error;
	if (a->Xdmrtm__MonAnalysisReportArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__MonAnalysisReportArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__MonAnalysisReport(soap, "item", -1, a->Xdmrtm__MonAnalysisReportArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonAnalysisReportArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonAnalysisReportArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportArray * SOAP_FMAC4 soap_in_Xdmrtm__MonAnalysisReportArray(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonAnalysisReportArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray, sizeof(Xdmrtm__MonAnalysisReportArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonAnalysisReportArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__MonAnalysisReportArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__MonAnalysisReportArray::item = (Xdmrtm__MonAnalysisReport **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__MonAnalysisReport *));
					if (a->Xdmrtm__MonAnalysisReportArray::item == NULL)
						return NULL;
					*a->Xdmrtm__MonAnalysisReportArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__MonAnalysisReport(soap, "item", a->Xdmrtm__MonAnalysisReportArray::item, "Xdmrtm:MonAnalysisReport"))
				{	a->Xdmrtm__MonAnalysisReportArray::__sizeitem++;
					a->Xdmrtm__MonAnalysisReportArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__MonAnalysisReportArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__MonAnalysisReportArray::__sizeitem)
			a->Xdmrtm__MonAnalysisReportArray::item = (Xdmrtm__MonAnalysisReport **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__MonAnalysisReportArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonAnalysisReportArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray, 0, sizeof(Xdmrtm__MonAnalysisReportArray), 0, soap_copy_Xdmrtm__MonAnalysisReportArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__MonAnalysisReportArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonAnalysisReportArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonAnalysisReportArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonAnalysisReportArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportArray * SOAP_FMAC4 soap_get_Xdmrtm__MonAnalysisReportArray(struct soap *soap, Xdmrtm__MonAnalysisReportArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonAnalysisReportArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonAnalysisReportArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonAnalysisReportArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonAnalysisReportArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReportArray);
		if (size)
			*size = sizeof(Xdmrtm__MonAnalysisReportArray);
		((Xdmrtm__MonAnalysisReportArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReportArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonAnalysisReportArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonAnalysisReportArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonAnalysisReportArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonAnalysisReportArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonAnalysisReportArray %p -> %p\n", q, p));
	*(Xdmrtm__MonAnalysisReportArray*)p = *(Xdmrtm__MonAnalysisReportArray*)q;
}

void Xdmrtm__MonAnalysisReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sReportID);
	soap_default_LONG64(soap, &this->Xdmrtm__MonAnalysisReport::nMonTime);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sStationNO);
	soap_default_LONG64(soap, &this->Xdmrtm__MonAnalysisReport::nFreq);
	soap_default_int(soap, &this->Xdmrtm__MonAnalysisReport::nLevel);
	soap_default_float(soap, &this->Xdmrtm__MonAnalysisReport::fAzimuth);
	soap_default_int(soap, &this->Xdmrtm__MonAnalysisReport::nType);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sTypeDes);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sLayoutDes);
	soap_default_LONG64(soap, &this->Xdmrtm__MonAnalysisReport::nWidth);
	soap_default_bool(soap, &this->Xdmrtm__MonAnalysisReport::bUsed);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sUserEva);
	soap_default_LONG64(soap, &this->Xdmrtm__MonAnalysisReport::sEffectiveDate);
	soap_default_bool(soap, &this->Xdmrtm__MonAnalysisReport::bAck);
	soap_default_LONG64(soap, &this->Xdmrtm__MonAnalysisReport::nAckDate);
	soap_default_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sUser);
	/* transient soap skipped */
}

void Xdmrtm__MonAnalysisReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sReportID);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sTypeDes);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sLayoutDes);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sUserEva);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonAnalysisReport::sUser);
	/* transient soap skipped */
}

int Xdmrtm__MonAnalysisReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonAnalysisReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonAnalysisReport(struct soap *soap, const char *tag, int id, const Xdmrtm__MonAnalysisReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport), type))
		return soap->error;
	if (soap_out_std__string(soap, "sReportID", -1, &(a->Xdmrtm__MonAnalysisReport::sReportID), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nMonTime", -1, &(a->Xdmrtm__MonAnalysisReport::nMonTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__MonAnalysisReport::sStationNO), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nFreq", -1, &(a->Xdmrtm__MonAnalysisReport::nFreq), ""))
		return soap->error;
	if (soap_out_int(soap, "nLevel", -1, &(a->Xdmrtm__MonAnalysisReport::nLevel), ""))
		return soap->error;
	if (soap_out_float(soap, "fAzimuth", -1, &(a->Xdmrtm__MonAnalysisReport::fAzimuth), ""))
		return soap->error;
	if (soap_out_int(soap, "nType", -1, &(a->Xdmrtm__MonAnalysisReport::nType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sTypeDes", -1, &(a->Xdmrtm__MonAnalysisReport::sTypeDes), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sLayoutDes", -1, &(a->Xdmrtm__MonAnalysisReport::sLayoutDes), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nWidth", -1, &(a->Xdmrtm__MonAnalysisReport::nWidth), ""))
		return soap->error;
	if (soap_out_bool(soap, "bUsed", -1, &(a->Xdmrtm__MonAnalysisReport::bUsed), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sUserEva", -1, &(a->Xdmrtm__MonAnalysisReport::sUserEva), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "sEffectiveDate", -1, &(a->Xdmrtm__MonAnalysisReport::sEffectiveDate), ""))
		return soap->error;
	if (soap_out_bool(soap, "bAck", -1, &(a->Xdmrtm__MonAnalysisReport::bAck), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nAckDate", -1, &(a->Xdmrtm__MonAnalysisReport::nAckDate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sUser", -1, &(a->Xdmrtm__MonAnalysisReport::sUser), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonAnalysisReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonAnalysisReport(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReport * SOAP_FMAC4 soap_in_Xdmrtm__MonAnalysisReport(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonAnalysisReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport, sizeof(Xdmrtm__MonAnalysisReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonAnalysisReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sReportID1 = 1;
	size_t soap_flag_nMonTime1 = 1;
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_nFreq1 = 1;
	size_t soap_flag_nLevel1 = 1;
	size_t soap_flag_fAzimuth1 = 1;
	size_t soap_flag_nType1 = 1;
	size_t soap_flag_sTypeDes1 = 1;
	size_t soap_flag_sLayoutDes1 = 1;
	size_t soap_flag_nWidth1 = 1;
	size_t soap_flag_bUsed1 = 1;
	size_t soap_flag_sUserEva1 = 1;
	size_t soap_flag_sEffectiveDate1 = 1;
	size_t soap_flag_bAck1 = 1;
	size_t soap_flag_nAckDate1 = 1;
	size_t soap_flag_sUser1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sReportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sReportID", &(a->Xdmrtm__MonAnalysisReport::sReportID), "xsd:string"))
				{	soap_flag_sReportID1--;
					continue;
				}
			if (soap_flag_nMonTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nMonTime", &(a->Xdmrtm__MonAnalysisReport::nMonTime), "xsd:long"))
				{	soap_flag_nMonTime1--;
					continue;
				}
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__MonAnalysisReport::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_nFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nFreq", &(a->Xdmrtm__MonAnalysisReport::nFreq), "xsd:long"))
				{	soap_flag_nFreq1--;
					continue;
				}
			if (soap_flag_nLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nLevel", &(a->Xdmrtm__MonAnalysisReport::nLevel), "xsd:int"))
				{	soap_flag_nLevel1--;
					continue;
				}
			if (soap_flag_fAzimuth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_float(soap, "fAzimuth", &(a->Xdmrtm__MonAnalysisReport::fAzimuth), "xsd:float"))
				{	soap_flag_fAzimuth1--;
					continue;
				}
			if (soap_flag_nType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nType", &(a->Xdmrtm__MonAnalysisReport::nType), "xsd:int"))
				{	soap_flag_nType1--;
					continue;
				}
			if (soap_flag_sTypeDes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sTypeDes", &(a->Xdmrtm__MonAnalysisReport::sTypeDes), "xsd:string"))
				{	soap_flag_sTypeDes1--;
					continue;
				}
			if (soap_flag_sLayoutDes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sLayoutDes", &(a->Xdmrtm__MonAnalysisReport::sLayoutDes), "xsd:string"))
				{	soap_flag_sLayoutDes1--;
					continue;
				}
			if (soap_flag_nWidth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nWidth", &(a->Xdmrtm__MonAnalysisReport::nWidth), "xsd:long"))
				{	soap_flag_nWidth1--;
					continue;
				}
			if (soap_flag_bUsed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "bUsed", &(a->Xdmrtm__MonAnalysisReport::bUsed), "xsd:boolean"))
				{	soap_flag_bUsed1--;
					continue;
				}
			if (soap_flag_sUserEva1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUserEva", &(a->Xdmrtm__MonAnalysisReport::sUserEva), "xsd:string"))
				{	soap_flag_sUserEva1--;
					continue;
				}
			if (soap_flag_sEffectiveDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "sEffectiveDate", &(a->Xdmrtm__MonAnalysisReport::sEffectiveDate), "xsd:long"))
				{	soap_flag_sEffectiveDate1--;
					continue;
				}
			if (soap_flag_bAck1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "bAck", &(a->Xdmrtm__MonAnalysisReport::bAck), "xsd:boolean"))
				{	soap_flag_bAck1--;
					continue;
				}
			if (soap_flag_nAckDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nAckDate", &(a->Xdmrtm__MonAnalysisReport::nAckDate), "xsd:long"))
				{	soap_flag_nAckDate1--;
					continue;
				}
			if (soap_flag_sUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUser", &(a->Xdmrtm__MonAnalysisReport::sUser), "xsd:string"))
				{	soap_flag_sUser1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonAnalysisReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport, 0, sizeof(Xdmrtm__MonAnalysisReport), 0, soap_copy_Xdmrtm__MonAnalysisReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sReportID1 > 0 || soap_flag_nMonTime1 > 0 || soap_flag_sStationNO1 > 0 || soap_flag_nFreq1 > 0 || soap_flag_nLevel1 > 0 || soap_flag_fAzimuth1 > 0 || soap_flag_nType1 > 0 || soap_flag_sTypeDes1 > 0 || soap_flag_sLayoutDes1 > 0 || soap_flag_nWidth1 > 0 || soap_flag_bUsed1 > 0 || soap_flag_sUserEva1 > 0 || soap_flag_sEffectiveDate1 > 0 || soap_flag_bAck1 > 0 || soap_flag_nAckDate1 > 0 || soap_flag_sUser1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__MonAnalysisReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonAnalysisReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonAnalysisReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonAnalysisReport(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReport * SOAP_FMAC4 soap_get_Xdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonAnalysisReport * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReport);
		if (size)
			*size = sizeof(Xdmrtm__MonAnalysisReport);
		((Xdmrtm__MonAnalysisReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonAnalysisReport);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonAnalysisReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonAnalysisReport %p -> %p\n", q, p));
	*(Xdmrtm__MonAnalysisReport*)p = *(Xdmrtm__MonAnalysisReport*)q;
}

void Xdmrtm__PlanTaskArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__PlanTaskArray::__sizeitem = 0;
	this->Xdmrtm__PlanTaskArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__PlanTaskArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__PlanTaskArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__PlanTaskArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__PlanTask(soap, this->Xdmrtm__PlanTaskArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__PlanTaskArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__PlanTaskArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__PlanTaskArray(struct soap *soap, const char *tag, int id, const Xdmrtm__PlanTaskArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray), type))
		return soap->error;
	if (a->Xdmrtm__PlanTaskArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__PlanTaskArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__PlanTask(soap, "item", -1, a->Xdmrtm__PlanTaskArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__PlanTaskArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__PlanTaskArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskArray * SOAP_FMAC4 soap_in_Xdmrtm__PlanTaskArray(struct soap *soap, const char *tag, Xdmrtm__PlanTaskArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__PlanTaskArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray, sizeof(Xdmrtm__PlanTaskArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__PlanTaskArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__PlanTaskArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__PlanTaskArray::item = (Xdmrtm__PlanTask **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__PlanTask *));
					if (a->Xdmrtm__PlanTaskArray::item == NULL)
						return NULL;
					*a->Xdmrtm__PlanTaskArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__PlanTask(soap, "item", a->Xdmrtm__PlanTaskArray::item, "Xdmrtm:PlanTask"))
				{	a->Xdmrtm__PlanTaskArray::__sizeitem++;
					a->Xdmrtm__PlanTaskArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__PlanTaskArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__PlanTaskArray::__sizeitem)
			a->Xdmrtm__PlanTaskArray::item = (Xdmrtm__PlanTask **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__PlanTaskArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__PlanTaskArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray, 0, sizeof(Xdmrtm__PlanTaskArray), 0, soap_copy_Xdmrtm__PlanTaskArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__PlanTaskArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:PlanTaskArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__PlanTaskArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__PlanTaskArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskArray * SOAP_FMAC4 soap_get_Xdmrtm__PlanTaskArray(struct soap *soap, Xdmrtm__PlanTaskArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__PlanTaskArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__PlanTaskArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__PlanTaskArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__PlanTaskArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTaskArray);
		if (size)
			*size = sizeof(Xdmrtm__PlanTaskArray);
		((Xdmrtm__PlanTaskArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTaskArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__PlanTaskArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__PlanTaskArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__PlanTaskArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__PlanTaskArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__PlanTaskArray %p -> %p\n", q, p));
	*(Xdmrtm__PlanTaskArray*)p = *(Xdmrtm__PlanTaskArray*)q;
}

void Xdmrtm__PlanTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__PlanTask::sName);
	soap_default_LONG64(soap, &this->Xdmrtm__PlanTask::nID);
	soap_default_std__string(soap, &this->Xdmrtm__PlanTask::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__PlanTask::sDeviceNO);
	soap_default_int(soap, &this->Xdmrtm__PlanTask::nFunc);
	soap_default_LONG64(soap, &this->Xdmrtm__PlanTask::nBeginDateTime);
	soap_default_LONG64(soap, &this->Xdmrtm__PlanTask::nEndDateTime);
	soap_default_int(soap, &this->Xdmrtm__PlanTask::nType);
	soap_default_std__string(soap, &this->Xdmrtm__PlanTask::sTaskXMLInfo);
	/* transient soap skipped */
}

void Xdmrtm__PlanTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__PlanTask::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__PlanTask::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__PlanTask::sDeviceNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__PlanTask::sTaskXMLInfo);
	/* transient soap skipped */
}

int Xdmrtm__PlanTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__PlanTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__PlanTask(struct soap *soap, const char *tag, int id, const Xdmrtm__PlanTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask), type))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__PlanTask::sName), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nID", -1, &(a->Xdmrtm__PlanTask::nID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__PlanTask::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->Xdmrtm__PlanTask::sDeviceNO), ""))
		return soap->error;
	if (soap_out_int(soap, "nFunc", -1, &(a->Xdmrtm__PlanTask::nFunc), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nBeginDateTime", -1, &(a->Xdmrtm__PlanTask::nBeginDateTime), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nEndDateTime", -1, &(a->Xdmrtm__PlanTask::nEndDateTime), ""))
		return soap->error;
	if (soap_out_int(soap, "nType", -1, &(a->Xdmrtm__PlanTask::nType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sTaskXMLInfo", -1, &(a->Xdmrtm__PlanTask::sTaskXMLInfo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__PlanTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__PlanTask(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__PlanTask * SOAP_FMAC4 soap_in_Xdmrtm__PlanTask(struct soap *soap, const char *tag, Xdmrtm__PlanTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__PlanTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask, sizeof(Xdmrtm__PlanTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__PlanTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_nID1 = 1;
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	size_t soap_flag_nFunc1 = 1;
	size_t soap_flag_nBeginDateTime1 = 1;
	size_t soap_flag_nEndDateTime1 = 1;
	size_t soap_flag_nType1 = 1;
	size_t soap_flag_sTaskXMLInfo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__PlanTask::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_nID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nID", &(a->Xdmrtm__PlanTask::nID), "xsd:long"))
				{	soap_flag_nID1--;
					continue;
				}
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__PlanTask::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->Xdmrtm__PlanTask::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			if (soap_flag_nFunc1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFunc", &(a->Xdmrtm__PlanTask::nFunc), "xsd:int"))
				{	soap_flag_nFunc1--;
					continue;
				}
			if (soap_flag_nBeginDateTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nBeginDateTime", &(a->Xdmrtm__PlanTask::nBeginDateTime), "xsd:long"))
				{	soap_flag_nBeginDateTime1--;
					continue;
				}
			if (soap_flag_nEndDateTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nEndDateTime", &(a->Xdmrtm__PlanTask::nEndDateTime), "xsd:long"))
				{	soap_flag_nEndDateTime1--;
					continue;
				}
			if (soap_flag_nType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nType", &(a->Xdmrtm__PlanTask::nType), "xsd:int"))
				{	soap_flag_nType1--;
					continue;
				}
			if (soap_flag_sTaskXMLInfo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sTaskXMLInfo", &(a->Xdmrtm__PlanTask::sTaskXMLInfo), "xsd:string"))
				{	soap_flag_sTaskXMLInfo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__PlanTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask, 0, sizeof(Xdmrtm__PlanTask), 0, soap_copy_Xdmrtm__PlanTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sName1 > 0 || soap_flag_nID1 > 0 || soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNO1 > 0 || soap_flag_nFunc1 > 0 || soap_flag_nBeginDateTime1 > 0 || soap_flag_nEndDateTime1 > 0 || soap_flag_nType1 > 0 || soap_flag_sTaskXMLInfo1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__PlanTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:PlanTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__PlanTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__PlanTask(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__PlanTask * SOAP_FMAC4 soap_get_Xdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__PlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__PlanTask * SOAP_FMAC2 soap_instantiate_Xdmrtm__PlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__PlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTask);
		if (size)
			*size = sizeof(Xdmrtm__PlanTask);
		((Xdmrtm__PlanTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__PlanTask);
		for (int i = 0; i < n; i++)
			((Xdmrtm__PlanTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__PlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__PlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__PlanTask %p -> %p\n", q, p));
	*(Xdmrtm__PlanTask*)p = *(Xdmrtm__PlanTask*)q;
}

void Xdmrtm__PlanTaskIDArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__PlanTaskIDArray::__sizeitem = 0;
	this->Xdmrtm__PlanTaskIDArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__PlanTaskIDArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__PlanTaskIDArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__PlanTaskIDArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__PlanTaskID(soap, this->Xdmrtm__PlanTaskIDArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__PlanTaskIDArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__PlanTaskIDArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__PlanTaskIDArray(struct soap *soap, const char *tag, int id, const Xdmrtm__PlanTaskIDArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray), type))
		return soap->error;
	if (a->Xdmrtm__PlanTaskIDArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__PlanTaskIDArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__PlanTaskID(soap, "item", -1, a->Xdmrtm__PlanTaskIDArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__PlanTaskIDArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__PlanTaskIDArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskIDArray * SOAP_FMAC4 soap_in_Xdmrtm__PlanTaskIDArray(struct soap *soap, const char *tag, Xdmrtm__PlanTaskIDArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__PlanTaskIDArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray, sizeof(Xdmrtm__PlanTaskIDArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__PlanTaskIDArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__PlanTaskIDArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__PlanTaskIDArray::item = (Xdmrtm__PlanTaskID **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__PlanTaskID *));
					if (a->Xdmrtm__PlanTaskIDArray::item == NULL)
						return NULL;
					*a->Xdmrtm__PlanTaskIDArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__PlanTaskID(soap, "item", a->Xdmrtm__PlanTaskIDArray::item, "Xdmrtm:PlanTaskID"))
				{	a->Xdmrtm__PlanTaskIDArray::__sizeitem++;
					a->Xdmrtm__PlanTaskIDArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__PlanTaskIDArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__PlanTaskIDArray::__sizeitem)
			a->Xdmrtm__PlanTaskIDArray::item = (Xdmrtm__PlanTaskID **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__PlanTaskIDArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__PlanTaskIDArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray, 0, sizeof(Xdmrtm__PlanTaskIDArray), 0, soap_copy_Xdmrtm__PlanTaskIDArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__PlanTaskIDArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:PlanTaskIDArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__PlanTaskIDArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__PlanTaskIDArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskIDArray * SOAP_FMAC4 soap_get_Xdmrtm__PlanTaskIDArray(struct soap *soap, Xdmrtm__PlanTaskIDArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__PlanTaskIDArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__PlanTaskIDArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__PlanTaskIDArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__PlanTaskIDArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTaskIDArray);
		if (size)
			*size = sizeof(Xdmrtm__PlanTaskIDArray);
		((Xdmrtm__PlanTaskIDArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTaskIDArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__PlanTaskIDArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__PlanTaskIDArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__PlanTaskIDArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__PlanTaskIDArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__PlanTaskIDArray %p -> %p\n", q, p));
	*(Xdmrtm__PlanTaskIDArray*)p = *(Xdmrtm__PlanTaskIDArray*)q;
}

void Xdmrtm__PlanTaskID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->Xdmrtm__PlanTaskID::nID);
	/* transient soap skipped */
}

void Xdmrtm__PlanTaskID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int Xdmrtm__PlanTaskID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__PlanTaskID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__PlanTaskID(struct soap *soap, const char *tag, int id, const Xdmrtm__PlanTaskID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID), type))
		return soap->error;
	if (soap_out_LONG64(soap, "nID", -1, &(a->Xdmrtm__PlanTaskID::nID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__PlanTaskID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__PlanTaskID(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskID * SOAP_FMAC4 soap_in_Xdmrtm__PlanTaskID(struct soap *soap, const char *tag, Xdmrtm__PlanTaskID *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__PlanTaskID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID, sizeof(Xdmrtm__PlanTaskID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__PlanTaskID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nID", &(a->Xdmrtm__PlanTaskID::nID), "xsd:long"))
				{	soap_flag_nID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__PlanTaskID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID, 0, sizeof(Xdmrtm__PlanTaskID), 0, soap_copy_Xdmrtm__PlanTaskID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__PlanTaskID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:PlanTaskID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__PlanTaskID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__PlanTaskID(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskID * SOAP_FMAC4 soap_get_Xdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__PlanTaskID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__PlanTaskID * SOAP_FMAC2 soap_instantiate_Xdmrtm__PlanTaskID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__PlanTaskID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTaskID);
		if (size)
			*size = sizeof(Xdmrtm__PlanTaskID);
		((Xdmrtm__PlanTaskID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__PlanTaskID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__PlanTaskID);
		for (int i = 0; i < n; i++)
			((Xdmrtm__PlanTaskID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__PlanTaskID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__PlanTaskID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__PlanTaskID %p -> %p\n", q, p));
	*(Xdmrtm__PlanTaskID*)p = *(Xdmrtm__PlanTaskID*)q;
}

void Xdmrtm__FreqLayoutArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__FreqLayoutArray::__sizeitem = 0;
	this->Xdmrtm__FreqLayoutArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__FreqLayoutArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__FreqLayoutArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__FreqLayoutArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__FreqLayout(soap, this->Xdmrtm__FreqLayoutArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__FreqLayoutArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__FreqLayoutArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__FreqLayoutArray(struct soap *soap, const char *tag, int id, const Xdmrtm__FreqLayoutArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray), type))
		return soap->error;
	if (a->Xdmrtm__FreqLayoutArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__FreqLayoutArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__FreqLayout(soap, "item", -1, a->Xdmrtm__FreqLayoutArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__FreqLayoutArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__FreqLayoutArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayoutArray * SOAP_FMAC4 soap_in_Xdmrtm__FreqLayoutArray(struct soap *soap, const char *tag, Xdmrtm__FreqLayoutArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__FreqLayoutArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray, sizeof(Xdmrtm__FreqLayoutArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__FreqLayoutArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__FreqLayoutArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__FreqLayoutArray::item = (Xdmrtm__FreqLayout **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__FreqLayout *));
					if (a->Xdmrtm__FreqLayoutArray::item == NULL)
						return NULL;
					*a->Xdmrtm__FreqLayoutArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__FreqLayout(soap, "item", a->Xdmrtm__FreqLayoutArray::item, "Xdmrtm:FreqLayout"))
				{	a->Xdmrtm__FreqLayoutArray::__sizeitem++;
					a->Xdmrtm__FreqLayoutArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__FreqLayoutArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__FreqLayoutArray::__sizeitem)
			a->Xdmrtm__FreqLayoutArray::item = (Xdmrtm__FreqLayout **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__FreqLayoutArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__FreqLayoutArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray, 0, sizeof(Xdmrtm__FreqLayoutArray), 0, soap_copy_Xdmrtm__FreqLayoutArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__FreqLayoutArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:FreqLayoutArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__FreqLayoutArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__FreqLayoutArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayoutArray * SOAP_FMAC4 soap_get_Xdmrtm__FreqLayoutArray(struct soap *soap, Xdmrtm__FreqLayoutArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__FreqLayoutArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__FreqLayoutArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__FreqLayoutArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__FreqLayoutArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__FreqLayoutArray);
		if (size)
			*size = sizeof(Xdmrtm__FreqLayoutArray);
		((Xdmrtm__FreqLayoutArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__FreqLayoutArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__FreqLayoutArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__FreqLayoutArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__FreqLayoutArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__FreqLayoutArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__FreqLayoutArray %p -> %p\n", q, p));
	*(Xdmrtm__FreqLayoutArray*)p = *(Xdmrtm__FreqLayoutArray*)q;
}

void Xdmrtm__FreqLayout::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__FreqLayout::sName);
	soap_default_LONG64(soap, &this->Xdmrtm__FreqLayout::nBeginFreq);
	soap_default_LONG64(soap, &this->Xdmrtm__FreqLayout::nEndFreq);
	soap_default_std__string(soap, &this->Xdmrtm__FreqLayout::sGroupName);
	soap_default_LONG64(soap, &this->Xdmrtm__FreqLayout::nStep);
	soap_default_LONG64(soap, &this->Xdmrtm__FreqLayout::nEmitWidth);
	/* transient soap skipped */
}

void Xdmrtm__FreqLayout::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__FreqLayout::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__FreqLayout::sGroupName);
	/* transient soap skipped */
}

int Xdmrtm__FreqLayout::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__FreqLayout(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__FreqLayout(struct soap *soap, const char *tag, int id, const Xdmrtm__FreqLayout *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout), type))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__FreqLayout::sName), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nBeginFreq", -1, &(a->Xdmrtm__FreqLayout::nBeginFreq), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nEndFreq", -1, &(a->Xdmrtm__FreqLayout::nEndFreq), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sGroupName", -1, &(a->Xdmrtm__FreqLayout::sGroupName), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nStep", -1, &(a->Xdmrtm__FreqLayout::nStep), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nEmitWidth", -1, &(a->Xdmrtm__FreqLayout::nEmitWidth), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__FreqLayout::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__FreqLayout(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayout * SOAP_FMAC4 soap_in_Xdmrtm__FreqLayout(struct soap *soap, const char *tag, Xdmrtm__FreqLayout *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__FreqLayout *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout, sizeof(Xdmrtm__FreqLayout), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__FreqLayout *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_nBeginFreq1 = 1;
	size_t soap_flag_nEndFreq1 = 1;
	size_t soap_flag_sGroupName1 = 1;
	size_t soap_flag_nStep1 = 1;
	size_t soap_flag_nEmitWidth1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__FreqLayout::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_nBeginFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nBeginFreq", &(a->Xdmrtm__FreqLayout::nBeginFreq), "xsd:long"))
				{	soap_flag_nBeginFreq1--;
					continue;
				}
			if (soap_flag_nEndFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nEndFreq", &(a->Xdmrtm__FreqLayout::nEndFreq), "xsd:long"))
				{	soap_flag_nEndFreq1--;
					continue;
				}
			if (soap_flag_sGroupName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sGroupName", &(a->Xdmrtm__FreqLayout::sGroupName), "xsd:string"))
				{	soap_flag_sGroupName1--;
					continue;
				}
			if (soap_flag_nStep1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nStep", &(a->Xdmrtm__FreqLayout::nStep), "xsd:long"))
				{	soap_flag_nStep1--;
					continue;
				}
			if (soap_flag_nEmitWidth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nEmitWidth", &(a->Xdmrtm__FreqLayout::nEmitWidth), "xsd:long"))
				{	soap_flag_nEmitWidth1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__FreqLayout *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout, 0, sizeof(Xdmrtm__FreqLayout), 0, soap_copy_Xdmrtm__FreqLayout);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sName1 > 0 || soap_flag_nBeginFreq1 > 0 || soap_flag_nEndFreq1 > 0 || soap_flag_sGroupName1 > 0 || soap_flag_nStep1 > 0 || soap_flag_nEmitWidth1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__FreqLayout::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:FreqLayout", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__FreqLayout::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__FreqLayout(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayout * SOAP_FMAC4 soap_get_Xdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__FreqLayout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__FreqLayout * SOAP_FMAC2 soap_instantiate_Xdmrtm__FreqLayout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__FreqLayout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__FreqLayout);
		if (size)
			*size = sizeof(Xdmrtm__FreqLayout);
		((Xdmrtm__FreqLayout*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__FreqLayout[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__FreqLayout);
		for (int i = 0; i < n; i++)
			((Xdmrtm__FreqLayout*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__FreqLayout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__FreqLayout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__FreqLayout %p -> %p\n", q, p));
	*(Xdmrtm__FreqLayout*)p = *(Xdmrtm__FreqLayout*)q;
}

void Xdmrtm__DeviceUseingInfoArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__DeviceUseingInfoArray::__sizeitem = 0;
	this->Xdmrtm__DeviceUseingInfoArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__DeviceUseingInfoArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__DeviceUseingInfoArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__DeviceUseingInfoArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__DeviceUseingInfo(soap, this->Xdmrtm__DeviceUseingInfoArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__DeviceUseingInfoArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceUseingInfoArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceUseingInfoArray(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceUseingInfoArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray), type))
		return soap->error;
	if (a->Xdmrtm__DeviceUseingInfoArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__DeviceUseingInfoArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__DeviceUseingInfo(soap, "item", -1, a->Xdmrtm__DeviceUseingInfoArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceUseingInfoArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceUseingInfoArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfoArray * SOAP_FMAC4 soap_in_Xdmrtm__DeviceUseingInfoArray(struct soap *soap, const char *tag, Xdmrtm__DeviceUseingInfoArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceUseingInfoArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray, sizeof(Xdmrtm__DeviceUseingInfoArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceUseingInfoArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__DeviceUseingInfoArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__DeviceUseingInfoArray::item = (Xdmrtm__DeviceUseingInfo **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__DeviceUseingInfo *));
					if (a->Xdmrtm__DeviceUseingInfoArray::item == NULL)
						return NULL;
					*a->Xdmrtm__DeviceUseingInfoArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__DeviceUseingInfo(soap, "item", a->Xdmrtm__DeviceUseingInfoArray::item, "Xdmrtm:DeviceUseingInfo"))
				{	a->Xdmrtm__DeviceUseingInfoArray::__sizeitem++;
					a->Xdmrtm__DeviceUseingInfoArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__DeviceUseingInfoArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__DeviceUseingInfoArray::__sizeitem)
			a->Xdmrtm__DeviceUseingInfoArray::item = (Xdmrtm__DeviceUseingInfo **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__DeviceUseingInfoArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceUseingInfoArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray, 0, sizeof(Xdmrtm__DeviceUseingInfoArray), 0, soap_copy_Xdmrtm__DeviceUseingInfoArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__DeviceUseingInfoArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceUseingInfoArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceUseingInfoArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceUseingInfoArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfoArray * SOAP_FMAC4 soap_get_Xdmrtm__DeviceUseingInfoArray(struct soap *soap, Xdmrtm__DeviceUseingInfoArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceUseingInfoArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceUseingInfoArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceUseingInfoArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceUseingInfoArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUseingInfoArray);
		if (size)
			*size = sizeof(Xdmrtm__DeviceUseingInfoArray);
		((Xdmrtm__DeviceUseingInfoArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUseingInfoArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceUseingInfoArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceUseingInfoArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceUseingInfoArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceUseingInfoArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceUseingInfoArray %p -> %p\n", q, p));
	*(Xdmrtm__DeviceUseingInfoArray*)p = *(Xdmrtm__DeviceUseingInfoArray*)q;
}

void Xdmrtm__DeviceUseingInfo::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sUser);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sLocaltion);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sDeviceNO);
	soap_default_int(soap, &this->Xdmrtm__DeviceUseingInfo::nFunc);
	soap_default_LONG64(soap, &this->Xdmrtm__DeviceUseingInfo::nTaskID);
	/* transient soap skipped */
}

void Xdmrtm__DeviceUseingInfo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sUser);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sLocaltion);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUseingInfo::sDeviceNO);
	/* transient soap skipped */
}

int Xdmrtm__DeviceUseingInfo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceUseingInfo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceUseingInfo(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceUseingInfo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo), type))
		return soap->error;
	if (soap_out_std__string(soap, "sUser", -1, &(a->Xdmrtm__DeviceUseingInfo::sUser), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sLocaltion", -1, &(a->Xdmrtm__DeviceUseingInfo::sLocaltion), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__DeviceUseingInfo::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->Xdmrtm__DeviceUseingInfo::sDeviceNO), ""))
		return soap->error;
	if (soap_out_int(soap, "nFunc", -1, &(a->Xdmrtm__DeviceUseingInfo::nFunc), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nTaskID", -1, &(a->Xdmrtm__DeviceUseingInfo::nTaskID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceUseingInfo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceUseingInfo(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfo * SOAP_FMAC4 soap_in_Xdmrtm__DeviceUseingInfo(struct soap *soap, const char *tag, Xdmrtm__DeviceUseingInfo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceUseingInfo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo, sizeof(Xdmrtm__DeviceUseingInfo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceUseingInfo *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sUser1 = 1;
	size_t soap_flag_sLocaltion1 = 1;
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	size_t soap_flag_nFunc1 = 1;
	size_t soap_flag_nTaskID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUser", &(a->Xdmrtm__DeviceUseingInfo::sUser), "xsd:string"))
				{	soap_flag_sUser1--;
					continue;
				}
			if (soap_flag_sLocaltion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sLocaltion", &(a->Xdmrtm__DeviceUseingInfo::sLocaltion), "xsd:string"))
				{	soap_flag_sLocaltion1--;
					continue;
				}
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__DeviceUseingInfo::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->Xdmrtm__DeviceUseingInfo::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			if (soap_flag_nFunc1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFunc", &(a->Xdmrtm__DeviceUseingInfo::nFunc), "xsd:int"))
				{	soap_flag_nFunc1--;
					continue;
				}
			if (soap_flag_nTaskID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nTaskID", &(a->Xdmrtm__DeviceUseingInfo::nTaskID), "xsd:long"))
				{	soap_flag_nTaskID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceUseingInfo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo, 0, sizeof(Xdmrtm__DeviceUseingInfo), 0, soap_copy_Xdmrtm__DeviceUseingInfo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sUser1 > 0 || soap_flag_sLocaltion1 > 0 || soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNO1 > 0 || soap_flag_nFunc1 > 0 || soap_flag_nTaskID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__DeviceUseingInfo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceUseingInfo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceUseingInfo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceUseingInfo(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfo * SOAP_FMAC4 soap_get_Xdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceUseingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceUseingInfo * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceUseingInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceUseingInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUseingInfo);
		if (size)
			*size = sizeof(Xdmrtm__DeviceUseingInfo);
		((Xdmrtm__DeviceUseingInfo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUseingInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceUseingInfo);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceUseingInfo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceUseingInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceUseingInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceUseingInfo %p -> %p\n", q, p));
	*(Xdmrtm__DeviceUseingInfo*)p = *(Xdmrtm__DeviceUseingInfo*)q;
}

void Xdmrtm__LoadbalancingServer::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__LoadbalancingServer::sName);
	soap_default_std__string(soap, &this->Xdmrtm__LoadbalancingServer::sAddress);
	soap_default_short(soap, &this->Xdmrtm__LoadbalancingServer::nPort);
	/* transient soap skipped */
}

void Xdmrtm__LoadbalancingServer::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__LoadbalancingServer::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__LoadbalancingServer::sAddress);
	/* transient soap skipped */
}

int Xdmrtm__LoadbalancingServer::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__LoadbalancingServer(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__LoadbalancingServer(struct soap *soap, const char *tag, int id, const Xdmrtm__LoadbalancingServer *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer), type))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__LoadbalancingServer::sName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAddress", -1, &(a->Xdmrtm__LoadbalancingServer::sAddress), ""))
		return soap->error;
	if (soap_out_short(soap, "nPort", -1, &(a->Xdmrtm__LoadbalancingServer::nPort), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__LoadbalancingServer::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__LoadbalancingServer(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__LoadbalancingServer * SOAP_FMAC4 soap_in_Xdmrtm__LoadbalancingServer(struct soap *soap, const char *tag, Xdmrtm__LoadbalancingServer *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__LoadbalancingServer *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer, sizeof(Xdmrtm__LoadbalancingServer), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__LoadbalancingServer *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_sAddress1 = 1;
	size_t soap_flag_nPort1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__LoadbalancingServer::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_sAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAddress", &(a->Xdmrtm__LoadbalancingServer::sAddress), "xsd:string"))
				{	soap_flag_sAddress1--;
					continue;
				}
			if (soap_flag_nPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "nPort", &(a->Xdmrtm__LoadbalancingServer::nPort), "xsd:short"))
				{	soap_flag_nPort1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__LoadbalancingServer *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer, 0, sizeof(Xdmrtm__LoadbalancingServer), 0, soap_copy_Xdmrtm__LoadbalancingServer);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sName1 > 0 || soap_flag_sAddress1 > 0 || soap_flag_nPort1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__LoadbalancingServer::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:LoadbalancingServer", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__LoadbalancingServer::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__LoadbalancingServer(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__LoadbalancingServer * SOAP_FMAC4 soap_get_Xdmrtm__LoadbalancingServer(struct soap *soap, Xdmrtm__LoadbalancingServer *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__LoadbalancingServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__LoadbalancingServer * SOAP_FMAC2 soap_instantiate_Xdmrtm__LoadbalancingServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__LoadbalancingServer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__LoadbalancingServer);
		if (size)
			*size = sizeof(Xdmrtm__LoadbalancingServer);
		((Xdmrtm__LoadbalancingServer*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__LoadbalancingServer[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__LoadbalancingServer);
		for (int i = 0; i < n; i++)
			((Xdmrtm__LoadbalancingServer*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__LoadbalancingServer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__LoadbalancingServer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__LoadbalancingServer %p -> %p\n", q, p));
	*(Xdmrtm__LoadbalancingServer*)p = *(Xdmrtm__LoadbalancingServer*)q;
}

void Xdmrtm__LicenseStationArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__LicenseStationArray::__sizeitem = 0;
	this->Xdmrtm__LicenseStationArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__LicenseStationArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__LicenseStationArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__LicenseStationArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__LicenseStation(soap, this->Xdmrtm__LicenseStationArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__LicenseStationArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__LicenseStationArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__LicenseStationArray(struct soap *soap, const char *tag, int id, const Xdmrtm__LicenseStationArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray), type))
		return soap->error;
	if (a->Xdmrtm__LicenseStationArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__LicenseStationArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__LicenseStation(soap, "item", -1, a->Xdmrtm__LicenseStationArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__LicenseStationArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__LicenseStationArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStationArray * SOAP_FMAC4 soap_in_Xdmrtm__LicenseStationArray(struct soap *soap, const char *tag, Xdmrtm__LicenseStationArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__LicenseStationArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray, sizeof(Xdmrtm__LicenseStationArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__LicenseStationArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__LicenseStationArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__LicenseStationArray::item = (Xdmrtm__LicenseStation **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__LicenseStation *));
					if (a->Xdmrtm__LicenseStationArray::item == NULL)
						return NULL;
					*a->Xdmrtm__LicenseStationArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__LicenseStation(soap, "item", a->Xdmrtm__LicenseStationArray::item, "Xdmrtm:LicenseStation"))
				{	a->Xdmrtm__LicenseStationArray::__sizeitem++;
					a->Xdmrtm__LicenseStationArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__LicenseStationArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__LicenseStationArray::__sizeitem)
			a->Xdmrtm__LicenseStationArray::item = (Xdmrtm__LicenseStation **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__LicenseStationArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__LicenseStationArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray, 0, sizeof(Xdmrtm__LicenseStationArray), 0, soap_copy_Xdmrtm__LicenseStationArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__LicenseStationArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:LicenseStationArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__LicenseStationArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__LicenseStationArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStationArray * SOAP_FMAC4 soap_get_Xdmrtm__LicenseStationArray(struct soap *soap, Xdmrtm__LicenseStationArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__LicenseStationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__LicenseStationArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__LicenseStationArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__LicenseStationArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__LicenseStationArray);
		if (size)
			*size = sizeof(Xdmrtm__LicenseStationArray);
		((Xdmrtm__LicenseStationArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__LicenseStationArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__LicenseStationArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__LicenseStationArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__LicenseStationArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__LicenseStationArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__LicenseStationArray %p -> %p\n", q, p));
	*(Xdmrtm__LicenseStationArray*)p = *(Xdmrtm__LicenseStationArray*)q;
}

void Xdmrtm__LicenseStation::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__LicenseStation::sStationNO);
	/* transient soap skipped */
}

void Xdmrtm__LicenseStation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__LicenseStation::sStationNO);
	/* transient soap skipped */
}

int Xdmrtm__LicenseStation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__LicenseStation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__LicenseStation(struct soap *soap, const char *tag, int id, const Xdmrtm__LicenseStation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__LicenseStation::sStationNO), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__LicenseStation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__LicenseStation(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStation * SOAP_FMAC4 soap_in_Xdmrtm__LicenseStation(struct soap *soap, const char *tag, Xdmrtm__LicenseStation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__LicenseStation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation, sizeof(Xdmrtm__LicenseStation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__LicenseStation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__LicenseStation::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__LicenseStation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation, 0, sizeof(Xdmrtm__LicenseStation), 0, soap_copy_Xdmrtm__LicenseStation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__LicenseStation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:LicenseStation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__LicenseStation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__LicenseStation(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStation * SOAP_FMAC4 soap_get_Xdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__LicenseStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__LicenseStation * SOAP_FMAC2 soap_instantiate_Xdmrtm__LicenseStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__LicenseStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__LicenseStation);
		if (size)
			*size = sizeof(Xdmrtm__LicenseStation);
		((Xdmrtm__LicenseStation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__LicenseStation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__LicenseStation);
		for (int i = 0; i < n; i++)
			((Xdmrtm__LicenseStation*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__LicenseStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__LicenseStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__LicenseStation %p -> %p\n", q, p));
	*(Xdmrtm__LicenseStation*)p = *(Xdmrtm__LicenseStation*)q;
}

void Xdmrtm__DeviceFuncArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__DeviceFuncArray::__sizeitem = 0;
	this->Xdmrtm__DeviceFuncArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__DeviceFuncArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__DeviceFuncArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__DeviceFuncArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__DeviceFunc(soap, this->Xdmrtm__DeviceFuncArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__DeviceFuncArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceFuncArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceFuncArray(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceFuncArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray), type))
		return soap->error;
	if (a->Xdmrtm__DeviceFuncArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__DeviceFuncArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__DeviceFunc(soap, "item", -1, a->Xdmrtm__DeviceFuncArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceFuncArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceFuncArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncArray * SOAP_FMAC4 soap_in_Xdmrtm__DeviceFuncArray(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceFuncArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray, sizeof(Xdmrtm__DeviceFuncArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceFuncArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__DeviceFuncArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__DeviceFuncArray::item = (Xdmrtm__DeviceFunc **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__DeviceFunc *));
					if (a->Xdmrtm__DeviceFuncArray::item == NULL)
						return NULL;
					*a->Xdmrtm__DeviceFuncArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__DeviceFunc(soap, "item", a->Xdmrtm__DeviceFuncArray::item, "Xdmrtm:DeviceFunc"))
				{	a->Xdmrtm__DeviceFuncArray::__sizeitem++;
					a->Xdmrtm__DeviceFuncArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__DeviceFuncArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__DeviceFuncArray::__sizeitem)
			a->Xdmrtm__DeviceFuncArray::item = (Xdmrtm__DeviceFunc **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__DeviceFuncArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceFuncArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray, 0, sizeof(Xdmrtm__DeviceFuncArray), 0, soap_copy_Xdmrtm__DeviceFuncArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__DeviceFuncArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceFuncArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceFuncArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceFuncArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncArray * SOAP_FMAC4 soap_get_Xdmrtm__DeviceFuncArray(struct soap *soap, Xdmrtm__DeviceFuncArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceFuncArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceFuncArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceFuncArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceFuncArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFuncArray);
		if (size)
			*size = sizeof(Xdmrtm__DeviceFuncArray);
		((Xdmrtm__DeviceFuncArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFuncArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceFuncArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceFuncArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceFuncArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceFuncArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceFuncArray %p -> %p\n", q, p));
	*(Xdmrtm__DeviceFuncArray*)p = *(Xdmrtm__DeviceFuncArray*)q;
}

void Xdmrtm__DeviceFunc::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__DeviceFunc::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceFunc::sDeviceNO);
	soap_default_int(soap, &this->Xdmrtm__DeviceFunc::nFunNO);
	/* transient soap skipped */
}

void Xdmrtm__DeviceFunc::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceFunc::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceFunc::sDeviceNO);
	/* transient soap skipped */
}

int Xdmrtm__DeviceFunc::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceFunc(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceFunc(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceFunc *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__DeviceFunc::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->Xdmrtm__DeviceFunc::sDeviceNO), ""))
		return soap->error;
	if (soap_out_int(soap, "nFunNO", -1, &(a->Xdmrtm__DeviceFunc::nFunNO), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceFunc::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceFunc(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFunc * SOAP_FMAC4 soap_in_Xdmrtm__DeviceFunc(struct soap *soap, const char *tag, Xdmrtm__DeviceFunc *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceFunc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc, sizeof(Xdmrtm__DeviceFunc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceFunc *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	size_t soap_flag_nFunNO1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__DeviceFunc::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->Xdmrtm__DeviceFunc::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			if (soap_flag_nFunNO1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFunNO", &(a->Xdmrtm__DeviceFunc::nFunNO), "xsd:int"))
				{	soap_flag_nFunNO1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceFunc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc, 0, sizeof(Xdmrtm__DeviceFunc), 0, soap_copy_Xdmrtm__DeviceFunc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNO1 > 0 || soap_flag_nFunNO1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__DeviceFunc::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceFunc", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceFunc::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceFunc(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFunc * SOAP_FMAC4 soap_get_Xdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceFunc * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceFunc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceFunc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFunc);
		if (size)
			*size = sizeof(Xdmrtm__DeviceFunc);
		((Xdmrtm__DeviceFunc*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFunc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceFunc);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceFunc*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceFunc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceFunc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceFunc %p -> %p\n", q, p));
	*(Xdmrtm__DeviceFunc*)p = *(Xdmrtm__DeviceFunc*)q;
}

void Xdmrtm__DeviceFuncAntennaArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__DeviceFuncAntennaArray::__sizeitem = 0;
	this->Xdmrtm__DeviceFuncAntennaArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__DeviceFuncAntennaArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__DeviceFuncAntennaArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__DeviceFuncAntennaArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__DeviceFuncAntenna(soap, this->Xdmrtm__DeviceFuncAntennaArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__DeviceFuncAntennaArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceFuncAntennaArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceFuncAntennaArray(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceFuncAntennaArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray), type))
		return soap->error;
	if (a->Xdmrtm__DeviceFuncAntennaArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__DeviceFuncAntennaArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__DeviceFuncAntenna(soap, "item", -1, a->Xdmrtm__DeviceFuncAntennaArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceFuncAntennaArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceFuncAntennaArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntennaArray * SOAP_FMAC4 soap_in_Xdmrtm__DeviceFuncAntennaArray(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncAntennaArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceFuncAntennaArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray, sizeof(Xdmrtm__DeviceFuncAntennaArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceFuncAntennaArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__DeviceFuncAntennaArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__DeviceFuncAntennaArray::item = (Xdmrtm__DeviceFuncAntenna **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__DeviceFuncAntenna *));
					if (a->Xdmrtm__DeviceFuncAntennaArray::item == NULL)
						return NULL;
					*a->Xdmrtm__DeviceFuncAntennaArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__DeviceFuncAntenna(soap, "item", a->Xdmrtm__DeviceFuncAntennaArray::item, "Xdmrtm:DeviceFuncAntenna"))
				{	a->Xdmrtm__DeviceFuncAntennaArray::__sizeitem++;
					a->Xdmrtm__DeviceFuncAntennaArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__DeviceFuncAntennaArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__DeviceFuncAntennaArray::__sizeitem)
			a->Xdmrtm__DeviceFuncAntennaArray::item = (Xdmrtm__DeviceFuncAntenna **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__DeviceFuncAntennaArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceFuncAntennaArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray, 0, sizeof(Xdmrtm__DeviceFuncAntennaArray), 0, soap_copy_Xdmrtm__DeviceFuncAntennaArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__DeviceFuncAntennaArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceFuncAntennaArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceFuncAntennaArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceFuncAntennaArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntennaArray * SOAP_FMAC4 soap_get_Xdmrtm__DeviceFuncAntennaArray(struct soap *soap, Xdmrtm__DeviceFuncAntennaArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceFuncAntennaArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceFuncAntennaArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceFuncAntennaArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceFuncAntennaArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFuncAntennaArray);
		if (size)
			*size = sizeof(Xdmrtm__DeviceFuncAntennaArray);
		((Xdmrtm__DeviceFuncAntennaArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFuncAntennaArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceFuncAntennaArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceFuncAntennaArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceFuncAntennaArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceFuncAntennaArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceFuncAntennaArray %p -> %p\n", q, p));
	*(Xdmrtm__DeviceFuncAntennaArray*)p = *(Xdmrtm__DeviceFuncAntennaArray*)q;
}

void Xdmrtm__DeviceFuncAntenna::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sDeviceNO);
	soap_default_int(soap, &this->Xdmrtm__DeviceFuncAntenna::nFunNO);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sName);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sDesc);
	/* transient soap skipped */
}

void Xdmrtm__DeviceFuncAntenna::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sDeviceNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceFuncAntenna::sDesc);
	/* transient soap skipped */
}

int Xdmrtm__DeviceFuncAntenna::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceFuncAntenna(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceFuncAntenna(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceFuncAntenna *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__DeviceFuncAntenna::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->Xdmrtm__DeviceFuncAntenna::sDeviceNO), ""))
		return soap->error;
	if (soap_out_int(soap, "nFunNO", -1, &(a->Xdmrtm__DeviceFuncAntenna::nFunNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__DeviceFuncAntenna::sName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDesc", -1, &(a->Xdmrtm__DeviceFuncAntenna::sDesc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceFuncAntenna::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceFuncAntenna(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntenna * SOAP_FMAC4 soap_in_Xdmrtm__DeviceFuncAntenna(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncAntenna *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceFuncAntenna *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna, sizeof(Xdmrtm__DeviceFuncAntenna), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceFuncAntenna *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	size_t soap_flag_nFunNO1 = 1;
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_sDesc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__DeviceFuncAntenna::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->Xdmrtm__DeviceFuncAntenna::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			if (soap_flag_nFunNO1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFunNO", &(a->Xdmrtm__DeviceFuncAntenna::nFunNO), "xsd:int"))
				{	soap_flag_nFunNO1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__DeviceFuncAntenna::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_sDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDesc", &(a->Xdmrtm__DeviceFuncAntenna::sDesc), "xsd:string"))
				{	soap_flag_sDesc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceFuncAntenna *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna, 0, sizeof(Xdmrtm__DeviceFuncAntenna), 0, soap_copy_Xdmrtm__DeviceFuncAntenna);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNO1 > 0 || soap_flag_nFunNO1 > 0 || soap_flag_sName1 > 0 || soap_flag_sDesc1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__DeviceFuncAntenna::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceFuncAntenna", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceFuncAntenna::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceFuncAntenna(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntenna * SOAP_FMAC4 soap_get_Xdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceFuncAntenna(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceFuncAntenna * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceFuncAntenna(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceFuncAntenna(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFuncAntenna);
		if (size)
			*size = sizeof(Xdmrtm__DeviceFuncAntenna);
		((Xdmrtm__DeviceFuncAntenna*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceFuncAntenna[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceFuncAntenna);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceFuncAntenna*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceFuncAntenna*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceFuncAntenna(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceFuncAntenna %p -> %p\n", q, p));
	*(Xdmrtm__DeviceFuncAntenna*)p = *(Xdmrtm__DeviceFuncAntenna*)q;
}

void Xdmrtm__AntArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__AntArray::__sizeitem = 0;
	this->Xdmrtm__AntArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__AntArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__AntArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__AntArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__Ant(soap, this->Xdmrtm__AntArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__AntArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__AntArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__AntArray(struct soap *soap, const char *tag, int id, const Xdmrtm__AntArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray), type))
		return soap->error;
	if (a->Xdmrtm__AntArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__AntArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__Ant(soap, "item", -1, a->Xdmrtm__AntArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__AntArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__AntArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__AntArray * SOAP_FMAC4 soap_in_Xdmrtm__AntArray(struct soap *soap, const char *tag, Xdmrtm__AntArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__AntArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray, sizeof(Xdmrtm__AntArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__AntArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__AntArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__AntArray::item = (Xdmrtm__Ant **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__Ant *));
					if (a->Xdmrtm__AntArray::item == NULL)
						return NULL;
					*a->Xdmrtm__AntArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__Ant(soap, "item", a->Xdmrtm__AntArray::item, "Xdmrtm:Ant"))
				{	a->Xdmrtm__AntArray::__sizeitem++;
					a->Xdmrtm__AntArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__AntArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__AntArray::__sizeitem)
			a->Xdmrtm__AntArray::item = (Xdmrtm__Ant **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__AntArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__AntArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray, 0, sizeof(Xdmrtm__AntArray), 0, soap_copy_Xdmrtm__AntArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__AntArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:AntArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__AntArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__AntArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__AntArray * SOAP_FMAC4 soap_get_Xdmrtm__AntArray(struct soap *soap, Xdmrtm__AntArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__AntArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__AntArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__AntArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__AntArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__AntArray);
		if (size)
			*size = sizeof(Xdmrtm__AntArray);
		((Xdmrtm__AntArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__AntArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__AntArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__AntArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__AntArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__AntArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__AntArray %p -> %p\n", q, p));
	*(Xdmrtm__AntArray*)p = *(Xdmrtm__AntArray*)q;
}

void Xdmrtm__Ant::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__Ant::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__Ant::sAntName);
	soap_default_std__string(soap, &this->Xdmrtm__Ant::sAntFactor);
	soap_default_LONG64(soap, &this->Xdmrtm__Ant::nBeginFreq);
	soap_default_LONG64(soap, &this->Xdmrtm__Ant::nEndFreq);
	soap_default_int(soap, &this->Xdmrtm__Ant::nAntHeight);
	/* transient soap skipped */
}

void Xdmrtm__Ant::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__Ant::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__Ant::sAntName);
	soap_serialize_std__string(soap, &this->Xdmrtm__Ant::sAntFactor);
	/* transient soap skipped */
}

int Xdmrtm__Ant::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__Ant(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__Ant(struct soap *soap, const char *tag, int id, const Xdmrtm__Ant *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__Ant::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAntName", -1, &(a->Xdmrtm__Ant::sAntName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAntFactor", -1, &(a->Xdmrtm__Ant::sAntFactor), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nBeginFreq", -1, &(a->Xdmrtm__Ant::nBeginFreq), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nEndFreq", -1, &(a->Xdmrtm__Ant::nEndFreq), ""))
		return soap->error;
	if (soap_out_int(soap, "nAntHeight", -1, &(a->Xdmrtm__Ant::nAntHeight), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__Ant::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__Ant(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__Ant * SOAP_FMAC4 soap_in_Xdmrtm__Ant(struct soap *soap, const char *tag, Xdmrtm__Ant *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__Ant *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant, sizeof(Xdmrtm__Ant), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__Ant)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__Ant *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sAntName1 = 1;
	size_t soap_flag_sAntFactor1 = 1;
	size_t soap_flag_nBeginFreq1 = 1;
	size_t soap_flag_nEndFreq1 = 1;
	size_t soap_flag_nAntHeight1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__Ant::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sAntName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAntName", &(a->Xdmrtm__Ant::sAntName), "xsd:string"))
				{	soap_flag_sAntName1--;
					continue;
				}
			if (soap_flag_sAntFactor1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAntFactor", &(a->Xdmrtm__Ant::sAntFactor), "xsd:string"))
				{	soap_flag_sAntFactor1--;
					continue;
				}
			if (soap_flag_nBeginFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nBeginFreq", &(a->Xdmrtm__Ant::nBeginFreq), "xsd:long"))
				{	soap_flag_nBeginFreq1--;
					continue;
				}
			if (soap_flag_nEndFreq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nEndFreq", &(a->Xdmrtm__Ant::nEndFreq), "xsd:long"))
				{	soap_flag_nEndFreq1--;
					continue;
				}
			if (soap_flag_nAntHeight1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nAntHeight", &(a->Xdmrtm__Ant::nAntHeight), "xsd:int"))
				{	soap_flag_nAntHeight1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Ant *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant, 0, sizeof(Xdmrtm__Ant), 0, soap_copy_Xdmrtm__Ant);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sAntName1 > 0 || soap_flag_sAntFactor1 > 0 || soap_flag_nBeginFreq1 > 0 || soap_flag_nEndFreq1 > 0 || soap_flag_nAntHeight1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__Ant::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:Ant", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__Ant::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__Ant(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__Ant * SOAP_FMAC4 soap_get_Xdmrtm__Ant(struct soap *soap, Xdmrtm__Ant *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__Ant(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__Ant * SOAP_FMAC2 soap_instantiate_Xdmrtm__Ant(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__Ant(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Ant);
		if (size)
			*size = sizeof(Xdmrtm__Ant);
		((Xdmrtm__Ant*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Ant[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__Ant);
		for (int i = 0; i < n; i++)
			((Xdmrtm__Ant*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__Ant*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__Ant(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__Ant %p -> %p\n", q, p));
	*(Xdmrtm__Ant*)p = *(Xdmrtm__Ant*)q;
}

void Xdmrtm__RNCArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RNCArray::__sizeitem = 0;
	this->Xdmrtm__RNCArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RNCArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RNCArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RNCArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RNC(soap, this->Xdmrtm__RNCArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RNCArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RNCArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RNCArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RNCArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray), type))
		return soap->error;
	if (a->Xdmrtm__RNCArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RNCArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RNC(soap, "item", -1, a->Xdmrtm__RNCArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RNCArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RNCArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RNCArray * SOAP_FMAC4 soap_in_Xdmrtm__RNCArray(struct soap *soap, const char *tag, Xdmrtm__RNCArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RNCArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray, sizeof(Xdmrtm__RNCArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RNCArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RNCArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RNCArray::item = (Xdmrtm__RNC **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RNC *));
					if (a->Xdmrtm__RNCArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RNCArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RNC(soap, "item", a->Xdmrtm__RNCArray::item, "Xdmrtm:RNC"))
				{	a->Xdmrtm__RNCArray::__sizeitem++;
					a->Xdmrtm__RNCArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RNCArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RNCArray::__sizeitem)
			a->Xdmrtm__RNCArray::item = (Xdmrtm__RNC **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RNCArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RNCArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray, 0, sizeof(Xdmrtm__RNCArray), 0, soap_copy_Xdmrtm__RNCArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RNCArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RNCArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RNCArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RNCArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RNCArray * SOAP_FMAC4 soap_get_Xdmrtm__RNCArray(struct soap *soap, Xdmrtm__RNCArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RNCArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RNCArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RNCArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RNCArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RNCArray);
		if (size)
			*size = sizeof(Xdmrtm__RNCArray);
		((Xdmrtm__RNCArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RNCArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RNCArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RNCArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RNCArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RNCArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RNCArray %p -> %p\n", q, p));
	*(Xdmrtm__RNCArray*)p = *(Xdmrtm__RNCArray*)q;
}

void Xdmrtm__RNC::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__RNC::sRNCUID);
	soap_default_std__string(soap, &this->Xdmrtm__RNC::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__RNC::sRNCIP);
	soap_default_short(soap, &this->Xdmrtm__RNC::nRNCPort);
	soap_default_std__string(soap, &this->Xdmrtm__RNC::sRNCName);
	soap_default_std__string(soap, &this->Xdmrtm__RNC::sCtrlDevice);
	soap_default_int(soap, &this->Xdmrtm__RNC::nCtrlPort);
	soap_default_bool(soap, &this->Xdmrtm__RNC::bCtrlOSHas);
	soap_default_std__string(soap, &this->Xdmrtm__RNC::sCtrlOSIP);
	soap_default_short(soap, &this->Xdmrtm__RNC::nCtrlOSPort);
	/* transient soap skipped */
}

void Xdmrtm__RNC::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RNC::sRNCUID);
	soap_serialize_std__string(soap, &this->Xdmrtm__RNC::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__RNC::sRNCIP);
	soap_serialize_std__string(soap, &this->Xdmrtm__RNC::sRNCName);
	soap_serialize_std__string(soap, &this->Xdmrtm__RNC::sCtrlDevice);
	soap_serialize_std__string(soap, &this->Xdmrtm__RNC::sCtrlOSIP);
	/* transient soap skipped */
}

int Xdmrtm__RNC::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RNC(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RNC(struct soap *soap, const char *tag, int id, const Xdmrtm__RNC *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC), type))
		return soap->error;
	if (soap_out_std__string(soap, "sRNCUID", -1, &(a->Xdmrtm__RNC::sRNCUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__RNC::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sRNCIP", -1, &(a->Xdmrtm__RNC::sRNCIP), ""))
		return soap->error;
	if (soap_out_short(soap, "nRNCPort", -1, &(a->Xdmrtm__RNC::nRNCPort), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sRNCName", -1, &(a->Xdmrtm__RNC::sRNCName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sCtrlDevice", -1, &(a->Xdmrtm__RNC::sCtrlDevice), ""))
		return soap->error;
	if (soap_out_int(soap, "nCtrlPort", -1, &(a->Xdmrtm__RNC::nCtrlPort), ""))
		return soap->error;
	if (soap_out_bool(soap, "bCtrlOSHas", -1, &(a->Xdmrtm__RNC::bCtrlOSHas), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sCtrlOSIP", -1, &(a->Xdmrtm__RNC::sCtrlOSIP), ""))
		return soap->error;
	if (soap_out_short(soap, "nCtrlOSPort", -1, &(a->Xdmrtm__RNC::nCtrlOSPort), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RNC::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RNC(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RNC * SOAP_FMAC4 soap_in_Xdmrtm__RNC(struct soap *soap, const char *tag, Xdmrtm__RNC *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RNC *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC, sizeof(Xdmrtm__RNC), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RNC)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RNC *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sRNCUID1 = 1;
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sRNCIP1 = 1;
	size_t soap_flag_nRNCPort1 = 1;
	size_t soap_flag_sRNCName1 = 1;
	size_t soap_flag_sCtrlDevice1 = 1;
	size_t soap_flag_nCtrlPort1 = 1;
	size_t soap_flag_bCtrlOSHas1 = 1;
	size_t soap_flag_sCtrlOSIP1 = 1;
	size_t soap_flag_nCtrlOSPort1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sRNCUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sRNCUID", &(a->Xdmrtm__RNC::sRNCUID), "xsd:string"))
				{	soap_flag_sRNCUID1--;
					continue;
				}
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__RNC::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sRNCIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sRNCIP", &(a->Xdmrtm__RNC::sRNCIP), "xsd:string"))
				{	soap_flag_sRNCIP1--;
					continue;
				}
			if (soap_flag_nRNCPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "nRNCPort", &(a->Xdmrtm__RNC::nRNCPort), "xsd:short"))
				{	soap_flag_nRNCPort1--;
					continue;
				}
			if (soap_flag_sRNCName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sRNCName", &(a->Xdmrtm__RNC::sRNCName), "xsd:string"))
				{	soap_flag_sRNCName1--;
					continue;
				}
			if (soap_flag_sCtrlDevice1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sCtrlDevice", &(a->Xdmrtm__RNC::sCtrlDevice), "xsd:string"))
				{	soap_flag_sCtrlDevice1--;
					continue;
				}
			if (soap_flag_nCtrlPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nCtrlPort", &(a->Xdmrtm__RNC::nCtrlPort), "xsd:int"))
				{	soap_flag_nCtrlPort1--;
					continue;
				}
			if (soap_flag_bCtrlOSHas1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "bCtrlOSHas", &(a->Xdmrtm__RNC::bCtrlOSHas), "xsd:boolean"))
				{	soap_flag_bCtrlOSHas1--;
					continue;
				}
			if (soap_flag_sCtrlOSIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sCtrlOSIP", &(a->Xdmrtm__RNC::sCtrlOSIP), "xsd:string"))
				{	soap_flag_sCtrlOSIP1--;
					continue;
				}
			if (soap_flag_nCtrlOSPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "nCtrlOSPort", &(a->Xdmrtm__RNC::nCtrlOSPort), "xsd:short"))
				{	soap_flag_nCtrlOSPort1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RNC *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC, 0, sizeof(Xdmrtm__RNC), 0, soap_copy_Xdmrtm__RNC);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sRNCUID1 > 0 || soap_flag_sStationNO1 > 0 || soap_flag_sRNCIP1 > 0 || soap_flag_nRNCPort1 > 0 || soap_flag_sRNCName1 > 0 || soap_flag_sCtrlDevice1 > 0 || soap_flag_nCtrlPort1 > 0 || soap_flag_bCtrlOSHas1 > 0 || soap_flag_sCtrlOSIP1 > 0 || soap_flag_nCtrlOSPort1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RNC::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RNC", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RNC::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RNC(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RNC * SOAP_FMAC4 soap_get_Xdmrtm__RNC(struct soap *soap, Xdmrtm__RNC *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RNC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RNC * SOAP_FMAC2 soap_instantiate_Xdmrtm__RNC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RNC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RNC);
		if (size)
			*size = sizeof(Xdmrtm__RNC);
		((Xdmrtm__RNC*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RNC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RNC);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RNC*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RNC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RNC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RNC %p -> %p\n", q, p));
	*(Xdmrtm__RNC*)p = *(Xdmrtm__RNC*)q;
}

void Xdmrtm__DeviceArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__DeviceArray::__sizeitem = 0;
	this->Xdmrtm__DeviceArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__DeviceArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__DeviceArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__DeviceArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__Device(soap, this->Xdmrtm__DeviceArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__DeviceArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceArray(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray), type))
		return soap->error;
	if (a->Xdmrtm__DeviceArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__DeviceArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__Device(soap, "item", -1, a->Xdmrtm__DeviceArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceArray * SOAP_FMAC4 soap_in_Xdmrtm__DeviceArray(struct soap *soap, const char *tag, Xdmrtm__DeviceArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray, sizeof(Xdmrtm__DeviceArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__DeviceArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__DeviceArray::item = (Xdmrtm__Device **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__Device *));
					if (a->Xdmrtm__DeviceArray::item == NULL)
						return NULL;
					*a->Xdmrtm__DeviceArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__Device(soap, "item", a->Xdmrtm__DeviceArray::item, "Xdmrtm:Device"))
				{	a->Xdmrtm__DeviceArray::__sizeitem++;
					a->Xdmrtm__DeviceArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__DeviceArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__DeviceArray::__sizeitem)
			a->Xdmrtm__DeviceArray::item = (Xdmrtm__Device **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__DeviceArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray, 0, sizeof(Xdmrtm__DeviceArray), 0, soap_copy_Xdmrtm__DeviceArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__DeviceArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceArray * SOAP_FMAC4 soap_get_Xdmrtm__DeviceArray(struct soap *soap, Xdmrtm__DeviceArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceArray);
		if (size)
			*size = sizeof(Xdmrtm__DeviceArray);
		((Xdmrtm__DeviceArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceArray %p -> %p\n", q, p));
	*(Xdmrtm__DeviceArray*)p = *(Xdmrtm__DeviceArray*)q;
}

void Xdmrtm__Device::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__Device::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sDeviceNO);
	soap_default_int(soap, &this->Xdmrtm__Device::nDeviceType);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sDeviceModel);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sName);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sDesc);
	soap_default_LONG64(soap, &this->Xdmrtm__Device::nBuyTime);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sSupplier);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sRepairTel);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sDeviceCurAddress);
	soap_default_int(soap, &this->Xdmrtm__Device::nStatus);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sResponer);
	soap_default_int(soap, &this->Xdmrtm__Device::nMaxRunNUM);
	soap_default_std__string(soap, &this->Xdmrtm__Device::sDriverIP);
	soap_default_short(soap, &this->Xdmrtm__Device::nDriverPort);
	soap_default_int(soap, &this->Xdmrtm__Device::nDeviceProtocol);
	soap_default_bool(soap, &this->Xdmrtm__Device::bIsintegrated);
	/* transient soap skipped */
}

void Xdmrtm__Device::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sDeviceNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sDeviceModel);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sDesc);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sSupplier);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sRepairTel);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sDeviceCurAddress);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sResponer);
	soap_serialize_std__string(soap, &this->Xdmrtm__Device::sDriverIP);
	/* transient soap skipped */
}

int Xdmrtm__Device::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__Device(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__Device(struct soap *soap, const char *tag, int id, const Xdmrtm__Device *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Device), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__Device::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->Xdmrtm__Device::sDeviceNO), ""))
		return soap->error;
	if (soap_out_int(soap, "nDeviceType", -1, &(a->Xdmrtm__Device::nDeviceType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceModel", -1, &(a->Xdmrtm__Device::sDeviceModel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__Device::sName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDesc", -1, &(a->Xdmrtm__Device::sDesc), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nBuyTime", -1, &(a->Xdmrtm__Device::nBuyTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sSupplier", -1, &(a->Xdmrtm__Device::sSupplier), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sRepairTel", -1, &(a->Xdmrtm__Device::sRepairTel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceCurAddress", -1, &(a->Xdmrtm__Device::sDeviceCurAddress), ""))
		return soap->error;
	if (soap_out_int(soap, "nStatus", -1, &(a->Xdmrtm__Device::nStatus), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResponer", -1, &(a->Xdmrtm__Device::sResponer), ""))
		return soap->error;
	if (soap_out_int(soap, "nMaxRunNUM", -1, &(a->Xdmrtm__Device::nMaxRunNUM), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDriverIP", -1, &(a->Xdmrtm__Device::sDriverIP), ""))
		return soap->error;
	if (soap_out_short(soap, "nDriverPort", -1, &(a->Xdmrtm__Device::nDriverPort), ""))
		return soap->error;
	if (soap_out_int(soap, "nDeviceProtocol", -1, &(a->Xdmrtm__Device::nDeviceProtocol), ""))
		return soap->error;
	if (soap_out_bool(soap, "bIsintegrated", -1, &(a->Xdmrtm__Device::bIsintegrated), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__Device::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__Device(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__Device * SOAP_FMAC4 soap_in_Xdmrtm__Device(struct soap *soap, const char *tag, Xdmrtm__Device *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__Device *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Device, sizeof(Xdmrtm__Device), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__Device)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__Device *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	size_t soap_flag_nDeviceType1 = 1;
	size_t soap_flag_sDeviceModel1 = 1;
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_sDesc1 = 1;
	size_t soap_flag_nBuyTime1 = 1;
	size_t soap_flag_sSupplier1 = 1;
	size_t soap_flag_sRepairTel1 = 1;
	size_t soap_flag_sDeviceCurAddress1 = 1;
	size_t soap_flag_nStatus1 = 1;
	size_t soap_flag_sResponer1 = 1;
	size_t soap_flag_nMaxRunNUM1 = 1;
	size_t soap_flag_sDriverIP1 = 1;
	size_t soap_flag_nDriverPort1 = 1;
	size_t soap_flag_nDeviceProtocol1 = 1;
	size_t soap_flag_bIsintegrated1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__Device::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->Xdmrtm__Device::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			if (soap_flag_nDeviceType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nDeviceType", &(a->Xdmrtm__Device::nDeviceType), "xsd:int"))
				{	soap_flag_nDeviceType1--;
					continue;
				}
			if (soap_flag_sDeviceModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceModel", &(a->Xdmrtm__Device::sDeviceModel), "xsd:string"))
				{	soap_flag_sDeviceModel1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__Device::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_sDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDesc", &(a->Xdmrtm__Device::sDesc), "xsd:string"))
				{	soap_flag_sDesc1--;
					continue;
				}
			if (soap_flag_nBuyTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nBuyTime", &(a->Xdmrtm__Device::nBuyTime), "xsd:long"))
				{	soap_flag_nBuyTime1--;
					continue;
				}
			if (soap_flag_sSupplier1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sSupplier", &(a->Xdmrtm__Device::sSupplier), "xsd:string"))
				{	soap_flag_sSupplier1--;
					continue;
				}
			if (soap_flag_sRepairTel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sRepairTel", &(a->Xdmrtm__Device::sRepairTel), "xsd:string"))
				{	soap_flag_sRepairTel1--;
					continue;
				}
			if (soap_flag_sDeviceCurAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceCurAddress", &(a->Xdmrtm__Device::sDeviceCurAddress), "xsd:string"))
				{	soap_flag_sDeviceCurAddress1--;
					continue;
				}
			if (soap_flag_nStatus1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStatus", &(a->Xdmrtm__Device::nStatus), "xsd:int"))
				{	soap_flag_nStatus1--;
					continue;
				}
			if (soap_flag_sResponer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResponer", &(a->Xdmrtm__Device::sResponer), "xsd:string"))
				{	soap_flag_sResponer1--;
					continue;
				}
			if (soap_flag_nMaxRunNUM1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nMaxRunNUM", &(a->Xdmrtm__Device::nMaxRunNUM), "xsd:int"))
				{	soap_flag_nMaxRunNUM1--;
					continue;
				}
			if (soap_flag_sDriverIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDriverIP", &(a->Xdmrtm__Device::sDriverIP), "xsd:string"))
				{	soap_flag_sDriverIP1--;
					continue;
				}
			if (soap_flag_nDriverPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "nDriverPort", &(a->Xdmrtm__Device::nDriverPort), "xsd:short"))
				{	soap_flag_nDriverPort1--;
					continue;
				}
			if (soap_flag_nDeviceProtocol1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nDeviceProtocol", &(a->Xdmrtm__Device::nDeviceProtocol), "xsd:int"))
				{	soap_flag_nDeviceProtocol1--;
					continue;
				}
			if (soap_flag_bIsintegrated1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "bIsintegrated", &(a->Xdmrtm__Device::bIsintegrated), "xsd:boolean"))
				{	soap_flag_bIsintegrated1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Device *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__Device, 0, sizeof(Xdmrtm__Device), 0, soap_copy_Xdmrtm__Device);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sDeviceNO1 > 0 || soap_flag_nDeviceType1 > 0 || soap_flag_sDeviceModel1 > 0 || soap_flag_sName1 > 0 || soap_flag_sDesc1 > 0 || soap_flag_nBuyTime1 > 0 || soap_flag_sSupplier1 > 0 || soap_flag_sRepairTel1 > 0 || soap_flag_sDeviceCurAddress1 > 0 || soap_flag_nStatus1 > 0 || soap_flag_sResponer1 > 0 || soap_flag_nMaxRunNUM1 > 0 || soap_flag_sDriverIP1 > 0 || soap_flag_nDriverPort1 > 0 || soap_flag_nDeviceProtocol1 > 0 || soap_flag_bIsintegrated1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__Device::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__Device);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:Device", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__Device::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__Device(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__Device * SOAP_FMAC4 soap_get_Xdmrtm__Device(struct soap *soap, Xdmrtm__Device *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__Device(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__Device * SOAP_FMAC2 soap_instantiate_Xdmrtm__Device(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__Device(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__Device, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Device);
		if (size)
			*size = sizeof(Xdmrtm__Device);
		((Xdmrtm__Device*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Device[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__Device);
		for (int i = 0; i < n; i++)
			((Xdmrtm__Device*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__Device*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__Device(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__Device %p -> %p\n", q, p));
	*(Xdmrtm__Device*)p = *(Xdmrtm__Device*)q;
}

void Xdmrtm__StationArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__StationArray::__sizeitem = 0;
	this->Xdmrtm__StationArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__StationArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__StationArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__StationArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__Station(soap, this->Xdmrtm__StationArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__StationArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__StationArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__StationArray(struct soap *soap, const char *tag, int id, const Xdmrtm__StationArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray), type))
		return soap->error;
	if (a->Xdmrtm__StationArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__StationArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__Station(soap, "item", -1, a->Xdmrtm__StationArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__StationArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__StationArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__StationArray * SOAP_FMAC4 soap_in_Xdmrtm__StationArray(struct soap *soap, const char *tag, Xdmrtm__StationArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__StationArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray, sizeof(Xdmrtm__StationArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__StationArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__StationArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__StationArray::item = (Xdmrtm__Station **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__Station *));
					if (a->Xdmrtm__StationArray::item == NULL)
						return NULL;
					*a->Xdmrtm__StationArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__Station(soap, "item", a->Xdmrtm__StationArray::item, "Xdmrtm:Station"))
				{	a->Xdmrtm__StationArray::__sizeitem++;
					a->Xdmrtm__StationArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__StationArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__StationArray::__sizeitem)
			a->Xdmrtm__StationArray::item = (Xdmrtm__Station **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__StationArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__StationArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray, 0, sizeof(Xdmrtm__StationArray), 0, soap_copy_Xdmrtm__StationArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__StationArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:StationArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__StationArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__StationArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__StationArray * SOAP_FMAC4 soap_get_Xdmrtm__StationArray(struct soap *soap, Xdmrtm__StationArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__StationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__StationArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__StationArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__StationArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__StationArray);
		if (size)
			*size = sizeof(Xdmrtm__StationArray);
		((Xdmrtm__StationArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__StationArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__StationArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__StationArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__StationArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__StationArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__StationArray %p -> %p\n", q, p));
	*(Xdmrtm__StationArray*)p = *(Xdmrtm__StationArray*)q;
}

void Xdmrtm__Station::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__Station::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sName);
	soap_default_LONG64(soap, &this->Xdmrtm__Station::nCreateTime);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sAddress);
	soap_default_double(soap, &this->Xdmrtm__Station::fLong);
	soap_default_double(soap, &this->Xdmrtm__Station::fLati);
	soap_default_double(soap, &this->Xdmrtm__Station::fMonRange);
	soap_default_int(soap, &this->Xdmrtm__Station::nStationType);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sContact);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sDes);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sGPSAddr);
	soap_default_short(soap, &this->Xdmrtm__Station::nGPSPort);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sCompassAddr);
	soap_default_short(soap, &this->Xdmrtm__Station::nCompassPort);
	soap_default_int(soap, &this->Xdmrtm__Station::nGridNO);
	soap_default_std__string(soap, &this->Xdmrtm__Station::sNettype);
	/* transient soap skipped */
}

void Xdmrtm__Station::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sAddress);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sContact);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sDes);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sGPSAddr);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sCompassAddr);
	soap_serialize_std__string(soap, &this->Xdmrtm__Station::sNettype);
	/* transient soap skipped */
}

int Xdmrtm__Station::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__Station(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__Station(struct soap *soap, const char *tag, int id, const Xdmrtm__Station *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Station), type))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__Station::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__Station::sName), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nCreateTime", -1, &(a->Xdmrtm__Station::nCreateTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAddress", -1, &(a->Xdmrtm__Station::sAddress), ""))
		return soap->error;
	if (soap_out_double(soap, "fLong", -1, &(a->Xdmrtm__Station::fLong), ""))
		return soap->error;
	if (soap_out_double(soap, "fLati", -1, &(a->Xdmrtm__Station::fLati), ""))
		return soap->error;
	if (soap_out_double(soap, "fMonRange", -1, &(a->Xdmrtm__Station::fMonRange), ""))
		return soap->error;
	if (soap_out_int(soap, "nStationType", -1, &(a->Xdmrtm__Station::nStationType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sContact", -1, &(a->Xdmrtm__Station::sContact), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDes", -1, &(a->Xdmrtm__Station::sDes), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sGPSAddr", -1, &(a->Xdmrtm__Station::sGPSAddr), ""))
		return soap->error;
	if (soap_out_short(soap, "nGPSPort", -1, &(a->Xdmrtm__Station::nGPSPort), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sCompassAddr", -1, &(a->Xdmrtm__Station::sCompassAddr), ""))
		return soap->error;
	if (soap_out_short(soap, "nCompassPort", -1, &(a->Xdmrtm__Station::nCompassPort), ""))
		return soap->error;
	if (soap_out_int(soap, "nGridNO", -1, &(a->Xdmrtm__Station::nGridNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sNettype", -1, &(a->Xdmrtm__Station::sNettype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__Station::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__Station(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__Station * SOAP_FMAC4 soap_in_Xdmrtm__Station(struct soap *soap, const char *tag, Xdmrtm__Station *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__Station *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__Station, sizeof(Xdmrtm__Station), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__Station)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__Station *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_nCreateTime1 = 1;
	size_t soap_flag_sAddress1 = 1;
	size_t soap_flag_fLong1 = 1;
	size_t soap_flag_fLati1 = 1;
	size_t soap_flag_fMonRange1 = 1;
	size_t soap_flag_nStationType1 = 1;
	size_t soap_flag_sContact1 = 1;
	size_t soap_flag_sDes1 = 1;
	size_t soap_flag_sGPSAddr1 = 1;
	size_t soap_flag_nGPSPort1 = 1;
	size_t soap_flag_sCompassAddr1 = 1;
	size_t soap_flag_nCompassPort1 = 1;
	size_t soap_flag_nGridNO1 = 1;
	size_t soap_flag_sNettype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__Station::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__Station::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_nCreateTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nCreateTime", &(a->Xdmrtm__Station::nCreateTime), "xsd:long"))
				{	soap_flag_nCreateTime1--;
					continue;
				}
			if (soap_flag_sAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAddress", &(a->Xdmrtm__Station::sAddress), "xsd:string"))
				{	soap_flag_sAddress1--;
					continue;
				}
			if (soap_flag_fLong1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "fLong", &(a->Xdmrtm__Station::fLong), "xsd:double"))
				{	soap_flag_fLong1--;
					continue;
				}
			if (soap_flag_fLati1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "fLati", &(a->Xdmrtm__Station::fLati), "xsd:double"))
				{	soap_flag_fLati1--;
					continue;
				}
			if (soap_flag_fMonRange1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "fMonRange", &(a->Xdmrtm__Station::fMonRange), "xsd:double"))
				{	soap_flag_fMonRange1--;
					continue;
				}
			if (soap_flag_nStationType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nStationType", &(a->Xdmrtm__Station::nStationType), "xsd:int"))
				{	soap_flag_nStationType1--;
					continue;
				}
			if (soap_flag_sContact1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sContact", &(a->Xdmrtm__Station::sContact), "xsd:string"))
				{	soap_flag_sContact1--;
					continue;
				}
			if (soap_flag_sDes1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDes", &(a->Xdmrtm__Station::sDes), "xsd:string"))
				{	soap_flag_sDes1--;
					continue;
				}
			if (soap_flag_sGPSAddr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sGPSAddr", &(a->Xdmrtm__Station::sGPSAddr), "xsd:string"))
				{	soap_flag_sGPSAddr1--;
					continue;
				}
			if (soap_flag_nGPSPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "nGPSPort", &(a->Xdmrtm__Station::nGPSPort), "xsd:short"))
				{	soap_flag_nGPSPort1--;
					continue;
				}
			if (soap_flag_sCompassAddr1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sCompassAddr", &(a->Xdmrtm__Station::sCompassAddr), "xsd:string"))
				{	soap_flag_sCompassAddr1--;
					continue;
				}
			if (soap_flag_nCompassPort1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "nCompassPort", &(a->Xdmrtm__Station::nCompassPort), "xsd:short"))
				{	soap_flag_nCompassPort1--;
					continue;
				}
			if (soap_flag_nGridNO1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nGridNO", &(a->Xdmrtm__Station::nGridNO), "xsd:int"))
				{	soap_flag_nGridNO1--;
					continue;
				}
			if (soap_flag_sNettype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sNettype", &(a->Xdmrtm__Station::sNettype), "xsd:string"))
				{	soap_flag_sNettype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Station *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__Station, 0, sizeof(Xdmrtm__Station), 0, soap_copy_Xdmrtm__Station);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sStationNO1 > 0 || soap_flag_sName1 > 0 || soap_flag_nCreateTime1 > 0 || soap_flag_sAddress1 > 0 || soap_flag_fLong1 > 0 || soap_flag_fLati1 > 0 || soap_flag_fMonRange1 > 0 || soap_flag_nStationType1 > 0 || soap_flag_sContact1 > 0 || soap_flag_sDes1 > 0 || soap_flag_sGPSAddr1 > 0 || soap_flag_nGPSPort1 > 0 || soap_flag_sCompassAddr1 > 0 || soap_flag_nCompassPort1 > 0 || soap_flag_nGridNO1 > 0 || soap_flag_sNettype1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__Station::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__Station);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:Station", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__Station::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__Station(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__Station * SOAP_FMAC4 soap_get_Xdmrtm__Station(struct soap *soap, Xdmrtm__Station *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__Station(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__Station * SOAP_FMAC2 soap_instantiate_Xdmrtm__Station(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__Station(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__Station, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Station);
		if (size)
			*size = sizeof(Xdmrtm__Station);
		((Xdmrtm__Station*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__Station[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__Station);
		for (int i = 0; i < n; i++)
			((Xdmrtm__Station*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__Station*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__Station(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__Station %p -> %p\n", q, p));
	*(Xdmrtm__Station*)p = *(Xdmrtm__Station*)q;
}

void Xdmrtm__DeviceUsedLogArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__DeviceUsedLogArray::__sizeitem = 0;
	this->Xdmrtm__DeviceUsedLogArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__DeviceUsedLogArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__DeviceUsedLogArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__DeviceUsedLogArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__DeviceUsedLog(soap, this->Xdmrtm__DeviceUsedLogArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__DeviceUsedLogArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceUsedLogArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceUsedLogArray(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceUsedLogArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray), type))
		return soap->error;
	if (a->Xdmrtm__DeviceUsedLogArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__DeviceUsedLogArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__DeviceUsedLog(soap, "item", -1, a->Xdmrtm__DeviceUsedLogArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceUsedLogArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceUsedLogArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLogArray * SOAP_FMAC4 soap_in_Xdmrtm__DeviceUsedLogArray(struct soap *soap, const char *tag, Xdmrtm__DeviceUsedLogArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceUsedLogArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray, sizeof(Xdmrtm__DeviceUsedLogArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceUsedLogArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__DeviceUsedLogArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__DeviceUsedLogArray::item = (Xdmrtm__DeviceUsedLog **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__DeviceUsedLog *));
					if (a->Xdmrtm__DeviceUsedLogArray::item == NULL)
						return NULL;
					*a->Xdmrtm__DeviceUsedLogArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__DeviceUsedLog(soap, "item", a->Xdmrtm__DeviceUsedLogArray::item, "Xdmrtm:DeviceUsedLog"))
				{	a->Xdmrtm__DeviceUsedLogArray::__sizeitem++;
					a->Xdmrtm__DeviceUsedLogArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__DeviceUsedLogArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__DeviceUsedLogArray::__sizeitem)
			a->Xdmrtm__DeviceUsedLogArray::item = (Xdmrtm__DeviceUsedLog **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__DeviceUsedLogArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceUsedLogArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray, 0, sizeof(Xdmrtm__DeviceUsedLogArray), 0, soap_copy_Xdmrtm__DeviceUsedLogArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__DeviceUsedLogArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceUsedLogArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceUsedLogArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceUsedLogArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLogArray * SOAP_FMAC4 soap_get_Xdmrtm__DeviceUsedLogArray(struct soap *soap, Xdmrtm__DeviceUsedLogArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceUsedLogArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceUsedLogArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceUsedLogArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceUsedLogArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUsedLogArray);
		if (size)
			*size = sizeof(Xdmrtm__DeviceUsedLogArray);
		((Xdmrtm__DeviceUsedLogArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUsedLogArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceUsedLogArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceUsedLogArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceUsedLogArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceUsedLogArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceUsedLogArray %p -> %p\n", q, p));
	*(Xdmrtm__DeviceUsedLogArray*)p = *(Xdmrtm__DeviceUsedLogArray*)q;
}

void Xdmrtm__DeviceUsedLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sUser);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sStationNO);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sStationName);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sDeviceNO);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sDeviceName);
	soap_default_int(soap, &this->Xdmrtm__DeviceUsedLog::nFunc);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sFuncName);
	soap_default_LONG64(soap, &this->Xdmrtm__DeviceUsedLog::nStartTime);
	soap_default_LONG64(soap, &this->Xdmrtm__DeviceUsedLog::nStopTime);
	soap_default_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sParam);
	/* transient soap skipped */
}

void Xdmrtm__DeviceUsedLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sUser);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sStationNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sStationName);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sDeviceNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sDeviceName);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sFuncName);
	soap_serialize_std__string(soap, &this->Xdmrtm__DeviceUsedLog::sParam);
	/* transient soap skipped */
}

int Xdmrtm__DeviceUsedLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__DeviceUsedLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__DeviceUsedLog(struct soap *soap, const char *tag, int id, const Xdmrtm__DeviceUsedLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog), type))
		return soap->error;
	if (soap_out_std__string(soap, "sUser", -1, &(a->Xdmrtm__DeviceUsedLog::sUser), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sStationNO", -1, &(a->Xdmrtm__DeviceUsedLog::sStationNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sStationName", -1, &(a->Xdmrtm__DeviceUsedLog::sStationName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceNO", -1, &(a->Xdmrtm__DeviceUsedLog::sDeviceNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sDeviceName", -1, &(a->Xdmrtm__DeviceUsedLog::sDeviceName), ""))
		return soap->error;
	if (soap_out_int(soap, "nFunc", -1, &(a->Xdmrtm__DeviceUsedLog::nFunc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sFuncName", -1, &(a->Xdmrtm__DeviceUsedLog::sFuncName), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nStartTime", -1, &(a->Xdmrtm__DeviceUsedLog::nStartTime), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "nStopTime", -1, &(a->Xdmrtm__DeviceUsedLog::nStopTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sParam", -1, &(a->Xdmrtm__DeviceUsedLog::sParam), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__DeviceUsedLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__DeviceUsedLog(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLog * SOAP_FMAC4 soap_in_Xdmrtm__DeviceUsedLog(struct soap *soap, const char *tag, Xdmrtm__DeviceUsedLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__DeviceUsedLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog, sizeof(Xdmrtm__DeviceUsedLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__DeviceUsedLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sUser1 = 1;
	size_t soap_flag_sStationNO1 = 1;
	size_t soap_flag_sStationName1 = 1;
	size_t soap_flag_sDeviceNO1 = 1;
	size_t soap_flag_sDeviceName1 = 1;
	size_t soap_flag_nFunc1 = 1;
	size_t soap_flag_sFuncName1 = 1;
	size_t soap_flag_nStartTime1 = 1;
	size_t soap_flag_nStopTime1 = 1;
	size_t soap_flag_sParam1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sUser1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sUser", &(a->Xdmrtm__DeviceUsedLog::sUser), "xsd:string"))
				{	soap_flag_sUser1--;
					continue;
				}
			if (soap_flag_sStationNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationNO", &(a->Xdmrtm__DeviceUsedLog::sStationNO), "xsd:string"))
				{	soap_flag_sStationNO1--;
					continue;
				}
			if (soap_flag_sStationName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sStationName", &(a->Xdmrtm__DeviceUsedLog::sStationName), "xsd:string"))
				{	soap_flag_sStationName1--;
					continue;
				}
			if (soap_flag_sDeviceNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceNO", &(a->Xdmrtm__DeviceUsedLog::sDeviceNO), "xsd:string"))
				{	soap_flag_sDeviceNO1--;
					continue;
				}
			if (soap_flag_sDeviceName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sDeviceName", &(a->Xdmrtm__DeviceUsedLog::sDeviceName), "xsd:string"))
				{	soap_flag_sDeviceName1--;
					continue;
				}
			if (soap_flag_nFunc1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFunc", &(a->Xdmrtm__DeviceUsedLog::nFunc), "xsd:int"))
				{	soap_flag_nFunc1--;
					continue;
				}
			if (soap_flag_sFuncName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sFuncName", &(a->Xdmrtm__DeviceUsedLog::sFuncName), "xsd:string"))
				{	soap_flag_sFuncName1--;
					continue;
				}
			if (soap_flag_nStartTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nStartTime", &(a->Xdmrtm__DeviceUsedLog::nStartTime), "xsd:long"))
				{	soap_flag_nStartTime1--;
					continue;
				}
			if (soap_flag_nStopTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "nStopTime", &(a->Xdmrtm__DeviceUsedLog::nStopTime), "xsd:long"))
				{	soap_flag_nStopTime1--;
					continue;
				}
			if (soap_flag_sParam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sParam", &(a->Xdmrtm__DeviceUsedLog::sParam), "xsd:string"))
				{	soap_flag_sParam1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceUsedLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog, 0, sizeof(Xdmrtm__DeviceUsedLog), 0, soap_copy_Xdmrtm__DeviceUsedLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sUser1 > 0 || soap_flag_sStationNO1 > 0 || soap_flag_sStationName1 > 0 || soap_flag_sDeviceNO1 > 0 || soap_flag_sDeviceName1 > 0 || soap_flag_nFunc1 > 0 || soap_flag_sFuncName1 > 0 || soap_flag_nStartTime1 > 0 || soap_flag_nStopTime1 > 0 || soap_flag_sParam1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__DeviceUsedLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:DeviceUsedLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__DeviceUsedLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__DeviceUsedLog(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLog * SOAP_FMAC4 soap_get_Xdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__DeviceUsedLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__DeviceUsedLog * SOAP_FMAC2 soap_instantiate_Xdmrtm__DeviceUsedLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__DeviceUsedLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUsedLog);
		if (size)
			*size = sizeof(Xdmrtm__DeviceUsedLog);
		((Xdmrtm__DeviceUsedLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__DeviceUsedLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__DeviceUsedLog);
		for (int i = 0; i < n; i++)
			((Xdmrtm__DeviceUsedLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__DeviceUsedLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__DeviceUsedLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__DeviceUsedLog %p -> %p\n", q, p));
	*(Xdmrtm__DeviceUsedLog*)p = *(Xdmrtm__DeviceUsedLog*)q;
}

void Xdmrtm__MonControlCenterArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__MonControlCenterArray::__sizeitem = 0;
	this->Xdmrtm__MonControlCenterArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__MonControlCenterArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__MonControlCenterArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__MonControlCenterArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__MonControlCenter(soap, this->Xdmrtm__MonControlCenterArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__MonControlCenterArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonControlCenterArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonControlCenterArray(struct soap *soap, const char *tag, int id, const Xdmrtm__MonControlCenterArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray), type))
		return soap->error;
	if (a->Xdmrtm__MonControlCenterArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__MonControlCenterArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__MonControlCenter(soap, "item", -1, a->Xdmrtm__MonControlCenterArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonControlCenterArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonControlCenterArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenterArray * SOAP_FMAC4 soap_in_Xdmrtm__MonControlCenterArray(struct soap *soap, const char *tag, Xdmrtm__MonControlCenterArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonControlCenterArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray, sizeof(Xdmrtm__MonControlCenterArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonControlCenterArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__MonControlCenterArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__MonControlCenterArray::item = (Xdmrtm__MonControlCenter **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__MonControlCenter *));
					if (a->Xdmrtm__MonControlCenterArray::item == NULL)
						return NULL;
					*a->Xdmrtm__MonControlCenterArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__MonControlCenter(soap, "item", a->Xdmrtm__MonControlCenterArray::item, "Xdmrtm:MonControlCenter"))
				{	a->Xdmrtm__MonControlCenterArray::__sizeitem++;
					a->Xdmrtm__MonControlCenterArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__MonControlCenterArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__MonControlCenterArray::__sizeitem)
			a->Xdmrtm__MonControlCenterArray::item = (Xdmrtm__MonControlCenter **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__MonControlCenterArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonControlCenterArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray, 0, sizeof(Xdmrtm__MonControlCenterArray), 0, soap_copy_Xdmrtm__MonControlCenterArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__MonControlCenterArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonControlCenterArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonControlCenterArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonControlCenterArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenterArray * SOAP_FMAC4 soap_get_Xdmrtm__MonControlCenterArray(struct soap *soap, Xdmrtm__MonControlCenterArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonControlCenterArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonControlCenterArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonControlCenterArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonControlCenterArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonControlCenterArray);
		if (size)
			*size = sizeof(Xdmrtm__MonControlCenterArray);
		((Xdmrtm__MonControlCenterArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonControlCenterArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonControlCenterArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonControlCenterArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonControlCenterArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonControlCenterArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonControlCenterArray %p -> %p\n", q, p));
	*(Xdmrtm__MonControlCenterArray*)p = *(Xdmrtm__MonControlCenterArray*)q;
}

void Xdmrtm__MonControlCenter::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__MonControlCenter::sCenterNO);
	soap_default_std__string(soap, &this->Xdmrtm__MonControlCenter::sName);
	soap_default_std__string(soap, &this->Xdmrtm__MonControlCenter::sAddress);
	soap_default_double(soap, &this->Xdmrtm__MonControlCenter::fLong);
	soap_default_double(soap, &this->Xdmrtm__MonControlCenter::fLati);
	/* transient soap skipped */
}

void Xdmrtm__MonControlCenter::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__MonControlCenter::sCenterNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonControlCenter::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonControlCenter::sAddress);
	/* transient soap skipped */
}

int Xdmrtm__MonControlCenter::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonControlCenter(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonControlCenter(struct soap *soap, const char *tag, int id, const Xdmrtm__MonControlCenter *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter), type))
		return soap->error;
	if (soap_out_std__string(soap, "sCenterNO", -1, &(a->Xdmrtm__MonControlCenter::sCenterNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__MonControlCenter::sName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAddress", -1, &(a->Xdmrtm__MonControlCenter::sAddress), ""))
		return soap->error;
	if (soap_out_double(soap, "fLong", -1, &(a->Xdmrtm__MonControlCenter::fLong), ""))
		return soap->error;
	if (soap_out_double(soap, "fLati", -1, &(a->Xdmrtm__MonControlCenter::fLati), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonControlCenter::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonControlCenter(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenter * SOAP_FMAC4 soap_in_Xdmrtm__MonControlCenter(struct soap *soap, const char *tag, Xdmrtm__MonControlCenter *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonControlCenter *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter, sizeof(Xdmrtm__MonControlCenter), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonControlCenter *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sCenterNO1 = 1;
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_sAddress1 = 1;
	size_t soap_flag_fLong1 = 1;
	size_t soap_flag_fLati1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sCenterNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sCenterNO", &(a->Xdmrtm__MonControlCenter::sCenterNO), "xsd:string"))
				{	soap_flag_sCenterNO1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__MonControlCenter::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_sAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAddress", &(a->Xdmrtm__MonControlCenter::sAddress), "xsd:string"))
				{	soap_flag_sAddress1--;
					continue;
				}
			if (soap_flag_fLong1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "fLong", &(a->Xdmrtm__MonControlCenter::fLong), "xsd:double"))
				{	soap_flag_fLong1--;
					continue;
				}
			if (soap_flag_fLati1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "fLati", &(a->Xdmrtm__MonControlCenter::fLati), "xsd:double"))
				{	soap_flag_fLati1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonControlCenter *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter, 0, sizeof(Xdmrtm__MonControlCenter), 0, soap_copy_Xdmrtm__MonControlCenter);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sCenterNO1 > 0 || soap_flag_sName1 > 0 || soap_flag_sAddress1 > 0 || soap_flag_fLong1 > 0 || soap_flag_fLati1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__MonControlCenter::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonControlCenter", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonControlCenter::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonControlCenter(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenter * SOAP_FMAC4 soap_get_Xdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonControlCenter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonControlCenter * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonControlCenter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonControlCenter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonControlCenter);
		if (size)
			*size = sizeof(Xdmrtm__MonControlCenter);
		((Xdmrtm__MonControlCenter*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonControlCenter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonControlCenter);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonControlCenter*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonControlCenter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonControlCenter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonControlCenter %p -> %p\n", q, p));
	*(Xdmrtm__MonControlCenter*)p = *(Xdmrtm__MonControlCenter*)q;
}

void Xdmrtm__MonOrganizationArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__MonOrganizationArray::__sizeitem = 0;
	this->Xdmrtm__MonOrganizationArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__MonOrganizationArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__MonOrganizationArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__MonOrganizationArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__MonOrganization(soap, this->Xdmrtm__MonOrganizationArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__MonOrganizationArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonOrganizationArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonOrganizationArray(struct soap *soap, const char *tag, int id, const Xdmrtm__MonOrganizationArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray), type))
		return soap->error;
	if (a->Xdmrtm__MonOrganizationArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__MonOrganizationArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__MonOrganization(soap, "item", -1, a->Xdmrtm__MonOrganizationArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonOrganizationArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonOrganizationArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganizationArray * SOAP_FMAC4 soap_in_Xdmrtm__MonOrganizationArray(struct soap *soap, const char *tag, Xdmrtm__MonOrganizationArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonOrganizationArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray, sizeof(Xdmrtm__MonOrganizationArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonOrganizationArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__MonOrganizationArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__MonOrganizationArray::item = (Xdmrtm__MonOrganization **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__MonOrganization *));
					if (a->Xdmrtm__MonOrganizationArray::item == NULL)
						return NULL;
					*a->Xdmrtm__MonOrganizationArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__MonOrganization(soap, "item", a->Xdmrtm__MonOrganizationArray::item, "Xdmrtm:MonOrganization"))
				{	a->Xdmrtm__MonOrganizationArray::__sizeitem++;
					a->Xdmrtm__MonOrganizationArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__MonOrganizationArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__MonOrganizationArray::__sizeitem)
			a->Xdmrtm__MonOrganizationArray::item = (Xdmrtm__MonOrganization **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__MonOrganizationArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonOrganizationArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray, 0, sizeof(Xdmrtm__MonOrganizationArray), 0, soap_copy_Xdmrtm__MonOrganizationArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__MonOrganizationArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonOrganizationArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonOrganizationArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonOrganizationArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganizationArray * SOAP_FMAC4 soap_get_Xdmrtm__MonOrganizationArray(struct soap *soap, Xdmrtm__MonOrganizationArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonOrganizationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonOrganizationArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonOrganizationArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonOrganizationArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonOrganizationArray);
		if (size)
			*size = sizeof(Xdmrtm__MonOrganizationArray);
		((Xdmrtm__MonOrganizationArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonOrganizationArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonOrganizationArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonOrganizationArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonOrganizationArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonOrganizationArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonOrganizationArray %p -> %p\n", q, p));
	*(Xdmrtm__MonOrganizationArray*)p = *(Xdmrtm__MonOrganizationArray*)q;
}

void Xdmrtm__MonOrganization::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sOrgNO);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sName);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sAddress);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sPost);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sResponpersion);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sContact);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sBrief);
	soap_default_std__string(soap, &this->Xdmrtm__MonOrganization::sNote);
	/* transient soap skipped */
}

void Xdmrtm__MonOrganization::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sOrgNO);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sAddress);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sPost);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sResponpersion);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sContact);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sBrief);
	soap_serialize_std__string(soap, &this->Xdmrtm__MonOrganization::sNote);
	/* transient soap skipped */
}

int Xdmrtm__MonOrganization::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__MonOrganization(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__MonOrganization(struct soap *soap, const char *tag, int id, const Xdmrtm__MonOrganization *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization), type))
		return soap->error;
	if (soap_out_std__string(soap, "sOrgNO", -1, &(a->Xdmrtm__MonOrganization::sOrgNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__MonOrganization::sName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sAddress", -1, &(a->Xdmrtm__MonOrganization::sAddress), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sPost", -1, &(a->Xdmrtm__MonOrganization::sPost), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sResponpersion", -1, &(a->Xdmrtm__MonOrganization::sResponpersion), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sContact", -1, &(a->Xdmrtm__MonOrganization::sContact), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sBrief", -1, &(a->Xdmrtm__MonOrganization::sBrief), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sNote", -1, &(a->Xdmrtm__MonOrganization::sNote), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__MonOrganization::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__MonOrganization(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganization * SOAP_FMAC4 soap_in_Xdmrtm__MonOrganization(struct soap *soap, const char *tag, Xdmrtm__MonOrganization *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__MonOrganization *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization, sizeof(Xdmrtm__MonOrganization), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__MonOrganization *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sOrgNO1 = 1;
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_sAddress1 = 1;
	size_t soap_flag_sPost1 = 1;
	size_t soap_flag_sResponpersion1 = 1;
	size_t soap_flag_sContact1 = 1;
	size_t soap_flag_sBrief1 = 1;
	size_t soap_flag_sNote1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sOrgNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sOrgNO", &(a->Xdmrtm__MonOrganization::sOrgNO), "xsd:string"))
				{	soap_flag_sOrgNO1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__MonOrganization::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_sAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sAddress", &(a->Xdmrtm__MonOrganization::sAddress), "xsd:string"))
				{	soap_flag_sAddress1--;
					continue;
				}
			if (soap_flag_sPost1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sPost", &(a->Xdmrtm__MonOrganization::sPost), "xsd:string"))
				{	soap_flag_sPost1--;
					continue;
				}
			if (soap_flag_sResponpersion1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sResponpersion", &(a->Xdmrtm__MonOrganization::sResponpersion), "xsd:string"))
				{	soap_flag_sResponpersion1--;
					continue;
				}
			if (soap_flag_sContact1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sContact", &(a->Xdmrtm__MonOrganization::sContact), "xsd:string"))
				{	soap_flag_sContact1--;
					continue;
				}
			if (soap_flag_sBrief1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sBrief", &(a->Xdmrtm__MonOrganization::sBrief), "xsd:string"))
				{	soap_flag_sBrief1--;
					continue;
				}
			if (soap_flag_sNote1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sNote", &(a->Xdmrtm__MonOrganization::sNote), "xsd:string"))
				{	soap_flag_sNote1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonOrganization *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization, 0, sizeof(Xdmrtm__MonOrganization), 0, soap_copy_Xdmrtm__MonOrganization);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sOrgNO1 > 0 || soap_flag_sName1 > 0 || soap_flag_sAddress1 > 0 || soap_flag_sPost1 > 0 || soap_flag_sResponpersion1 > 0 || soap_flag_sContact1 > 0 || soap_flag_sBrief1 > 0 || soap_flag_sNote1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__MonOrganization::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:MonOrganization", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__MonOrganization::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__MonOrganization(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganization * SOAP_FMAC4 soap_get_Xdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__MonOrganization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__MonOrganization * SOAP_FMAC2 soap_instantiate_Xdmrtm__MonOrganization(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__MonOrganization(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonOrganization);
		if (size)
			*size = sizeof(Xdmrtm__MonOrganization);
		((Xdmrtm__MonOrganization*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__MonOrganization[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__MonOrganization);
		for (int i = 0; i < n; i++)
			((Xdmrtm__MonOrganization*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__MonOrganization*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__MonOrganization(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__MonOrganization %p -> %p\n", q, p));
	*(Xdmrtm__MonOrganization*)p = *(Xdmrtm__MonOrganization*)q;
}

void Xdmrtm__RefDeviceModelFuncParamArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RefDeviceModelFuncParamArray::__sizeitem = 0;
	this->Xdmrtm__RefDeviceModelFuncParamArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceModelFuncParamArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RefDeviceModelFuncParamArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RefDeviceModelFuncParamArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParam(soap, this->Xdmrtm__RefDeviceModelFuncParamArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceModelFuncParamArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceModelFuncParamArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceModelFuncParamArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray), type))
		return soap->error;
	if (a->Xdmrtm__RefDeviceModelFuncParamArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RefDeviceModelFuncParamArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RefDeviceModelFuncParam(soap, "item", -1, a->Xdmrtm__RefDeviceModelFuncParamArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceModelFuncParamArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceModelFuncParamArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParamArray * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelFuncParamArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceModelFuncParamArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray, sizeof(Xdmrtm__RefDeviceModelFuncParamArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceModelFuncParamArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RefDeviceModelFuncParamArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RefDeviceModelFuncParamArray::item = (Xdmrtm__RefDeviceModelFuncParam **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RefDeviceModelFuncParam *));
					if (a->Xdmrtm__RefDeviceModelFuncParamArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RefDeviceModelFuncParamArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RefDeviceModelFuncParam(soap, "item", a->Xdmrtm__RefDeviceModelFuncParamArray::item, "Xdmrtm:RefDeviceModelFuncParam"))
				{	a->Xdmrtm__RefDeviceModelFuncParamArray::__sizeitem++;
					a->Xdmrtm__RefDeviceModelFuncParamArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RefDeviceModelFuncParamArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RefDeviceModelFuncParamArray::__sizeitem)
			a->Xdmrtm__RefDeviceModelFuncParamArray::item = (Xdmrtm__RefDeviceModelFuncParam **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RefDeviceModelFuncParamArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceModelFuncParamArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray, 0, sizeof(Xdmrtm__RefDeviceModelFuncParamArray), 0, soap_copy_Xdmrtm__RefDeviceModelFuncParamArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceModelFuncParamArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceModelFuncParamArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceModelFuncParamArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceModelFuncParamArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParamArray * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, Xdmrtm__RefDeviceModelFuncParamArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceModelFuncParamArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceModelFuncParamArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceModelFuncParamArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModelFuncParamArray);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceModelFuncParamArray);
		((Xdmrtm__RefDeviceModelFuncParamArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModelFuncParamArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceModelFuncParamArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceModelFuncParamArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceModelFuncParamArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceModelFuncParamArray %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceModelFuncParamArray*)p = *(Xdmrtm__RefDeviceModelFuncParamArray*)q;
}

void Xdmrtm__RefDeviceModelFuncParam::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceModelFuncParam::sModel);
	soap_default_int(soap, &this->Xdmrtm__RefDeviceModelFuncParam::nFunc);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceModelFuncParam::sParam);
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceModelFuncParam::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceModelFuncParam::sModel);
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceModelFuncParam::sParam);
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceModelFuncParam::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceModelFuncParam(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceModelFuncParam(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceModelFuncParam *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam), type))
		return soap->error;
	if (soap_out_std__string(soap, "sModel", -1, &(a->Xdmrtm__RefDeviceModelFuncParam::sModel), ""))
		return soap->error;
	if (soap_out_int(soap, "nFunc", -1, &(a->Xdmrtm__RefDeviceModelFuncParam::nFunc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sParam", -1, &(a->Xdmrtm__RefDeviceModelFuncParam::sParam), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceModelFuncParam::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceModelFuncParam(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParam * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceModelFuncParam(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelFuncParam *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceModelFuncParam *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam, sizeof(Xdmrtm__RefDeviceModelFuncParam), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceModelFuncParam *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sModel1 = 1;
	size_t soap_flag_nFunc1 = 1;
	size_t soap_flag_sParam1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sModel", &(a->Xdmrtm__RefDeviceModelFuncParam::sModel), "xsd:string"))
				{	soap_flag_sModel1--;
					continue;
				}
			if (soap_flag_nFunc1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFunc", &(a->Xdmrtm__RefDeviceModelFuncParam::nFunc), "xsd:int"))
				{	soap_flag_nFunc1--;
					continue;
				}
			if (soap_flag_sParam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sParam", &(a->Xdmrtm__RefDeviceModelFuncParam::sParam), "xsd:string"))
				{	soap_flag_sParam1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceModelFuncParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam, 0, sizeof(Xdmrtm__RefDeviceModelFuncParam), 0, soap_copy_Xdmrtm__RefDeviceModelFuncParam);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sModel1 > 0 || soap_flag_nFunc1 > 0 || soap_flag_sParam1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceModelFuncParam::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceModelFuncParam", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceModelFuncParam::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceModelFuncParam(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParam * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceModelFuncParam * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceModelFuncParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceModelFuncParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModelFuncParam);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceModelFuncParam);
		((Xdmrtm__RefDeviceModelFuncParam*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModelFuncParam[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceModelFuncParam);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceModelFuncParam*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceModelFuncParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceModelFuncParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceModelFuncParam %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceModelFuncParam*)p = *(Xdmrtm__RefDeviceModelFuncParam*)q;
}

void Xdmrtm__RefDeviceFuncArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RefDeviceFuncArray::__sizeitem = 0;
	this->Xdmrtm__RefDeviceFuncArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceFuncArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RefDeviceFuncArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RefDeviceFuncArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RefDeviceFunc(soap, this->Xdmrtm__RefDeviceFuncArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceFuncArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceFuncArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceFuncArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceFuncArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray), type))
		return soap->error;
	if (a->Xdmrtm__RefDeviceFuncArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RefDeviceFuncArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RefDeviceFunc(soap, "item", -1, a->Xdmrtm__RefDeviceFuncArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceFuncArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceFuncArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFuncArray * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceFuncArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceFuncArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceFuncArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray, sizeof(Xdmrtm__RefDeviceFuncArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceFuncArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RefDeviceFuncArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RefDeviceFuncArray::item = (Xdmrtm__RefDeviceFunc **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RefDeviceFunc *));
					if (a->Xdmrtm__RefDeviceFuncArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RefDeviceFuncArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RefDeviceFunc(soap, "item", a->Xdmrtm__RefDeviceFuncArray::item, "Xdmrtm:RefDeviceFunc"))
				{	a->Xdmrtm__RefDeviceFuncArray::__sizeitem++;
					a->Xdmrtm__RefDeviceFuncArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RefDeviceFuncArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RefDeviceFuncArray::__sizeitem)
			a->Xdmrtm__RefDeviceFuncArray::item = (Xdmrtm__RefDeviceFunc **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RefDeviceFuncArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceFuncArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray, 0, sizeof(Xdmrtm__RefDeviceFuncArray), 0, soap_copy_Xdmrtm__RefDeviceFuncArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceFuncArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceFuncArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceFuncArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceFuncArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFuncArray * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceFuncArray(struct soap *soap, Xdmrtm__RefDeviceFuncArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceFuncArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceFuncArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceFuncArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceFuncArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceFuncArray);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceFuncArray);
		((Xdmrtm__RefDeviceFuncArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceFuncArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceFuncArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceFuncArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceFuncArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceFuncArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceFuncArray %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceFuncArray*)p = *(Xdmrtm__RefDeviceFuncArray*)q;
}

void Xdmrtm__RefDeviceFunc::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->Xdmrtm__RefDeviceFunc::nFuncID);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceFunc::sFuncName);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceFunc::sFuncKey);
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceFunc::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceFunc::sFuncName);
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceFunc::sFuncKey);
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceFunc::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceFunc(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceFunc(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceFunc *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc), type))
		return soap->error;
	if (soap_out_int(soap, "nFuncID", -1, &(a->Xdmrtm__RefDeviceFunc::nFuncID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sFuncName", -1, &(a->Xdmrtm__RefDeviceFunc::sFuncName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sFuncKey", -1, &(a->Xdmrtm__RefDeviceFunc::sFuncKey), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceFunc::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceFunc(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFunc * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceFunc(struct soap *soap, const char *tag, Xdmrtm__RefDeviceFunc *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceFunc *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc, sizeof(Xdmrtm__RefDeviceFunc), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceFunc *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nFuncID1 = 1;
	size_t soap_flag_sFuncName1 = 1;
	size_t soap_flag_sFuncKey1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nFuncID1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nFuncID", &(a->Xdmrtm__RefDeviceFunc::nFuncID), "xsd:int"))
				{	soap_flag_nFuncID1--;
					continue;
				}
			if (soap_flag_sFuncName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sFuncName", &(a->Xdmrtm__RefDeviceFunc::sFuncName), "xsd:string"))
				{	soap_flag_sFuncName1--;
					continue;
				}
			if (soap_flag_sFuncKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sFuncKey", &(a->Xdmrtm__RefDeviceFunc::sFuncKey), "xsd:string"))
				{	soap_flag_sFuncKey1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceFunc *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc, 0, sizeof(Xdmrtm__RefDeviceFunc), 0, soap_copy_Xdmrtm__RefDeviceFunc);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nFuncID1 > 0 || soap_flag_sFuncName1 > 0 || soap_flag_sFuncKey1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceFunc::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceFunc", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceFunc::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceFunc(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFunc * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceFunc * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceFunc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceFunc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceFunc);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceFunc);
		((Xdmrtm__RefDeviceFunc*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceFunc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceFunc);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceFunc*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceFunc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceFunc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceFunc %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceFunc*)p = *(Xdmrtm__RefDeviceFunc*)q;
}

void Xdmrtm__RefDeviceModelArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RefDeviceModelArray::__sizeitem = 0;
	this->Xdmrtm__RefDeviceModelArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceModelArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RefDeviceModelArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RefDeviceModelArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RefDeviceModel(soap, this->Xdmrtm__RefDeviceModelArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceModelArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceModelArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceModelArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceModelArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray), type))
		return soap->error;
	if (a->Xdmrtm__RefDeviceModelArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RefDeviceModelArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RefDeviceModel(soap, "item", -1, a->Xdmrtm__RefDeviceModelArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceModelArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceModelArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelArray * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceModelArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceModelArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray, sizeof(Xdmrtm__RefDeviceModelArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceModelArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RefDeviceModelArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RefDeviceModelArray::item = (Xdmrtm__RefDeviceModel **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RefDeviceModel *));
					if (a->Xdmrtm__RefDeviceModelArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RefDeviceModelArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RefDeviceModel(soap, "item", a->Xdmrtm__RefDeviceModelArray::item, "Xdmrtm:RefDeviceModel"))
				{	a->Xdmrtm__RefDeviceModelArray::__sizeitem++;
					a->Xdmrtm__RefDeviceModelArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RefDeviceModelArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RefDeviceModelArray::__sizeitem)
			a->Xdmrtm__RefDeviceModelArray::item = (Xdmrtm__RefDeviceModel **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RefDeviceModelArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceModelArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray, 0, sizeof(Xdmrtm__RefDeviceModelArray), 0, soap_copy_Xdmrtm__RefDeviceModelArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceModelArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceModelArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceModelArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceModelArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelArray * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceModelArray(struct soap *soap, Xdmrtm__RefDeviceModelArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceModelArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceModelArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceModelArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceModelArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModelArray);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceModelArray);
		((Xdmrtm__RefDeviceModelArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModelArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceModelArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceModelArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceModelArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceModelArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceModelArray %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceModelArray*)p = *(Xdmrtm__RefDeviceModelArray*)q;
}

void Xdmrtm__RefDeviceModel::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceModel::sModel);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceModel::sName);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceModel::sNote);
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceModel::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceModel::sModel);
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceModel::sName);
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceModel::sNote);
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceModel::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceModel(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceModel(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceModel *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel), type))
		return soap->error;
	if (soap_out_std__string(soap, "sModel", -1, &(a->Xdmrtm__RefDeviceModel::sModel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__RefDeviceModel::sName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sNote", -1, &(a->Xdmrtm__RefDeviceModel::sNote), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceModel::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceModel(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModel * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceModel(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModel *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceModel *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel, sizeof(Xdmrtm__RefDeviceModel), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceModel *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_sModel1 = 1;
	size_t soap_flag_sName1 = 1;
	size_t soap_flag_sNote1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sModel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sModel", &(a->Xdmrtm__RefDeviceModel::sModel), "xsd:string"))
				{	soap_flag_sModel1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__RefDeviceModel::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			if (soap_flag_sNote1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sNote", &(a->Xdmrtm__RefDeviceModel::sNote), "xsd:string"))
				{	soap_flag_sNote1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceModel *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel, 0, sizeof(Xdmrtm__RefDeviceModel), 0, soap_copy_Xdmrtm__RefDeviceModel);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sModel1 > 0 || soap_flag_sName1 > 0 || soap_flag_sNote1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceModel::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceModel", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceModel::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceModel(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModel * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceModel * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceModel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceModel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModel);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceModel);
		((Xdmrtm__RefDeviceModel*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceModel[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceModel);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceModel*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceModel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceModel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceModel %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceModel*)p = *(Xdmrtm__RefDeviceModel*)q;
}

void Xdmrtm__RefDeviceProtocolArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RefDeviceProtocolArray::__sizeitem = 0;
	this->Xdmrtm__RefDeviceProtocolArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceProtocolArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RefDeviceProtocolArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RefDeviceProtocolArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RefDeviceProtocol(soap, this->Xdmrtm__RefDeviceProtocolArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceProtocolArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceProtocolArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceProtocolArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceProtocolArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray), type))
		return soap->error;
	if (a->Xdmrtm__RefDeviceProtocolArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RefDeviceProtocolArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RefDeviceProtocol(soap, "item", -1, a->Xdmrtm__RefDeviceProtocolArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceProtocolArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceProtocolArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocolArray * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceProtocolArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceProtocolArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceProtocolArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray, sizeof(Xdmrtm__RefDeviceProtocolArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceProtocolArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RefDeviceProtocolArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RefDeviceProtocolArray::item = (Xdmrtm__RefDeviceProtocol **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RefDeviceProtocol *));
					if (a->Xdmrtm__RefDeviceProtocolArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RefDeviceProtocolArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RefDeviceProtocol(soap, "item", a->Xdmrtm__RefDeviceProtocolArray::item, "Xdmrtm:RefDeviceProtocol"))
				{	a->Xdmrtm__RefDeviceProtocolArray::__sizeitem++;
					a->Xdmrtm__RefDeviceProtocolArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RefDeviceProtocolArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RefDeviceProtocolArray::__sizeitem)
			a->Xdmrtm__RefDeviceProtocolArray::item = (Xdmrtm__RefDeviceProtocol **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RefDeviceProtocolArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceProtocolArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray, 0, sizeof(Xdmrtm__RefDeviceProtocolArray), 0, soap_copy_Xdmrtm__RefDeviceProtocolArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceProtocolArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceProtocolArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceProtocolArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceProtocolArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocolArray * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceProtocolArray(struct soap *soap, Xdmrtm__RefDeviceProtocolArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceProtocolArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceProtocolArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceProtocolArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceProtocolArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceProtocolArray);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceProtocolArray);
		((Xdmrtm__RefDeviceProtocolArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceProtocolArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceProtocolArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceProtocolArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceProtocolArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceProtocolArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceProtocolArray %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceProtocolArray*)p = *(Xdmrtm__RefDeviceProtocolArray*)q;
}

void Xdmrtm__RefDeviceProtocol::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->Xdmrtm__RefDeviceProtocol::nProtocolType);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceProtocol::sName);
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceProtocol::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceProtocol::sName);
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceProtocol::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceProtocol(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceProtocol(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceProtocol *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol), type))
		return soap->error;
	if (soap_out_int(soap, "nProtocolType", -1, &(a->Xdmrtm__RefDeviceProtocol::nProtocolType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__RefDeviceProtocol::sName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceProtocol::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceProtocol(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocol * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceProtocol(struct soap *soap, const char *tag, Xdmrtm__RefDeviceProtocol *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceProtocol *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol, sizeof(Xdmrtm__RefDeviceProtocol), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceProtocol *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nProtocolType1 = 1;
	size_t soap_flag_sName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nProtocolType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nProtocolType", &(a->Xdmrtm__RefDeviceProtocol::nProtocolType), "xsd:int"))
				{	soap_flag_nProtocolType1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__RefDeviceProtocol::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceProtocol *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol, 0, sizeof(Xdmrtm__RefDeviceProtocol), 0, soap_copy_Xdmrtm__RefDeviceProtocol);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nProtocolType1 > 0 || soap_flag_sName1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceProtocol::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceProtocol", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceProtocol::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceProtocol(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocol * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceProtocol(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceProtocol * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceProtocol(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceProtocol(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceProtocol);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceProtocol);
		((Xdmrtm__RefDeviceProtocol*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceProtocol[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceProtocol);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceProtocol*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceProtocol*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceProtocol(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceProtocol %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceProtocol*)p = *(Xdmrtm__RefDeviceProtocol*)q;
}

void Xdmrtm__RefDeviceTypeArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RefDeviceTypeArray::__sizeitem = 0;
	this->Xdmrtm__RefDeviceTypeArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceTypeArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RefDeviceTypeArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RefDeviceTypeArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RefDeviceType(soap, this->Xdmrtm__RefDeviceTypeArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceTypeArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceTypeArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceTypeArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceTypeArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray), type))
		return soap->error;
	if (a->Xdmrtm__RefDeviceTypeArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RefDeviceTypeArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RefDeviceType(soap, "item", -1, a->Xdmrtm__RefDeviceTypeArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceTypeArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceTypeArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceTypeArray * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceTypeArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceTypeArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceTypeArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray, sizeof(Xdmrtm__RefDeviceTypeArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceTypeArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RefDeviceTypeArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RefDeviceTypeArray::item = (Xdmrtm__RefDeviceType **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RefDeviceType *));
					if (a->Xdmrtm__RefDeviceTypeArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RefDeviceTypeArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RefDeviceType(soap, "item", a->Xdmrtm__RefDeviceTypeArray::item, "Xdmrtm:RefDeviceType"))
				{	a->Xdmrtm__RefDeviceTypeArray::__sizeitem++;
					a->Xdmrtm__RefDeviceTypeArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RefDeviceTypeArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RefDeviceTypeArray::__sizeitem)
			a->Xdmrtm__RefDeviceTypeArray::item = (Xdmrtm__RefDeviceType **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RefDeviceTypeArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceTypeArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray, 0, sizeof(Xdmrtm__RefDeviceTypeArray), 0, soap_copy_Xdmrtm__RefDeviceTypeArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceTypeArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceTypeArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceTypeArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceTypeArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceTypeArray * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceTypeArray(struct soap *soap, Xdmrtm__RefDeviceTypeArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceTypeArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceTypeArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceTypeArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceTypeArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceTypeArray);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceTypeArray);
		((Xdmrtm__RefDeviceTypeArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceTypeArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceTypeArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceTypeArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceTypeArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceTypeArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceTypeArray %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceTypeArray*)p = *(Xdmrtm__RefDeviceTypeArray*)q;
}

void Xdmrtm__RefDeviceType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->Xdmrtm__RefDeviceType::nType);
	soap_default_std__string(soap, &this->Xdmrtm__RefDeviceType::sName);
	/* transient soap skipped */
}

void Xdmrtm__RefDeviceType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RefDeviceType::sName);
	/* transient soap skipped */
}

int Xdmrtm__RefDeviceType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefDeviceType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefDeviceType(struct soap *soap, const char *tag, int id, const Xdmrtm__RefDeviceType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType), type))
		return soap->error;
	if (soap_out_int(soap, "nType", -1, &(a->Xdmrtm__RefDeviceType::nType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__RefDeviceType::sName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefDeviceType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefDeviceType(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceType * SOAP_FMAC4 soap_in_Xdmrtm__RefDeviceType(struct soap *soap, const char *tag, Xdmrtm__RefDeviceType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefDeviceType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType, sizeof(Xdmrtm__RefDeviceType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefDeviceType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nType1 = 1;
	size_t soap_flag_sName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nType", &(a->Xdmrtm__RefDeviceType::nType), "xsd:int"))
				{	soap_flag_nType1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__RefDeviceType::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType, 0, sizeof(Xdmrtm__RefDeviceType), 0, soap_copy_Xdmrtm__RefDeviceType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nType1 > 0 || soap_flag_sName1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RefDeviceType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefDeviceType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefDeviceType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefDeviceType(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceType * SOAP_FMAC4 soap_get_Xdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefDeviceType * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefDeviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefDeviceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceType);
		if (size)
			*size = sizeof(Xdmrtm__RefDeviceType);
		((Xdmrtm__RefDeviceType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefDeviceType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefDeviceType);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefDeviceType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefDeviceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefDeviceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefDeviceType %p -> %p\n", q, p));
	*(Xdmrtm__RefDeviceType*)p = *(Xdmrtm__RefDeviceType*)q;
}

void Xdmrtm__RefStationTypeArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Xdmrtm__RefStationTypeArray::__sizeitem = 0;
	this->Xdmrtm__RefStationTypeArray::item = NULL;
	/* transient soap skipped */
}

void Xdmrtm__RefStationTypeArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Xdmrtm__RefStationTypeArray::item)
	{	int i;
		for (i = 0; i < this->Xdmrtm__RefStationTypeArray::__sizeitem; i++)
		{
			soap_serialize_PointerToXdmrtm__RefStationType(soap, this->Xdmrtm__RefStationTypeArray::item + i);
		}
	}
	/* transient soap skipped */
}

int Xdmrtm__RefStationTypeArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefStationTypeArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefStationTypeArray(struct soap *soap, const char *tag, int id, const Xdmrtm__RefStationTypeArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray), type))
		return soap->error;
	if (a->Xdmrtm__RefStationTypeArray::item)
	{	int i;
		for (i = 0; i < a->Xdmrtm__RefStationTypeArray::__sizeitem; i++)
			if (soap_out_PointerToXdmrtm__RefStationType(soap, "item", -1, a->Xdmrtm__RefStationTypeArray::item + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefStationTypeArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefStationTypeArray(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefStationTypeArray * SOAP_FMAC4 soap_in_Xdmrtm__RefStationTypeArray(struct soap *soap, const char *tag, Xdmrtm__RefStationTypeArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefStationTypeArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray, sizeof(Xdmrtm__RefStationTypeArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefStationTypeArray *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_item1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "item", 1, NULL))
			{	if (a->Xdmrtm__RefStationTypeArray::item == NULL)
				{	if (soap_blist_item1 == NULL)
						soap_blist_item1 = soap_new_block(soap);
					a->Xdmrtm__RefStationTypeArray::item = (Xdmrtm__RefStationType **)soap_push_block(soap, soap_blist_item1, sizeof(Xdmrtm__RefStationType *));
					if (a->Xdmrtm__RefStationTypeArray::item == NULL)
						return NULL;
					*a->Xdmrtm__RefStationTypeArray::item = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToXdmrtm__RefStationType(soap, "item", a->Xdmrtm__RefStationTypeArray::item, "Xdmrtm:RefStationType"))
				{	a->Xdmrtm__RefStationTypeArray::__sizeitem++;
					a->Xdmrtm__RefStationTypeArray::item = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Xdmrtm__RefStationTypeArray::item)
			soap_pop_block(soap, soap_blist_item1);
		if (a->Xdmrtm__RefStationTypeArray::__sizeitem)
			a->Xdmrtm__RefStationTypeArray::item = (Xdmrtm__RefStationType **)soap_save_block(soap, soap_blist_item1, NULL, 1);
		else
		{	a->Xdmrtm__RefStationTypeArray::item = NULL;
			if (soap_blist_item1)
				soap_end_block(soap, soap_blist_item1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefStationTypeArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray, 0, sizeof(Xdmrtm__RefStationTypeArray), 0, soap_copy_Xdmrtm__RefStationTypeArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Xdmrtm__RefStationTypeArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefStationTypeArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefStationTypeArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefStationTypeArray(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefStationTypeArray * SOAP_FMAC4 soap_get_Xdmrtm__RefStationTypeArray(struct soap *soap, Xdmrtm__RefStationTypeArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefStationTypeArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefStationTypeArray * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefStationTypeArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefStationTypeArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefStationTypeArray);
		if (size)
			*size = sizeof(Xdmrtm__RefStationTypeArray);
		((Xdmrtm__RefStationTypeArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefStationTypeArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefStationTypeArray);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefStationTypeArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefStationTypeArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefStationTypeArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefStationTypeArray %p -> %p\n", q, p));
	*(Xdmrtm__RefStationTypeArray*)p = *(Xdmrtm__RefStationTypeArray*)q;
}

void Xdmrtm__RefStationType::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->Xdmrtm__RefStationType::nType);
	soap_default_std__string(soap, &this->Xdmrtm__RefStationType::sName);
	/* transient soap skipped */
}

void Xdmrtm__RefStationType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__string(soap, &this->Xdmrtm__RefStationType::sName);
	/* transient soap skipped */
}

int Xdmrtm__RefStationType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Xdmrtm__RefStationType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Xdmrtm__RefStationType(struct soap *soap, const char *tag, int id, const Xdmrtm__RefStationType *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType), type))
		return soap->error;
	if (soap_out_int(soap, "nType", -1, &(a->Xdmrtm__RefStationType::nType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "sName", -1, &(a->Xdmrtm__RefStationType::sName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Xdmrtm__RefStationType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Xdmrtm__RefStationType(soap, tag, this, type);
}

SOAP_FMAC3 Xdmrtm__RefStationType * SOAP_FMAC4 soap_in_Xdmrtm__RefStationType(struct soap *soap, const char *tag, Xdmrtm__RefStationType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Xdmrtm__RefStationType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType, sizeof(Xdmrtm__RefStationType), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Xdmrtm__RefStationType *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_nType1 = 1;
	size_t soap_flag_sName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "nType", &(a->Xdmrtm__RefStationType::nType), "xsd:int"))
				{	soap_flag_nType1--;
					continue;
				}
			if (soap_flag_sName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "sName", &(a->Xdmrtm__RefStationType::sName), "xsd:string"))
				{	soap_flag_sName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefStationType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType, 0, sizeof(Xdmrtm__RefStationType), 0, soap_copy_Xdmrtm__RefStationType);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_nType1 > 0 || soap_flag_sName1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Xdmrtm__RefStationType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType);
	if (this->soap_out(soap, tag?tag:"Xdmrtm:RefStationType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Xdmrtm__RefStationType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Xdmrtm__RefStationType(soap, this, tag, type);
}

SOAP_FMAC3 Xdmrtm__RefStationType * SOAP_FMAC4 soap_get_Xdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType *p, const char *tag, const char *type)
{
	if ((p = soap_in_Xdmrtm__RefStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Xdmrtm__RefStationType * SOAP_FMAC2 soap_instantiate_Xdmrtm__RefStationType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Xdmrtm__RefStationType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefStationType);
		if (size)
			*size = sizeof(Xdmrtm__RefStationType);
		((Xdmrtm__RefStationType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Xdmrtm__RefStationType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Xdmrtm__RefStationType);
		for (int i = 0; i < n; i++)
			((Xdmrtm__RefStationType*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Xdmrtm__RefStationType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Xdmrtm__RefStationType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Xdmrtm__RefStationType %p -> %p\n", q, p));
	*(Xdmrtm__RefStationType*)p = *(Xdmrtm__RefStationType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Xdmrtm_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm_SOAP_ENV__Header, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__SubmitAlarmInfo(struct soap *soap, struct __Xdmrtm__SubmitAlarmInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__SubmitAlarmInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__SubmitAlarmInfo(struct soap *soap, const struct __Xdmrtm__SubmitAlarmInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, &a->Xdmrtm__SubmitAlarmInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__SubmitAlarmInfo(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__SubmitAlarmInfo *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, "Xdmrtm:SubmitAlarmInfo", -1, &a->Xdmrtm__SubmitAlarmInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitAlarmInfo * SOAP_FMAC4 soap_in___Xdmrtm__SubmitAlarmInfo(struct soap *soap, const char *tag, struct __Xdmrtm__SubmitAlarmInfo *a, const char *type)
{
	size_t soap_flag_Xdmrtm__SubmitAlarmInfo = 1;
	short soap_flag;
	a = (struct __Xdmrtm__SubmitAlarmInfo *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo, sizeof(struct __Xdmrtm__SubmitAlarmInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__SubmitAlarmInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__SubmitAlarmInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, "Xdmrtm:SubmitAlarmInfo", &a->Xdmrtm__SubmitAlarmInfo, ""))
				{	soap_flag_Xdmrtm__SubmitAlarmInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__SubmitAlarmInfo(struct soap *soap, const struct __Xdmrtm__SubmitAlarmInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__SubmitAlarmInfo(soap, tag?tag:"-Xdmrtm:SubmitAlarmInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitAlarmInfo * SOAP_FMAC4 soap_get___Xdmrtm__SubmitAlarmInfo(struct soap *soap, struct __Xdmrtm__SubmitAlarmInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__SubmitAlarmInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__SubmitAlarmInfo * SOAP_FMAC2 soap_instantiate___Xdmrtm__SubmitAlarmInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__SubmitAlarmInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitAlarmInfo);
		if (size)
			*size = sizeof(struct __Xdmrtm__SubmitAlarmInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitAlarmInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__SubmitAlarmInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__SubmitAlarmInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__SubmitAlarmInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__SubmitAlarmInfo %p -> %p\n", q, p));
	*(struct __Xdmrtm__SubmitAlarmInfo*)p = *(struct __Xdmrtm__SubmitAlarmInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, struct __Xdmrtm__DeleteMonAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__DeleteMonAnalysisReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const struct __Xdmrtm__DeleteMonAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, &a->Xdmrtm__DeleteMonAnalysisReport);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__DeleteMonAnalysisReport *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, "Xdmrtm:DeleteMonAnalysisReport", -1, &a->Xdmrtm__DeleteMonAnalysisReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__DeleteMonAnalysisReport * SOAP_FMAC4 soap_in___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const char *tag, struct __Xdmrtm__DeleteMonAnalysisReport *a, const char *type)
{
	size_t soap_flag_Xdmrtm__DeleteMonAnalysisReport = 1;
	short soap_flag;
	a = (struct __Xdmrtm__DeleteMonAnalysisReport *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport, sizeof(struct __Xdmrtm__DeleteMonAnalysisReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__DeleteMonAnalysisReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__DeleteMonAnalysisReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, "Xdmrtm:DeleteMonAnalysisReport", &a->Xdmrtm__DeleteMonAnalysisReport, ""))
				{	soap_flag_Xdmrtm__DeleteMonAnalysisReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const struct __Xdmrtm__DeleteMonAnalysisReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__DeleteMonAnalysisReport(soap, tag?tag:"-Xdmrtm:DeleteMonAnalysisReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__DeleteMonAnalysisReport * SOAP_FMAC4 soap_get___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, struct __Xdmrtm__DeleteMonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__DeleteMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__DeleteMonAnalysisReport * SOAP_FMAC2 soap_instantiate___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__DeleteMonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__DeleteMonAnalysisReport);
		if (size)
			*size = sizeof(struct __Xdmrtm__DeleteMonAnalysisReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__DeleteMonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__DeleteMonAnalysisReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__DeleteMonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__DeleteMonAnalysisReport %p -> %p\n", q, p));
	*(struct __Xdmrtm__DeleteMonAnalysisReport*)p = *(struct __Xdmrtm__DeleteMonAnalysisReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__IsAnalysisReport(struct soap *soap, struct __Xdmrtm__IsAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__IsAnalysisReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__IsAnalysisReport(struct soap *soap, const struct __Xdmrtm__IsAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__IsAnalysisReport(soap, &a->Xdmrtm__IsAnalysisReport);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__IsAnalysisReport(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__IsAnalysisReport *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__IsAnalysisReport(soap, "Xdmrtm:IsAnalysisReport", -1, &a->Xdmrtm__IsAnalysisReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__IsAnalysisReport * SOAP_FMAC4 soap_in___Xdmrtm__IsAnalysisReport(struct soap *soap, const char *tag, struct __Xdmrtm__IsAnalysisReport *a, const char *type)
{
	size_t soap_flag_Xdmrtm__IsAnalysisReport = 1;
	short soap_flag;
	a = (struct __Xdmrtm__IsAnalysisReport *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport, sizeof(struct __Xdmrtm__IsAnalysisReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__IsAnalysisReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__IsAnalysisReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__IsAnalysisReport(soap, "Xdmrtm:IsAnalysisReport", &a->Xdmrtm__IsAnalysisReport, ""))
				{	soap_flag_Xdmrtm__IsAnalysisReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__IsAnalysisReport(struct soap *soap, const struct __Xdmrtm__IsAnalysisReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__IsAnalysisReport(soap, tag?tag:"-Xdmrtm:IsAnalysisReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__IsAnalysisReport * SOAP_FMAC4 soap_get___Xdmrtm__IsAnalysisReport(struct soap *soap, struct __Xdmrtm__IsAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__IsAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__IsAnalysisReport * SOAP_FMAC2 soap_instantiate___Xdmrtm__IsAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__IsAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__IsAnalysisReport);
		if (size)
			*size = sizeof(struct __Xdmrtm__IsAnalysisReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__IsAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__IsAnalysisReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__IsAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__IsAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__IsAnalysisReport %p -> %p\n", q, p));
	*(struct __Xdmrtm__IsAnalysisReport*)p = *(struct __Xdmrtm__IsAnalysisReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, struct __Xdmrtm__DownloadMonAnalysisReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__DownloadMonAnalysisReportAttachment = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const struct __Xdmrtm__DownloadMonAnalysisReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, &a->Xdmrtm__DownloadMonAnalysisReportAttachment);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__DownloadMonAnalysisReportAttachment *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, "Xdmrtm:DownloadMonAnalysisReportAttachment", -1, &a->Xdmrtm__DownloadMonAnalysisReportAttachment, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__DownloadMonAnalysisReportAttachment * SOAP_FMAC4 soap_in___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const char *tag, struct __Xdmrtm__DownloadMonAnalysisReportAttachment *a, const char *type)
{
	size_t soap_flag_Xdmrtm__DownloadMonAnalysisReportAttachment = 1;
	short soap_flag;
	a = (struct __Xdmrtm__DownloadMonAnalysisReportAttachment *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment, sizeof(struct __Xdmrtm__DownloadMonAnalysisReportAttachment), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__DownloadMonAnalysisReportAttachment(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__DownloadMonAnalysisReportAttachment && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, "Xdmrtm:DownloadMonAnalysisReportAttachment", &a->Xdmrtm__DownloadMonAnalysisReportAttachment, ""))
				{	soap_flag_Xdmrtm__DownloadMonAnalysisReportAttachment--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const struct __Xdmrtm__DownloadMonAnalysisReportAttachment *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag?tag:"-Xdmrtm:DownloadMonAnalysisReportAttachment", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__DownloadMonAnalysisReportAttachment * SOAP_FMAC4 soap_get___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, struct __Xdmrtm__DownloadMonAnalysisReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__DownloadMonAnalysisReportAttachment * SOAP_FMAC2 soap_instantiate___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__DownloadMonAnalysisReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__DownloadMonAnalysisReportAttachment);
		if (size)
			*size = sizeof(struct __Xdmrtm__DownloadMonAnalysisReportAttachment);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__DownloadMonAnalysisReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__DownloadMonAnalysisReportAttachment);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__DownloadMonAnalysisReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__DownloadMonAnalysisReportAttachment %p -> %p\n", q, p));
	*(struct __Xdmrtm__DownloadMonAnalysisReportAttachment*)p = *(struct __Xdmrtm__DownloadMonAnalysisReportAttachment*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, struct __Xdmrtm__QueryMonAnalysisReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryMonAnalysisReportAttachment = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const struct __Xdmrtm__QueryMonAnalysisReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, &a->Xdmrtm__QueryMonAnalysisReportAttachment);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryMonAnalysisReportAttachment *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, "Xdmrtm:QueryMonAnalysisReportAttachment", -1, &a->Xdmrtm__QueryMonAnalysisReportAttachment, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonAnalysisReportAttachment * SOAP_FMAC4 soap_in___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const char *tag, struct __Xdmrtm__QueryMonAnalysisReportAttachment *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryMonAnalysisReportAttachment = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryMonAnalysisReportAttachment *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment, sizeof(struct __Xdmrtm__QueryMonAnalysisReportAttachment), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryMonAnalysisReportAttachment(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryMonAnalysisReportAttachment && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, "Xdmrtm:QueryMonAnalysisReportAttachment", &a->Xdmrtm__QueryMonAnalysisReportAttachment, ""))
				{	soap_flag_Xdmrtm__QueryMonAnalysisReportAttachment--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const struct __Xdmrtm__QueryMonAnalysisReportAttachment *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag?tag:"-Xdmrtm:QueryMonAnalysisReportAttachment", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonAnalysisReportAttachment * SOAP_FMAC4 soap_get___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, struct __Xdmrtm__QueryMonAnalysisReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryMonAnalysisReportAttachment * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryMonAnalysisReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonAnalysisReportAttachment);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryMonAnalysisReportAttachment);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonAnalysisReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryMonAnalysisReportAttachment);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryMonAnalysisReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryMonAnalysisReportAttachment %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryMonAnalysisReportAttachment*)p = *(struct __Xdmrtm__QueryMonAnalysisReportAttachment*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, struct __Xdmrtm__QueryMonAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryMonAnalysisReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const struct __Xdmrtm__QueryMonAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, &a->Xdmrtm__QueryMonAnalysisReport);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryMonAnalysisReport *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, "Xdmrtm:QueryMonAnalysisReport", -1, &a->Xdmrtm__QueryMonAnalysisReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonAnalysisReport * SOAP_FMAC4 soap_in___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const char *tag, struct __Xdmrtm__QueryMonAnalysisReport *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryMonAnalysisReport = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryMonAnalysisReport *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport, sizeof(struct __Xdmrtm__QueryMonAnalysisReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryMonAnalysisReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryMonAnalysisReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, "Xdmrtm:QueryMonAnalysisReport", &a->Xdmrtm__QueryMonAnalysisReport, ""))
				{	soap_flag_Xdmrtm__QueryMonAnalysisReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const struct __Xdmrtm__QueryMonAnalysisReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryMonAnalysisReport(soap, tag?tag:"-Xdmrtm:QueryMonAnalysisReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonAnalysisReport * SOAP_FMAC4 soap_get___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, struct __Xdmrtm__QueryMonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryMonAnalysisReport * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryMonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonAnalysisReport);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryMonAnalysisReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryMonAnalysisReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryMonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryMonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryMonAnalysisReport %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryMonAnalysisReport*)p = *(struct __Xdmrtm__QueryMonAnalysisReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, struct __Xdmrtm__SubmitMonAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__SubmitMonAnalysisReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const struct __Xdmrtm__SubmitMonAnalysisReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, &a->Xdmrtm__SubmitMonAnalysisReport);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__SubmitMonAnalysisReport *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, "Xdmrtm:SubmitMonAnalysisReport", -1, &a->Xdmrtm__SubmitMonAnalysisReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitMonAnalysisReport * SOAP_FMAC4 soap_in___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const char *tag, struct __Xdmrtm__SubmitMonAnalysisReport *a, const char *type)
{
	size_t soap_flag_Xdmrtm__SubmitMonAnalysisReport = 1;
	short soap_flag;
	a = (struct __Xdmrtm__SubmitMonAnalysisReport *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport, sizeof(struct __Xdmrtm__SubmitMonAnalysisReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__SubmitMonAnalysisReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__SubmitMonAnalysisReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, "Xdmrtm:SubmitMonAnalysisReport", &a->Xdmrtm__SubmitMonAnalysisReport, ""))
				{	soap_flag_Xdmrtm__SubmitMonAnalysisReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const struct __Xdmrtm__SubmitMonAnalysisReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__SubmitMonAnalysisReport(soap, tag?tag:"-Xdmrtm:SubmitMonAnalysisReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitMonAnalysisReport * SOAP_FMAC4 soap_get___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, struct __Xdmrtm__SubmitMonAnalysisReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__SubmitMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__SubmitMonAnalysisReport * SOAP_FMAC2 soap_instantiate___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__SubmitMonAnalysisReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitMonAnalysisReport);
		if (size)
			*size = sizeof(struct __Xdmrtm__SubmitMonAnalysisReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitMonAnalysisReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__SubmitMonAnalysisReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__SubmitMonAnalysisReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__SubmitMonAnalysisReport %p -> %p\n", q, p));
	*(struct __Xdmrtm__SubmitMonAnalysisReport*)p = *(struct __Xdmrtm__SubmitMonAnalysisReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, struct __Xdmrtm__SubmitPlanTaskLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__SubmitPlanTaskLog = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const struct __Xdmrtm__SubmitPlanTaskLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, &a->Xdmrtm__SubmitPlanTaskLog);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__SubmitPlanTaskLog *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, "Xdmrtm:SubmitPlanTaskLog", -1, &a->Xdmrtm__SubmitPlanTaskLog, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitPlanTaskLog * SOAP_FMAC4 soap_in___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const char *tag, struct __Xdmrtm__SubmitPlanTaskLog *a, const char *type)
{
	size_t soap_flag_Xdmrtm__SubmitPlanTaskLog = 1;
	short soap_flag;
	a = (struct __Xdmrtm__SubmitPlanTaskLog *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog, sizeof(struct __Xdmrtm__SubmitPlanTaskLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__SubmitPlanTaskLog(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__SubmitPlanTaskLog && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, "Xdmrtm:SubmitPlanTaskLog", &a->Xdmrtm__SubmitPlanTaskLog, ""))
				{	soap_flag_Xdmrtm__SubmitPlanTaskLog--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const struct __Xdmrtm__SubmitPlanTaskLog *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__SubmitPlanTaskLog(soap, tag?tag:"-Xdmrtm:SubmitPlanTaskLog", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitPlanTaskLog * SOAP_FMAC4 soap_get___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, struct __Xdmrtm__SubmitPlanTaskLog *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__SubmitPlanTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__SubmitPlanTaskLog * SOAP_FMAC2 soap_instantiate___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__SubmitPlanTaskLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitPlanTaskLog);
		if (size)
			*size = sizeof(struct __Xdmrtm__SubmitPlanTaskLog);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitPlanTaskLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__SubmitPlanTaskLog);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__SubmitPlanTaskLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__SubmitPlanTaskLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__SubmitPlanTaskLog %p -> %p\n", q, p));
	*(struct __Xdmrtm__SubmitPlanTaskLog*)p = *(struct __Xdmrtm__SubmitPlanTaskLog*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__ResumePlanTask(struct soap *soap, struct __Xdmrtm__ResumePlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__ResumePlanTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__ResumePlanTask(struct soap *soap, const struct __Xdmrtm__ResumePlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__ResumePlanTask(soap, &a->Xdmrtm__ResumePlanTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__ResumePlanTask(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__ResumePlanTask *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__ResumePlanTask(soap, "Xdmrtm:ResumePlanTask", -1, &a->Xdmrtm__ResumePlanTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__ResumePlanTask * SOAP_FMAC4 soap_in___Xdmrtm__ResumePlanTask(struct soap *soap, const char *tag, struct __Xdmrtm__ResumePlanTask *a, const char *type)
{
	size_t soap_flag_Xdmrtm__ResumePlanTask = 1;
	short soap_flag;
	a = (struct __Xdmrtm__ResumePlanTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask, sizeof(struct __Xdmrtm__ResumePlanTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__ResumePlanTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__ResumePlanTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__ResumePlanTask(soap, "Xdmrtm:ResumePlanTask", &a->Xdmrtm__ResumePlanTask, ""))
				{	soap_flag_Xdmrtm__ResumePlanTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__ResumePlanTask(struct soap *soap, const struct __Xdmrtm__ResumePlanTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__ResumePlanTask(soap, tag?tag:"-Xdmrtm:ResumePlanTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__ResumePlanTask * SOAP_FMAC4 soap_get___Xdmrtm__ResumePlanTask(struct soap *soap, struct __Xdmrtm__ResumePlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__ResumePlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__ResumePlanTask * SOAP_FMAC2 soap_instantiate___Xdmrtm__ResumePlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__ResumePlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__ResumePlanTask);
		if (size)
			*size = sizeof(struct __Xdmrtm__ResumePlanTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__ResumePlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__ResumePlanTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__ResumePlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__ResumePlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__ResumePlanTask %p -> %p\n", q, p));
	*(struct __Xdmrtm__ResumePlanTask*)p = *(struct __Xdmrtm__ResumePlanTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__SuspendPlanTask(struct soap *soap, struct __Xdmrtm__SuspendPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__SuspendPlanTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__SuspendPlanTask(struct soap *soap, const struct __Xdmrtm__SuspendPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__SuspendPlanTask(soap, &a->Xdmrtm__SuspendPlanTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__SuspendPlanTask(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__SuspendPlanTask *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__SuspendPlanTask(soap, "Xdmrtm:SuspendPlanTask", -1, &a->Xdmrtm__SuspendPlanTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SuspendPlanTask * SOAP_FMAC4 soap_in___Xdmrtm__SuspendPlanTask(struct soap *soap, const char *tag, struct __Xdmrtm__SuspendPlanTask *a, const char *type)
{
	size_t soap_flag_Xdmrtm__SuspendPlanTask = 1;
	short soap_flag;
	a = (struct __Xdmrtm__SuspendPlanTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask, sizeof(struct __Xdmrtm__SuspendPlanTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__SuspendPlanTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__SuspendPlanTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__SuspendPlanTask(soap, "Xdmrtm:SuspendPlanTask", &a->Xdmrtm__SuspendPlanTask, ""))
				{	soap_flag_Xdmrtm__SuspendPlanTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__SuspendPlanTask(struct soap *soap, const struct __Xdmrtm__SuspendPlanTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__SuspendPlanTask(soap, tag?tag:"-Xdmrtm:SuspendPlanTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SuspendPlanTask * SOAP_FMAC4 soap_get___Xdmrtm__SuspendPlanTask(struct soap *soap, struct __Xdmrtm__SuspendPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__SuspendPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__SuspendPlanTask * SOAP_FMAC2 soap_instantiate___Xdmrtm__SuspendPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__SuspendPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SuspendPlanTask);
		if (size)
			*size = sizeof(struct __Xdmrtm__SuspendPlanTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SuspendPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__SuspendPlanTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__SuspendPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__SuspendPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__SuspendPlanTask %p -> %p\n", q, p));
	*(struct __Xdmrtm__SuspendPlanTask*)p = *(struct __Xdmrtm__SuspendPlanTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__StopPlanTask(struct soap *soap, struct __Xdmrtm__StopPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__StopPlanTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__StopPlanTask(struct soap *soap, const struct __Xdmrtm__StopPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__StopPlanTask(soap, &a->Xdmrtm__StopPlanTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__StopPlanTask(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__StopPlanTask *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__StopPlanTask(soap, "Xdmrtm:StopPlanTask", -1, &a->Xdmrtm__StopPlanTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__StopPlanTask * SOAP_FMAC4 soap_in___Xdmrtm__StopPlanTask(struct soap *soap, const char *tag, struct __Xdmrtm__StopPlanTask *a, const char *type)
{
	size_t soap_flag_Xdmrtm__StopPlanTask = 1;
	short soap_flag;
	a = (struct __Xdmrtm__StopPlanTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask, sizeof(struct __Xdmrtm__StopPlanTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__StopPlanTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__StopPlanTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__StopPlanTask(soap, "Xdmrtm:StopPlanTask", &a->Xdmrtm__StopPlanTask, ""))
				{	soap_flag_Xdmrtm__StopPlanTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__StopPlanTask(struct soap *soap, const struct __Xdmrtm__StopPlanTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__StopPlanTask(soap, tag?tag:"-Xdmrtm:StopPlanTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__StopPlanTask * SOAP_FMAC4 soap_get___Xdmrtm__StopPlanTask(struct soap *soap, struct __Xdmrtm__StopPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__StopPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__StopPlanTask * SOAP_FMAC2 soap_instantiate___Xdmrtm__StopPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__StopPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__StopPlanTask);
		if (size)
			*size = sizeof(struct __Xdmrtm__StopPlanTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__StopPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__StopPlanTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__StopPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__StopPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__StopPlanTask %p -> %p\n", q, p));
	*(struct __Xdmrtm__StopPlanTask*)p = *(struct __Xdmrtm__StopPlanTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__StartPlanTask(struct soap *soap, struct __Xdmrtm__StartPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__StartPlanTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__StartPlanTask(struct soap *soap, const struct __Xdmrtm__StartPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__StartPlanTask(soap, &a->Xdmrtm__StartPlanTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__StartPlanTask(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__StartPlanTask *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__StartPlanTask(soap, "Xdmrtm:StartPlanTask", -1, &a->Xdmrtm__StartPlanTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__StartPlanTask * SOAP_FMAC4 soap_in___Xdmrtm__StartPlanTask(struct soap *soap, const char *tag, struct __Xdmrtm__StartPlanTask *a, const char *type)
{
	size_t soap_flag_Xdmrtm__StartPlanTask = 1;
	short soap_flag;
	a = (struct __Xdmrtm__StartPlanTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask, sizeof(struct __Xdmrtm__StartPlanTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__StartPlanTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__StartPlanTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__StartPlanTask(soap, "Xdmrtm:StartPlanTask", &a->Xdmrtm__StartPlanTask, ""))
				{	soap_flag_Xdmrtm__StartPlanTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__StartPlanTask(struct soap *soap, const struct __Xdmrtm__StartPlanTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__StartPlanTask(soap, tag?tag:"-Xdmrtm:StartPlanTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__StartPlanTask * SOAP_FMAC4 soap_get___Xdmrtm__StartPlanTask(struct soap *soap, struct __Xdmrtm__StartPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__StartPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__StartPlanTask * SOAP_FMAC2 soap_instantiate___Xdmrtm__StartPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__StartPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__StartPlanTask);
		if (size)
			*size = sizeof(struct __Xdmrtm__StartPlanTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__StartPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__StartPlanTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__StartPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__StartPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__StartPlanTask %p -> %p\n", q, p));
	*(struct __Xdmrtm__StartPlanTask*)p = *(struct __Xdmrtm__StartPlanTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, struct __Xdmrtm__QueryCurExecPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryCurExecPlanTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const struct __Xdmrtm__QueryCurExecPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, &a->Xdmrtm__QueryCurExecPlanTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryCurExecPlanTask *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, "Xdmrtm:QueryCurExecPlanTask", -1, &a->Xdmrtm__QueryCurExecPlanTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryCurExecPlanTask * SOAP_FMAC4 soap_in___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const char *tag, struct __Xdmrtm__QueryCurExecPlanTask *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryCurExecPlanTask = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryCurExecPlanTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask, sizeof(struct __Xdmrtm__QueryCurExecPlanTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryCurExecPlanTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryCurExecPlanTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, "Xdmrtm:QueryCurExecPlanTask", &a->Xdmrtm__QueryCurExecPlanTask, ""))
				{	soap_flag_Xdmrtm__QueryCurExecPlanTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const struct __Xdmrtm__QueryCurExecPlanTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryCurExecPlanTask(soap, tag?tag:"-Xdmrtm:QueryCurExecPlanTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryCurExecPlanTask * SOAP_FMAC4 soap_get___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, struct __Xdmrtm__QueryCurExecPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryCurExecPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryCurExecPlanTask * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryCurExecPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryCurExecPlanTask);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryCurExecPlanTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryCurExecPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryCurExecPlanTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryCurExecPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryCurExecPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryCurExecPlanTask %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryCurExecPlanTask*)p = *(struct __Xdmrtm__QueryCurExecPlanTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryPlanTask(struct soap *soap, struct __Xdmrtm__QueryPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryPlanTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryPlanTask(struct soap *soap, const struct __Xdmrtm__QueryPlanTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryPlanTask(soap, &a->Xdmrtm__QueryPlanTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryPlanTask(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryPlanTask *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryPlanTask(soap, "Xdmrtm:QueryPlanTask", -1, &a->Xdmrtm__QueryPlanTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryPlanTask * SOAP_FMAC4 soap_in___Xdmrtm__QueryPlanTask(struct soap *soap, const char *tag, struct __Xdmrtm__QueryPlanTask *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryPlanTask = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryPlanTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask, sizeof(struct __Xdmrtm__QueryPlanTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryPlanTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryPlanTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryPlanTask(soap, "Xdmrtm:QueryPlanTask", &a->Xdmrtm__QueryPlanTask, ""))
				{	soap_flag_Xdmrtm__QueryPlanTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryPlanTask(struct soap *soap, const struct __Xdmrtm__QueryPlanTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryPlanTask(soap, tag?tag:"-Xdmrtm:QueryPlanTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryPlanTask * SOAP_FMAC4 soap_get___Xdmrtm__QueryPlanTask(struct soap *soap, struct __Xdmrtm__QueryPlanTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryPlanTask * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryPlanTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryPlanTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryPlanTask);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryPlanTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryPlanTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryPlanTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryPlanTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryPlanTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryPlanTask %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryPlanTask*)p = *(struct __Xdmrtm__QueryPlanTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, struct __Xdmrtm__QueryCurExecPlanTaskID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryCurExecPlanTaskID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const struct __Xdmrtm__QueryCurExecPlanTaskID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, &a->Xdmrtm__QueryCurExecPlanTaskID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryCurExecPlanTaskID *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, "Xdmrtm:QueryCurExecPlanTaskID", -1, &a->Xdmrtm__QueryCurExecPlanTaskID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryCurExecPlanTaskID * SOAP_FMAC4 soap_in___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const char *tag, struct __Xdmrtm__QueryCurExecPlanTaskID *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryCurExecPlanTaskID = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryCurExecPlanTaskID *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID, sizeof(struct __Xdmrtm__QueryCurExecPlanTaskID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryCurExecPlanTaskID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryCurExecPlanTaskID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, "Xdmrtm:QueryCurExecPlanTaskID", &a->Xdmrtm__QueryCurExecPlanTaskID, ""))
				{	soap_flag_Xdmrtm__QueryCurExecPlanTaskID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const struct __Xdmrtm__QueryCurExecPlanTaskID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryCurExecPlanTaskID(soap, tag?tag:"-Xdmrtm:QueryCurExecPlanTaskID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryCurExecPlanTaskID * SOAP_FMAC4 soap_get___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, struct __Xdmrtm__QueryCurExecPlanTaskID *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryCurExecPlanTaskID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryCurExecPlanTaskID * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryCurExecPlanTaskID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryCurExecPlanTaskID);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryCurExecPlanTaskID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryCurExecPlanTaskID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryCurExecPlanTaskID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryCurExecPlanTaskID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryCurExecPlanTaskID %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryCurExecPlanTaskID*)p = *(struct __Xdmrtm__QueryCurExecPlanTaskID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryFreqLayout(struct soap *soap, struct __Xdmrtm__QueryFreqLayout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryFreqLayout = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryFreqLayout(struct soap *soap, const struct __Xdmrtm__QueryFreqLayout *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryFreqLayout(soap, &a->Xdmrtm__QueryFreqLayout);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryFreqLayout(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryFreqLayout *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryFreqLayout(soap, "Xdmrtm:QueryFreqLayout", -1, &a->Xdmrtm__QueryFreqLayout, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryFreqLayout * SOAP_FMAC4 soap_in___Xdmrtm__QueryFreqLayout(struct soap *soap, const char *tag, struct __Xdmrtm__QueryFreqLayout *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryFreqLayout = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryFreqLayout *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout, sizeof(struct __Xdmrtm__QueryFreqLayout), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryFreqLayout(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryFreqLayout && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryFreqLayout(soap, "Xdmrtm:QueryFreqLayout", &a->Xdmrtm__QueryFreqLayout, ""))
				{	soap_flag_Xdmrtm__QueryFreqLayout--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryFreqLayout(struct soap *soap, const struct __Xdmrtm__QueryFreqLayout *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryFreqLayout(soap, tag?tag:"-Xdmrtm:QueryFreqLayout", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryFreqLayout * SOAP_FMAC4 soap_get___Xdmrtm__QueryFreqLayout(struct soap *soap, struct __Xdmrtm__QueryFreqLayout *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryFreqLayout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryFreqLayout * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryFreqLayout(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryFreqLayout(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryFreqLayout);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryFreqLayout);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryFreqLayout[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryFreqLayout);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryFreqLayout*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryFreqLayout(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryFreqLayout %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryFreqLayout*)p = *(struct __Xdmrtm__QueryFreqLayout*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, struct __Xdmrtm__QueryDeviceUseingInfoByUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryDeviceUseingInfoByUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const struct __Xdmrtm__QueryDeviceUseingInfoByUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, &a->Xdmrtm__QueryDeviceUseingInfoByUser);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryDeviceUseingInfoByUser *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, "Xdmrtm:QueryDeviceUseingInfoByUser", -1, &a->Xdmrtm__QueryDeviceUseingInfoByUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceUseingInfoByUser * SOAP_FMAC4 soap_in___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const char *tag, struct __Xdmrtm__QueryDeviceUseingInfoByUser *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryDeviceUseingInfoByUser = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryDeviceUseingInfoByUser *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser, sizeof(struct __Xdmrtm__QueryDeviceUseingInfoByUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryDeviceUseingInfoByUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryDeviceUseingInfoByUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, "Xdmrtm:QueryDeviceUseingInfoByUser", &a->Xdmrtm__QueryDeviceUseingInfoByUser, ""))
				{	soap_flag_Xdmrtm__QueryDeviceUseingInfoByUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const struct __Xdmrtm__QueryDeviceUseingInfoByUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag?tag:"-Xdmrtm:QueryDeviceUseingInfoByUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceUseingInfoByUser * SOAP_FMAC4 soap_get___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, struct __Xdmrtm__QueryDeviceUseingInfoByUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryDeviceUseingInfoByUser * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryDeviceUseingInfoByUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceUseingInfoByUser);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryDeviceUseingInfoByUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceUseingInfoByUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryDeviceUseingInfoByUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryDeviceUseingInfoByUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryDeviceUseingInfoByUser %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryDeviceUseingInfoByUser*)p = *(struct __Xdmrtm__QueryDeviceUseingInfoByUser*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, struct __Xdmrtm__QueryDeviceUseingInfoByDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryDeviceUseingInfoByDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const struct __Xdmrtm__QueryDeviceUseingInfoByDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, &a->Xdmrtm__QueryDeviceUseingInfoByDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryDeviceUseingInfoByDevice *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, "Xdmrtm:QueryDeviceUseingInfoByDevice", -1, &a->Xdmrtm__QueryDeviceUseingInfoByDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceUseingInfoByDevice * SOAP_FMAC4 soap_in___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const char *tag, struct __Xdmrtm__QueryDeviceUseingInfoByDevice *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryDeviceUseingInfoByDevice = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryDeviceUseingInfoByDevice *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice, sizeof(struct __Xdmrtm__QueryDeviceUseingInfoByDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryDeviceUseingInfoByDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryDeviceUseingInfoByDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, "Xdmrtm:QueryDeviceUseingInfoByDevice", &a->Xdmrtm__QueryDeviceUseingInfoByDevice, ""))
				{	soap_flag_Xdmrtm__QueryDeviceUseingInfoByDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const struct __Xdmrtm__QueryDeviceUseingInfoByDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag?tag:"-Xdmrtm:QueryDeviceUseingInfoByDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceUseingInfoByDevice * SOAP_FMAC4 soap_get___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, struct __Xdmrtm__QueryDeviceUseingInfoByDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryDeviceUseingInfoByDevice * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryDeviceUseingInfoByDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceUseingInfoByDevice);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryDeviceUseingInfoByDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceUseingInfoByDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryDeviceUseingInfoByDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryDeviceUseingInfoByDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryDeviceUseingInfoByDevice %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryDeviceUseingInfoByDevice*)p = *(struct __Xdmrtm__QueryDeviceUseingInfoByDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, struct __Xdmrtm__QueryDeviceUseingInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryDeviceUseingInfo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const struct __Xdmrtm__QueryDeviceUseingInfo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, &a->Xdmrtm__QueryDeviceUseingInfo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryDeviceUseingInfo *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, "Xdmrtm:QueryDeviceUseingInfo", -1, &a->Xdmrtm__QueryDeviceUseingInfo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceUseingInfo * SOAP_FMAC4 soap_in___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const char *tag, struct __Xdmrtm__QueryDeviceUseingInfo *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryDeviceUseingInfo = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryDeviceUseingInfo *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo, sizeof(struct __Xdmrtm__QueryDeviceUseingInfo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryDeviceUseingInfo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryDeviceUseingInfo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, "Xdmrtm:QueryDeviceUseingInfo", &a->Xdmrtm__QueryDeviceUseingInfo, ""))
				{	soap_flag_Xdmrtm__QueryDeviceUseingInfo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const struct __Xdmrtm__QueryDeviceUseingInfo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryDeviceUseingInfo(soap, tag?tag:"-Xdmrtm:QueryDeviceUseingInfo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceUseingInfo * SOAP_FMAC4 soap_get___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, struct __Xdmrtm__QueryDeviceUseingInfo *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryDeviceUseingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryDeviceUseingInfo * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryDeviceUseingInfo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceUseingInfo);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryDeviceUseingInfo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceUseingInfo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryDeviceUseingInfo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryDeviceUseingInfo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryDeviceUseingInfo %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryDeviceUseingInfo*)p = *(struct __Xdmrtm__QueryDeviceUseingInfo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, struct __Xdmrtm__SubmitDeviceUsedLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__SubmitDeviceUsedLog = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const struct __Xdmrtm__SubmitDeviceUsedLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, &a->Xdmrtm__SubmitDeviceUsedLog);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__SubmitDeviceUsedLog *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, "Xdmrtm:SubmitDeviceUsedLog", -1, &a->Xdmrtm__SubmitDeviceUsedLog, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitDeviceUsedLog * SOAP_FMAC4 soap_in___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const char *tag, struct __Xdmrtm__SubmitDeviceUsedLog *a, const char *type)
{
	size_t soap_flag_Xdmrtm__SubmitDeviceUsedLog = 1;
	short soap_flag;
	a = (struct __Xdmrtm__SubmitDeviceUsedLog *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog, sizeof(struct __Xdmrtm__SubmitDeviceUsedLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__SubmitDeviceUsedLog(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__SubmitDeviceUsedLog && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, "Xdmrtm:SubmitDeviceUsedLog", &a->Xdmrtm__SubmitDeviceUsedLog, ""))
				{	soap_flag_Xdmrtm__SubmitDeviceUsedLog--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const struct __Xdmrtm__SubmitDeviceUsedLog *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__SubmitDeviceUsedLog(soap, tag?tag:"-Xdmrtm:SubmitDeviceUsedLog", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__SubmitDeviceUsedLog * SOAP_FMAC4 soap_get___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, struct __Xdmrtm__SubmitDeviceUsedLog *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__SubmitDeviceUsedLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__SubmitDeviceUsedLog * SOAP_FMAC2 soap_instantiate___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__SubmitDeviceUsedLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitDeviceUsedLog);
		if (size)
			*size = sizeof(struct __Xdmrtm__SubmitDeviceUsedLog);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__SubmitDeviceUsedLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__SubmitDeviceUsedLog);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__SubmitDeviceUsedLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__SubmitDeviceUsedLog %p -> %p\n", q, p));
	*(struct __Xdmrtm__SubmitDeviceUsedLog*)p = *(struct __Xdmrtm__SubmitDeviceUsedLog*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, struct __Xdmrtm__AllocLoadbalancingServer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__AllocLoadbalancingServer = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const struct __Xdmrtm__AllocLoadbalancingServer *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, &a->Xdmrtm__AllocLoadbalancingServer);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__AllocLoadbalancingServer *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, "Xdmrtm:AllocLoadbalancingServer", -1, &a->Xdmrtm__AllocLoadbalancingServer, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__AllocLoadbalancingServer * SOAP_FMAC4 soap_in___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const char *tag, struct __Xdmrtm__AllocLoadbalancingServer *a, const char *type)
{
	size_t soap_flag_Xdmrtm__AllocLoadbalancingServer = 1;
	short soap_flag;
	a = (struct __Xdmrtm__AllocLoadbalancingServer *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer, sizeof(struct __Xdmrtm__AllocLoadbalancingServer), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__AllocLoadbalancingServer(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__AllocLoadbalancingServer && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, "Xdmrtm:AllocLoadbalancingServer", &a->Xdmrtm__AllocLoadbalancingServer, ""))
				{	soap_flag_Xdmrtm__AllocLoadbalancingServer--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const struct __Xdmrtm__AllocLoadbalancingServer *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__AllocLoadbalancingServer(soap, tag?tag:"-Xdmrtm:AllocLoadbalancingServer", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__AllocLoadbalancingServer * SOAP_FMAC4 soap_get___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, struct __Xdmrtm__AllocLoadbalancingServer *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__AllocLoadbalancingServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__AllocLoadbalancingServer * SOAP_FMAC2 soap_instantiate___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__AllocLoadbalancingServer(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__AllocLoadbalancingServer);
		if (size)
			*size = sizeof(struct __Xdmrtm__AllocLoadbalancingServer);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__AllocLoadbalancingServer[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__AllocLoadbalancingServer);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__AllocLoadbalancingServer*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__AllocLoadbalancingServer(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__AllocLoadbalancingServer %p -> %p\n", q, p));
	*(struct __Xdmrtm__AllocLoadbalancingServer*)p = *(struct __Xdmrtm__AllocLoadbalancingServer*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryUserLicenseStation(struct soap *soap, struct __Xdmrtm__QueryUserLicenseStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryUserLicenseStation = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryUserLicenseStation(struct soap *soap, const struct __Xdmrtm__QueryUserLicenseStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, &a->Xdmrtm__QueryUserLicenseStation);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryUserLicenseStation(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryUserLicenseStation *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, "Xdmrtm:QueryUserLicenseStation", -1, &a->Xdmrtm__QueryUserLicenseStation, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryUserLicenseStation * SOAP_FMAC4 soap_in___Xdmrtm__QueryUserLicenseStation(struct soap *soap, const char *tag, struct __Xdmrtm__QueryUserLicenseStation *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryUserLicenseStation = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryUserLicenseStation *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation, sizeof(struct __Xdmrtm__QueryUserLicenseStation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryUserLicenseStation(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryUserLicenseStation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, "Xdmrtm:QueryUserLicenseStation", &a->Xdmrtm__QueryUserLicenseStation, ""))
				{	soap_flag_Xdmrtm__QueryUserLicenseStation--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryUserLicenseStation(struct soap *soap, const struct __Xdmrtm__QueryUserLicenseStation *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryUserLicenseStation(soap, tag?tag:"-Xdmrtm:QueryUserLicenseStation", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryUserLicenseStation * SOAP_FMAC4 soap_get___Xdmrtm__QueryUserLicenseStation(struct soap *soap, struct __Xdmrtm__QueryUserLicenseStation *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryUserLicenseStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryUserLicenseStation * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryUserLicenseStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryUserLicenseStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryUserLicenseStation);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryUserLicenseStation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryUserLicenseStation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryUserLicenseStation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryUserLicenseStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryUserLicenseStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryUserLicenseStation %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryUserLicenseStation*)p = *(struct __Xdmrtm__QueryUserLicenseStation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, struct __Xdmrtm__QueryDeviceFuncAnt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryDeviceFuncAnt = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const struct __Xdmrtm__QueryDeviceFuncAnt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, &a->Xdmrtm__QueryDeviceFuncAnt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryDeviceFuncAnt *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, "Xdmrtm:QueryDeviceFuncAnt", -1, &a->Xdmrtm__QueryDeviceFuncAnt, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceFuncAnt * SOAP_FMAC4 soap_in___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const char *tag, struct __Xdmrtm__QueryDeviceFuncAnt *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryDeviceFuncAnt = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryDeviceFuncAnt *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt, sizeof(struct __Xdmrtm__QueryDeviceFuncAnt), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryDeviceFuncAnt(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryDeviceFuncAnt && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, "Xdmrtm:QueryDeviceFuncAnt", &a->Xdmrtm__QueryDeviceFuncAnt, ""))
				{	soap_flag_Xdmrtm__QueryDeviceFuncAnt--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const struct __Xdmrtm__QueryDeviceFuncAnt *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryDeviceFuncAnt(soap, tag?tag:"-Xdmrtm:QueryDeviceFuncAnt", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceFuncAnt * SOAP_FMAC4 soap_get___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, struct __Xdmrtm__QueryDeviceFuncAnt *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryDeviceFuncAnt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryDeviceFuncAnt * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryDeviceFuncAnt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceFuncAnt);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryDeviceFuncAnt);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceFuncAnt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryDeviceFuncAnt);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryDeviceFuncAnt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryDeviceFuncAnt %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryDeviceFuncAnt*)p = *(struct __Xdmrtm__QueryDeviceFuncAnt*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryDeviceFunc(struct soap *soap, struct __Xdmrtm__QueryDeviceFunc *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryDeviceFunc = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryDeviceFunc(struct soap *soap, const struct __Xdmrtm__QueryDeviceFunc *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryDeviceFunc(soap, &a->Xdmrtm__QueryDeviceFunc);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryDeviceFunc(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryDeviceFunc *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceFunc(soap, "Xdmrtm:QueryDeviceFunc", -1, &a->Xdmrtm__QueryDeviceFunc, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceFunc * SOAP_FMAC4 soap_in___Xdmrtm__QueryDeviceFunc(struct soap *soap, const char *tag, struct __Xdmrtm__QueryDeviceFunc *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryDeviceFunc = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryDeviceFunc *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc, sizeof(struct __Xdmrtm__QueryDeviceFunc), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryDeviceFunc(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryDeviceFunc && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryDeviceFunc(soap, "Xdmrtm:QueryDeviceFunc", &a->Xdmrtm__QueryDeviceFunc, ""))
				{	soap_flag_Xdmrtm__QueryDeviceFunc--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryDeviceFunc(struct soap *soap, const struct __Xdmrtm__QueryDeviceFunc *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryDeviceFunc(soap, tag?tag:"-Xdmrtm:QueryDeviceFunc", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDeviceFunc * SOAP_FMAC4 soap_get___Xdmrtm__QueryDeviceFunc(struct soap *soap, struct __Xdmrtm__QueryDeviceFunc *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryDeviceFunc * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryDeviceFunc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryDeviceFunc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceFunc);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryDeviceFunc);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDeviceFunc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryDeviceFunc);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryDeviceFunc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryDeviceFunc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryDeviceFunc %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryDeviceFunc*)p = *(struct __Xdmrtm__QueryDeviceFunc*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryAnt(struct soap *soap, struct __Xdmrtm__QueryAnt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryAnt = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryAnt(struct soap *soap, const struct __Xdmrtm__QueryAnt *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryAnt(soap, &a->Xdmrtm__QueryAnt);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryAnt(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryAnt *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryAnt(soap, "Xdmrtm:QueryAnt", -1, &a->Xdmrtm__QueryAnt, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryAnt * SOAP_FMAC4 soap_in___Xdmrtm__QueryAnt(struct soap *soap, const char *tag, struct __Xdmrtm__QueryAnt *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryAnt = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryAnt *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt, sizeof(struct __Xdmrtm__QueryAnt), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryAnt(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryAnt && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryAnt(soap, "Xdmrtm:QueryAnt", &a->Xdmrtm__QueryAnt, ""))
				{	soap_flag_Xdmrtm__QueryAnt--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryAnt(struct soap *soap, const struct __Xdmrtm__QueryAnt *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryAnt(soap, tag?tag:"-Xdmrtm:QueryAnt", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryAnt * SOAP_FMAC4 soap_get___Xdmrtm__QueryAnt(struct soap *soap, struct __Xdmrtm__QueryAnt *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryAnt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryAnt * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryAnt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryAnt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryAnt);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryAnt);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryAnt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryAnt);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryAnt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryAnt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryAnt %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryAnt*)p = *(struct __Xdmrtm__QueryAnt*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRNC(struct soap *soap, struct __Xdmrtm__QueryRNC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRNC = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRNC(struct soap *soap, const struct __Xdmrtm__QueryRNC *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRNC(soap, &a->Xdmrtm__QueryRNC);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRNC(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRNC *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRNC(soap, "Xdmrtm:QueryRNC", -1, &a->Xdmrtm__QueryRNC, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRNC * SOAP_FMAC4 soap_in___Xdmrtm__QueryRNC(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRNC *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRNC = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRNC *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC, sizeof(struct __Xdmrtm__QueryRNC), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRNC(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRNC && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRNC(soap, "Xdmrtm:QueryRNC", &a->Xdmrtm__QueryRNC, ""))
				{	soap_flag_Xdmrtm__QueryRNC--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRNC(struct soap *soap, const struct __Xdmrtm__QueryRNC *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRNC(soap, tag?tag:"-Xdmrtm:QueryRNC", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRNC * SOAP_FMAC4 soap_get___Xdmrtm__QueryRNC(struct soap *soap, struct __Xdmrtm__QueryRNC *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRNC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRNC * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRNC(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRNC(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRNC);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRNC);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRNC[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRNC);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRNC*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRNC(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRNC %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRNC*)p = *(struct __Xdmrtm__QueryRNC*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryDevice(struct soap *soap, struct __Xdmrtm__QueryDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryDevice(struct soap *soap, const struct __Xdmrtm__QueryDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryDevice(soap, &a->Xdmrtm__QueryDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryDevice(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryDevice *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryDevice(soap, "Xdmrtm:QueryDevice", -1, &a->Xdmrtm__QueryDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDevice * SOAP_FMAC4 soap_in___Xdmrtm__QueryDevice(struct soap *soap, const char *tag, struct __Xdmrtm__QueryDevice *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryDevice = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryDevice *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice, sizeof(struct __Xdmrtm__QueryDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryDevice(soap, "Xdmrtm:QueryDevice", &a->Xdmrtm__QueryDevice, ""))
				{	soap_flag_Xdmrtm__QueryDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryDevice(struct soap *soap, const struct __Xdmrtm__QueryDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryDevice(soap, tag?tag:"-Xdmrtm:QueryDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryDevice * SOAP_FMAC4 soap_get___Xdmrtm__QueryDevice(struct soap *soap, struct __Xdmrtm__QueryDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryDevice * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDevice);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryDevice %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryDevice*)p = *(struct __Xdmrtm__QueryDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryStation(struct soap *soap, struct __Xdmrtm__QueryStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryStation = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryStation(struct soap *soap, const struct __Xdmrtm__QueryStation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryStation(soap, &a->Xdmrtm__QueryStation);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryStation(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryStation *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryStation(soap, "Xdmrtm:QueryStation", -1, &a->Xdmrtm__QueryStation, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryStation * SOAP_FMAC4 soap_in___Xdmrtm__QueryStation(struct soap *soap, const char *tag, struct __Xdmrtm__QueryStation *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryStation = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryStation *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation, sizeof(struct __Xdmrtm__QueryStation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryStation(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryStation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryStation(soap, "Xdmrtm:QueryStation", &a->Xdmrtm__QueryStation, ""))
				{	soap_flag_Xdmrtm__QueryStation--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryStation(struct soap *soap, const struct __Xdmrtm__QueryStation *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryStation(soap, tag?tag:"-Xdmrtm:QueryStation", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryStation * SOAP_FMAC4 soap_get___Xdmrtm__QueryStation(struct soap *soap, struct __Xdmrtm__QueryStation *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryStation * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryStation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryStation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryStation);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryStation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryStation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryStation);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryStation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryStation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryStation %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryStation*)p = *(struct __Xdmrtm__QueryStation*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryMonControlCenter(struct soap *soap, struct __Xdmrtm__QueryMonControlCenter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryMonControlCenter = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryMonControlCenter(struct soap *soap, const struct __Xdmrtm__QueryMonControlCenter *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryMonControlCenter(soap, &a->Xdmrtm__QueryMonControlCenter);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryMonControlCenter(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryMonControlCenter *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryMonControlCenter(soap, "Xdmrtm:QueryMonControlCenter", -1, &a->Xdmrtm__QueryMonControlCenter, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonControlCenter * SOAP_FMAC4 soap_in___Xdmrtm__QueryMonControlCenter(struct soap *soap, const char *tag, struct __Xdmrtm__QueryMonControlCenter *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryMonControlCenter = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryMonControlCenter *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter, sizeof(struct __Xdmrtm__QueryMonControlCenter), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryMonControlCenter(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryMonControlCenter && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryMonControlCenter(soap, "Xdmrtm:QueryMonControlCenter", &a->Xdmrtm__QueryMonControlCenter, ""))
				{	soap_flag_Xdmrtm__QueryMonControlCenter--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryMonControlCenter(struct soap *soap, const struct __Xdmrtm__QueryMonControlCenter *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryMonControlCenter(soap, tag?tag:"-Xdmrtm:QueryMonControlCenter", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonControlCenter * SOAP_FMAC4 soap_get___Xdmrtm__QueryMonControlCenter(struct soap *soap, struct __Xdmrtm__QueryMonControlCenter *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryMonControlCenter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryMonControlCenter * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryMonControlCenter(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryMonControlCenter(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonControlCenter);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryMonControlCenter);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonControlCenter[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryMonControlCenter);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryMonControlCenter*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryMonControlCenter(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryMonControlCenter %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryMonControlCenter*)p = *(struct __Xdmrtm__QueryMonControlCenter*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryMonOrganization(struct soap *soap, struct __Xdmrtm__QueryMonOrganization *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryMonOrganization = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryMonOrganization(struct soap *soap, const struct __Xdmrtm__QueryMonOrganization *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryMonOrganization(soap, &a->Xdmrtm__QueryMonOrganization);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryMonOrganization(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryMonOrganization *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryMonOrganization(soap, "Xdmrtm:QueryMonOrganization", -1, &a->Xdmrtm__QueryMonOrganization, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonOrganization * SOAP_FMAC4 soap_in___Xdmrtm__QueryMonOrganization(struct soap *soap, const char *tag, struct __Xdmrtm__QueryMonOrganization *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryMonOrganization = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryMonOrganization *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization, sizeof(struct __Xdmrtm__QueryMonOrganization), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryMonOrganization(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryMonOrganization && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryMonOrganization(soap, "Xdmrtm:QueryMonOrganization", &a->Xdmrtm__QueryMonOrganization, ""))
				{	soap_flag_Xdmrtm__QueryMonOrganization--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryMonOrganization(struct soap *soap, const struct __Xdmrtm__QueryMonOrganization *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryMonOrganization(soap, tag?tag:"-Xdmrtm:QueryMonOrganization", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryMonOrganization * SOAP_FMAC4 soap_get___Xdmrtm__QueryMonOrganization(struct soap *soap, struct __Xdmrtm__QueryMonOrganization *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryMonOrganization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryMonOrganization * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryMonOrganization(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryMonOrganization(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonOrganization);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryMonOrganization);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryMonOrganization[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryMonOrganization);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryMonOrganization*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryMonOrganization(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryMonOrganization %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryMonOrganization*)p = *(struct __Xdmrtm__QueryMonOrganization*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, struct __Xdmrtm__QueryRefDeviceModelFuncParam *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRefDeviceModelFuncParam = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceModelFuncParam *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, &a->Xdmrtm__QueryRefDeviceModelFuncParam);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRefDeviceModelFuncParam *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, "Xdmrtm:QueryRefDeviceModelFuncParam", -1, &a->Xdmrtm__QueryRefDeviceModelFuncParam, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceModelFuncParam * SOAP_FMAC4 soap_in___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRefDeviceModelFuncParam *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRefDeviceModelFuncParam = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRefDeviceModelFuncParam *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam, sizeof(struct __Xdmrtm__QueryRefDeviceModelFuncParam), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRefDeviceModelFuncParam(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRefDeviceModelFuncParam && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, "Xdmrtm:QueryRefDeviceModelFuncParam", &a->Xdmrtm__QueryRefDeviceModelFuncParam, ""))
				{	soap_flag_Xdmrtm__QueryRefDeviceModelFuncParam--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceModelFuncParam *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag?tag:"-Xdmrtm:QueryRefDeviceModelFuncParam", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceModelFuncParam * SOAP_FMAC4 soap_get___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, struct __Xdmrtm__QueryRefDeviceModelFuncParam *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRefDeviceModelFuncParam * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRefDeviceModelFuncParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceModelFuncParam);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRefDeviceModelFuncParam);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceModelFuncParam[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRefDeviceModelFuncParam);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRefDeviceModelFuncParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRefDeviceModelFuncParam %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRefDeviceModelFuncParam*)p = *(struct __Xdmrtm__QueryRefDeviceModelFuncParam*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, struct __Xdmrtm__QueryRefDeviceFunc *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRefDeviceFunc = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceFunc *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, &a->Xdmrtm__QueryRefDeviceFunc);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRefDeviceFunc *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, "Xdmrtm:QueryRefDeviceFunc", -1, &a->Xdmrtm__QueryRefDeviceFunc, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceFunc * SOAP_FMAC4 soap_in___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRefDeviceFunc *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRefDeviceFunc = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRefDeviceFunc *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc, sizeof(struct __Xdmrtm__QueryRefDeviceFunc), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRefDeviceFunc(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRefDeviceFunc && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, "Xdmrtm:QueryRefDeviceFunc", &a->Xdmrtm__QueryRefDeviceFunc, ""))
				{	soap_flag_Xdmrtm__QueryRefDeviceFunc--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceFunc *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRefDeviceFunc(soap, tag?tag:"-Xdmrtm:QueryRefDeviceFunc", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceFunc * SOAP_FMAC4 soap_get___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, struct __Xdmrtm__QueryRefDeviceFunc *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRefDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRefDeviceFunc * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRefDeviceFunc(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceFunc);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRefDeviceFunc);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceFunc[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRefDeviceFunc);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRefDeviceFunc*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRefDeviceFunc(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRefDeviceFunc %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRefDeviceFunc*)p = *(struct __Xdmrtm__QueryRefDeviceFunc*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRefDeviceModel(struct soap *soap, struct __Xdmrtm__QueryRefDeviceModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRefDeviceModel = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRefDeviceModel(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceModel *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, &a->Xdmrtm__QueryRefDeviceModel);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRefDeviceModel(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRefDeviceModel *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, "Xdmrtm:QueryRefDeviceModel", -1, &a->Xdmrtm__QueryRefDeviceModel, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceModel * SOAP_FMAC4 soap_in___Xdmrtm__QueryRefDeviceModel(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRefDeviceModel *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRefDeviceModel = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRefDeviceModel *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel, sizeof(struct __Xdmrtm__QueryRefDeviceModel), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRefDeviceModel(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRefDeviceModel && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, "Xdmrtm:QueryRefDeviceModel", &a->Xdmrtm__QueryRefDeviceModel, ""))
				{	soap_flag_Xdmrtm__QueryRefDeviceModel--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRefDeviceModel(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceModel *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRefDeviceModel(soap, tag?tag:"-Xdmrtm:QueryRefDeviceModel", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceModel * SOAP_FMAC4 soap_get___Xdmrtm__QueryRefDeviceModel(struct soap *soap, struct __Xdmrtm__QueryRefDeviceModel *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRefDeviceModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRefDeviceModel * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRefDeviceModel(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRefDeviceModel(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceModel);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRefDeviceModel);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceModel[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRefDeviceModel);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRefDeviceModel*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRefDeviceModel(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRefDeviceModel %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRefDeviceModel*)p = *(struct __Xdmrtm__QueryRefDeviceModel*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, struct __Xdmrtm__QueryRefDeviceProtocolType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRefDeviceProtocolType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceProtocolType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, &a->Xdmrtm__QueryRefDeviceProtocolType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRefDeviceProtocolType *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, "Xdmrtm:QueryRefDeviceProtocolType", -1, &a->Xdmrtm__QueryRefDeviceProtocolType, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceProtocolType * SOAP_FMAC4 soap_in___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRefDeviceProtocolType *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRefDeviceProtocolType = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRefDeviceProtocolType *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType, sizeof(struct __Xdmrtm__QueryRefDeviceProtocolType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRefDeviceProtocolType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRefDeviceProtocolType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, "Xdmrtm:QueryRefDeviceProtocolType", &a->Xdmrtm__QueryRefDeviceProtocolType, ""))
				{	soap_flag_Xdmrtm__QueryRefDeviceProtocolType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceProtocolType *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRefDeviceProtocolType(soap, tag?tag:"-Xdmrtm:QueryRefDeviceProtocolType", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceProtocolType * SOAP_FMAC4 soap_get___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, struct __Xdmrtm__QueryRefDeviceProtocolType *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRefDeviceProtocolType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRefDeviceProtocolType * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRefDeviceProtocolType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceProtocolType);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRefDeviceProtocolType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceProtocolType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRefDeviceProtocolType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRefDeviceProtocolType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRefDeviceProtocolType %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRefDeviceProtocolType*)p = *(struct __Xdmrtm__QueryRefDeviceProtocolType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRefDeviceType(struct soap *soap, struct __Xdmrtm__QueryRefDeviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRefDeviceType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRefDeviceType(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceType(soap, &a->Xdmrtm__QueryRefDeviceType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRefDeviceType(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRefDeviceType *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceType(soap, "Xdmrtm:QueryRefDeviceType", -1, &a->Xdmrtm__QueryRefDeviceType, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceType * SOAP_FMAC4 soap_in___Xdmrtm__QueryRefDeviceType(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRefDeviceType *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRefDeviceType = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRefDeviceType *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType, sizeof(struct __Xdmrtm__QueryRefDeviceType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRefDeviceType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRefDeviceType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRefDeviceType(soap, "Xdmrtm:QueryRefDeviceType", &a->Xdmrtm__QueryRefDeviceType, ""))
				{	soap_flag_Xdmrtm__QueryRefDeviceType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRefDeviceType(struct soap *soap, const struct __Xdmrtm__QueryRefDeviceType *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRefDeviceType(soap, tag?tag:"-Xdmrtm:QueryRefDeviceType", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefDeviceType * SOAP_FMAC4 soap_get___Xdmrtm__QueryRefDeviceType(struct soap *soap, struct __Xdmrtm__QueryRefDeviceType *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRefDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRefDeviceType * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRefDeviceType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRefDeviceType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceType);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRefDeviceType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefDeviceType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRefDeviceType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRefDeviceType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRefDeviceType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRefDeviceType %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRefDeviceType*)p = *(struct __Xdmrtm__QueryRefDeviceType*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Xdmrtm__QueryRefStationType(struct soap *soap, struct __Xdmrtm__QueryRefStationType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Xdmrtm__QueryRefStationType = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Xdmrtm__QueryRefStationType(struct soap *soap, const struct __Xdmrtm__QueryRefStationType *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Xdmrtm__QueryRefStationType(soap, &a->Xdmrtm__QueryRefStationType);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Xdmrtm__QueryRefStationType(struct soap *soap, const char *tag, int id, const struct __Xdmrtm__QueryRefStationType *a, const char *type)
{
	if (soap_out_PointerTo_Xdmrtm__QueryRefStationType(soap, "Xdmrtm:QueryRefStationType", -1, &a->Xdmrtm__QueryRefStationType, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefStationType * SOAP_FMAC4 soap_in___Xdmrtm__QueryRefStationType(struct soap *soap, const char *tag, struct __Xdmrtm__QueryRefStationType *a, const char *type)
{
	size_t soap_flag_Xdmrtm__QueryRefStationType = 1;
	short soap_flag;
	a = (struct __Xdmrtm__QueryRefStationType *)soap_id_enter(soap, "", a, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType, sizeof(struct __Xdmrtm__QueryRefStationType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Xdmrtm__QueryRefStationType(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Xdmrtm__QueryRefStationType && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Xdmrtm__QueryRefStationType(soap, "Xdmrtm:QueryRefStationType", &a->Xdmrtm__QueryRefStationType, ""))
				{	soap_flag_Xdmrtm__QueryRefStationType--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Xdmrtm__QueryRefStationType(struct soap *soap, const struct __Xdmrtm__QueryRefStationType *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Xdmrtm__QueryRefStationType(soap, tag?tag:"-Xdmrtm:QueryRefStationType", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Xdmrtm__QueryRefStationType * SOAP_FMAC4 soap_get___Xdmrtm__QueryRefStationType(struct soap *soap, struct __Xdmrtm__QueryRefStationType *p, const char *tag, const char *type)
{
	if ((p = soap_in___Xdmrtm__QueryRefStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Xdmrtm__QueryRefStationType * SOAP_FMAC2 soap_instantiate___Xdmrtm__QueryRefStationType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Xdmrtm__QueryRefStationType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType, n, Xdmrtm_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefStationType);
		if (size)
			*size = sizeof(struct __Xdmrtm__QueryRefStationType);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Xdmrtm__QueryRefStationType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Xdmrtm__QueryRefStationType);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Xdmrtm__QueryRefStationType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Xdmrtm__QueryRefStationType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Xdmrtm__QueryRefStationType %p -> %p\n", q, p));
	*(struct __Xdmrtm__QueryRefStationType*)p = *(struct __Xdmrtm__QueryRefStationType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, _Xdmrtm__SubmitAlarmInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitAlarmInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitAlarmInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitAlarmInfoResponse **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitAlarmInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitAlarmInfoResponse *)soap_instantiate__Xdmrtm__SubmitAlarmInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitAlarmInfoResponse ** p = (_Xdmrtm__SubmitAlarmInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse, sizeof(_Xdmrtm__SubmitAlarmInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, _Xdmrtm__SubmitAlarmInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfoResponse);
	if (soap_out_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(soap, tag?tag:"Xdmrtm:SubmitAlarmInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(struct soap *soap, _Xdmrtm__SubmitAlarmInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitAlarmInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitAlarmInfo(struct soap *soap, _Xdmrtm__SubmitAlarmInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitAlarmInfo(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitAlarmInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfo ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitAlarmInfo(struct soap *soap, const char *tag, _Xdmrtm__SubmitAlarmInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitAlarmInfo **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitAlarmInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitAlarmInfo *)soap_instantiate__Xdmrtm__SubmitAlarmInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitAlarmInfo ** p = (_Xdmrtm__SubmitAlarmInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo, sizeof(_Xdmrtm__SubmitAlarmInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitAlarmInfo(struct soap *soap, _Xdmrtm__SubmitAlarmInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitAlarmInfo);
	if (soap_out_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, tag?tag:"Xdmrtm:SubmitAlarmInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitAlarmInfo ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitAlarmInfo(struct soap *soap, _Xdmrtm__SubmitAlarmInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitAlarmInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, _Xdmrtm__DeleteMonAnalysisResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__DeleteMonAnalysisResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, const char *tag, _Xdmrtm__DeleteMonAnalysisResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__DeleteMonAnalysisResponse **)soap_malloc(soap, sizeof(_Xdmrtm__DeleteMonAnalysisResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__DeleteMonAnalysisResponse *)soap_instantiate__Xdmrtm__DeleteMonAnalysisResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__DeleteMonAnalysisResponse ** p = (_Xdmrtm__DeleteMonAnalysisResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse, sizeof(_Xdmrtm__DeleteMonAnalysisResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, _Xdmrtm__DeleteMonAnalysisResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisResponse);
	if (soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(soap, tag?tag:"Xdmrtm:DeleteMonAnalysisResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(struct soap *soap, _Xdmrtm__DeleteMonAnalysisResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, _Xdmrtm__DeleteMonAnalysisReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const char *tag, int id, _Xdmrtm__DeleteMonAnalysisReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisReport ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__DeleteMonAnalysisReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__DeleteMonAnalysisReport **)soap_malloc(soap, sizeof(_Xdmrtm__DeleteMonAnalysisReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__DeleteMonAnalysisReport *)soap_instantiate__Xdmrtm__DeleteMonAnalysisReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__DeleteMonAnalysisReport ** p = (_Xdmrtm__DeleteMonAnalysisReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport, sizeof(_Xdmrtm__DeleteMonAnalysisReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, _Xdmrtm__DeleteMonAnalysisReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DeleteMonAnalysisReport);
	if (soap_out_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, tag?tag:"Xdmrtm:DeleteMonAnalysisReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__DeleteMonAnalysisReport ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__DeleteMonAnalysisReport(struct soap *soap, _Xdmrtm__DeleteMonAnalysisReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__DeleteMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__IsAnalysisReportResponse(struct soap *soap, _Xdmrtm__IsAnalysisReportResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__IsAnalysisReportResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__IsAnalysisReportResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReportResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__IsAnalysisReportResponse(struct soap *soap, const char *tag, _Xdmrtm__IsAnalysisReportResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__IsAnalysisReportResponse **)soap_malloc(soap, sizeof(_Xdmrtm__IsAnalysisReportResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__IsAnalysisReportResponse *)soap_instantiate__Xdmrtm__IsAnalysisReportResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__IsAnalysisReportResponse ** p = (_Xdmrtm__IsAnalysisReportResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse, sizeof(_Xdmrtm__IsAnalysisReportResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__IsAnalysisReportResponse(struct soap *soap, _Xdmrtm__IsAnalysisReportResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReportResponse);
	if (soap_out_PointerTo_Xdmrtm__IsAnalysisReportResponse(soap, tag?tag:"Xdmrtm:IsAnalysisReportResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReportResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__IsAnalysisReportResponse(struct soap *soap, _Xdmrtm__IsAnalysisReportResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__IsAnalysisReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__IsAnalysisReport(struct soap *soap, _Xdmrtm__IsAnalysisReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__IsAnalysisReport(struct soap *soap, const char *tag, int id, _Xdmrtm__IsAnalysisReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReport ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__IsAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__IsAnalysisReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__IsAnalysisReport **)soap_malloc(soap, sizeof(_Xdmrtm__IsAnalysisReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__IsAnalysisReport *)soap_instantiate__Xdmrtm__IsAnalysisReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__IsAnalysisReport ** p = (_Xdmrtm__IsAnalysisReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport, sizeof(_Xdmrtm__IsAnalysisReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__IsAnalysisReport(struct soap *soap, _Xdmrtm__IsAnalysisReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__IsAnalysisReport);
	if (soap_out_PointerTo_Xdmrtm__IsAnalysisReport(soap, tag?tag:"Xdmrtm:IsAnalysisReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__IsAnalysisReport ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__IsAnalysisReport(struct soap *soap, _Xdmrtm__IsAnalysisReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__IsAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse **)soap_malloc(soap, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *)soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse ** p = (_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse);
	if (soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, tag?tag:"Xdmrtm:DownloadMonAnalysisReportAttachmentResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, _Xdmrtm__DownloadMonAnalysisReportAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachment ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, const char *tag, _Xdmrtm__DownloadMonAnalysisReportAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__DownloadMonAnalysisReportAttachment **)soap_malloc(soap, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__DownloadMonAnalysisReportAttachment *)soap_instantiate__Xdmrtm__DownloadMonAnalysisReportAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__DownloadMonAnalysisReportAttachment ** p = (_Xdmrtm__DownloadMonAnalysisReportAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment, sizeof(_Xdmrtm__DownloadMonAnalysisReportAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment);
	if (soap_out_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag?tag:"Xdmrtm:DownloadMonAnalysisReportAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__DownloadMonAnalysisReportAttachment ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__DownloadMonAnalysisReportAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__DownloadMonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachmentResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse *)soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonAnalysisReportAttachmentResponse ** p = (_Xdmrtm__QueryMonAnalysisReportAttachmentResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachmentResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReportAttachmentResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachmentResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachmentResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonAnalysisReportAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachment ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReportAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonAnalysisReportAttachment **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonAnalysisReportAttachment *)soap_instantiate__Xdmrtm__QueryMonAnalysisReportAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonAnalysisReportAttachment ** p = (_Xdmrtm__QueryMonAnalysisReportAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment, sizeof(_Xdmrtm__QueryMonAnalysisReportAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment);
	if (soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReportAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportAttachment ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonAnalysisReportResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReportResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonAnalysisReportResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonAnalysisReportResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonAnalysisReportResponse *)soap_instantiate__Xdmrtm__QueryMonAnalysisReportResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonAnalysisReportResponse ** p = (_Xdmrtm__QueryMonAnalysisReportResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse, sizeof(_Xdmrtm__QueryMonAnalysisReportResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReportResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReportResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__QueryMonAnalysisReportResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonAnalysisReport(struct soap *soap, _Xdmrtm__QueryMonAnalysisReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonAnalysisReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReport ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__QueryMonAnalysisReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonAnalysisReport **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonAnalysisReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonAnalysisReport *)soap_instantiate__Xdmrtm__QueryMonAnalysisReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonAnalysisReport ** p = (_Xdmrtm__QueryMonAnalysisReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport, sizeof(_Xdmrtm__QueryMonAnalysisReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonAnalysisReport(struct soap *soap, _Xdmrtm__QueryMonAnalysisReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonAnalysisReport);
	if (soap_out_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, tag?tag:"Xdmrtm:QueryMonAnalysisReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonAnalysisReport ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonAnalysisReport(struct soap *soap, _Xdmrtm__QueryMonAnalysisReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReportResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitMonAnalysisReportResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReportResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitMonAnalysisReportResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitMonAnalysisReportResponse **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitMonAnalysisReportResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitMonAnalysisReportResponse *)soap_instantiate__Xdmrtm__SubmitMonAnalysisReportResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitMonAnalysisReportResponse ** p = (_Xdmrtm__SubmitMonAnalysisReportResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse, sizeof(_Xdmrtm__SubmitMonAnalysisReportResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReportResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse);
	if (soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(soap, tag?tag:"Xdmrtm:SubmitMonAnalysisReportResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReportResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReportResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitMonAnalysisReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReport ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, const char *tag, _Xdmrtm__SubmitMonAnalysisReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitMonAnalysisReport **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitMonAnalysisReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitMonAnalysisReport *)soap_instantiate__Xdmrtm__SubmitMonAnalysisReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitMonAnalysisReport ** p = (_Xdmrtm__SubmitMonAnalysisReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport, sizeof(_Xdmrtm__SubmitMonAnalysisReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitMonAnalysisReport);
	if (soap_out_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, tag?tag:"Xdmrtm:SubmitMonAnalysisReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitMonAnalysisReport ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitMonAnalysisReport(struct soap *soap, _Xdmrtm__SubmitMonAnalysisReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitMonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, _Xdmrtm__SubmitPlanTaskLogResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitPlanTaskLogResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLogResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitPlanTaskLogResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitPlanTaskLogResponse **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitPlanTaskLogResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitPlanTaskLogResponse *)soap_instantiate__Xdmrtm__SubmitPlanTaskLogResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitPlanTaskLogResponse ** p = (_Xdmrtm__SubmitPlanTaskLogResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse, sizeof(_Xdmrtm__SubmitPlanTaskLogResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, _Xdmrtm__SubmitPlanTaskLogResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse);
	if (soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(soap, tag?tag:"Xdmrtm:SubmitPlanTaskLogResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLogResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(struct soap *soap, _Xdmrtm__SubmitPlanTaskLogResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitPlanTaskLog(struct soap *soap, _Xdmrtm__SubmitPlanTaskLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitPlanTaskLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLog ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLog(struct soap *soap, const char *tag, _Xdmrtm__SubmitPlanTaskLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitPlanTaskLog **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitPlanTaskLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitPlanTaskLog *)soap_instantiate__Xdmrtm__SubmitPlanTaskLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitPlanTaskLog ** p = (_Xdmrtm__SubmitPlanTaskLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog, sizeof(_Xdmrtm__SubmitPlanTaskLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitPlanTaskLog(struct soap *soap, _Xdmrtm__SubmitPlanTaskLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitPlanTaskLog);
	if (soap_out_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, tag?tag:"Xdmrtm:SubmitPlanTaskLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitPlanTaskLog ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitPlanTaskLog(struct soap *soap, _Xdmrtm__SubmitPlanTaskLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitPlanTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__ResumePlanTaskResponse(struct soap *soap, _Xdmrtm__ResumePlanTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__ResumePlanTaskResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__ResumePlanTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__ResumePlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__ResumePlanTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__ResumePlanTaskResponse **)soap_malloc(soap, sizeof(_Xdmrtm__ResumePlanTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__ResumePlanTaskResponse *)soap_instantiate__Xdmrtm__ResumePlanTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__ResumePlanTaskResponse ** p = (_Xdmrtm__ResumePlanTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse, sizeof(_Xdmrtm__ResumePlanTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__ResumePlanTaskResponse(struct soap *soap, _Xdmrtm__ResumePlanTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTaskResponse);
	if (soap_out_PointerTo_Xdmrtm__ResumePlanTaskResponse(soap, tag?tag:"Xdmrtm:ResumePlanTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__ResumePlanTaskResponse(struct soap *soap, _Xdmrtm__ResumePlanTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__ResumePlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__ResumePlanTask(struct soap *soap, _Xdmrtm__ResumePlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__ResumePlanTask(struct soap *soap, const char *tag, int id, _Xdmrtm__ResumePlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTask ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__ResumePlanTask(struct soap *soap, const char *tag, _Xdmrtm__ResumePlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__ResumePlanTask **)soap_malloc(soap, sizeof(_Xdmrtm__ResumePlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__ResumePlanTask *)soap_instantiate__Xdmrtm__ResumePlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__ResumePlanTask ** p = (_Xdmrtm__ResumePlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask, sizeof(_Xdmrtm__ResumePlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__ResumePlanTask(struct soap *soap, _Xdmrtm__ResumePlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__ResumePlanTask);
	if (soap_out_PointerTo_Xdmrtm__ResumePlanTask(soap, tag?tag:"Xdmrtm:ResumePlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__ResumePlanTask ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__ResumePlanTask(struct soap *soap, _Xdmrtm__ResumePlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__ResumePlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, _Xdmrtm__SuspendPlanTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__SuspendPlanTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__SuspendPlanTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SuspendPlanTaskResponse **)soap_malloc(soap, sizeof(_Xdmrtm__SuspendPlanTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SuspendPlanTaskResponse *)soap_instantiate__Xdmrtm__SuspendPlanTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SuspendPlanTaskResponse ** p = (_Xdmrtm__SuspendPlanTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse, sizeof(_Xdmrtm__SuspendPlanTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, _Xdmrtm__SuspendPlanTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTaskResponse);
	if (soap_out_PointerTo_Xdmrtm__SuspendPlanTaskResponse(soap, tag?tag:"Xdmrtm:SuspendPlanTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SuspendPlanTaskResponse(struct soap *soap, _Xdmrtm__SuspendPlanTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SuspendPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SuspendPlanTask(struct soap *soap, _Xdmrtm__SuspendPlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SuspendPlanTask(struct soap *soap, const char *tag, int id, _Xdmrtm__SuspendPlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTask ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SuspendPlanTask(struct soap *soap, const char *tag, _Xdmrtm__SuspendPlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SuspendPlanTask **)soap_malloc(soap, sizeof(_Xdmrtm__SuspendPlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SuspendPlanTask *)soap_instantiate__Xdmrtm__SuspendPlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SuspendPlanTask ** p = (_Xdmrtm__SuspendPlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask, sizeof(_Xdmrtm__SuspendPlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SuspendPlanTask(struct soap *soap, _Xdmrtm__SuspendPlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SuspendPlanTask);
	if (soap_out_PointerTo_Xdmrtm__SuspendPlanTask(soap, tag?tag:"Xdmrtm:SuspendPlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SuspendPlanTask ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SuspendPlanTask(struct soap *soap, _Xdmrtm__SuspendPlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SuspendPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__StopPlanTaskResponse(struct soap *soap, _Xdmrtm__StopPlanTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__StopPlanTaskResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__StopPlanTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__StopPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__StopPlanTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__StopPlanTaskResponse **)soap_malloc(soap, sizeof(_Xdmrtm__StopPlanTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__StopPlanTaskResponse *)soap_instantiate__Xdmrtm__StopPlanTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__StopPlanTaskResponse ** p = (_Xdmrtm__StopPlanTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse, sizeof(_Xdmrtm__StopPlanTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__StopPlanTaskResponse(struct soap *soap, _Xdmrtm__StopPlanTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTaskResponse);
	if (soap_out_PointerTo_Xdmrtm__StopPlanTaskResponse(soap, tag?tag:"Xdmrtm:StopPlanTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__StopPlanTaskResponse(struct soap *soap, _Xdmrtm__StopPlanTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__StopPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__StopPlanTask(struct soap *soap, _Xdmrtm__StopPlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__StopPlanTask(struct soap *soap, const char *tag, int id, _Xdmrtm__StopPlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTask ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__StopPlanTask(struct soap *soap, const char *tag, _Xdmrtm__StopPlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__StopPlanTask **)soap_malloc(soap, sizeof(_Xdmrtm__StopPlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__StopPlanTask *)soap_instantiate__Xdmrtm__StopPlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__StopPlanTask ** p = (_Xdmrtm__StopPlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask, sizeof(_Xdmrtm__StopPlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__StopPlanTask(struct soap *soap, _Xdmrtm__StopPlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StopPlanTask);
	if (soap_out_PointerTo_Xdmrtm__StopPlanTask(soap, tag?tag:"Xdmrtm:StopPlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__StopPlanTask ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__StopPlanTask(struct soap *soap, _Xdmrtm__StopPlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__StopPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__StartPlanTaskResponse(struct soap *soap, _Xdmrtm__StartPlanTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__StartPlanTaskResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__StartPlanTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__StartPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__StartPlanTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__StartPlanTaskResponse **)soap_malloc(soap, sizeof(_Xdmrtm__StartPlanTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__StartPlanTaskResponse *)soap_instantiate__Xdmrtm__StartPlanTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__StartPlanTaskResponse ** p = (_Xdmrtm__StartPlanTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse, sizeof(_Xdmrtm__StartPlanTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__StartPlanTaskResponse(struct soap *soap, _Xdmrtm__StartPlanTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTaskResponse);
	if (soap_out_PointerTo_Xdmrtm__StartPlanTaskResponse(soap, tag?tag:"Xdmrtm:StartPlanTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__StartPlanTaskResponse(struct soap *soap, _Xdmrtm__StartPlanTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__StartPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__StartPlanTask(struct soap *soap, _Xdmrtm__StartPlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__StartPlanTask(struct soap *soap, const char *tag, int id, _Xdmrtm__StartPlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTask ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__StartPlanTask(struct soap *soap, const char *tag, _Xdmrtm__StartPlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__StartPlanTask **)soap_malloc(soap, sizeof(_Xdmrtm__StartPlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__StartPlanTask *)soap_instantiate__Xdmrtm__StartPlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__StartPlanTask ** p = (_Xdmrtm__StartPlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask, sizeof(_Xdmrtm__StartPlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__StartPlanTask(struct soap *soap, _Xdmrtm__StartPlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__StartPlanTask);
	if (soap_out_PointerTo_Xdmrtm__StartPlanTask(soap, tag?tag:"Xdmrtm:StartPlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__StartPlanTask ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__StartPlanTask(struct soap *soap, _Xdmrtm__StartPlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__StartPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryCurExecPlanTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryCurExecPlanTaskResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryCurExecPlanTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryCurExecPlanTaskResponse *)soap_instantiate__Xdmrtm__QueryCurExecPlanTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryCurExecPlanTaskResponse ** p = (_Xdmrtm__QueryCurExecPlanTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse, sizeof(_Xdmrtm__QueryCurExecPlanTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTask(struct soap *soap, _Xdmrtm__QueryCurExecPlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryCurExecPlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTask ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTask(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryCurExecPlanTask **)soap_malloc(soap, sizeof(_Xdmrtm__QueryCurExecPlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryCurExecPlanTask *)soap_instantiate__Xdmrtm__QueryCurExecPlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryCurExecPlanTask ** p = (_Xdmrtm__QueryCurExecPlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask, sizeof(_Xdmrtm__QueryCurExecPlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryCurExecPlanTask(struct soap *soap, _Xdmrtm__QueryCurExecPlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTask);
	if (soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTask ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryCurExecPlanTask(struct soap *soap, _Xdmrtm__QueryCurExecPlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryPlanTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryPlanTaskResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryPlanTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryPlanTaskResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryPlanTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryPlanTaskResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryPlanTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryPlanTaskResponse *)soap_instantiate__Xdmrtm__QueryPlanTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryPlanTaskResponse ** p = (_Xdmrtm__QueryPlanTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse, sizeof(_Xdmrtm__QueryPlanTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryPlanTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTaskResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryPlanTaskResponse(soap, tag?tag:"Xdmrtm:QueryPlanTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryPlanTaskResponse(struct soap *soap, _Xdmrtm__QueryPlanTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryPlanTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryPlanTask(struct soap *soap, _Xdmrtm__QueryPlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryPlanTask(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryPlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTask ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryPlanTask(struct soap *soap, const char *tag, _Xdmrtm__QueryPlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryPlanTask **)soap_malloc(soap, sizeof(_Xdmrtm__QueryPlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryPlanTask *)soap_instantiate__Xdmrtm__QueryPlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryPlanTask ** p = (_Xdmrtm__QueryPlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask, sizeof(_Xdmrtm__QueryPlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryPlanTask(struct soap *soap, _Xdmrtm__QueryPlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryPlanTask);
	if (soap_out_PointerTo_Xdmrtm__QueryPlanTask(soap, tag?tag:"Xdmrtm:QueryPlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryPlanTask ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryPlanTask(struct soap *soap, _Xdmrtm__QueryPlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryPlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryCurExecPlanTaskIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskIDResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTaskIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryCurExecPlanTaskIDResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryCurExecPlanTaskIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryCurExecPlanTaskIDResponse *)soap_instantiate__Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryCurExecPlanTaskIDResponse ** p = (_Xdmrtm__QueryCurExecPlanTaskIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse, sizeof(_Xdmrtm__QueryCurExecPlanTaskIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTaskIDResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskIDResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryCurExecPlanTaskID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskID ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, const char *tag, _Xdmrtm__QueryCurExecPlanTaskID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryCurExecPlanTaskID **)soap_malloc(soap, sizeof(_Xdmrtm__QueryCurExecPlanTaskID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryCurExecPlanTaskID *)soap_instantiate__Xdmrtm__QueryCurExecPlanTaskID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryCurExecPlanTaskID ** p = (_Xdmrtm__QueryCurExecPlanTaskID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID, sizeof(_Xdmrtm__QueryCurExecPlanTaskID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryCurExecPlanTaskID);
	if (soap_out_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, tag?tag:"Xdmrtm:QueryCurExecPlanTaskID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryCurExecPlanTaskID ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(struct soap *soap, _Xdmrtm__QueryCurExecPlanTaskID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryCurExecPlanTaskID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, _Xdmrtm__QueryFreqLayoutResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryFreqLayoutResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayoutResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryFreqLayoutResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryFreqLayoutResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryFreqLayoutResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryFreqLayoutResponse *)soap_instantiate__Xdmrtm__QueryFreqLayoutResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryFreqLayoutResponse ** p = (_Xdmrtm__QueryFreqLayoutResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse, sizeof(_Xdmrtm__QueryFreqLayoutResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, _Xdmrtm__QueryFreqLayoutResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayoutResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryFreqLayoutResponse(soap, tag?tag:"Xdmrtm:QueryFreqLayoutResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayoutResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryFreqLayoutResponse(struct soap *soap, _Xdmrtm__QueryFreqLayoutResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryFreqLayoutResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryFreqLayout(struct soap *soap, _Xdmrtm__QueryFreqLayout *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryFreqLayout(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryFreqLayout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayout ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryFreqLayout(struct soap *soap, const char *tag, _Xdmrtm__QueryFreqLayout **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryFreqLayout **)soap_malloc(soap, sizeof(_Xdmrtm__QueryFreqLayout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryFreqLayout *)soap_instantiate__Xdmrtm__QueryFreqLayout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryFreqLayout ** p = (_Xdmrtm__QueryFreqLayout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout, sizeof(_Xdmrtm__QueryFreqLayout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryFreqLayout(struct soap *soap, _Xdmrtm__QueryFreqLayout *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryFreqLayout);
	if (soap_out_PointerTo_Xdmrtm__QueryFreqLayout(soap, tag?tag:"Xdmrtm:QueryFreqLayout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryFreqLayout ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryFreqLayout(struct soap *soap, _Xdmrtm__QueryFreqLayout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryFreqLayout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUserResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceUseingInfoByUserResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUserResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByUserResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceUseingInfoByUserResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUserResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceUseingInfoByUserResponse *)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceUseingInfoByUserResponse ** p = (_Xdmrtm__QueryDeviceUseingInfoByUserResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUserResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUserResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByUserResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUserResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUserResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUser *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceUseingInfoByUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUser ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceUseingInfoByUser **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceUseingInfoByUser *)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceUseingInfoByUser ** p = (_Xdmrtm__QueryDeviceUseingInfoByUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser, sizeof(_Xdmrtm__QueryDeviceUseingInfoByUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByUser ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse ** p = (_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByDeviceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDevice *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceUseingInfoByDevice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDevice ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoByDevice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceUseingInfoByDevice **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDevice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceUseingInfoByDevice *)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoByDevice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceUseingInfoByDevice ** p = (_Xdmrtm__QueryDeviceUseingInfoByDevice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice, sizeof(_Xdmrtm__QueryDeviceUseingInfoByDevice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDevice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoByDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoByDevice ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoByDevice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoByDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceUseingInfoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceUseingInfoResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceUseingInfoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceUseingInfoResponse *)soap_instantiate__Xdmrtm__QueryDeviceUseingInfoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceUseingInfoResponse ** p = (_Xdmrtm__QueryDeviceUseingInfoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse, sizeof(_Xdmrtm__QueryDeviceUseingInfoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceUseingInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfo ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceUseingInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceUseingInfo **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceUseingInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceUseingInfo *)soap_instantiate__Xdmrtm__QueryDeviceUseingInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceUseingInfo ** p = (_Xdmrtm__QueryDeviceUseingInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo, sizeof(_Xdmrtm__QueryDeviceUseingInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceUseingInfo);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, tag?tag:"Xdmrtm:QueryDeviceUseingInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceUseingInfo ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceUseingInfo(struct soap *soap, _Xdmrtm__QueryDeviceUseingInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceUseingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLogResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitDeviceUsedLogResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLogResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, const char *tag, _Xdmrtm__SubmitDeviceUsedLogResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitDeviceUsedLogResponse **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitDeviceUsedLogResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitDeviceUsedLogResponse *)soap_instantiate__Xdmrtm__SubmitDeviceUsedLogResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitDeviceUsedLogResponse ** p = (_Xdmrtm__SubmitDeviceUsedLogResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse, sizeof(_Xdmrtm__SubmitDeviceUsedLogResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLogResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse);
	if (soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(soap, tag?tag:"Xdmrtm:SubmitDeviceUsedLogResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLogResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLogResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const char *tag, int id, _Xdmrtm__SubmitDeviceUsedLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLog ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, const char *tag, _Xdmrtm__SubmitDeviceUsedLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__SubmitDeviceUsedLog **)soap_malloc(soap, sizeof(_Xdmrtm__SubmitDeviceUsedLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__SubmitDeviceUsedLog *)soap_instantiate__Xdmrtm__SubmitDeviceUsedLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__SubmitDeviceUsedLog ** p = (_Xdmrtm__SubmitDeviceUsedLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog, sizeof(_Xdmrtm__SubmitDeviceUsedLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__SubmitDeviceUsedLog);
	if (soap_out_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, tag?tag:"Xdmrtm:SubmitDeviceUsedLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__SubmitDeviceUsedLog ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__SubmitDeviceUsedLog(struct soap *soap, _Xdmrtm__SubmitDeviceUsedLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__SubmitDeviceUsedLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, _Xdmrtm__AllocLoadbalancingServerResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__AllocLoadbalancingServerResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServerResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, const char *tag, _Xdmrtm__AllocLoadbalancingServerResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__AllocLoadbalancingServerResponse **)soap_malloc(soap, sizeof(_Xdmrtm__AllocLoadbalancingServerResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__AllocLoadbalancingServerResponse *)soap_instantiate__Xdmrtm__AllocLoadbalancingServerResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__AllocLoadbalancingServerResponse ** p = (_Xdmrtm__AllocLoadbalancingServerResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse, sizeof(_Xdmrtm__AllocLoadbalancingServerResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, _Xdmrtm__AllocLoadbalancingServerResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse);
	if (soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(soap, tag?tag:"Xdmrtm:AllocLoadbalancingServerResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServerResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(struct soap *soap, _Xdmrtm__AllocLoadbalancingServerResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServerResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__AllocLoadbalancingServer(struct soap *soap, _Xdmrtm__AllocLoadbalancingServer *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const char *tag, int id, _Xdmrtm__AllocLoadbalancingServer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServer ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServer(struct soap *soap, const char *tag, _Xdmrtm__AllocLoadbalancingServer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__AllocLoadbalancingServer **)soap_malloc(soap, sizeof(_Xdmrtm__AllocLoadbalancingServer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__AllocLoadbalancingServer *)soap_instantiate__Xdmrtm__AllocLoadbalancingServer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__AllocLoadbalancingServer ** p = (_Xdmrtm__AllocLoadbalancingServer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer, sizeof(_Xdmrtm__AllocLoadbalancingServer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__AllocLoadbalancingServer(struct soap *soap, _Xdmrtm__AllocLoadbalancingServer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__AllocLoadbalancingServer);
	if (soap_out_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, tag?tag:"Xdmrtm:AllocLoadbalancingServer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__AllocLoadbalancingServer ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__AllocLoadbalancingServer(struct soap *soap, _Xdmrtm__AllocLoadbalancingServer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__AllocLoadbalancingServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, _Xdmrtm__QueryUserLicenseStationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryUserLicenseStationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStationResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryUserLicenseStationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryUserLicenseStationResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryUserLicenseStationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryUserLicenseStationResponse *)soap_instantiate__Xdmrtm__QueryUserLicenseStationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryUserLicenseStationResponse ** p = (_Xdmrtm__QueryUserLicenseStationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse, sizeof(_Xdmrtm__QueryUserLicenseStationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, _Xdmrtm__QueryUserLicenseStationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStationResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(soap, tag?tag:"Xdmrtm:QueryUserLicenseStationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStationResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(struct soap *soap, _Xdmrtm__QueryUserLicenseStationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryUserLicenseStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryUserLicenseStation(struct soap *soap, _Xdmrtm__QueryUserLicenseStation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryUserLicenseStation(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryUserLicenseStation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStation ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryUserLicenseStation(struct soap *soap, const char *tag, _Xdmrtm__QueryUserLicenseStation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryUserLicenseStation **)soap_malloc(soap, sizeof(_Xdmrtm__QueryUserLicenseStation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryUserLicenseStation *)soap_instantiate__Xdmrtm__QueryUserLicenseStation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryUserLicenseStation ** p = (_Xdmrtm__QueryUserLicenseStation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation, sizeof(_Xdmrtm__QueryUserLicenseStation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryUserLicenseStation(struct soap *soap, _Xdmrtm__QueryUserLicenseStation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryUserLicenseStation);
	if (soap_out_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, tag?tag:"Xdmrtm:QueryUserLicenseStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryUserLicenseStation ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryUserLicenseStation(struct soap *soap, _Xdmrtm__QueryUserLicenseStation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryUserLicenseStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncAntResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceFuncAntResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAntResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFuncAntResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceFuncAntResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceFuncAntResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceFuncAntResponse *)soap_instantiate__Xdmrtm__QueryDeviceFuncAntResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceFuncAntResponse ** p = (_Xdmrtm__QueryDeviceFuncAntResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse, sizeof(_Xdmrtm__QueryDeviceFuncAntResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncAntResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(soap, tag?tag:"Xdmrtm:QueryDeviceFuncAntResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAntResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncAntResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAntResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, _Xdmrtm__QueryDeviceFuncAnt *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceFuncAnt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAnt ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFuncAnt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceFuncAnt **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceFuncAnt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceFuncAnt *)soap_instantiate__Xdmrtm__QueryDeviceFuncAnt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceFuncAnt ** p = (_Xdmrtm__QueryDeviceFuncAnt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt, sizeof(_Xdmrtm__QueryDeviceFuncAnt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, _Xdmrtm__QueryDeviceFuncAnt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncAnt);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, tag?tag:"Xdmrtm:QueryDeviceFuncAnt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncAnt ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceFuncAnt(struct soap *soap, _Xdmrtm__QueryDeviceFuncAnt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceFuncAnt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceFuncResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFuncResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceFuncResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceFuncResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceFuncResponse *)soap_instantiate__Xdmrtm__QueryDeviceFuncResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceFuncResponse ** p = (_Xdmrtm__QueryDeviceFuncResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse, sizeof(_Xdmrtm__QueryDeviceFuncResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFuncResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceFuncResponse(soap, tag?tag:"Xdmrtm:QueryDeviceFuncResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFuncResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryDeviceFuncResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceFuncResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceFunc(struct soap *soap, _Xdmrtm__QueryDeviceFunc *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceFunc(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceFunc *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFunc ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceFunc(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceFunc **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceFunc **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceFunc *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceFunc *)soap_instantiate__Xdmrtm__QueryDeviceFunc(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceFunc ** p = (_Xdmrtm__QueryDeviceFunc **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc, sizeof(_Xdmrtm__QueryDeviceFunc), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceFunc(struct soap *soap, _Xdmrtm__QueryDeviceFunc *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceFunc);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceFunc(soap, tag?tag:"Xdmrtm:QueryDeviceFunc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceFunc ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceFunc(struct soap *soap, _Xdmrtm__QueryDeviceFunc **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryAntResponse(struct soap *soap, _Xdmrtm__QueryAntResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryAntResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryAntResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryAntResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryAntResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryAntResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryAntResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryAntResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryAntResponse *)soap_instantiate__Xdmrtm__QueryAntResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryAntResponse ** p = (_Xdmrtm__QueryAntResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse, sizeof(_Xdmrtm__QueryAntResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryAntResponse(struct soap *soap, _Xdmrtm__QueryAntResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAntResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryAntResponse(soap, tag?tag:"Xdmrtm:QueryAntResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryAntResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryAntResponse(struct soap *soap, _Xdmrtm__QueryAntResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryAntResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryAnt(struct soap *soap, _Xdmrtm__QueryAnt *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryAnt(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryAnt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryAnt ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryAnt(struct soap *soap, const char *tag, _Xdmrtm__QueryAnt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryAnt **)soap_malloc(soap, sizeof(_Xdmrtm__QueryAnt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryAnt *)soap_instantiate__Xdmrtm__QueryAnt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryAnt ** p = (_Xdmrtm__QueryAnt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt, sizeof(_Xdmrtm__QueryAnt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryAnt(struct soap *soap, _Xdmrtm__QueryAnt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryAnt);
	if (soap_out_PointerTo_Xdmrtm__QueryAnt(soap, tag?tag:"Xdmrtm:QueryAnt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryAnt ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryAnt(struct soap *soap, _Xdmrtm__QueryAnt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryAnt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRNCResponse(struct soap *soap, _Xdmrtm__QueryRNCResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRNCResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRNCResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRNCResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRNCResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRNCResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRNCResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRNCResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRNCResponse *)soap_instantiate__Xdmrtm__QueryRNCResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRNCResponse ** p = (_Xdmrtm__QueryRNCResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse, sizeof(_Xdmrtm__QueryRNCResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRNCResponse(struct soap *soap, _Xdmrtm__QueryRNCResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNCResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRNCResponse(soap, tag?tag:"Xdmrtm:QueryRNCResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRNCResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRNCResponse(struct soap *soap, _Xdmrtm__QueryRNCResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRNCResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRNC(struct soap *soap, _Xdmrtm__QueryRNC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRNC(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRNC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRNC ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRNC(struct soap *soap, const char *tag, _Xdmrtm__QueryRNC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRNC **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRNC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRNC *)soap_instantiate__Xdmrtm__QueryRNC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRNC ** p = (_Xdmrtm__QueryRNC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC, sizeof(_Xdmrtm__QueryRNC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRNC(struct soap *soap, _Xdmrtm__QueryRNC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRNC);
	if (soap_out_PointerTo_Xdmrtm__QueryRNC(soap, tag?tag:"Xdmrtm:QueryRNC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRNC ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRNC(struct soap *soap, _Xdmrtm__QueryRNC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRNC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDeviceResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDeviceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDeviceResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryDeviceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDeviceResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDeviceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDeviceResponse *)soap_instantiate__Xdmrtm__QueryDeviceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDeviceResponse ** p = (_Xdmrtm__QueryDeviceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse, sizeof(_Xdmrtm__QueryDeviceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDeviceResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryDeviceResponse(soap, tag?tag:"Xdmrtm:QueryDeviceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDeviceResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDeviceResponse(struct soap *soap, _Xdmrtm__QueryDeviceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryDevice(struct soap *soap, _Xdmrtm__QueryDevice *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryDevice(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryDevice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryDevice ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryDevice(struct soap *soap, const char *tag, _Xdmrtm__QueryDevice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryDevice **)soap_malloc(soap, sizeof(_Xdmrtm__QueryDevice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryDevice *)soap_instantiate__Xdmrtm__QueryDevice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryDevice ** p = (_Xdmrtm__QueryDevice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice, sizeof(_Xdmrtm__QueryDevice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryDevice(struct soap *soap, _Xdmrtm__QueryDevice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryDevice);
	if (soap_out_PointerTo_Xdmrtm__QueryDevice(soap, tag?tag:"Xdmrtm:QueryDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryDevice ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryDevice(struct soap *soap, _Xdmrtm__QueryDevice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryStationResponse(struct soap *soap, _Xdmrtm__QueryStationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryStationResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryStationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryStationResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryStationResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryStationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryStationResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryStationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryStationResponse *)soap_instantiate__Xdmrtm__QueryStationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryStationResponse ** p = (_Xdmrtm__QueryStationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse, sizeof(_Xdmrtm__QueryStationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryStationResponse(struct soap *soap, _Xdmrtm__QueryStationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStationResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryStationResponse(soap, tag?tag:"Xdmrtm:QueryStationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryStationResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryStationResponse(struct soap *soap, _Xdmrtm__QueryStationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryStationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryStation(struct soap *soap, _Xdmrtm__QueryStation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryStation(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryStation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryStation ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryStation(struct soap *soap, const char *tag, _Xdmrtm__QueryStation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryStation **)soap_malloc(soap, sizeof(_Xdmrtm__QueryStation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryStation *)soap_instantiate__Xdmrtm__QueryStation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryStation ** p = (_Xdmrtm__QueryStation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation, sizeof(_Xdmrtm__QueryStation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryStation(struct soap *soap, _Xdmrtm__QueryStation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryStation);
	if (soap_out_PointerTo_Xdmrtm__QueryStation(soap, tag?tag:"Xdmrtm:QueryStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryStation ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryStation(struct soap *soap, _Xdmrtm__QueryStation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, _Xdmrtm__QueryMonControlCenterResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonControlCenterResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenterResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonControlCenterResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonControlCenterResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonControlCenterResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonControlCenterResponse *)soap_instantiate__Xdmrtm__QueryMonControlCenterResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonControlCenterResponse ** p = (_Xdmrtm__QueryMonControlCenterResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse, sizeof(_Xdmrtm__QueryMonControlCenterResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, _Xdmrtm__QueryMonControlCenterResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenterResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryMonControlCenterResponse(soap, tag?tag:"Xdmrtm:QueryMonControlCenterResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenterResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonControlCenterResponse(struct soap *soap, _Xdmrtm__QueryMonControlCenterResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonControlCenterResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonControlCenter(struct soap *soap, _Xdmrtm__QueryMonControlCenter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonControlCenter(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonControlCenter *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenter ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonControlCenter(struct soap *soap, const char *tag, _Xdmrtm__QueryMonControlCenter **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonControlCenter **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonControlCenter *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonControlCenter *)soap_instantiate__Xdmrtm__QueryMonControlCenter(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonControlCenter ** p = (_Xdmrtm__QueryMonControlCenter **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter, sizeof(_Xdmrtm__QueryMonControlCenter), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonControlCenter(struct soap *soap, _Xdmrtm__QueryMonControlCenter *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonControlCenter);
	if (soap_out_PointerTo_Xdmrtm__QueryMonControlCenter(soap, tag?tag:"Xdmrtm:QueryMonControlCenter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonControlCenter ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonControlCenter(struct soap *soap, _Xdmrtm__QueryMonControlCenter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonControlCenter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, _Xdmrtm__QueryMonOrganizationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonOrganizationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganizationResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryMonOrganizationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonOrganizationResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonOrganizationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonOrganizationResponse *)soap_instantiate__Xdmrtm__QueryMonOrganizationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonOrganizationResponse ** p = (_Xdmrtm__QueryMonOrganizationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse, sizeof(_Xdmrtm__QueryMonOrganizationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, _Xdmrtm__QueryMonOrganizationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganizationResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryMonOrganizationResponse(soap, tag?tag:"Xdmrtm:QueryMonOrganizationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganizationResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonOrganizationResponse(struct soap *soap, _Xdmrtm__QueryMonOrganizationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonOrganizationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryMonOrganization(struct soap *soap, _Xdmrtm__QueryMonOrganization *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryMonOrganization(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryMonOrganization *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganization ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryMonOrganization(struct soap *soap, const char *tag, _Xdmrtm__QueryMonOrganization **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryMonOrganization **)soap_malloc(soap, sizeof(_Xdmrtm__QueryMonOrganization *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryMonOrganization *)soap_instantiate__Xdmrtm__QueryMonOrganization(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryMonOrganization ** p = (_Xdmrtm__QueryMonOrganization **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization, sizeof(_Xdmrtm__QueryMonOrganization), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryMonOrganization(struct soap *soap, _Xdmrtm__QueryMonOrganization *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryMonOrganization);
	if (soap_out_PointerTo_Xdmrtm__QueryMonOrganization(soap, tag?tag:"Xdmrtm:QueryMonOrganization", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryMonOrganization ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryMonOrganization(struct soap *soap, _Xdmrtm__QueryMonOrganization **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryMonOrganization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParamResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceModelFuncParamResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParamResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModelFuncParamResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceModelFuncParamResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParamResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceModelFuncParamResponse *)soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceModelFuncParamResponse ** p = (_Xdmrtm__QueryRefDeviceModelFuncParamResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParamResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParamResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, tag?tag:"Xdmrtm:QueryRefDeviceModelFuncParamResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParamResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParamResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParamResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParam *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceModelFuncParam *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParam ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModelFuncParam **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceModelFuncParam **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParam *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceModelFuncParam *)soap_instantiate__Xdmrtm__QueryRefDeviceModelFuncParam(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceModelFuncParam ** p = (_Xdmrtm__QueryRefDeviceModelFuncParam **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam, sizeof(_Xdmrtm__QueryRefDeviceModelFuncParam), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParam *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag?tag:"Xdmrtm:QueryRefDeviceModelFuncParam", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelFuncParam ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(struct soap *soap, _Xdmrtm__QueryRefDeviceModelFuncParam **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceFuncResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceFuncResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFuncResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceFuncResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceFuncResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceFuncResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceFuncResponse *)soap_instantiate__Xdmrtm__QueryRefDeviceFuncResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceFuncResponse ** p = (_Xdmrtm__QueryRefDeviceFuncResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse, sizeof(_Xdmrtm__QueryRefDeviceFuncResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceFuncResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(soap, tag?tag:"Xdmrtm:QueryRefDeviceFuncResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFuncResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceFuncResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceFuncResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceFunc(struct soap *soap, _Xdmrtm__QueryRefDeviceFunc *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceFunc *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFunc ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceFunc(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceFunc **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceFunc **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceFunc *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceFunc *)soap_instantiate__Xdmrtm__QueryRefDeviceFunc(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceFunc ** p = (_Xdmrtm__QueryRefDeviceFunc **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc, sizeof(_Xdmrtm__QueryRefDeviceFunc), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceFunc(struct soap *soap, _Xdmrtm__QueryRefDeviceFunc *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceFunc);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, tag?tag:"Xdmrtm:QueryRefDeviceFunc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceFunc ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceFunc(struct soap *soap, _Xdmrtm__QueryRefDeviceFunc **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceModelResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModelResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceModelResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceModelResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceModelResponse *)soap_instantiate__Xdmrtm__QueryRefDeviceModelResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceModelResponse ** p = (_Xdmrtm__QueryRefDeviceModelResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse, sizeof(_Xdmrtm__QueryRefDeviceModelResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModelResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(soap, tag?tag:"Xdmrtm:QueryRefDeviceModelResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModelResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceModelResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceModelResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceModel(struct soap *soap, _Xdmrtm__QueryRefDeviceModel *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceModel(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceModel *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModel ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceModel(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceModel **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceModel **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceModel *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceModel *)soap_instantiate__Xdmrtm__QueryRefDeviceModel(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceModel ** p = (_Xdmrtm__QueryRefDeviceModel **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel, sizeof(_Xdmrtm__QueryRefDeviceModel), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceModel(struct soap *soap, _Xdmrtm__QueryRefDeviceModel *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceModel);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, tag?tag:"Xdmrtm:QueryRefDeviceModel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceModel ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceModel(struct soap *soap, _Xdmrtm__QueryRefDeviceModel **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolTypeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceProtocolTypeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolTypeResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceProtocolTypeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceProtocolTypeResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceProtocolTypeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceProtocolTypeResponse *)soap_instantiate__Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceProtocolTypeResponse ** p = (_Xdmrtm__QueryRefDeviceProtocolTypeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse, sizeof(_Xdmrtm__QueryRefDeviceProtocolTypeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolTypeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, tag?tag:"Xdmrtm:QueryRefDeviceProtocolTypeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolTypeResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolTypeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceProtocolType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolType ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceProtocolType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceProtocolType **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceProtocolType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceProtocolType *)soap_instantiate__Xdmrtm__QueryRefDeviceProtocolType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceProtocolType ** p = (_Xdmrtm__QueryRefDeviceProtocolType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType, sizeof(_Xdmrtm__QueryRefDeviceProtocolType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceProtocolType);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, tag?tag:"Xdmrtm:QueryRefDeviceProtocolType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceProtocolType ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(struct soap *soap, _Xdmrtm__QueryRefDeviceProtocolType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceProtocolType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceTypeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceTypeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceTypeResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceTypeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceTypeResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceTypeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceTypeResponse *)soap_instantiate__Xdmrtm__QueryRefDeviceTypeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceTypeResponse ** p = (_Xdmrtm__QueryRefDeviceTypeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse, sizeof(_Xdmrtm__QueryRefDeviceTypeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceTypeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(soap, tag?tag:"Xdmrtm:QueryRefDeviceTypeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceTypeResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(struct soap *soap, _Xdmrtm__QueryRefDeviceTypeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefDeviceType(struct soap *soap, _Xdmrtm__QueryRefDeviceType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefDeviceType(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefDeviceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceType ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefDeviceType(struct soap *soap, const char *tag, _Xdmrtm__QueryRefDeviceType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefDeviceType **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefDeviceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefDeviceType *)soap_instantiate__Xdmrtm__QueryRefDeviceType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefDeviceType ** p = (_Xdmrtm__QueryRefDeviceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType, sizeof(_Xdmrtm__QueryRefDeviceType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefDeviceType(struct soap *soap, _Xdmrtm__QueryRefDeviceType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefDeviceType);
	if (soap_out_PointerTo_Xdmrtm__QueryRefDeviceType(soap, tag?tag:"Xdmrtm:QueryRefDeviceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefDeviceType ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefDeviceType(struct soap *soap, _Xdmrtm__QueryRefDeviceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, _Xdmrtm__QueryRefStationTypeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefStationTypeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationTypeResponse ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, const char *tag, _Xdmrtm__QueryRefStationTypeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefStationTypeResponse **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefStationTypeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefStationTypeResponse *)soap_instantiate__Xdmrtm__QueryRefStationTypeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefStationTypeResponse ** p = (_Xdmrtm__QueryRefStationTypeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse, sizeof(_Xdmrtm__QueryRefStationTypeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, _Xdmrtm__QueryRefStationTypeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationTypeResponse);
	if (soap_out_PointerTo_Xdmrtm__QueryRefStationTypeResponse(soap, tag?tag:"Xdmrtm:QueryRefStationTypeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationTypeResponse ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefStationTypeResponse(struct soap *soap, _Xdmrtm__QueryRefStationTypeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefStationTypeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Xdmrtm__QueryRefStationType(struct soap *soap, _Xdmrtm__QueryRefStationType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Xdmrtm__QueryRefStationType(struct soap *soap, const char *tag, int id, _Xdmrtm__QueryRefStationType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationType ** SOAP_FMAC4 soap_in_PointerTo_Xdmrtm__QueryRefStationType(struct soap *soap, const char *tag, _Xdmrtm__QueryRefStationType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Xdmrtm__QueryRefStationType **)soap_malloc(soap, sizeof(_Xdmrtm__QueryRefStationType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Xdmrtm__QueryRefStationType *)soap_instantiate__Xdmrtm__QueryRefStationType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Xdmrtm__QueryRefStationType ** p = (_Xdmrtm__QueryRefStationType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType, sizeof(_Xdmrtm__QueryRefStationType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Xdmrtm__QueryRefStationType(struct soap *soap, _Xdmrtm__QueryRefStationType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerTo_Xdmrtm__QueryRefStationType);
	if (soap_out_PointerTo_Xdmrtm__QueryRefStationType(soap, tag?tag:"Xdmrtm:QueryRefStationType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Xdmrtm__QueryRefStationType ** SOAP_FMAC4 soap_get_PointerTo_Xdmrtm__QueryRefStationType(struct soap *soap, _Xdmrtm__QueryRefStationType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Xdmrtm__QueryRefStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, Xdmrtm__MonAnalysisReportAttachmentArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, const char *tag, int id, Xdmrtm__MonAnalysisReportAttachmentArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachmentArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportAttachmentArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonAnalysisReportAttachmentArray **)soap_malloc(soap, sizeof(Xdmrtm__MonAnalysisReportAttachmentArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonAnalysisReportAttachmentArray *)soap_instantiate_Xdmrtm__MonAnalysisReportAttachmentArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonAnalysisReportAttachmentArray ** p = (Xdmrtm__MonAnalysisReportAttachmentArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray, sizeof(Xdmrtm__MonAnalysisReportAttachmentArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, Xdmrtm__MonAnalysisReportAttachmentArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachmentArray);
	if (soap_out_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, tag?tag:"Xdmrtm:MonAnalysisReportAttachmentArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachmentArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonAnalysisReportAttachmentArray(struct soap *soap, Xdmrtm__MonAnalysisReportAttachmentArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonAnalysisReportAttachmentArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonAnalysisReportArray(struct soap *soap, Xdmrtm__MonAnalysisReportArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonAnalysisReportArray(struct soap *soap, const char *tag, int id, Xdmrtm__MonAnalysisReportArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonAnalysisReportArray(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonAnalysisReportArray **)soap_malloc(soap, sizeof(Xdmrtm__MonAnalysisReportArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonAnalysisReportArray *)soap_instantiate_Xdmrtm__MonAnalysisReportArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonAnalysisReportArray ** p = (Xdmrtm__MonAnalysisReportArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray, sizeof(Xdmrtm__MonAnalysisReportArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonAnalysisReportArray(struct soap *soap, Xdmrtm__MonAnalysisReportArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportArray);
	if (soap_out_PointerToXdmrtm__MonAnalysisReportArray(soap, tag?tag:"Xdmrtm:MonAnalysisReportArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonAnalysisReportArray(struct soap *soap, Xdmrtm__MonAnalysisReportArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonAnalysisReportArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__PlanTaskArray(struct soap *soap, Xdmrtm__PlanTaskArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__PlanTaskArray(struct soap *soap, const char *tag, int id, Xdmrtm__PlanTaskArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__PlanTaskArray(struct soap *soap, const char *tag, Xdmrtm__PlanTaskArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__PlanTaskArray **)soap_malloc(soap, sizeof(Xdmrtm__PlanTaskArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__PlanTaskArray *)soap_instantiate_Xdmrtm__PlanTaskArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__PlanTaskArray ** p = (Xdmrtm__PlanTaskArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray, sizeof(Xdmrtm__PlanTaskArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__PlanTaskArray(struct soap *soap, Xdmrtm__PlanTaskArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskArray);
	if (soap_out_PointerToXdmrtm__PlanTaskArray(soap, tag?tag:"Xdmrtm:PlanTaskArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__PlanTaskArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__PlanTaskArray(struct soap *soap, Xdmrtm__PlanTaskArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__PlanTaskArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__PlanTaskIDArray(struct soap *soap, Xdmrtm__PlanTaskIDArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__PlanTaskIDArray(struct soap *soap, const char *tag, int id, Xdmrtm__PlanTaskIDArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskIDArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__PlanTaskIDArray(struct soap *soap, const char *tag, Xdmrtm__PlanTaskIDArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__PlanTaskIDArray **)soap_malloc(soap, sizeof(Xdmrtm__PlanTaskIDArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__PlanTaskIDArray *)soap_instantiate_Xdmrtm__PlanTaskIDArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__PlanTaskIDArray ** p = (Xdmrtm__PlanTaskIDArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray, sizeof(Xdmrtm__PlanTaskIDArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__PlanTaskIDArray(struct soap *soap, Xdmrtm__PlanTaskIDArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskIDArray);
	if (soap_out_PointerToXdmrtm__PlanTaskIDArray(soap, tag?tag:"Xdmrtm:PlanTaskIDArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__PlanTaskIDArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__PlanTaskIDArray(struct soap *soap, Xdmrtm__PlanTaskIDArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__PlanTaskIDArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__FreqLayoutArray(struct soap *soap, Xdmrtm__FreqLayoutArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__FreqLayoutArray(struct soap *soap, const char *tag, int id, Xdmrtm__FreqLayoutArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayoutArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__FreqLayoutArray(struct soap *soap, const char *tag, Xdmrtm__FreqLayoutArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__FreqLayoutArray **)soap_malloc(soap, sizeof(Xdmrtm__FreqLayoutArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__FreqLayoutArray *)soap_instantiate_Xdmrtm__FreqLayoutArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__FreqLayoutArray ** p = (Xdmrtm__FreqLayoutArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray, sizeof(Xdmrtm__FreqLayoutArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__FreqLayoutArray(struct soap *soap, Xdmrtm__FreqLayoutArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayoutArray);
	if (soap_out_PointerToXdmrtm__FreqLayoutArray(soap, tag?tag:"Xdmrtm:FreqLayoutArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__FreqLayoutArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__FreqLayoutArray(struct soap *soap, Xdmrtm__FreqLayoutArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__FreqLayoutArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceUseingInfoArray(struct soap *soap, Xdmrtm__DeviceUseingInfoArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceUseingInfoArray(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceUseingInfoArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfoArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceUseingInfoArray(struct soap *soap, const char *tag, Xdmrtm__DeviceUseingInfoArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceUseingInfoArray **)soap_malloc(soap, sizeof(Xdmrtm__DeviceUseingInfoArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceUseingInfoArray *)soap_instantiate_Xdmrtm__DeviceUseingInfoArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceUseingInfoArray ** p = (Xdmrtm__DeviceUseingInfoArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray, sizeof(Xdmrtm__DeviceUseingInfoArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceUseingInfoArray(struct soap *soap, Xdmrtm__DeviceUseingInfoArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfoArray);
	if (soap_out_PointerToXdmrtm__DeviceUseingInfoArray(soap, tag?tag:"Xdmrtm:DeviceUseingInfoArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfoArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceUseingInfoArray(struct soap *soap, Xdmrtm__DeviceUseingInfoArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceUseingInfoArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__LoadbalancingServer(struct soap *soap, Xdmrtm__LoadbalancingServer *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__LoadbalancingServer(struct soap *soap, const char *tag, int id, Xdmrtm__LoadbalancingServer *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__LoadbalancingServer ** SOAP_FMAC4 soap_in_PointerToXdmrtm__LoadbalancingServer(struct soap *soap, const char *tag, Xdmrtm__LoadbalancingServer **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__LoadbalancingServer **)soap_malloc(soap, sizeof(Xdmrtm__LoadbalancingServer *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__LoadbalancingServer *)soap_instantiate_Xdmrtm__LoadbalancingServer(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__LoadbalancingServer ** p = (Xdmrtm__LoadbalancingServer **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer, sizeof(Xdmrtm__LoadbalancingServer), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__LoadbalancingServer(struct soap *soap, Xdmrtm__LoadbalancingServer *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LoadbalancingServer);
	if (soap_out_PointerToXdmrtm__LoadbalancingServer(soap, tag?tag:"Xdmrtm:LoadbalancingServer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__LoadbalancingServer ** SOAP_FMAC4 soap_get_PointerToXdmrtm__LoadbalancingServer(struct soap *soap, Xdmrtm__LoadbalancingServer **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__LoadbalancingServer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__LicenseStationArray(struct soap *soap, Xdmrtm__LicenseStationArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__LicenseStationArray(struct soap *soap, const char *tag, int id, Xdmrtm__LicenseStationArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStationArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__LicenseStationArray(struct soap *soap, const char *tag, Xdmrtm__LicenseStationArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__LicenseStationArray **)soap_malloc(soap, sizeof(Xdmrtm__LicenseStationArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__LicenseStationArray *)soap_instantiate_Xdmrtm__LicenseStationArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__LicenseStationArray ** p = (Xdmrtm__LicenseStationArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray, sizeof(Xdmrtm__LicenseStationArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__LicenseStationArray(struct soap *soap, Xdmrtm__LicenseStationArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStationArray);
	if (soap_out_PointerToXdmrtm__LicenseStationArray(soap, tag?tag:"Xdmrtm:LicenseStationArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__LicenseStationArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__LicenseStationArray(struct soap *soap, Xdmrtm__LicenseStationArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__LicenseStationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceFuncAntennaArray(struct soap *soap, Xdmrtm__DeviceFuncAntennaArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceFuncAntennaArray(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceFuncAntennaArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntennaArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceFuncAntennaArray(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncAntennaArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceFuncAntennaArray **)soap_malloc(soap, sizeof(Xdmrtm__DeviceFuncAntennaArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceFuncAntennaArray *)soap_instantiate_Xdmrtm__DeviceFuncAntennaArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceFuncAntennaArray ** p = (Xdmrtm__DeviceFuncAntennaArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray, sizeof(Xdmrtm__DeviceFuncAntennaArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceFuncAntennaArray(struct soap *soap, Xdmrtm__DeviceFuncAntennaArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntennaArray);
	if (soap_out_PointerToXdmrtm__DeviceFuncAntennaArray(soap, tag?tag:"Xdmrtm:DeviceFuncAntennaArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntennaArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceFuncAntennaArray(struct soap *soap, Xdmrtm__DeviceFuncAntennaArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceFuncAntennaArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceFuncArray(struct soap *soap, Xdmrtm__DeviceFuncArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceFuncArray(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceFuncArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceFuncArray(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceFuncArray **)soap_malloc(soap, sizeof(Xdmrtm__DeviceFuncArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceFuncArray *)soap_instantiate_Xdmrtm__DeviceFuncArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceFuncArray ** p = (Xdmrtm__DeviceFuncArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray, sizeof(Xdmrtm__DeviceFuncArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceFuncArray(struct soap *soap, Xdmrtm__DeviceFuncArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncArray);
	if (soap_out_PointerToXdmrtm__DeviceFuncArray(soap, tag?tag:"Xdmrtm:DeviceFuncArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceFuncArray(struct soap *soap, Xdmrtm__DeviceFuncArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceFuncArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__AntArray(struct soap *soap, Xdmrtm__AntArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__AntArray(struct soap *soap, const char *tag, int id, Xdmrtm__AntArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__AntArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__AntArray(struct soap *soap, const char *tag, Xdmrtm__AntArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__AntArray **)soap_malloc(soap, sizeof(Xdmrtm__AntArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__AntArray *)soap_instantiate_Xdmrtm__AntArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__AntArray ** p = (Xdmrtm__AntArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray, sizeof(Xdmrtm__AntArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__AntArray(struct soap *soap, Xdmrtm__AntArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__AntArray);
	if (soap_out_PointerToXdmrtm__AntArray(soap, tag?tag:"Xdmrtm:AntArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__AntArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__AntArray(struct soap *soap, Xdmrtm__AntArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__AntArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RNCArray(struct soap *soap, Xdmrtm__RNCArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RNCArray(struct soap *soap, const char *tag, int id, Xdmrtm__RNCArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RNCArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RNCArray(struct soap *soap, const char *tag, Xdmrtm__RNCArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RNCArray **)soap_malloc(soap, sizeof(Xdmrtm__RNCArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RNCArray *)soap_instantiate_Xdmrtm__RNCArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RNCArray ** p = (Xdmrtm__RNCArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray, sizeof(Xdmrtm__RNCArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RNCArray(struct soap *soap, Xdmrtm__RNCArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNCArray);
	if (soap_out_PointerToXdmrtm__RNCArray(soap, tag?tag:"Xdmrtm:RNCArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RNCArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RNCArray(struct soap *soap, Xdmrtm__RNCArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RNCArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceArray(struct soap *soap, Xdmrtm__DeviceArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceArray(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceArray(struct soap *soap, const char *tag, Xdmrtm__DeviceArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceArray **)soap_malloc(soap, sizeof(Xdmrtm__DeviceArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceArray *)soap_instantiate_Xdmrtm__DeviceArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceArray ** p = (Xdmrtm__DeviceArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray, sizeof(Xdmrtm__DeviceArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceArray(struct soap *soap, Xdmrtm__DeviceArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceArray);
	if (soap_out_PointerToXdmrtm__DeviceArray(soap, tag?tag:"Xdmrtm:DeviceArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceArray(struct soap *soap, Xdmrtm__DeviceArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__StationArray(struct soap *soap, Xdmrtm__StationArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__StationArray(struct soap *soap, const char *tag, int id, Xdmrtm__StationArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__StationArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__StationArray(struct soap *soap, const char *tag, Xdmrtm__StationArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__StationArray **)soap_malloc(soap, sizeof(Xdmrtm__StationArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__StationArray *)soap_instantiate_Xdmrtm__StationArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__StationArray ** p = (Xdmrtm__StationArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray, sizeof(Xdmrtm__StationArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__StationArray(struct soap *soap, Xdmrtm__StationArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__StationArray);
	if (soap_out_PointerToXdmrtm__StationArray(soap, tag?tag:"Xdmrtm:StationArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__StationArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__StationArray(struct soap *soap, Xdmrtm__StationArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__StationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonControlCenterArray(struct soap *soap, Xdmrtm__MonControlCenterArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonControlCenterArray(struct soap *soap, const char *tag, int id, Xdmrtm__MonControlCenterArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenterArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonControlCenterArray(struct soap *soap, const char *tag, Xdmrtm__MonControlCenterArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonControlCenterArray **)soap_malloc(soap, sizeof(Xdmrtm__MonControlCenterArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonControlCenterArray *)soap_instantiate_Xdmrtm__MonControlCenterArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonControlCenterArray ** p = (Xdmrtm__MonControlCenterArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray, sizeof(Xdmrtm__MonControlCenterArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonControlCenterArray(struct soap *soap, Xdmrtm__MonControlCenterArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenterArray);
	if (soap_out_PointerToXdmrtm__MonControlCenterArray(soap, tag?tag:"Xdmrtm:MonControlCenterArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonControlCenterArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonControlCenterArray(struct soap *soap, Xdmrtm__MonControlCenterArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonControlCenterArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonOrganizationArray(struct soap *soap, Xdmrtm__MonOrganizationArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonOrganizationArray(struct soap *soap, const char *tag, int id, Xdmrtm__MonOrganizationArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganizationArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonOrganizationArray(struct soap *soap, const char *tag, Xdmrtm__MonOrganizationArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonOrganizationArray **)soap_malloc(soap, sizeof(Xdmrtm__MonOrganizationArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonOrganizationArray *)soap_instantiate_Xdmrtm__MonOrganizationArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonOrganizationArray ** p = (Xdmrtm__MonOrganizationArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray, sizeof(Xdmrtm__MonOrganizationArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonOrganizationArray(struct soap *soap, Xdmrtm__MonOrganizationArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganizationArray);
	if (soap_out_PointerToXdmrtm__MonOrganizationArray(soap, tag?tag:"Xdmrtm:MonOrganizationArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonOrganizationArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonOrganizationArray(struct soap *soap, Xdmrtm__MonOrganizationArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonOrganizationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, Xdmrtm__RefDeviceModelFuncParamArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceModelFuncParamArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParamArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelFuncParamArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceModelFuncParamArray **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceModelFuncParamArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceModelFuncParamArray *)soap_instantiate_Xdmrtm__RefDeviceModelFuncParamArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceModelFuncParamArray ** p = (Xdmrtm__RefDeviceModelFuncParamArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray, sizeof(Xdmrtm__RefDeviceModelFuncParamArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, Xdmrtm__RefDeviceModelFuncParamArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParamArray);
	if (soap_out_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, tag?tag:"Xdmrtm:RefDeviceModelFuncParamArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParamArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceModelFuncParamArray(struct soap *soap, Xdmrtm__RefDeviceModelFuncParamArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceModelFuncParamArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceFuncArray(struct soap *soap, Xdmrtm__RefDeviceFuncArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceFuncArray(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceFuncArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFuncArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceFuncArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceFuncArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceFuncArray **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceFuncArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceFuncArray *)soap_instantiate_Xdmrtm__RefDeviceFuncArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceFuncArray ** p = (Xdmrtm__RefDeviceFuncArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray, sizeof(Xdmrtm__RefDeviceFuncArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceFuncArray(struct soap *soap, Xdmrtm__RefDeviceFuncArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFuncArray);
	if (soap_out_PointerToXdmrtm__RefDeviceFuncArray(soap, tag?tag:"Xdmrtm:RefDeviceFuncArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFuncArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceFuncArray(struct soap *soap, Xdmrtm__RefDeviceFuncArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceFuncArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceModelArray(struct soap *soap, Xdmrtm__RefDeviceModelArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceModelArray(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceModelArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceModelArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceModelArray **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceModelArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceModelArray *)soap_instantiate_Xdmrtm__RefDeviceModelArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceModelArray ** p = (Xdmrtm__RefDeviceModelArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray, sizeof(Xdmrtm__RefDeviceModelArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceModelArray(struct soap *soap, Xdmrtm__RefDeviceModelArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelArray);
	if (soap_out_PointerToXdmrtm__RefDeviceModelArray(soap, tag?tag:"Xdmrtm:RefDeviceModelArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceModelArray(struct soap *soap, Xdmrtm__RefDeviceModelArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceModelArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceProtocolArray(struct soap *soap, Xdmrtm__RefDeviceProtocolArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceProtocolArray(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceProtocolArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocolArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceProtocolArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceProtocolArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceProtocolArray **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceProtocolArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceProtocolArray *)soap_instantiate_Xdmrtm__RefDeviceProtocolArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceProtocolArray ** p = (Xdmrtm__RefDeviceProtocolArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray, sizeof(Xdmrtm__RefDeviceProtocolArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceProtocolArray(struct soap *soap, Xdmrtm__RefDeviceProtocolArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocolArray);
	if (soap_out_PointerToXdmrtm__RefDeviceProtocolArray(soap, tag?tag:"Xdmrtm:RefDeviceProtocolArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocolArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceProtocolArray(struct soap *soap, Xdmrtm__RefDeviceProtocolArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceProtocolArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceTypeArray(struct soap *soap, Xdmrtm__RefDeviceTypeArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceTypeArray(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceTypeArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceTypeArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceTypeArray(struct soap *soap, const char *tag, Xdmrtm__RefDeviceTypeArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceTypeArray **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceTypeArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceTypeArray *)soap_instantiate_Xdmrtm__RefDeviceTypeArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceTypeArray ** p = (Xdmrtm__RefDeviceTypeArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray, sizeof(Xdmrtm__RefDeviceTypeArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceTypeArray(struct soap *soap, Xdmrtm__RefDeviceTypeArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceTypeArray);
	if (soap_out_PointerToXdmrtm__RefDeviceTypeArray(soap, tag?tag:"Xdmrtm:RefDeviceTypeArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceTypeArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceTypeArray(struct soap *soap, Xdmrtm__RefDeviceTypeArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceTypeArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefStationTypeArray(struct soap *soap, Xdmrtm__RefStationTypeArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefStationTypeArray(struct soap *soap, const char *tag, int id, Xdmrtm__RefStationTypeArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefStationTypeArray ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefStationTypeArray(struct soap *soap, const char *tag, Xdmrtm__RefStationTypeArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefStationTypeArray **)soap_malloc(soap, sizeof(Xdmrtm__RefStationTypeArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefStationTypeArray *)soap_instantiate_Xdmrtm__RefStationTypeArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefStationTypeArray ** p = (Xdmrtm__RefStationTypeArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray, sizeof(Xdmrtm__RefStationTypeArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefStationTypeArray(struct soap *soap, Xdmrtm__RefStationTypeArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationTypeArray);
	if (soap_out_PointerToXdmrtm__RefStationTypeArray(soap, tag?tag:"Xdmrtm:RefStationTypeArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefStationTypeArray ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefStationTypeArray(struct soap *soap, Xdmrtm__RefStationTypeArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefStationTypeArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm))
		soap_serialize_PointerToXdmrtm__Alarm(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__Alarm(struct soap *soap, const char *tag, int id, Xdmrtm__Alarm **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__Alarm(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__Alarm *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__Alarm(struct soap *soap, const char *tag, Xdmrtm__Alarm ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Alarm ***)soap_malloc(soap, sizeof(Xdmrtm__Alarm **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__Alarm(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Alarm ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm, sizeof(Xdmrtm__Alarm *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Alarm);
	if (soap_out_PointerToPointerToXdmrtm__Alarm(soap, tag?tag:"Xdmrtm:Alarm", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Alarm *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__Alarm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__Alarm(struct soap *soap, const char *tag, int id, Xdmrtm__Alarm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__Alarm ** SOAP_FMAC4 soap_in_PointerToXdmrtm__Alarm(struct soap *soap, const char *tag, Xdmrtm__Alarm **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Alarm **)soap_malloc(soap, sizeof(Xdmrtm__Alarm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__Alarm *)soap_instantiate_Xdmrtm__Alarm(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__Alarm ** p = (Xdmrtm__Alarm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm, sizeof(Xdmrtm__Alarm), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Alarm);
	if (soap_out_PointerToXdmrtm__Alarm(soap, tag?tag:"Xdmrtm:Alarm", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Alarm ** SOAP_FMAC4 soap_get_PointerToXdmrtm__Alarm(struct soap *soap, Xdmrtm__Alarm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__Alarm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment))
		soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachment(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, Xdmrtm__MonAnalysisReportAttachment **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__MonAnalysisReportAttachment(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachment *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportAttachment ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonAnalysisReportAttachment ***)soap_malloc(soap, sizeof(Xdmrtm__MonAnalysisReportAttachment **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__MonAnalysisReportAttachment(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonAnalysisReportAttachment ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment, sizeof(Xdmrtm__MonAnalysisReportAttachment *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReportAttachment);
	if (soap_out_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(soap, tag?tag:"Xdmrtm:MonAnalysisReportAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachment *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__MonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, const char *tag, int id, Xdmrtm__MonAnalysisReportAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachment ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReportAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonAnalysisReportAttachment **)soap_malloc(soap, sizeof(Xdmrtm__MonAnalysisReportAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonAnalysisReportAttachment *)soap_instantiate_Xdmrtm__MonAnalysisReportAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonAnalysisReportAttachment ** p = (Xdmrtm__MonAnalysisReportAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment, sizeof(Xdmrtm__MonAnalysisReportAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReportAttachment);
	if (soap_out_PointerToXdmrtm__MonAnalysisReportAttachment(soap, tag?tag:"Xdmrtm:MonAnalysisReportAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReportAttachment ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonAnalysisReportAttachment(struct soap *soap, Xdmrtm__MonAnalysisReportAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonAnalysisReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport))
		soap_serialize_PointerToXdmrtm__MonAnalysisReport(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__MonAnalysisReport(struct soap *soap, const char *tag, int id, Xdmrtm__MonAnalysisReport **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__MonAnalysisReport(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReport *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__MonAnalysisReport(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReport ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonAnalysisReport ***)soap_malloc(soap, sizeof(Xdmrtm__MonAnalysisReport **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__MonAnalysisReport(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonAnalysisReport ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport, sizeof(Xdmrtm__MonAnalysisReport *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonAnalysisReport);
	if (soap_out_PointerToPointerToXdmrtm__MonAnalysisReport(soap, tag?tag:"Xdmrtm:MonAnalysisReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReport *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__MonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonAnalysisReport(struct soap *soap, const char *tag, int id, Xdmrtm__MonAnalysisReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReport ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonAnalysisReport(struct soap *soap, const char *tag, Xdmrtm__MonAnalysisReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonAnalysisReport **)soap_malloc(soap, sizeof(Xdmrtm__MonAnalysisReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonAnalysisReport *)soap_instantiate_Xdmrtm__MonAnalysisReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonAnalysisReport ** p = (Xdmrtm__MonAnalysisReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport, sizeof(Xdmrtm__MonAnalysisReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonAnalysisReport);
	if (soap_out_PointerToXdmrtm__MonAnalysisReport(soap, tag?tag:"Xdmrtm:MonAnalysisReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonAnalysisReport ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonAnalysisReport(struct soap *soap, Xdmrtm__MonAnalysisReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonAnalysisReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask))
		soap_serialize_PointerToXdmrtm__PlanTask(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__PlanTask(struct soap *soap, const char *tag, int id, Xdmrtm__PlanTask **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__PlanTask(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__PlanTask *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__PlanTask(struct soap *soap, const char *tag, Xdmrtm__PlanTask ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__PlanTask ***)soap_malloc(soap, sizeof(Xdmrtm__PlanTask **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__PlanTask(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__PlanTask ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask, sizeof(Xdmrtm__PlanTask *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTask);
	if (soap_out_PointerToPointerToXdmrtm__PlanTask(soap, tag?tag:"Xdmrtm:PlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__PlanTask *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__PlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__PlanTask(struct soap *soap, const char *tag, int id, Xdmrtm__PlanTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__PlanTask ** SOAP_FMAC4 soap_in_PointerToXdmrtm__PlanTask(struct soap *soap, const char *tag, Xdmrtm__PlanTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__PlanTask **)soap_malloc(soap, sizeof(Xdmrtm__PlanTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__PlanTask *)soap_instantiate_Xdmrtm__PlanTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__PlanTask ** p = (Xdmrtm__PlanTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask, sizeof(Xdmrtm__PlanTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTask);
	if (soap_out_PointerToXdmrtm__PlanTask(soap, tag?tag:"Xdmrtm:PlanTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__PlanTask ** SOAP_FMAC4 soap_get_PointerToXdmrtm__PlanTask(struct soap *soap, Xdmrtm__PlanTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__PlanTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID))
		soap_serialize_PointerToXdmrtm__PlanTaskID(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__PlanTaskID(struct soap *soap, const char *tag, int id, Xdmrtm__PlanTaskID **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__PlanTaskID(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskID *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__PlanTaskID(struct soap *soap, const char *tag, Xdmrtm__PlanTaskID ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__PlanTaskID ***)soap_malloc(soap, sizeof(Xdmrtm__PlanTaskID **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__PlanTaskID(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__PlanTaskID ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID, sizeof(Xdmrtm__PlanTaskID *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__PlanTaskID);
	if (soap_out_PointerToPointerToXdmrtm__PlanTaskID(soap, tag?tag:"Xdmrtm:PlanTaskID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__PlanTaskID *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__PlanTaskID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__PlanTaskID(struct soap *soap, const char *tag, int id, Xdmrtm__PlanTaskID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__PlanTaskID ** SOAP_FMAC4 soap_in_PointerToXdmrtm__PlanTaskID(struct soap *soap, const char *tag, Xdmrtm__PlanTaskID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__PlanTaskID **)soap_malloc(soap, sizeof(Xdmrtm__PlanTaskID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__PlanTaskID *)soap_instantiate_Xdmrtm__PlanTaskID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__PlanTaskID ** p = (Xdmrtm__PlanTaskID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID, sizeof(Xdmrtm__PlanTaskID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__PlanTaskID);
	if (soap_out_PointerToXdmrtm__PlanTaskID(soap, tag?tag:"Xdmrtm:PlanTaskID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__PlanTaskID ** SOAP_FMAC4 soap_get_PointerToXdmrtm__PlanTaskID(struct soap *soap, Xdmrtm__PlanTaskID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__PlanTaskID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout))
		soap_serialize_PointerToXdmrtm__FreqLayout(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__FreqLayout(struct soap *soap, const char *tag, int id, Xdmrtm__FreqLayout **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__FreqLayout(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayout *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__FreqLayout(struct soap *soap, const char *tag, Xdmrtm__FreqLayout ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__FreqLayout ***)soap_malloc(soap, sizeof(Xdmrtm__FreqLayout **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__FreqLayout(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__FreqLayout ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout, sizeof(Xdmrtm__FreqLayout *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__FreqLayout);
	if (soap_out_PointerToPointerToXdmrtm__FreqLayout(soap, tag?tag:"Xdmrtm:FreqLayout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__FreqLayout *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__FreqLayout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__FreqLayout(struct soap *soap, const char *tag, int id, Xdmrtm__FreqLayout *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__FreqLayout ** SOAP_FMAC4 soap_in_PointerToXdmrtm__FreqLayout(struct soap *soap, const char *tag, Xdmrtm__FreqLayout **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__FreqLayout **)soap_malloc(soap, sizeof(Xdmrtm__FreqLayout *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__FreqLayout *)soap_instantiate_Xdmrtm__FreqLayout(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__FreqLayout ** p = (Xdmrtm__FreqLayout **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout, sizeof(Xdmrtm__FreqLayout), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__FreqLayout);
	if (soap_out_PointerToXdmrtm__FreqLayout(soap, tag?tag:"Xdmrtm:FreqLayout", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__FreqLayout ** SOAP_FMAC4 soap_get_PointerToXdmrtm__FreqLayout(struct soap *soap, Xdmrtm__FreqLayout **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__FreqLayout(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo))
		soap_serialize_PointerToXdmrtm__DeviceUseingInfo(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__DeviceUseingInfo(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceUseingInfo **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__DeviceUseingInfo(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfo *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__DeviceUseingInfo(struct soap *soap, const char *tag, Xdmrtm__DeviceUseingInfo ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceUseingInfo ***)soap_malloc(soap, sizeof(Xdmrtm__DeviceUseingInfo **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__DeviceUseingInfo(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceUseingInfo ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo, sizeof(Xdmrtm__DeviceUseingInfo *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUseingInfo);
	if (soap_out_PointerToPointerToXdmrtm__DeviceUseingInfo(soap, tag?tag:"Xdmrtm:DeviceUseingInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfo *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__DeviceUseingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceUseingInfo(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceUseingInfo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfo ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceUseingInfo(struct soap *soap, const char *tag, Xdmrtm__DeviceUseingInfo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceUseingInfo **)soap_malloc(soap, sizeof(Xdmrtm__DeviceUseingInfo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceUseingInfo *)soap_instantiate_Xdmrtm__DeviceUseingInfo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceUseingInfo ** p = (Xdmrtm__DeviceUseingInfo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo, sizeof(Xdmrtm__DeviceUseingInfo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUseingInfo);
	if (soap_out_PointerToXdmrtm__DeviceUseingInfo(soap, tag?tag:"Xdmrtm:DeviceUseingInfo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceUseingInfo ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceUseingInfo(struct soap *soap, Xdmrtm__DeviceUseingInfo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceUseingInfo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation))
		soap_serialize_PointerToXdmrtm__LicenseStation(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__LicenseStation(struct soap *soap, const char *tag, int id, Xdmrtm__LicenseStation **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__LicenseStation(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStation *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__LicenseStation(struct soap *soap, const char *tag, Xdmrtm__LicenseStation ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__LicenseStation ***)soap_malloc(soap, sizeof(Xdmrtm__LicenseStation **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__LicenseStation(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__LicenseStation ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation, sizeof(Xdmrtm__LicenseStation *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__LicenseStation);
	if (soap_out_PointerToPointerToXdmrtm__LicenseStation(soap, tag?tag:"Xdmrtm:LicenseStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__LicenseStation *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__LicenseStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__LicenseStation(struct soap *soap, const char *tag, int id, Xdmrtm__LicenseStation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__LicenseStation ** SOAP_FMAC4 soap_in_PointerToXdmrtm__LicenseStation(struct soap *soap, const char *tag, Xdmrtm__LicenseStation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__LicenseStation **)soap_malloc(soap, sizeof(Xdmrtm__LicenseStation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__LicenseStation *)soap_instantiate_Xdmrtm__LicenseStation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__LicenseStation ** p = (Xdmrtm__LicenseStation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation, sizeof(Xdmrtm__LicenseStation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__LicenseStation);
	if (soap_out_PointerToXdmrtm__LicenseStation(soap, tag?tag:"Xdmrtm:LicenseStation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__LicenseStation ** SOAP_FMAC4 soap_get_PointerToXdmrtm__LicenseStation(struct soap *soap, Xdmrtm__LicenseStation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__LicenseStation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc))
		soap_serialize_PointerToXdmrtm__DeviceFunc(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__DeviceFunc(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceFunc **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__DeviceFunc(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFunc *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__DeviceFunc(struct soap *soap, const char *tag, Xdmrtm__DeviceFunc ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceFunc ***)soap_malloc(soap, sizeof(Xdmrtm__DeviceFunc **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__DeviceFunc(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceFunc ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc, sizeof(Xdmrtm__DeviceFunc *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFunc);
	if (soap_out_PointerToPointerToXdmrtm__DeviceFunc(soap, tag?tag:"Xdmrtm:DeviceFunc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceFunc *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__DeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceFunc(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceFunc *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFunc ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceFunc(struct soap *soap, const char *tag, Xdmrtm__DeviceFunc **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceFunc **)soap_malloc(soap, sizeof(Xdmrtm__DeviceFunc *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceFunc *)soap_instantiate_Xdmrtm__DeviceFunc(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceFunc ** p = (Xdmrtm__DeviceFunc **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc, sizeof(Xdmrtm__DeviceFunc), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFunc);
	if (soap_out_PointerToXdmrtm__DeviceFunc(soap, tag?tag:"Xdmrtm:DeviceFunc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceFunc ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceFunc(struct soap *soap, Xdmrtm__DeviceFunc **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna))
		soap_serialize_PointerToXdmrtm__DeviceFuncAntenna(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceFuncAntenna **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__DeviceFuncAntenna(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntenna *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncAntenna ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceFuncAntenna ***)soap_malloc(soap, sizeof(Xdmrtm__DeviceFuncAntenna **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__DeviceFuncAntenna(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceFuncAntenna ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna, sizeof(Xdmrtm__DeviceFuncAntenna *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceFuncAntenna);
	if (soap_out_PointerToPointerToXdmrtm__DeviceFuncAntenna(soap, tag?tag:"Xdmrtm:DeviceFuncAntenna", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntenna *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__DeviceFuncAntenna(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceFuncAntenna *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntenna ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, const char *tag, Xdmrtm__DeviceFuncAntenna **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceFuncAntenna **)soap_malloc(soap, sizeof(Xdmrtm__DeviceFuncAntenna *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceFuncAntenna *)soap_instantiate_Xdmrtm__DeviceFuncAntenna(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceFuncAntenna ** p = (Xdmrtm__DeviceFuncAntenna **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna, sizeof(Xdmrtm__DeviceFuncAntenna), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceFuncAntenna);
	if (soap_out_PointerToXdmrtm__DeviceFuncAntenna(soap, tag?tag:"Xdmrtm:DeviceFuncAntenna", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceFuncAntenna ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceFuncAntenna(struct soap *soap, Xdmrtm__DeviceFuncAntenna **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceFuncAntenna(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__Ant(struct soap *soap, Xdmrtm__Ant **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant))
		soap_serialize_PointerToXdmrtm__Ant(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__Ant(struct soap *soap, const char *tag, int id, Xdmrtm__Ant **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__Ant(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__Ant *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__Ant(struct soap *soap, const char *tag, Xdmrtm__Ant ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Ant ***)soap_malloc(soap, sizeof(Xdmrtm__Ant **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__Ant(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Ant ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant, sizeof(Xdmrtm__Ant *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__Ant(struct soap *soap, Xdmrtm__Ant **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Ant);
	if (soap_out_PointerToPointerToXdmrtm__Ant(soap, tag?tag:"Xdmrtm:Ant", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Ant *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__Ant(struct soap *soap, Xdmrtm__Ant ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__Ant(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__Ant(struct soap *soap, Xdmrtm__Ant *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__Ant(struct soap *soap, const char *tag, int id, Xdmrtm__Ant *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__Ant ** SOAP_FMAC4 soap_in_PointerToXdmrtm__Ant(struct soap *soap, const char *tag, Xdmrtm__Ant **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Ant **)soap_malloc(soap, sizeof(Xdmrtm__Ant *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__Ant *)soap_instantiate_Xdmrtm__Ant(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__Ant ** p = (Xdmrtm__Ant **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__Ant, sizeof(Xdmrtm__Ant), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__Ant(struct soap *soap, Xdmrtm__Ant *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Ant);
	if (soap_out_PointerToXdmrtm__Ant(soap, tag?tag:"Xdmrtm:Ant", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Ant ** SOAP_FMAC4 soap_get_PointerToXdmrtm__Ant(struct soap *soap, Xdmrtm__Ant **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__Ant(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RNC(struct soap *soap, Xdmrtm__RNC **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC))
		soap_serialize_PointerToXdmrtm__RNC(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RNC(struct soap *soap, const char *tag, int id, Xdmrtm__RNC **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RNC(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RNC *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RNC(struct soap *soap, const char *tag, Xdmrtm__RNC ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RNC ***)soap_malloc(soap, sizeof(Xdmrtm__RNC **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RNC(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RNC ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC, sizeof(Xdmrtm__RNC *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RNC(struct soap *soap, Xdmrtm__RNC **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RNC);
	if (soap_out_PointerToPointerToXdmrtm__RNC(soap, tag?tag:"Xdmrtm:RNC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RNC *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RNC(struct soap *soap, Xdmrtm__RNC ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RNC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RNC(struct soap *soap, Xdmrtm__RNC *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RNC(struct soap *soap, const char *tag, int id, Xdmrtm__RNC *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RNC ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RNC(struct soap *soap, const char *tag, Xdmrtm__RNC **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RNC **)soap_malloc(soap, sizeof(Xdmrtm__RNC *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RNC *)soap_instantiate_Xdmrtm__RNC(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RNC ** p = (Xdmrtm__RNC **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RNC, sizeof(Xdmrtm__RNC), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RNC(struct soap *soap, Xdmrtm__RNC *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RNC);
	if (soap_out_PointerToXdmrtm__RNC(soap, tag?tag:"Xdmrtm:RNC", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RNC ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RNC(struct soap *soap, Xdmrtm__RNC **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RNC(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__Device(struct soap *soap, Xdmrtm__Device **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device))
		soap_serialize_PointerToXdmrtm__Device(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__Device(struct soap *soap, const char *tag, int id, Xdmrtm__Device **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__Device(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__Device *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__Device(struct soap *soap, const char *tag, Xdmrtm__Device ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Device ***)soap_malloc(soap, sizeof(Xdmrtm__Device **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__Device(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Device ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device, sizeof(Xdmrtm__Device *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__Device(struct soap *soap, Xdmrtm__Device **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Device);
	if (soap_out_PointerToPointerToXdmrtm__Device(soap, tag?tag:"Xdmrtm:Device", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Device *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__Device(struct soap *soap, Xdmrtm__Device ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__Device(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__Device(struct soap *soap, Xdmrtm__Device *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__Device))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__Device(struct soap *soap, const char *tag, int id, Xdmrtm__Device *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__Device);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__Device ** SOAP_FMAC4 soap_in_PointerToXdmrtm__Device(struct soap *soap, const char *tag, Xdmrtm__Device **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Device **)soap_malloc(soap, sizeof(Xdmrtm__Device *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__Device *)soap_instantiate_Xdmrtm__Device(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__Device ** p = (Xdmrtm__Device **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__Device, sizeof(Xdmrtm__Device), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__Device(struct soap *soap, Xdmrtm__Device *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Device);
	if (soap_out_PointerToXdmrtm__Device(soap, tag?tag:"Xdmrtm:Device", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Device ** SOAP_FMAC4 soap_get_PointerToXdmrtm__Device(struct soap *soap, Xdmrtm__Device **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__Device(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__Station(struct soap *soap, Xdmrtm__Station **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station))
		soap_serialize_PointerToXdmrtm__Station(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__Station(struct soap *soap, const char *tag, int id, Xdmrtm__Station **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__Station(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__Station *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__Station(struct soap *soap, const char *tag, Xdmrtm__Station ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Station ***)soap_malloc(soap, sizeof(Xdmrtm__Station **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__Station(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__Station ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station, sizeof(Xdmrtm__Station *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__Station(struct soap *soap, Xdmrtm__Station **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__Station);
	if (soap_out_PointerToPointerToXdmrtm__Station(soap, tag?tag:"Xdmrtm:Station", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Station *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__Station(struct soap *soap, Xdmrtm__Station ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__Station(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__Station(struct soap *soap, Xdmrtm__Station *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__Station))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__Station(struct soap *soap, const char *tag, int id, Xdmrtm__Station *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__Station);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__Station ** SOAP_FMAC4 soap_in_PointerToXdmrtm__Station(struct soap *soap, const char *tag, Xdmrtm__Station **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__Station **)soap_malloc(soap, sizeof(Xdmrtm__Station *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__Station *)soap_instantiate_Xdmrtm__Station(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__Station ** p = (Xdmrtm__Station **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__Station, sizeof(Xdmrtm__Station), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__Station(struct soap *soap, Xdmrtm__Station *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__Station);
	if (soap_out_PointerToXdmrtm__Station(soap, tag?tag:"Xdmrtm:Station", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__Station ** SOAP_FMAC4 soap_get_PointerToXdmrtm__Station(struct soap *soap, Xdmrtm__Station **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__Station(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog))
		soap_serialize_PointerToXdmrtm__DeviceUsedLog(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__DeviceUsedLog(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceUsedLog **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__DeviceUsedLog(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLog *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__DeviceUsedLog(struct soap *soap, const char *tag, Xdmrtm__DeviceUsedLog ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceUsedLog ***)soap_malloc(soap, sizeof(Xdmrtm__DeviceUsedLog **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__DeviceUsedLog(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__DeviceUsedLog ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog, sizeof(Xdmrtm__DeviceUsedLog *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__DeviceUsedLog);
	if (soap_out_PointerToPointerToXdmrtm__DeviceUsedLog(soap, tag?tag:"Xdmrtm:DeviceUsedLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLog *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__DeviceUsedLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__DeviceUsedLog(struct soap *soap, const char *tag, int id, Xdmrtm__DeviceUsedLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLog ** SOAP_FMAC4 soap_in_PointerToXdmrtm__DeviceUsedLog(struct soap *soap, const char *tag, Xdmrtm__DeviceUsedLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__DeviceUsedLog **)soap_malloc(soap, sizeof(Xdmrtm__DeviceUsedLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__DeviceUsedLog *)soap_instantiate_Xdmrtm__DeviceUsedLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__DeviceUsedLog ** p = (Xdmrtm__DeviceUsedLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog, sizeof(Xdmrtm__DeviceUsedLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__DeviceUsedLog);
	if (soap_out_PointerToXdmrtm__DeviceUsedLog(soap, tag?tag:"Xdmrtm:DeviceUsedLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__DeviceUsedLog ** SOAP_FMAC4 soap_get_PointerToXdmrtm__DeviceUsedLog(struct soap *soap, Xdmrtm__DeviceUsedLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__DeviceUsedLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter))
		soap_serialize_PointerToXdmrtm__MonControlCenter(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__MonControlCenter(struct soap *soap, const char *tag, int id, Xdmrtm__MonControlCenter **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__MonControlCenter(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenter *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__MonControlCenter(struct soap *soap, const char *tag, Xdmrtm__MonControlCenter ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonControlCenter ***)soap_malloc(soap, sizeof(Xdmrtm__MonControlCenter **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__MonControlCenter(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonControlCenter ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter, sizeof(Xdmrtm__MonControlCenter *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonControlCenter);
	if (soap_out_PointerToPointerToXdmrtm__MonControlCenter(soap, tag?tag:"Xdmrtm:MonControlCenter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonControlCenter *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__MonControlCenter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonControlCenter(struct soap *soap, const char *tag, int id, Xdmrtm__MonControlCenter *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonControlCenter ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonControlCenter(struct soap *soap, const char *tag, Xdmrtm__MonControlCenter **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonControlCenter **)soap_malloc(soap, sizeof(Xdmrtm__MonControlCenter *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonControlCenter *)soap_instantiate_Xdmrtm__MonControlCenter(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonControlCenter ** p = (Xdmrtm__MonControlCenter **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter, sizeof(Xdmrtm__MonControlCenter), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonControlCenter);
	if (soap_out_PointerToXdmrtm__MonControlCenter(soap, tag?tag:"Xdmrtm:MonControlCenter", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonControlCenter ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonControlCenter(struct soap *soap, Xdmrtm__MonControlCenter **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonControlCenter(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization))
		soap_serialize_PointerToXdmrtm__MonOrganization(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__MonOrganization(struct soap *soap, const char *tag, int id, Xdmrtm__MonOrganization **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__MonOrganization(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganization *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__MonOrganization(struct soap *soap, const char *tag, Xdmrtm__MonOrganization ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonOrganization ***)soap_malloc(soap, sizeof(Xdmrtm__MonOrganization **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__MonOrganization(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__MonOrganization ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization, sizeof(Xdmrtm__MonOrganization *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__MonOrganization);
	if (soap_out_PointerToPointerToXdmrtm__MonOrganization(soap, tag?tag:"Xdmrtm:MonOrganization", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonOrganization *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__MonOrganization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__MonOrganization(struct soap *soap, const char *tag, int id, Xdmrtm__MonOrganization *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__MonOrganization ** SOAP_FMAC4 soap_in_PointerToXdmrtm__MonOrganization(struct soap *soap, const char *tag, Xdmrtm__MonOrganization **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__MonOrganization **)soap_malloc(soap, sizeof(Xdmrtm__MonOrganization *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__MonOrganization *)soap_instantiate_Xdmrtm__MonOrganization(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__MonOrganization ** p = (Xdmrtm__MonOrganization **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization, sizeof(Xdmrtm__MonOrganization), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__MonOrganization);
	if (soap_out_PointerToXdmrtm__MonOrganization(soap, tag?tag:"Xdmrtm:MonOrganization", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__MonOrganization ** SOAP_FMAC4 soap_get_PointerToXdmrtm__MonOrganization(struct soap *soap, Xdmrtm__MonOrganization **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__MonOrganization(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam))
		soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParam(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceModelFuncParam **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RefDeviceModelFuncParam(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParam *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelFuncParam ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceModelFuncParam ***)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceModelFuncParam **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RefDeviceModelFuncParam(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceModelFuncParam ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam, sizeof(Xdmrtm__RefDeviceModelFuncParam *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModelFuncParam);
	if (soap_out_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(soap, tag?tag:"Xdmrtm:RefDeviceModelFuncParam", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParam *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RefDeviceModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceModelFuncParam *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParam ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModelFuncParam **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceModelFuncParam **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceModelFuncParam *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceModelFuncParam *)soap_instantiate_Xdmrtm__RefDeviceModelFuncParam(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceModelFuncParam ** p = (Xdmrtm__RefDeviceModelFuncParam **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam, sizeof(Xdmrtm__RefDeviceModelFuncParam), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModelFuncParam);
	if (soap_out_PointerToXdmrtm__RefDeviceModelFuncParam(soap, tag?tag:"Xdmrtm:RefDeviceModelFuncParam", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModelFuncParam ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceModelFuncParam(struct soap *soap, Xdmrtm__RefDeviceModelFuncParam **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc))
		soap_serialize_PointerToXdmrtm__RefDeviceFunc(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RefDeviceFunc(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceFunc **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RefDeviceFunc(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFunc *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RefDeviceFunc(struct soap *soap, const char *tag, Xdmrtm__RefDeviceFunc ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceFunc ***)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceFunc **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RefDeviceFunc(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceFunc ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc, sizeof(Xdmrtm__RefDeviceFunc *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceFunc);
	if (soap_out_PointerToPointerToXdmrtm__RefDeviceFunc(soap, tag?tag:"Xdmrtm:RefDeviceFunc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFunc *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RefDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceFunc(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceFunc *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFunc ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceFunc(struct soap *soap, const char *tag, Xdmrtm__RefDeviceFunc **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceFunc **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceFunc *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceFunc *)soap_instantiate_Xdmrtm__RefDeviceFunc(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceFunc ** p = (Xdmrtm__RefDeviceFunc **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc, sizeof(Xdmrtm__RefDeviceFunc), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceFunc);
	if (soap_out_PointerToXdmrtm__RefDeviceFunc(soap, tag?tag:"Xdmrtm:RefDeviceFunc", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceFunc ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceFunc(struct soap *soap, Xdmrtm__RefDeviceFunc **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceFunc(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel))
		soap_serialize_PointerToXdmrtm__RefDeviceModel(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RefDeviceModel(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceModel **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RefDeviceModel(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModel *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RefDeviceModel(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModel ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceModel ***)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceModel **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RefDeviceModel(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceModel ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel, sizeof(Xdmrtm__RefDeviceModel *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceModel);
	if (soap_out_PointerToPointerToXdmrtm__RefDeviceModel(soap, tag?tag:"Xdmrtm:RefDeviceModel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModel *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RefDeviceModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceModel(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceModel *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModel ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceModel(struct soap *soap, const char *tag, Xdmrtm__RefDeviceModel **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceModel **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceModel *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceModel *)soap_instantiate_Xdmrtm__RefDeviceModel(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceModel ** p = (Xdmrtm__RefDeviceModel **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel, sizeof(Xdmrtm__RefDeviceModel), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceModel);
	if (soap_out_PointerToXdmrtm__RefDeviceModel(soap, tag?tag:"Xdmrtm:RefDeviceModel", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceModel ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceModel(struct soap *soap, Xdmrtm__RefDeviceModel **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceModel(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol))
		soap_serialize_PointerToXdmrtm__RefDeviceProtocol(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RefDeviceProtocol(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceProtocol **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RefDeviceProtocol(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocol *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RefDeviceProtocol(struct soap *soap, const char *tag, Xdmrtm__RefDeviceProtocol ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceProtocol ***)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceProtocol **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RefDeviceProtocol(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceProtocol ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol, sizeof(Xdmrtm__RefDeviceProtocol *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceProtocol);
	if (soap_out_PointerToPointerToXdmrtm__RefDeviceProtocol(soap, tag?tag:"Xdmrtm:RefDeviceProtocol", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocol *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RefDeviceProtocol(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceProtocol(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceProtocol *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocol ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceProtocol(struct soap *soap, const char *tag, Xdmrtm__RefDeviceProtocol **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceProtocol **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceProtocol *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceProtocol *)soap_instantiate_Xdmrtm__RefDeviceProtocol(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceProtocol ** p = (Xdmrtm__RefDeviceProtocol **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol, sizeof(Xdmrtm__RefDeviceProtocol), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceProtocol);
	if (soap_out_PointerToXdmrtm__RefDeviceProtocol(soap, tag?tag:"Xdmrtm:RefDeviceProtocol", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceProtocol ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceProtocol(struct soap *soap, Xdmrtm__RefDeviceProtocol **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceProtocol(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType))
		soap_serialize_PointerToXdmrtm__RefDeviceType(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RefDeviceType(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceType **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RefDeviceType(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceType *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RefDeviceType(struct soap *soap, const char *tag, Xdmrtm__RefDeviceType ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceType ***)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceType **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RefDeviceType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefDeviceType ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType, sizeof(Xdmrtm__RefDeviceType *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefDeviceType);
	if (soap_out_PointerToPointerToXdmrtm__RefDeviceType(soap, tag?tag:"Xdmrtm:RefDeviceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceType *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RefDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefDeviceType(struct soap *soap, const char *tag, int id, Xdmrtm__RefDeviceType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefDeviceType ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefDeviceType(struct soap *soap, const char *tag, Xdmrtm__RefDeviceType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefDeviceType **)soap_malloc(soap, sizeof(Xdmrtm__RefDeviceType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefDeviceType *)soap_instantiate_Xdmrtm__RefDeviceType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefDeviceType ** p = (Xdmrtm__RefDeviceType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType, sizeof(Xdmrtm__RefDeviceType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefDeviceType);
	if (soap_out_PointerToXdmrtm__RefDeviceType(soap, tag?tag:"Xdmrtm:RefDeviceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefDeviceType ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefDeviceType(struct soap *soap, Xdmrtm__RefDeviceType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefDeviceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToXdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType))
		soap_serialize_PointerToXdmrtm__RefStationType(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToXdmrtm__RefStationType(struct soap *soap, const char *tag, int id, Xdmrtm__RefStationType **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToXdmrtm__RefStationType(soap, tag, id, *a, type);
}

SOAP_FMAC3 Xdmrtm__RefStationType *** SOAP_FMAC4 soap_in_PointerToPointerToXdmrtm__RefStationType(struct soap *soap, const char *tag, Xdmrtm__RefStationType ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefStationType ***)soap_malloc(soap, sizeof(Xdmrtm__RefStationType **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToXdmrtm__RefStationType(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Xdmrtm__RefStationType ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType, sizeof(Xdmrtm__RefStationType *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToXdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToPointerToXdmrtm__RefStationType);
	if (soap_out_PointerToPointerToXdmrtm__RefStationType(soap, tag?tag:"Xdmrtm:RefStationType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefStationType *** SOAP_FMAC4 soap_get_PointerToPointerToXdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToXdmrtm__RefStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToXdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToXdmrtm__RefStationType(struct soap *soap, const char *tag, int id, Xdmrtm__RefStationType *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Xdmrtm__RefStationType ** SOAP_FMAC4 soap_in_PointerToXdmrtm__RefStationType(struct soap *soap, const char *tag, Xdmrtm__RefStationType **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Xdmrtm__RefStationType **)soap_malloc(soap, sizeof(Xdmrtm__RefStationType *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Xdmrtm__RefStationType *)soap_instantiate_Xdmrtm__RefStationType(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Xdmrtm__RefStationType ** p = (Xdmrtm__RefStationType **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType, sizeof(Xdmrtm__RefStationType), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToXdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_PointerToXdmrtm__RefStationType);
	if (soap_out_PointerToXdmrtm__RefStationType(soap, tag?tag:"Xdmrtm:RefStationType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Xdmrtm__RefStationType ** SOAP_FMAC4 soap_get_PointerToXdmrtm__RefStationType(struct soap *soap, Xdmrtm__RefStationType **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToXdmrtm__RefStationType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_Xdmrtm__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Xdmrtm_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_Xdmrtm_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_Xdmrtm_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Xdmrtm_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

} // namespace Xdmrtm


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of XdmrtmC.cpp */
