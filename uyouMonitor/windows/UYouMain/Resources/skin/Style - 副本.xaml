<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
                    xmlns:local="clr-namespace:UYouMain"
                    xmlns:viewModel="clr-namespace:UYouMain.ViewModel">

    <Style x:Key="Style_BackGroundBtn" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Fill="{TemplateBinding Background}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_MoreSetting" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Rectangle Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Name="rect" Fill="{StaticResource moresetting1}"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="rect"  Value="{StaticResource moresetting1}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rect"  Value="{StaticResource moresetting2}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Fill" TargetName="rect" Value="{StaticResource moresetting1}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <!--Slider模板-->
    <Style x:Key="Style_SliderRepeatButton" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="{StaticResource SliderBackground}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_SliderRepeatButton1" TargetType="RepeatButton">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RepeatButton">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_SliderThumb" TargetType="Thumb">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>
                        <Border Background="{StaticResource SliderBackground}"/>
                        <Border Grid.ColumnSpan="2" CornerRadius="4"  Background="{StaticResource SliderThumb}" Width="15">
                            <!--<TextBlock Text="||" HorizontalAlignment="Center" VerticalAlignment="Center"/>-->
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_SliderCustom" TargetType="Slider">
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Slider">
                    <Grid>
                        <!--<Grid.ColumnDefinitions>
                                <ColumnDefinition Width="80"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="40"/>
                            </Grid.ColumnDefinitions>-->
                        <Grid.Effect>
                            <DropShadowEffect BlurRadius="10" ShadowDepth="1" />
                        </Grid.Effect>
                        <!--<Border HorizontalAlignment="Right" BorderBrush="Gray" BorderThickness="1,1,0,1" Background="{StaticResource SliderText}" Width="80" CornerRadius="8,0,0,8"/>-->
                        <!--<Border Grid.Column="2" HorizontalAlignment="Right" BorderBrush="Gray" BorderThickness="0,1,1,1" Background="{StaticResource SliderText}" Width="40" CornerRadius="0,8,8,0"/>-->
                        <!--<TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Tag}" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="14"/>-->
                        <!--<TextBlock Grid.Column="2" Text="{Binding ElementName=PART_Track,Path=Value,StringFormat=\{0:N0\}}" Foreground="White" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="14" DataContext="{Binding}" />-->
                        <Border Grid.Column="1" BorderBrush="Gray" BorderThickness="1" CornerRadius="8,0,0,8">
                            <Track Grid.Column="1" Name="PART_Track">
                                <Track.DecreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource Style_SliderRepeatButton}"
                                Command="Slider.DecreaseLarge"/>
                                </Track.DecreaseRepeatButton>
                                <Track.IncreaseRepeatButton>
                                    <RepeatButton Style="{StaticResource Style_SliderRepeatButton1}"
                                Command="Slider.IncreaseLarge"/>
                                </Track.IncreaseRepeatButton>
                                <Track.Thumb>
                                    <Thumb Style="{StaticResource Style_SliderThumb}"/>
                                </Track.Thumb>
                            </Track>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Style_IOSCheck" TargetType="{x:Type CheckBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Image Name="btnBg" Source="/UYouMain;component/Resources/imgs/black/开.png" ></Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Source"  Value="/UYouMain;component/Resources/imgs/black/开.png" TargetName="btnBg" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Source"  Value="/UYouMain;component/Resources/imgs/black/关.png" TargetName="btnBg" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="Template_CollapseButton" TargetType="{x:Type ToggleButton}">
        <Border CornerRadius="0" Background="{TemplateBinding Background}">
            <ContentPresenter Margin="3" HorizontalAlignment="Center"  VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="False">
                <Setter Property="Background" Value="{StaticResource CollapseButton_ShrinkBrush}"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource CollapseButton_OpenBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="ListBoxWrapTemplate" TargetType="{x:Type ListBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ScrollViewer HorizontalScrollBarVisibility="Hidden">
                        <WrapPanel IsItemsHost="True" Width="{Binding RelativeSource={RelativeSource AncestorType=ScrollViewer}, Path=ActualWidth}"></WrapPanel>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ListBoxCanvasTemplate" TargetType="{x:Type ListBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBox}">
                    <ScrollViewer HorizontalScrollBarVisibility="Hidden">
                        <Canvas x:Name="cavas" Background="Transparent" IsItemsHost="True" Width="{Binding RelativeSource={RelativeSource AncestorType=ScrollViewer}, Path=ActualWidth}"/>
                    </ScrollViewer>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate x:Key="ListBoxItemAddTemplate" DataType="{x:Type viewModel:VedioCtrlModel}">
        <Border Width="200" Height="150" x:Name="thisBorder" CornerRadius="0" Background="#FFCCCCCC" BorderThickness="2">
            <Border.InputBindings>
                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding addCommand}" CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext}"></MouseBinding>
            </Border.InputBindings>
            <Border.BorderBrush>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FF373737" Offset="1"/>
                </LinearGradientBrush>
            </Border.BorderBrush>
            <Grid Margin="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="18"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="18"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Grid.Column="0" Grid.IsSharedSizeScope="True"  BorderThickness="0" Background="Transparent" HorizontalAlignment="Stretch" >
                        <TextBox.Text>
                            <Binding Path="IpString" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <viewModel:IPValidateRule />
                                    <!-- 我们自定义的验证规则 -->
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox Text="{Binding Path=Remark, Mode=TwoWay}" Grid.Column="1" BorderThickness="0" Background="Transparent" HorizontalAlignment="Center" TextAlignment="Left"></TextBox>
                </Grid>
                <Rectangle  Grid.Row="1" x:Name="lightRect" Fill="White"></Rectangle>
                <TextBlock Text="双击新增监控设备" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" x:Name="statusBlock"></TextBlock>
            </Grid>
        </Border>
    </DataTemplate>
    
    <DataTemplate x:Key="ListBoxItemDeviceTemplate" DataType="{x:Type viewModel:VedioCtrlModel}">
        <Border Width="200" Height="150" x:Name="thisBorder" CornerRadius="0" Background="#FFCCCCCC" BorderThickness="2">
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="Loaded">
                    <i:InvokeCommandAction Command="{Binding LoadCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}}" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <Border.InputBindings>
                <MouseBinding MouseAction="LeftClick" Command="{Binding leftMouseClickCommand}"></MouseBinding>
                <MouseBinding MouseAction="RightClick" Command="{Binding rightMouseClickCommand}"></MouseBinding>
                <MouseBinding MouseAction="LeftDoubleClick" Command="{Binding connectCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=DataContext}"></MouseBinding>
            </Border.InputBindings>
            <Border.ContextMenu>
                <ContextMenu Background="Black" Foreground="White" Style="{StaticResource ContextMenuStyle1}">
                    <MenuItem Header="删除" Command="{Binding Path=deleteCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}">
                    </MenuItem>
                </ContextMenu>
            </Border.ContextMenu>
            <Border.BorderBrush>
                <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                    <GradientStop Color="Black" Offset="0"/>
                    <GradientStop Color="#FF373737" Offset="1"/>
                </LinearGradientBrush>
            </Border.BorderBrush>
            <Grid Margin="0">
                <Grid.RowDefinitions>
                    <RowDefinition Height="18"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0" >
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="18"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Grid.Column="0" Grid.IsSharedSizeScope="True"  BorderThickness="0" Background="Transparent" HorizontalAlignment="Stretch" >
                        <TextBox.Text>
                            <Binding Path="IpString" Mode="TwoWay">
                                <Binding.ValidationRules>
                                    <viewModel:IPValidateRule />
                                    <!-- 我们自定义的验证规则 -->
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <TextBox Grid.Column="1" BorderThickness="0" Background="Transparent" HorizontalAlignment="Right" TextAlignment="Left" Text="{Binding Path=Remark, Mode=TwoWay}"></TextBox>
                    <Ellipse Grid.Column="2" Margin="2" Name="thisElipse" Fill="Red"/>
                </Grid>
                <Image  Grid.Row="1" x:Name="img" Stretch="Fill" Source="{Binding Path=ScrShotImg}"></Image>
                <Rectangle  Grid.Row="1" x:Name="lightRect" ></Rectangle>
                <ProgressBar x:Name="progressBar" Grid.Row="1" Background="Transparent" Foreground="#A006A006" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                Value="{Binding Path=ProgressValue, Mode=TwoWay}"  ></ProgressBar>
                <TextBlock Grid.Row="1" Foreground="Red" TextWrapping="Wrap" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" x:Name="statusBlock"
                                       Text="{Binding Path=StatusText, Mode=TwoWay}"></TextBlock>
            </Grid>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsProgressing}" Value="false">
                <Setter Property="Foreground" TargetName="statusBlock" Value="Red"/>
                <Setter Property="Foreground" TargetName="progressBar" Value="#A0A00606"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsProgressing}"  Value="true">
                <Setter Property="Foreground" TargetName="statusBlock" Value="Black"/>
                <Setter Property="Foreground" TargetName="progressBar" Value="#A006A006"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=IsBusy}" Value="false">
                <Setter Property="Fill" TargetName="thisElipse" Value="LightGreen"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsBusy}" Value="True">
                <Setter Property="Fill" TargetName="thisElipse" Value="Red"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsFindDevice}" Value="True">
                <Setter Property="Fill" TargetName="lightRect" Value="Transparent"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsFindDevice}" Value="false">
                <Setter Property="Fill" TargetName="lightRect">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="#FFEE6B6B" Offset="1"/>
                            <GradientStop Color="#FFEBA8A8" Offset="0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Fill" TargetName="thisElipse" Value="Gray"/>
                <Setter Property="Value" TargetName="progressBar" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSelect}" Value="false">
                <Setter Property="BorderBrush" TargetName="thisBorder">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                            <GradientStop Color="Black" Offset="0"/>
                            <GradientStop Color="#FF373737" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderThickness" TargetName="thisBorder" Value="2"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsSelect}" Value="True">
                <Setter Property="BorderBrush" TargetName="thisBorder" Value="Green"/>
                <Setter Property="BorderThickness" TargetName="thisBorder" Value="4"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <DataTemplate x:Key="KeyMapItemCanvasTemplate" DataType="{x:Type viewModel:KeyMapCtrCanvas}">
        <Canvas x:Name="canvasOper"  Canvas.Left="{Binding Path=WindowLeft, Mode=TwoWay}" Canvas.Top="{Binding Path=WindowTop, Mode=TwoWay}" Width="{Binding Path=WindowWidth, Mode=TwoWay}" Height="{Binding Path=WindowHeight, Mode=TwoWay}" Background="Transparent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Focusable="True">
            <!--<Canvas.Style>
                <Style>
                    <Setter Property="Canvas.Left" Value="{Binding Path=WindowLeft, Mode=TwoWay}"/>
                    <Setter Property="Canvas.Top" Value="{Binding Path=WindowTop, Mode=TwoWay}"/>
                </Style>
            </Canvas.Style>-->
            <Image x:Name="imgAim" Source="/UYouMain;component/Resources/imgs/black/准星.png" Canvas.Left="850" Canvas.Top="10" Width="39" Height="38" 
                   ToolTip="拖到射击游戏准星处，保存后点右键打开和关闭瞄准" />
            <Image x:Name="imgFire" Source="/UYouMain;component/Resources/imgs/black/瞄准.png" Canvas.Left="900" Canvas.Top="10" Width="39" Height="38" 
                   ToolTip="拖到射击游戏开枪按钮处，保存后，打开瞄准后左键开枪"></Image>
            <Image x:Name="imgDirection" Source="/UYouMain;component/Resources/imgs/black/四向.png" Canvas.Left="950" Canvas.Top="10" Width="39" Height="38" 
                   ToolTip="拖动到游戏方向控制柄处"/>
            <Button Content="Button" Canvas.Left="1000" Focusable="False" Canvas.Top="10" Width="72" x:Name="btnClear" Height="34">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Image Source="/UYouMain;component/Resources/imgs/black/清除.png" Width="72" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
            <Button Content="Button" Command="{Binding Path=SaveKeyMappingCommand}" Canvas.Left="1100" Focusable="False" Canvas.Top="10" Width="72" x:Name="btnSave" Opacity="1" Height="34">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Image Source="/UYouMain;component/Resources/imgs/black/保存.png" Width="72" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
            <Button Content="Button" Canvas.Left="1200" Focusable="False" Canvas.Top="10" Width="34" x:Name="btnClose" Height="34">
                <Button.Style>
                    <Style TargetType="{x:Type Button}">
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type Button}">
                                    <Image Source="/UYouMain;component/Resources/imgs/black/X.png" Width="34" />
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Button.Style>
            </Button>
        </Canvas>
    </DataTemplate>
    <DataTemplate x:Key="KeyMapItemImageTemplate" DataType="{x:Type viewModel:KeyMapCtrImage}">
        <Image Source="{Binding Path=Source}" Canvas.Left="{Binding Path=WindowLeft}" Canvas.Top="{Binding Path=WindowTop}" Width="{Binding Path=WindowWidth}" Height="{Binding Path=WindowHeight}" >
            <Image.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="删除" Command="{Binding Path=DeleteCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}">
                    </MenuItem>
                </ContextMenu>
            </Image.ContextMenu>
        </Image>
    </DataTemplate>
    <DataTemplate x:Key="KeyMapItemButtonTemplate" DataType="{x:Type viewModel:KeyMapCtrButton}">
        <Canvas>
            <UserControl Canvas.Left="{Binding Path=WindowLeft}" Canvas.Top="{Binding Path=WindowTop}"  Width="{Binding Path=WindowWidth}" Height="{Binding Path=WindowHeight}" ToolTip="设定这个位置的键盘按钮">
                <UserControl.Resources>
                    <viewModel:IntToStringConverter x:Key="its"></viewModel:IntToStringConverter>
                </UserControl.Resources>
                <UserControl.Background>
                    <ImageBrush ImageSource="/UYouMain;component/Resources/imgs/black/虚拟键1.png"></ImageBrush>
                </UserControl.Background>
                <Grid x:Name="grid1">
                    <TextBox Focusable="True" x:Name="textbox" Text="{Binding Path=ValueProperty,Converter={StaticResource its}}" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" Foreground="White" CaretBrush="White" BorderThickness="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent">
                        <TextBox.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="删除" Command="{Binding Path=DeleteCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}">
                                </MenuItem>
                            </ContextMenu>
                        </TextBox.ContextMenu>
                    </TextBox>
                </Grid>
            </UserControl>
        </Canvas>
    </DataTemplate>
    <DataTemplate x:Key="KeyMapItemDirectionTemplate" DataType="{x:Type viewModel:KeyMapCtrDirection}">
        <UserControl Canvas.Left="{Binding Path=WindowLeft}" Canvas.Top="{Binding Path=WindowTop}" Width="{Binding Path=WindowWidth}" Height="{Binding Path=WindowHeight}" Style="{StaticResource ControlResizeStyle}" >
            <UserControl.Resources>
                <viewModel:IntToStringConverter x:Key="its"></viewModel:IntToStringConverter>
            </UserControl.Resources>
            <Grid x:Name="grid1">
                <Grid.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="删除" Command="{Binding Path=DeleteCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource Self}, Path=DataContext}">
                        </MenuItem>
                    </ContextMenu>
                </Grid.ContextMenu>
                <Grid.Background>
                    <ImageBrush ImageSource="/UYouMain;component/Resources/imgs/black/四向2.png"></ImageBrush>
                </Grid.Background>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition />
                    <ColumnDefinition />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                    <RowDefinition></RowDefinition>
                </Grid.RowDefinitions>
                <Grid Grid.Column="1" Grid.Row="0" >
                    <Label x:Name="lblUp" Foreground="White" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" >
                        <TextBlock Text="{Binding Path=Up,Converter={StaticResource its}}"></TextBlock>
                    </Label>
                </Grid>
                <Grid Grid.Column="0" Grid.Row="1">
                    <Label Foreground="White" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                        <TextBlock Text="{Binding Path=Left, Converter={StaticResource its}}"></TextBlock>
                    </Label>
                </Grid>
                <Grid Grid.Column="2" Grid.Row="1">
                    <Label Foreground="White" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                        <TextBlock Text="{Binding Path=Right, Converter={StaticResource its}}"></TextBlock>
                    </Label>
                </Grid>
                <Grid Grid.Row="2" Grid.Column="1">
                    <Label Foreground="White" HorizontalContentAlignment="Center" VerticalContentAlignment="Center">
                        <TextBlock Text="{Binding Path=Down, Converter={StaticResource its}}"></TextBlock>
                    </Label>
                </Grid>
            </Grid>
        </UserControl>
    </DataTemplate>
</ResourceDictionary>