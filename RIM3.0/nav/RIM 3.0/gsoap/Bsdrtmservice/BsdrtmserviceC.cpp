/* BsdrtmserviceC.cpp
   Generated by gSOAP 2.8.2 from Bsdrtmservice.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "BsdrtmserviceH.h"

namespace Bsdrtmservice {

SOAP_SOURCE_STAMP("@(#) BsdrtmserviceC.cpp ver 2.8.2 2015-06-12 03:07:18 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_Bsdrtmservice_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_Bsdrtmservice_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_Bsdrtmservice_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_Bsdrtmservice_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_Bsdrtmservice_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_Bsdrtmservice_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_Bsdrtmservice_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_Bsdrtmservice_StringArray:
		return soap_in_StringArray(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:Rtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity:
		return soap_in_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity:
		return soap_in_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		return soap_in_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64:
		return soap_in_Bsdrtmservice1__OptResultOfInt64(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfInt64");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt:
		return soap_in_Bsdrtmservice1__ArrayOfInt(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfInt");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity:
		return soap_in_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary:
		return soap_in_Bsdrtmservice1__ArrayOfBase64Binary(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfBase64Binary");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte:
		return soap_in_Bsdrtmservice1__OptResultOfArrayOfByte(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfArrayOfByte");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment:
		return soap_in_Bsdrtmservice1__Attachment(soap, NULL, NULL, "Bsdrtmservice1:Attachment");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment:
		return soap_in_Bsdrtmservice1__ArrayOfAttachment(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment:
		return soap_in_Bsdrtmservice1__OptResultOfAttachment(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean:
		return soap_in_Bsdrtmservice1__ArrayOfBoolean(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean:
		return soap_in_Bsdrtmservice1__OptResultOfBoolean(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong:
		return soap_in_Bsdrtmservice1__ArrayOfLong(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfLong");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity:
		return soap_in_Bsdrtmservice1__RtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity:
		return soap_in_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity:
		return soap_in_Bsdrtmservice1__RtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity:
		return soap_in_Bsdrtmservice1__RtmMonTaskLogEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonTaskLogEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity:
		return soap_in_Bsdrtmservice1__RtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity:
		return soap_in_Bsdrtmservice1__VRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:VRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		return soap_in_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan:
		return soap_in_Bsdrtmservice1__TimeSpan(soap, NULL, NULL, "Bsdrtmservice1:TimeSpan");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan:
		return soap_in_Bsdrtmservice1__ArrayOfTimeSpan(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan:
		return soap_in_Bsdrtmservice1__OptResultOfTimeSpan(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity:
		return soap_in_Bsdrtmservice1__RtmDevUseLogEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevUseLogEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity:
		return soap_in_Bsdrtmservice1__RtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity:
		return soap_in_Bsdrtmservice1__vRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity:
		return soap_in_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity:
		return soap_in_Bsdrtmservice1__RtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity:
		return soap_in_Bsdrtmservice1__VRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:VRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity:
		return soap_in_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity:
		return soap_in_Bsdrtmservice1__RtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity:
		return soap_in_Bsdrtmservice1__vRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:vRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		return soap_in_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity:
		return soap_in_Bsdrtmservice1__RtmRncPortEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmRncPortEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity:
		return soap_in_Bsdrtmservice1__vRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		return soap_in_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity:
		return soap_in_Bsdrtmservice1__RtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity:
		return soap_in_Bsdrtmservice1__vRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity:
		return soap_in_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity:
		return soap_in_Bsdrtmservice1__RtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity:
		return soap_in_Bsdrtmservice1__RtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity:
		return soap_in_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity:
		return soap_in_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		return soap_in_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		return soap_in_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity:
		return soap_in_Bsdrtmservice1__RtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity:
		return soap_in_Bsdrtmservice1__RtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity:
		return soap_in_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity:
		return soap_in_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString:
		return soap_in_Bsdrtmservice1__ArrayOfString(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfString");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString:
		return soap_in_Bsdrtmservice1__OptResultOfString(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfString");
	case SOAP_TYPE_Bsdrtmservice_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_Bsdrtmservice_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Bsdrtmservice_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetIEMSExDevsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevs:
		return soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, NULL, NULL, "Bsdrtmservice1:GetIEMSExDevs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, NULL, NULL, "Bsdrtmservice1:GetExtendDevicesByDataTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes:
		return soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, NULL, NULL, "Bsdrtmservice1:GetExtendDevicesByDataTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(soap, NULL, NULL, "Bsdrtmservice1:GetExtendDevicesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevices:
		return soap_in_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, NULL, NULL, "Bsdrtmservice1:GetExtendDevices");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(soap, NULL, NULL, "Bsdrtmservice1:GetExtendDeviceResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevice:
		return soap_in_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, NULL, NULL, "Bsdrtmservice1:GetExtendDevice");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse:
		return soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(soap, NULL, NULL, "Bsdrtmservice1:SetInetllTaskStateResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskState:
		return soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, NULL, NULL, "Bsdrtmservice1:SetInetllTaskState");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(soap, NULL, NULL, "Bsdrtmservice1:AddInetllTaskLogResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLog:
		return soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, NULL, NULL, "Bsdrtmservice1:AddInetllTaskLog");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTaskResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(soap, NULL, NULL, "Bsdrtmservice1:GetIntellTaskResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTask:
		return soap_in_PointerTo_Bsdrtmservice1__GetIntellTask(soap, NULL, NULL, "Bsdrtmservice1:GetIntellTask");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetRuningIntellTaskIdsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds:
		return soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, NULL, NULL, "Bsdrtmservice1:GetRuningIntellTaskIds");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsByVideoResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideo:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsByVideo");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse:
		return soap_in_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(soap, NULL, NULL, "Bsdrtmservice1:SetConfirmedStateResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedState:
		return soap_in_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, NULL, NULL, "Bsdrtmservice1:SetConfirmedState");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		return soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, NULL, NULL, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationno");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetPageMalfunctionAlertsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts:
		return soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, NULL, NULL, "Bsdrtmservice1:GetPageMalfunctionAlerts");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, NULL, NULL, "Bsdrtmservice1:GetAllMalfunctionAlertCountResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, NULL, NULL, "Bsdrtmservice1:GetAllMalfunctionAlertCount");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMalfunctionCodeResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCode:
		return soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, NULL, NULL, "Bsdrtmservice1:GetMalfunctionCode");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(soap, NULL, NULL, "Bsdrtmservice1:AddMalfunctionAlertResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlert:
		return soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, NULL, NULL, "Bsdrtmservice1:AddMalfunctionAlert");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse:
		return soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(soap, NULL, NULL, "Bsdrtmservice1:DelMonReportAttachmentResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachment:
		return soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, NULL, NULL, "Bsdrtmservice1:DelMonReportAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(soap, NULL, NULL, "Bsdrtmservice1:AddMonReportAttachmentResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachment:
		return soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, NULL, NULL, "Bsdrtmservice1:AddMonReportAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportAttachmentContentResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportAttachmentContent");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportAttachmentsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachments:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportAttachments");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse:
		return soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(soap, NULL, NULL, "Bsdrtmservice1:ExistMonReportofFreqResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreq:
		return soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, NULL, NULL, "Bsdrtmservice1:ExistMonReportofFreq");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportFreqTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportFreqTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportsOfFreqsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportsOfFreqs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportOfFreqResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreq:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, NULL, NULL, "Bsdrtmservice1:GetMonReportOfFreq");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportResponse:
		return soap_in_PointerTo_Bsdrtmservice1__DelMonReportResponse(soap, NULL, NULL, "Bsdrtmservice1:DelMonReportResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReport:
		return soap_in_PointerTo_Bsdrtmservice1__DelMonReport(soap, NULL, NULL, "Bsdrtmservice1:DelMonReport");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddMonReportResponse(soap, NULL, NULL, "Bsdrtmservice1:AddMonReportResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReport:
		return soap_in_PointerTo_Bsdrtmservice1__AddMonReport(soap, NULL, NULL, "Bsdrtmservice1:AddMonReport");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetPreDefinedMonitorsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors:
		return soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, NULL, NULL, "Bsdrtmservice1:GetPreDefinedMonitors");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonAlertOfDayResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDay:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, NULL, NULL, "Bsdrtmservice1:GetMonAlertOfDay");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonAlertOfMonthResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, NULL, NULL, "Bsdrtmservice1:GetMonAlertOfMonth");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlertResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddMonAlertResponse(soap, NULL, NULL, "Bsdrtmservice1:AddMonAlertResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlert:
		return soap_in_PointerTo_Bsdrtmservice1__AddMonAlert(soap, NULL, NULL, "Bsdrtmservice1:AddMonAlert");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskStateResponse:
		return soap_in_PointerTo_Bsdrtmservice1__SetTaskStateResponse(soap, NULL, NULL, "Bsdrtmservice1:SetTaskStateResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskState:
		return soap_in_PointerTo_Bsdrtmservice1__SetTaskState(soap, NULL, NULL, "Bsdrtmservice1:SetTaskState");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLogResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddTaskLogResponse(soap, NULL, NULL, "Bsdrtmservice1:AddTaskLogResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLog:
		return soap_in_PointerTo_Bsdrtmservice1__AddTaskLog(soap, NULL, NULL, "Bsdrtmservice1:AddTaskLog");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(soap, NULL, NULL, "Bsdrtmservice1:GetRuningTaskByIdResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskById:
		return soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, NULL, NULL, "Bsdrtmservice1:GetRuningTaskById");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetRuningTaskIdsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIds:
		return soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, NULL, NULL, "Bsdrtmservice1:GetRuningTaskIds");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonstationUseTimeResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTime:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, NULL, NULL, "Bsdrtmservice1:GetMonstationUseTime");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, NULL, NULL, "Bsdrtmservice1:GetMonstationUseTimeOfMonth");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLogResponse:
		return soap_in_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(soap, NULL, NULL, "Bsdrtmservice1:AddDevUseLogResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLog:
		return soap_in_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, NULL, NULL, "Bsdrtmservice1:AddDevUseLog");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAntsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllAntsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetAllAntsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAnts:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllAnts(soap, NULL, NULL, "Bsdrtmservice1:GetAllAnts");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetAnts3Response(soap, NULL, NULL, "Bsdrtmservice1:GetAnts3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3:
		return soap_in_PointerTo_Bsdrtmservice1__GetAnts3(soap, NULL, NULL, "Bsdrtmservice1:GetAnts3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDevFunAnts3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, NULL, NULL, "Bsdrtmservice1:GetDevFunAnts3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevFunAntsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, NULL, NULL, "Bsdrtmservice1:GetDevFunAnts");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDevFuns3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, NULL, NULL, "Bsdrtmservice1:GetDevFuns3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFunsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevFunsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevFuns(soap, NULL, NULL, "Bsdrtmservice1:GetDevFuns");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevices3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDevices3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevices3(soap, NULL, NULL, "Bsdrtmservice1:GetDevices3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevicesResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevicesResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevicesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevices(soap, NULL, NULL, "Bsdrtmservice1:GetDevices");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse:
		return soap_in_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(soap, NULL, NULL, "Bsdrtmservice1:SetRNCPasswordResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPassword:
		return soap_in_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, NULL, NULL, "Bsdrtmservice1:SetRNCPassword");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(soap, NULL, NULL, "Bsdrtmservice1:GetAllRNCs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, NULL, NULL, "Bsdrtmservice1:GetAllRNCs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetAllRNCsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs:
		return soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, NULL, NULL, "Bsdrtmservice1:GetAllRNCs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetRNCs3Response(soap, NULL, NULL, "Bsdrtmservice1:GetRNCs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3:
		return soap_in_PointerTo_Bsdrtmservice1__GetRNCs3(soap, NULL, NULL, "Bsdrtmservice1:GetRNCs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetRNCsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetRNCsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs:
		return soap_in_PointerTo_Bsdrtmservice1__GetRNCs(soap, NULL, NULL, "Bsdrtmservice1:GetRNCs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStations3Response(soap, NULL, NULL, "Bsdrtmservice1:GetMonStations3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStations3(soap, NULL, NULL, "Bsdrtmservice1:GetMonStations3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStations(soap, NULL, NULL, "Bsdrtmservice1:GetMonStations");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(soap, NULL, NULL, "Bsdrtmservice1:GetMonControlCenters3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, NULL, NULL, "Bsdrtmservice1:GetMonControlCenters3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonControlCentersResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, NULL, NULL, "Bsdrtmservice1:GetMonControlCenters");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(soap, NULL, NULL, "Bsdrtmservice1:GetMonOrgs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, NULL, NULL, "Bsdrtmservice1:GetMonOrgs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonOrgsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, NULL, NULL, "Bsdrtmservice1:GetMonOrgs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelFuncParamResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParam:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelFuncParam");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelFuncParams3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelFuncParams3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelFuncParamsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelFuncParams");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModels3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDevModels3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModels3(soap, NULL, NULL, "Bsdrtmservice1:GetDevModels3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModelsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevModelsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevModels(soap, NULL, NULL, "Bsdrtmservice1:GetDevModels");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetFuncs3Response(soap, NULL, NULL, "Bsdrtmservice1:GetFuncs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3:
		return soap_in_PointerTo_Bsdrtmservice1__GetFuncs3(soap, NULL, NULL, "Bsdrtmservice1:GetFuncs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetFuncsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetFuncsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs:
		return soap_in_PointerTo_Bsdrtmservice1__GetFuncs(soap, NULL, NULL, "Bsdrtmservice1:GetFuncs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDevProtocols3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, NULL, NULL, "Bsdrtmservice1:GetDevProtocols3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDevProtocolsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols:
		return soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, NULL, NULL, "Bsdrtmservice1:GetDevProtocols");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(soap, NULL, NULL, "Bsdrtmservice1:GetDeviceTypes3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3:
		return soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, NULL, NULL, "Bsdrtmservice1:GetDeviceTypes3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(soap, NULL, NULL, "Bsdrtmservice1:GetDeviceTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes:
		return soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, NULL, NULL, "Bsdrtmservice1:GetDeviceTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationTypes3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationTypes3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsByUserID3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsByUserID3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsByUserIDResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID:
		return soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, NULL, NULL, "Bsdrtmservice1:GetMonStationsByUserID");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfInt64:
		return soap_in_PointerToBsdrtmservice1__OptResultOfInt64(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfInt64");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfInt:
		return soap_in_PointerToBsdrtmservice1__ArrayOfInt(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfInt");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfArrayOfByte:
		return soap_in_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfArrayOfByte");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfAttachment:
		return soap_in_PointerToBsdrtmservice1__OptResultOfAttachment(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfBoolean:
		return soap_in_PointerToBsdrtmservice1__OptResultOfBoolean(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonTaskLogEntity:
		return soap_in_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonTaskLogEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfTimeSpan:
		return soap_in_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevUseLogEntity:
		return soap_in_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevUseLogEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmAntEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity:
		return soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfString:
		return soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, NULL, NULL, "Bsdrtmservice1:OptResultOfString");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:Rtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:Rtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity:
		return soap_in_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity:
		return soap_in_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfLong:
		return soap_in_PointerToBsdrtmservice1__ArrayOfLong(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfLong");
	case SOAP_TYPE_Bsdrtmservice_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_Bsdrtmservice_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBase64Binary:
		return soap_in_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfBase64Binary");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Attachment:
		return soap_in_PointerToPointerToBsdrtmservice1__Attachment(soap, NULL, NULL, "Bsdrtmservice1:Attachment");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment:
		return soap_in_PointerToBsdrtmservice1__Attachment(soap, NULL, NULL, "Bsdrtmservice1:Attachment");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfAttachment:
		return soap_in_PointerToBsdrtmservice1__ArrayOfAttachment(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBoolean:
		return soap_in_PointerToBsdrtmservice1__ArrayOfBoolean(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_PointerToLONG64:
		return soap_in_PointerToLONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonReportEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity:
		return soap_in_PointerToBsdrtmservice1__RtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity:
		return soap_in_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity:
		return soap_in_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:VRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity:
		return soap_in_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:VRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__TimeSpan:
		return soap_in_PointerToPointerToBsdrtmservice1__TimeSpan(soap, NULL, NULL, "Bsdrtmservice1:TimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan:
		return soap_in_PointerToBsdrtmservice1__TimeSpan(soap, NULL, NULL, "Bsdrtmservice1:TimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfTimeSpan:
		return soap_in_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmAntEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity:
		return soap_in_PointerToBsdrtmservice1__RtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmAntEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity:
		return soap_in_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:VRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity:
		return soap_in_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:VRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDeviceEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity:
		return soap_in_PointerToBsdrtmservice1__RtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity:
		return soap_in_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:vRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity:
		return soap_in_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:vRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity:
		return soap_in_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity:
		return soap_in_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity:
		return soap_in_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity:
		return soap_in_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity:
		return soap_in_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:vRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDevModelEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity:
		return soap_in_PointerToBsdrtmservice1__RtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmTypeEntity:
		return soap_in_PointerToPointerToBsdrtmservice1__RtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity:
		return soap_in_PointerToBsdrtmservice1__RtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:RtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity:
		return soap_in_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfString:
		return soap_in_PointerToBsdrtmservice1__ArrayOfString(soap, NULL, NULL, "Bsdrtmservice1:ArrayOfString");
	case SOAP_TYPE_Bsdrtmservice_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_Bsdrtmservice__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_Bsdrtmservice_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_Bsdrtmservice_StringArray;
			return soap_in_StringArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:Rtm_mon_ems_devEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity;
			return soap_in_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmIntellMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity;
			return soap_in_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:vRtmIntellMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity;
			return soap_in_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity;
			return soap_in_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfInt64"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64;
			return soap_in_Bsdrtmservice1__OptResultOfInt64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfInt"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt;
			return soap_in_Bsdrtmservice1__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMalfunctionAlertEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity;
			return soap_in_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfBase64Binary"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary;
			return soap_in_Bsdrtmservice1__ArrayOfBase64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfArrayOfByte"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte;
			return soap_in_Bsdrtmservice1__OptResultOfArrayOfByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:Attachment"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment;
			return soap_in_Bsdrtmservice1__Attachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfAttachment"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment;
			return soap_in_Bsdrtmservice1__ArrayOfAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfAttachment"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment;
			return soap_in_Bsdrtmservice1__OptResultOfAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfBoolean"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean;
			return soap_in_Bsdrtmservice1__ArrayOfBoolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfBoolean"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean;
			return soap_in_Bsdrtmservice1__OptResultOfBoolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfLong"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong;
			return soap_in_Bsdrtmservice1__ArrayOfLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmMonReportEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmMonReportEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMonReportEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity;
			return soap_in_Bsdrtmservice1__RtmMonReportEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmPredefinedMonitorEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity;
			return soap_in_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmMonAlertEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmMonAlertEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMonAlertEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity;
			return soap_in_Bsdrtmservice1__RtmMonAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMonTaskLogEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity;
			return soap_in_Bsdrtmservice1__RtmMonTaskLogEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity;
			return soap_in_Bsdrtmservice1__RtmMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:VRtmMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity;
			return soap_in_Bsdrtmservice1__VRtmMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfVRtmMonTaskEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity;
			return soap_in_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:TimeSpan"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan;
			return soap_in_Bsdrtmservice1__TimeSpan(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfTimeSpan"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan;
			return soap_in_Bsdrtmservice1__ArrayOfTimeSpan(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfTimeSpan"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan;
			return soap_in_Bsdrtmservice1__OptResultOfTimeSpan(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmDevUseLogEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity;
			return soap_in_Bsdrtmservice1__RtmDevUseLogEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmAntEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity;
			return soap_in_Bsdrtmservice1__RtmAntEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmAntEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmAntEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:vRtmDevAntEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity;
			return soap_in_Bsdrtmservice1__vRtmDevAntEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmDevAntEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfvRtmDevAntEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity;
			return soap_in_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmDevFunEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity;
			return soap_in_Bsdrtmservice1__RtmDevFunEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:VRtmDevFunEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity;
			return soap_in_Bsdrtmservice1__VRtmDevFunEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmDevFunEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfVRtmDevFunEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity;
			return soap_in_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmDeviceEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity;
			return soap_in_Bsdrtmservice1__RtmDeviceEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmDeviceEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmDeviceEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:vRtmRncPort2Entity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity;
			return soap_in_Bsdrtmservice1__vRtmRncPort2Entity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmRncPort2Entity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity;
			return soap_in_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmRncPortEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity;
			return soap_in_Bsdrtmservice1__RtmRncPortEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:vRtmRncPORTEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity;
			return soap_in_Bsdrtmservice1__vRtmRncPORTEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmRncPORTEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity;
			return soap_in_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMonStationEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity;
			return soap_in_Bsdrtmservice1__RtmMonStationEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:vRtmMonStationEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity;
			return soap_in_Bsdrtmservice1__vRtmMonStationEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmMonStationEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfvRtmMonStationEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity;
			return soap_in_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmControlCenterEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity;
			return soap_in_Bsdrtmservice1__RtmControlCenterEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmControlCenterEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmControlCenterEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmMonOrgEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity;
			return soap_in_Bsdrtmservice1__RtmMonOrgEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmMonOrgEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmMonOrgEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmDevModelFunParamEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity;
			return soap_in_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:vRtmDevModelFunParamEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity;
			return soap_in_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity;
			return soap_in_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity;
			return soap_in_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmDevModelEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity;
			return soap_in_Bsdrtmservice1__RtmDevModelEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmDevModelEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmDevModelEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:RtmTypeEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity;
			return soap_in_Bsdrtmservice1__RtmTypeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfRtmTypeEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity;
			return soap_in_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity;
			return soap_in_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ArrayOfString"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString;
			return soap_in_Bsdrtmservice1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:OptResultOfString"))
		{	*type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString;
			return soap_in_Bsdrtmservice1__OptResultOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_Bsdrtmservice_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_Bsdrtmservice_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_Bsdrtmservice_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_Bsdrtmservice_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_Bsdrtmservice_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_Bsdrtmservice_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_Bsdrtmservice_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_Bsdrtmservice_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_Bsdrtmservice_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_Bsdrtmservice_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_Bsdrtmservice__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_Bsdrtmservice_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetIEMSExDevsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse;
			return soap_in__Bsdrtmservice1__GetIEMSExDevsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetIEMSExDevs"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs;
			return soap_in__Bsdrtmservice1__GetIEMSExDevs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetExtendDevicesByDataTypesResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse;
			return soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetExtendDevicesByDataTypes"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes;
			return soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetExtendDevicesResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse;
			return soap_in__Bsdrtmservice1__GetExtendDevicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetExtendDevices"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices;
			return soap_in__Bsdrtmservice1__GetExtendDevices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetExtendDeviceResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse;
			return soap_in__Bsdrtmservice1__GetExtendDeviceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetExtendDevice"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice;
			return soap_in__Bsdrtmservice1__GetExtendDevice(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetInetllTaskStateResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse;
			return soap_in__Bsdrtmservice1__SetInetllTaskStateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetInetllTaskState"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState;
			return soap_in__Bsdrtmservice1__SetInetllTaskState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddInetllTaskLogResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse;
			return soap_in__Bsdrtmservice1__AddInetllTaskLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddInetllTaskLog"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog;
			return soap_in__Bsdrtmservice1__AddInetllTaskLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetIntellTaskResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse;
			return soap_in__Bsdrtmservice1__GetIntellTaskResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetIntellTask"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask;
			return soap_in__Bsdrtmservice1__GetIntellTask(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRuningIntellTaskIdsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse;
			return soap_in__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRuningIntellTaskIds"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds;
			return soap_in__Bsdrtmservice1__GetRuningIntellTaskIds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsByVideoResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse;
			return soap_in__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsByVideo"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo;
			return soap_in__Bsdrtmservice1__GetMonStationsByVideo(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetConfirmedStateResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse;
			return soap_in__Bsdrtmservice1__SetConfirmedStateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetConfirmedState"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState;
			return soap_in__Bsdrtmservice1__SetConfirmedState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse;
			return soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationno"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno;
			return soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetPageMalfunctionAlertsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse;
			return soap_in__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetPageMalfunctionAlerts"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts;
			return soap_in__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllMalfunctionAlertCountResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse;
			return soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllMalfunctionAlertCount"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount;
			return soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMalfunctionCodeResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse;
			return soap_in__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMalfunctionCode"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode;
			return soap_in__Bsdrtmservice1__GetMalfunctionCode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMalfunctionAlertResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse;
			return soap_in__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMalfunctionAlert"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert;
			return soap_in__Bsdrtmservice1__AddMalfunctionAlert(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:DelMonReportAttachmentResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse;
			return soap_in__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:DelMonReportAttachment"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment;
			return soap_in__Bsdrtmservice1__DelMonReportAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMonReportAttachmentResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse;
			return soap_in__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMonReportAttachment"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment;
			return soap_in__Bsdrtmservice1__AddMonReportAttachment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportAttachmentContentResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse;
			return soap_in__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportAttachmentContent"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent;
			return soap_in__Bsdrtmservice1__GetMonReportAttachmentContent(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportAttachmentsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse;
			return soap_in__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportAttachments"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments;
			return soap_in__Bsdrtmservice1__GetMonReportAttachments(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ExistMonReportofFreqResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse;
			return soap_in__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:ExistMonReportofFreq"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq;
			return soap_in__Bsdrtmservice1__ExistMonReportofFreq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportFreqTypesResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse;
			return soap_in__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportFreqTypes"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes;
			return soap_in__Bsdrtmservice1__GetMonReportFreqTypes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportsOfFreqsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse;
			return soap_in__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportsOfFreqs"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs;
			return soap_in__Bsdrtmservice1__GetMonReportsOfFreqs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportOfFreqResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse;
			return soap_in__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonReportOfFreq"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq;
			return soap_in__Bsdrtmservice1__GetMonReportOfFreq(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:DelMonReportResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse;
			return soap_in__Bsdrtmservice1__DelMonReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:DelMonReport"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport;
			return soap_in__Bsdrtmservice1__DelMonReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMonReportResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse;
			return soap_in__Bsdrtmservice1__AddMonReportResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMonReport"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport;
			return soap_in__Bsdrtmservice1__AddMonReport(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetPreDefinedMonitorsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse;
			return soap_in__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetPreDefinedMonitors"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors;
			return soap_in__Bsdrtmservice1__GetPreDefinedMonitors(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonAlertOfDayResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse;
			return soap_in__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonAlertOfDay"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay;
			return soap_in__Bsdrtmservice1__GetMonAlertOfDay(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonAlertOfMonthResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse;
			return soap_in__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonAlertOfMonth"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth;
			return soap_in__Bsdrtmservice1__GetMonAlertOfMonth(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMonAlertResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse;
			return soap_in__Bsdrtmservice1__AddMonAlertResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddMonAlert"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert;
			return soap_in__Bsdrtmservice1__AddMonAlert(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetTaskStateResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse;
			return soap_in__Bsdrtmservice1__SetTaskStateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetTaskState"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState;
			return soap_in__Bsdrtmservice1__SetTaskState(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddTaskLogResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse;
			return soap_in__Bsdrtmservice1__AddTaskLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddTaskLog"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog;
			return soap_in__Bsdrtmservice1__AddTaskLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRuningTaskByIdResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse;
			return soap_in__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRuningTaskById"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById;
			return soap_in__Bsdrtmservice1__GetRuningTaskById(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRuningTaskIdsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse;
			return soap_in__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRuningTaskIds"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds;
			return soap_in__Bsdrtmservice1__GetRuningTaskIds(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonstationUseTimeResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse;
			return soap_in__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonstationUseTime"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime;
			return soap_in__Bsdrtmservice1__GetMonstationUseTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse;
			return soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonstationUseTimeOfMonth"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth;
			return soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddDevUseLogResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse;
			return soap_in__Bsdrtmservice1__AddDevUseLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:AddDevUseLog"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog;
			return soap_in__Bsdrtmservice1__AddDevUseLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllAntsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse;
			return soap_in__Bsdrtmservice1__GetAllAntsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllAnts"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts;
			return soap_in__Bsdrtmservice1__GetAllAnts(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAnts3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response;
			return soap_in__Bsdrtmservice1__GetAnts3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAnts3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3;
			return soap_in__Bsdrtmservice1__GetAnts3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFunAnts3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response;
			return soap_in__Bsdrtmservice1__GetDevFunAnts3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFunAnts3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3;
			return soap_in__Bsdrtmservice1__GetDevFunAnts3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFunAntsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse;
			return soap_in__Bsdrtmservice1__GetDevFunAntsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFunAnts"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts;
			return soap_in__Bsdrtmservice1__GetDevFunAnts(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFuns3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response;
			return soap_in__Bsdrtmservice1__GetDevFuns3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFuns3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3;
			return soap_in__Bsdrtmservice1__GetDevFuns3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFunsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse;
			return soap_in__Bsdrtmservice1__GetDevFunsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevFuns"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns;
			return soap_in__Bsdrtmservice1__GetDevFuns(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevices3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response;
			return soap_in__Bsdrtmservice1__GetDevices3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevices3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3;
			return soap_in__Bsdrtmservice1__GetDevices3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevicesResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse;
			return soap_in__Bsdrtmservice1__GetDevicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevices"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices;
			return soap_in__Bsdrtmservice1__GetDevices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetRNCPasswordResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse;
			return soap_in__Bsdrtmservice1__SetRNCPasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:SetRNCPassword"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword;
			return soap_in__Bsdrtmservice1__SetRNCPassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllRNCs3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response;
			return soap_in__Bsdrtmservice1__GetAllRNCs3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllRNCs3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3;
			return soap_in__Bsdrtmservice1__GetAllRNCs3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllRNCsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse;
			return soap_in__Bsdrtmservice1__GetAllRNCsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetAllRNCs"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs;
			return soap_in__Bsdrtmservice1__GetAllRNCs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRNCs3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response;
			return soap_in__Bsdrtmservice1__GetRNCs3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRNCs3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3;
			return soap_in__Bsdrtmservice1__GetRNCs3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRNCsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse;
			return soap_in__Bsdrtmservice1__GetRNCsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetRNCs"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs;
			return soap_in__Bsdrtmservice1__GetRNCs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStations3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response;
			return soap_in__Bsdrtmservice1__GetMonStations3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStations3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3;
			return soap_in__Bsdrtmservice1__GetMonStations3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse;
			return soap_in__Bsdrtmservice1__GetMonStationsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStations"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations;
			return soap_in__Bsdrtmservice1__GetMonStations(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonControlCenters3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response;
			return soap_in__Bsdrtmservice1__GetMonControlCenters3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonControlCenters3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3;
			return soap_in__Bsdrtmservice1__GetMonControlCenters3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonControlCentersResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse;
			return soap_in__Bsdrtmservice1__GetMonControlCentersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonControlCenters"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters;
			return soap_in__Bsdrtmservice1__GetMonControlCenters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonOrgs3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response;
			return soap_in__Bsdrtmservice1__GetMonOrgs3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonOrgs3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3;
			return soap_in__Bsdrtmservice1__GetMonOrgs3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonOrgsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse;
			return soap_in__Bsdrtmservice1__GetMonOrgsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonOrgs"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs;
			return soap_in__Bsdrtmservice1__GetMonOrgs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelFuncParamResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse;
			return soap_in__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelFuncParam"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam;
			return soap_in__Bsdrtmservice1__GetDevModelFuncParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelFuncParams3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response;
			return soap_in__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelFuncParams3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3;
			return soap_in__Bsdrtmservice1__GetDevModelFuncParams3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelFuncParamsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse;
			return soap_in__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelFuncParams"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams;
			return soap_in__Bsdrtmservice1__GetDevModelFuncParams(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModels3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response;
			return soap_in__Bsdrtmservice1__GetDevModels3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModels3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3;
			return soap_in__Bsdrtmservice1__GetDevModels3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModelsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse;
			return soap_in__Bsdrtmservice1__GetDevModelsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevModels"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels;
			return soap_in__Bsdrtmservice1__GetDevModels(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetFuncs3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response;
			return soap_in__Bsdrtmservice1__GetFuncs3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetFuncs3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3;
			return soap_in__Bsdrtmservice1__GetFuncs3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetFuncsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse;
			return soap_in__Bsdrtmservice1__GetFuncsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetFuncs"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs;
			return soap_in__Bsdrtmservice1__GetFuncs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevProtocols3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response;
			return soap_in__Bsdrtmservice1__GetDevProtocols3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevProtocols3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3;
			return soap_in__Bsdrtmservice1__GetDevProtocols3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevProtocolsResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse;
			return soap_in__Bsdrtmservice1__GetDevProtocolsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDevProtocols"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols;
			return soap_in__Bsdrtmservice1__GetDevProtocols(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDeviceTypes3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response;
			return soap_in__Bsdrtmservice1__GetDeviceTypes3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDeviceTypes3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3;
			return soap_in__Bsdrtmservice1__GetDeviceTypes3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDeviceTypesResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse;
			return soap_in__Bsdrtmservice1__GetDeviceTypesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetDeviceTypes"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes;
			return soap_in__Bsdrtmservice1__GetDeviceTypes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationTypes3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response;
			return soap_in__Bsdrtmservice1__GetMonStationTypes3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationTypes3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3;
			return soap_in__Bsdrtmservice1__GetMonStationTypes3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationTypesResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse;
			return soap_in__Bsdrtmservice1__GetMonStationTypesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationTypes"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes;
			return soap_in__Bsdrtmservice1__GetMonStationTypes(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsByUserID3Response"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response;
			return soap_in__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsByUserID3"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3;
			return soap_in__Bsdrtmservice1__GetMonStationsByUserID3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsByUserIDResponse"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse;
			return soap_in__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdrtmservice1:GetMonStationsByUserID"))
		{	*type = SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID;
			return soap_in__Bsdrtmservice1__GetMonStationsByUserID(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_Bsdrtmservice_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_Bsdrtmservice_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_Bsdrtmservice_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_Bsdrtmservice_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_Bsdrtmservice_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_Bsdrtmservice_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_Bsdrtmservice_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_Bsdrtmservice_StringArray:
		return ((StringArray *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse:
		return ((_Bsdrtmservice1__GetIEMSExDevsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetIEMSExDevsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs:
		return ((_Bsdrtmservice1__GetIEMSExDevs *)ptr)->soap_out(soap, "Bsdrtmservice1:GetIEMSExDevs", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		return ((_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypesResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes:
		return ((_Bsdrtmservice1__GetExtendDevicesByDataTypes *)ptr)->soap_out(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypes", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse:
		return ((_Bsdrtmservice1__GetExtendDevicesResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetExtendDevicesResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices:
		return ((_Bsdrtmservice1__GetExtendDevices *)ptr)->soap_out(soap, "Bsdrtmservice1:GetExtendDevices", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse:
		return ((_Bsdrtmservice1__GetExtendDeviceResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetExtendDeviceResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice:
		return ((_Bsdrtmservice1__GetExtendDevice *)ptr)->soap_out(soap, "Bsdrtmservice1:GetExtendDevice", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse:
		return ((_Bsdrtmservice1__SetInetllTaskStateResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:SetInetllTaskStateResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState:
		return ((_Bsdrtmservice1__SetInetllTaskState *)ptr)->soap_out(soap, "Bsdrtmservice1:SetInetllTaskState", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse:
		return ((_Bsdrtmservice1__AddInetllTaskLogResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddInetllTaskLogResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog:
		return ((_Bsdrtmservice1__AddInetllTaskLog *)ptr)->soap_out(soap, "Bsdrtmservice1:AddInetllTaskLog", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse:
		return ((_Bsdrtmservice1__GetIntellTaskResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetIntellTaskResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask:
		return ((_Bsdrtmservice1__GetIntellTask *)ptr)->soap_out(soap, "Bsdrtmservice1:GetIntellTask", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		return ((_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRuningIntellTaskIdsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds:
		return ((_Bsdrtmservice1__GetRuningIntellTaskIds *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRuningIntellTaskIds", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse:
		return ((_Bsdrtmservice1__GetMonStationsByVideoResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsByVideoResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo:
		return ((_Bsdrtmservice1__GetMonStationsByVideo *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsByVideo", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse:
		return ((_Bsdrtmservice1__SetConfirmedStateResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:SetConfirmedStateResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState:
		return ((_Bsdrtmservice1__SetConfirmedState *)ptr)->soap_out(soap, "Bsdrtmservice1:SetConfirmedState", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		return ((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		return ((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationno", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		return ((_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetPageMalfunctionAlertsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts:
		return ((_Bsdrtmservice1__GetPageMalfunctionAlerts *)ptr)->soap_out(soap, "Bsdrtmservice1:GetPageMalfunctionAlerts", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		return ((_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCountResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount:
		return ((_Bsdrtmservice1__GetAllMalfunctionAlertCount *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCount", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse:
		return ((_Bsdrtmservice1__GetMalfunctionCodeResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMalfunctionCodeResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode:
		return ((_Bsdrtmservice1__GetMalfunctionCode *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMalfunctionCode", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse:
		return ((_Bsdrtmservice1__AddMalfunctionAlertResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMalfunctionAlertResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert:
		return ((_Bsdrtmservice1__AddMalfunctionAlert *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMalfunctionAlert", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse:
		return ((_Bsdrtmservice1__DelMonReportAttachmentResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:DelMonReportAttachmentResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment:
		return ((_Bsdrtmservice1__DelMonReportAttachment *)ptr)->soap_out(soap, "Bsdrtmservice1:DelMonReportAttachment", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse:
		return ((_Bsdrtmservice1__AddMonReportAttachmentResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMonReportAttachmentResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment:
		return ((_Bsdrtmservice1__AddMonReportAttachment *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMonReportAttachment", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		return ((_Bsdrtmservice1__GetMonReportAttachmentContentResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportAttachmentContentResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent:
		return ((_Bsdrtmservice1__GetMonReportAttachmentContent *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportAttachmentContent", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse:
		return ((_Bsdrtmservice1__GetMonReportAttachmentsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportAttachmentsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments:
		return ((_Bsdrtmservice1__GetMonReportAttachments *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportAttachments", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse:
		return ((_Bsdrtmservice1__ExistMonReportofFreqResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:ExistMonReportofFreqResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq:
		return ((_Bsdrtmservice1__ExistMonReportofFreq *)ptr)->soap_out(soap, "Bsdrtmservice1:ExistMonReportofFreq", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse:
		return ((_Bsdrtmservice1__GetMonReportFreqTypesResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportFreqTypesResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes:
		return ((_Bsdrtmservice1__GetMonReportFreqTypes *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportFreqTypes", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		return ((_Bsdrtmservice1__GetMonReportsOfFreqsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportsOfFreqsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs:
		return ((_Bsdrtmservice1__GetMonReportsOfFreqs *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportsOfFreqs", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse:
		return ((_Bsdrtmservice1__GetMonReportOfFreqResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportOfFreqResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq:
		return ((_Bsdrtmservice1__GetMonReportOfFreq *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonReportOfFreq", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse:
		return ((_Bsdrtmservice1__DelMonReportResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:DelMonReportResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport:
		return ((_Bsdrtmservice1__DelMonReport *)ptr)->soap_out(soap, "Bsdrtmservice1:DelMonReport", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse:
		return ((_Bsdrtmservice1__AddMonReportResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMonReportResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport:
		return ((_Bsdrtmservice1__AddMonReport *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMonReport", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		return ((_Bsdrtmservice1__GetPreDefinedMonitorsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetPreDefinedMonitorsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors:
		return ((_Bsdrtmservice1__GetPreDefinedMonitors *)ptr)->soap_out(soap, "Bsdrtmservice1:GetPreDefinedMonitors", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse:
		return ((_Bsdrtmservice1__GetMonAlertOfDayResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonAlertOfDayResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay:
		return ((_Bsdrtmservice1__GetMonAlertOfDay *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonAlertOfDay", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse:
		return ((_Bsdrtmservice1__GetMonAlertOfMonthResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonAlertOfMonthResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth:
		return ((_Bsdrtmservice1__GetMonAlertOfMonth *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonAlertOfMonth", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse:
		return ((_Bsdrtmservice1__AddMonAlertResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMonAlertResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert:
		return ((_Bsdrtmservice1__AddMonAlert *)ptr)->soap_out(soap, "Bsdrtmservice1:AddMonAlert", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse:
		return ((_Bsdrtmservice1__SetTaskStateResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:SetTaskStateResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState:
		return ((_Bsdrtmservice1__SetTaskState *)ptr)->soap_out(soap, "Bsdrtmservice1:SetTaskState", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse:
		return ((_Bsdrtmservice1__AddTaskLogResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddTaskLogResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog:
		return ((_Bsdrtmservice1__AddTaskLog *)ptr)->soap_out(soap, "Bsdrtmservice1:AddTaskLog", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse:
		return ((_Bsdrtmservice1__GetRuningTaskByIdResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRuningTaskByIdResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById:
		return ((_Bsdrtmservice1__GetRuningTaskById *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRuningTaskById", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse:
		return ((_Bsdrtmservice1__GetRuningTaskIdsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRuningTaskIdsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds:
		return ((_Bsdrtmservice1__GetRuningTaskIds *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRuningTaskIds", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse:
		return ((_Bsdrtmservice1__GetMonstationUseTimeResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonstationUseTimeResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime:
		return ((_Bsdrtmservice1__GetMonstationUseTime *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonstationUseTime", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		return ((_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		return ((_Bsdrtmservice1__GetMonstationUseTimeOfMonth *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonth", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse:
		return ((_Bsdrtmservice1__AddDevUseLogResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:AddDevUseLogResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog:
		return ((_Bsdrtmservice1__AddDevUseLog *)ptr)->soap_out(soap, "Bsdrtmservice1:AddDevUseLog", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse:
		return ((_Bsdrtmservice1__GetAllAntsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllAntsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts:
		return ((_Bsdrtmservice1__GetAllAnts *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllAnts", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response:
		return ((_Bsdrtmservice1__GetAnts3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAnts3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3:
		return ((_Bsdrtmservice1__GetAnts3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAnts3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response:
		return ((_Bsdrtmservice1__GetDevFunAnts3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFunAnts3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3:
		return ((_Bsdrtmservice1__GetDevFunAnts3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFunAnts3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse:
		return ((_Bsdrtmservice1__GetDevFunAntsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFunAntsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts:
		return ((_Bsdrtmservice1__GetDevFunAnts *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFunAnts", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response:
		return ((_Bsdrtmservice1__GetDevFuns3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFuns3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3:
		return ((_Bsdrtmservice1__GetDevFuns3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFuns3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse:
		return ((_Bsdrtmservice1__GetDevFunsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFunsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns:
		return ((_Bsdrtmservice1__GetDevFuns *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevFuns", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response:
		return ((_Bsdrtmservice1__GetDevices3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevices3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3:
		return ((_Bsdrtmservice1__GetDevices3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevices3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse:
		return ((_Bsdrtmservice1__GetDevicesResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevicesResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices:
		return ((_Bsdrtmservice1__GetDevices *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevices", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse:
		return ((_Bsdrtmservice1__SetRNCPasswordResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:SetRNCPasswordResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword:
		return ((_Bsdrtmservice1__SetRNCPassword *)ptr)->soap_out(soap, "Bsdrtmservice1:SetRNCPassword", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response:
		return ((_Bsdrtmservice1__GetAllRNCs3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllRNCs3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3:
		return ((_Bsdrtmservice1__GetAllRNCs3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllRNCs3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse:
		return ((_Bsdrtmservice1__GetAllRNCsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllRNCsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs:
		return ((_Bsdrtmservice1__GetAllRNCs *)ptr)->soap_out(soap, "Bsdrtmservice1:GetAllRNCs", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response:
		return ((_Bsdrtmservice1__GetRNCs3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRNCs3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3:
		return ((_Bsdrtmservice1__GetRNCs3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRNCs3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse:
		return ((_Bsdrtmservice1__GetRNCsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRNCsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs:
		return ((_Bsdrtmservice1__GetRNCs *)ptr)->soap_out(soap, "Bsdrtmservice1:GetRNCs", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response:
		return ((_Bsdrtmservice1__GetMonStations3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStations3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3:
		return ((_Bsdrtmservice1__GetMonStations3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStations3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse:
		return ((_Bsdrtmservice1__GetMonStationsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations:
		return ((_Bsdrtmservice1__GetMonStations *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStations", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response:
		return ((_Bsdrtmservice1__GetMonControlCenters3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonControlCenters3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3:
		return ((_Bsdrtmservice1__GetMonControlCenters3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonControlCenters3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse:
		return ((_Bsdrtmservice1__GetMonControlCentersResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonControlCentersResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters:
		return ((_Bsdrtmservice1__GetMonControlCenters *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonControlCenters", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response:
		return ((_Bsdrtmservice1__GetMonOrgs3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonOrgs3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3:
		return ((_Bsdrtmservice1__GetMonOrgs3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonOrgs3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse:
		return ((_Bsdrtmservice1__GetMonOrgsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonOrgsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs:
		return ((_Bsdrtmservice1__GetMonOrgs *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonOrgs", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse:
		return ((_Bsdrtmservice1__GetDevModelFuncParamResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelFuncParamResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam:
		return ((_Bsdrtmservice1__GetDevModelFuncParam *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelFuncParam", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response:
		return ((_Bsdrtmservice1__GetDevModelFuncParams3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelFuncParams3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3:
		return ((_Bsdrtmservice1__GetDevModelFuncParams3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelFuncParams3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse:
		return ((_Bsdrtmservice1__GetDevModelFuncParamsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelFuncParamsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams:
		return ((_Bsdrtmservice1__GetDevModelFuncParams *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelFuncParams", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response:
		return ((_Bsdrtmservice1__GetDevModels3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModels3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3:
		return ((_Bsdrtmservice1__GetDevModels3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModels3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse:
		return ((_Bsdrtmservice1__GetDevModelsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModelsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels:
		return ((_Bsdrtmservice1__GetDevModels *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevModels", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response:
		return ((_Bsdrtmservice1__GetFuncs3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetFuncs3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3:
		return ((_Bsdrtmservice1__GetFuncs3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetFuncs3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse:
		return ((_Bsdrtmservice1__GetFuncsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetFuncsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs:
		return ((_Bsdrtmservice1__GetFuncs *)ptr)->soap_out(soap, "Bsdrtmservice1:GetFuncs", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response:
		return ((_Bsdrtmservice1__GetDevProtocols3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevProtocols3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3:
		return ((_Bsdrtmservice1__GetDevProtocols3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevProtocols3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse:
		return ((_Bsdrtmservice1__GetDevProtocolsResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevProtocolsResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols:
		return ((_Bsdrtmservice1__GetDevProtocols *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDevProtocols", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response:
		return ((_Bsdrtmservice1__GetDeviceTypes3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDeviceTypes3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3:
		return ((_Bsdrtmservice1__GetDeviceTypes3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDeviceTypes3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse:
		return ((_Bsdrtmservice1__GetDeviceTypesResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDeviceTypesResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes:
		return ((_Bsdrtmservice1__GetDeviceTypes *)ptr)->soap_out(soap, "Bsdrtmservice1:GetDeviceTypes", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response:
		return ((_Bsdrtmservice1__GetMonStationTypes3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationTypes3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3:
		return ((_Bsdrtmservice1__GetMonStationTypes3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationTypes3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse:
		return ((_Bsdrtmservice1__GetMonStationTypesResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationTypesResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes:
		return ((_Bsdrtmservice1__GetMonStationTypes *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationTypes", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response:
		return ((_Bsdrtmservice1__GetMonStationsByUserID3Response *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsByUserID3Response", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3:
		return ((_Bsdrtmservice1__GetMonStationsByUserID3 *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsByUserID3", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse:
		return ((_Bsdrtmservice1__GetMonStationsByUserIDResponse *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsByUserIDResponse", id, NULL);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID:
		return ((_Bsdrtmservice1__GetMonStationsByUserID *)ptr)->soap_out(soap, "Bsdrtmservice1:GetMonStationsByUserID", id, NULL);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return ((Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:Rtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return ((Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return ((Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity:
		return ((Bsdrtmservice1__RtmIntellMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity:
		return ((Bsdrtmservice1__vRtmIntellMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:vRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		return ((Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		return ((Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		return ((Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64:
		return ((Bsdrtmservice1__OptResultOfInt64 *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfInt64");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt:
		return ((Bsdrtmservice1__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfInt");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity:
		return ((Bsdrtmservice1__RtmMalfunctionAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary:
		return ((Bsdrtmservice1__ArrayOfBase64Binary *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfBase64Binary");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte:
		return ((Bsdrtmservice1__OptResultOfArrayOfByte *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfArrayOfByte");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment:
		return ((Bsdrtmservice1__Attachment *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:Attachment");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment:
		return ((Bsdrtmservice1__ArrayOfAttachment *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment:
		return ((Bsdrtmservice1__OptResultOfAttachment *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean:
		return ((Bsdrtmservice1__ArrayOfBoolean *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean:
		return ((Bsdrtmservice1__OptResultOfBoolean *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong:
		return ((Bsdrtmservice1__ArrayOfLong *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfLong");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity:
		return ((Bsdrtmservice1__ArrayOfRtmMonReportEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity:
		return ((Bsdrtmservice1__OptResultOfRtmMonReportEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity:
		return ((Bsdrtmservice1__RtmMonReportEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity:
		return ((Bsdrtmservice1__RtmPredefinedMonitorEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		return ((Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		return ((Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity:
		return ((Bsdrtmservice1__ArrayOfRtmMonAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity:
		return ((Bsdrtmservice1__OptResultOfRtmMonAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity:
		return ((Bsdrtmservice1__RtmMonAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity:
		return ((Bsdrtmservice1__RtmMonTaskLogEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMonTaskLogEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity:
		return ((Bsdrtmservice1__RtmMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity:
		return ((Bsdrtmservice1__VRtmMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:VRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		return ((Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan:
		return ((Bsdrtmservice1__TimeSpan *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:TimeSpan");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan:
		return ((Bsdrtmservice1__ArrayOfTimeSpan *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan:
		return ((Bsdrtmservice1__OptResultOfTimeSpan *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity:
		return ((Bsdrtmservice1__RtmDevUseLogEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmDevUseLogEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity:
		return ((Bsdrtmservice1__RtmAntEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity:
		return ((Bsdrtmservice1__ArrayOfRtmAntEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity:
		return ((Bsdrtmservice1__OptResultOfRtmAntEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity:
		return ((Bsdrtmservice1__vRtmDevAntEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:vRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmDevAntEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity:
		return ((Bsdrtmservice1__OptResultOfvRtmDevAntEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfvRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity:
		return ((Bsdrtmservice1__RtmDevFunEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity:
		return ((Bsdrtmservice1__VRtmDevFunEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:VRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmDevFunEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity:
		return ((Bsdrtmservice1__OptResultOfVRtmDevFunEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity:
		return ((Bsdrtmservice1__RtmDeviceEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity:
		return ((Bsdrtmservice1__ArrayOfRtmDeviceEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity:
		return ((Bsdrtmservice1__OptResultOfRtmDeviceEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity:
		return ((Bsdrtmservice1__vRtmRncPort2Entity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:vRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		return ((Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		return ((Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity:
		return ((Bsdrtmservice1__RtmRncPortEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmRncPortEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity:
		return ((Bsdrtmservice1__vRtmRncPORTEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:vRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		return ((Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity:
		return ((Bsdrtmservice1__RtmMonStationEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity:
		return ((Bsdrtmservice1__vRtmMonStationEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:vRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmMonStationEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity:
		return ((Bsdrtmservice1__OptResultOfvRtmMonStationEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfvRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity:
		return ((Bsdrtmservice1__RtmControlCenterEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity:
		return ((Bsdrtmservice1__ArrayOfRtmControlCenterEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity:
		return ((Bsdrtmservice1__OptResultOfRtmControlCenterEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity:
		return ((Bsdrtmservice1__RtmMonOrgEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity:
		return ((Bsdrtmservice1__ArrayOfRtmMonOrgEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity:
		return ((Bsdrtmservice1__OptResultOfRtmMonOrgEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity:
		return ((Bsdrtmservice1__RtmDevModelFunParamEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity:
		return ((Bsdrtmservice1__vRtmDevModelFunParamEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:vRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		return ((Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		return ((Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity:
		return ((Bsdrtmservice1__RtmDevModelEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity:
		return ((Bsdrtmservice1__ArrayOfRtmDevModelEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity:
		return ((Bsdrtmservice1__OptResultOfRtmDevModelEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity:
		return ((Bsdrtmservice1__RtmTypeEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:RtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity:
		return ((Bsdrtmservice1__ArrayOfRtmTypeEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity:
		return ((Bsdrtmservice1__OptResultOfRtmTypeEntity *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString:
		return ((Bsdrtmservice1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:ArrayOfString");
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString:
		return ((Bsdrtmservice1__OptResultOfString *)ptr)->soap_out(soap, tag, id, "Bsdrtmservice1:OptResultOfString");
	case SOAP_TYPE_Bsdrtmservice_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_Bsdrtmservice_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_Bsdrtmservice_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(soap, tag, id, (_Bsdrtmservice1__GetIEMSExDevsResponse *const*)ptr, "Bsdrtmservice1:GetIEMSExDevsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevs:
		return soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, tag, id, (_Bsdrtmservice1__GetIEMSExDevs *const*)ptr, "Bsdrtmservice1:GetIEMSExDevs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, tag, id, (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *const*)ptr, "Bsdrtmservice1:GetExtendDevicesByDataTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes:
		return soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag, id, (_Bsdrtmservice1__GetExtendDevicesByDataTypes *const*)ptr, "Bsdrtmservice1:GetExtendDevicesByDataTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(soap, tag, id, (_Bsdrtmservice1__GetExtendDevicesResponse *const*)ptr, "Bsdrtmservice1:GetExtendDevicesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevices:
		return soap_out_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, tag, id, (_Bsdrtmservice1__GetExtendDevices *const*)ptr, "Bsdrtmservice1:GetExtendDevices");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(soap, tag, id, (_Bsdrtmservice1__GetExtendDeviceResponse *const*)ptr, "Bsdrtmservice1:GetExtendDeviceResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevice:
		return soap_out_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, tag, id, (_Bsdrtmservice1__GetExtendDevice *const*)ptr, "Bsdrtmservice1:GetExtendDevice");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse:
		return soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(soap, tag, id, (_Bsdrtmservice1__SetInetllTaskStateResponse *const*)ptr, "Bsdrtmservice1:SetInetllTaskStateResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskState:
		return soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, tag, id, (_Bsdrtmservice1__SetInetllTaskState *const*)ptr, "Bsdrtmservice1:SetInetllTaskState");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(soap, tag, id, (_Bsdrtmservice1__AddInetllTaskLogResponse *const*)ptr, "Bsdrtmservice1:AddInetllTaskLogResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLog:
		return soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, tag, id, (_Bsdrtmservice1__AddInetllTaskLog *const*)ptr, "Bsdrtmservice1:AddInetllTaskLog");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTaskResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(soap, tag, id, (_Bsdrtmservice1__GetIntellTaskResponse *const*)ptr, "Bsdrtmservice1:GetIntellTaskResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTask:
		return soap_out_PointerTo_Bsdrtmservice1__GetIntellTask(soap, tag, id, (_Bsdrtmservice1__GetIntellTask *const*)ptr, "Bsdrtmservice1:GetIntellTask");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, tag, id, (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *const*)ptr, "Bsdrtmservice1:GetRuningIntellTaskIdsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds:
		return soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag, id, (_Bsdrtmservice1__GetRuningIntellTaskIds *const*)ptr, "Bsdrtmservice1:GetRuningIntellTaskIds");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(soap, tag, id, (_Bsdrtmservice1__GetMonStationsByVideoResponse *const*)ptr, "Bsdrtmservice1:GetMonStationsByVideoResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideo:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, tag, id, (_Bsdrtmservice1__GetMonStationsByVideo *const*)ptr, "Bsdrtmservice1:GetMonStationsByVideo");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse:
		return soap_out_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(soap, tag, id, (_Bsdrtmservice1__SetConfirmedStateResponse *const*)ptr, "Bsdrtmservice1:SetConfirmedStateResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedState:
		return soap_out_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, tag, id, (_Bsdrtmservice1__SetConfirmedState *const*)ptr, "Bsdrtmservice1:SetConfirmedState");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, tag, id, (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *const*)ptr, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		return soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag, id, (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *const*)ptr, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationno");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, tag, id, (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *const*)ptr, "Bsdrtmservice1:GetPageMalfunctionAlertsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts:
		return soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag, id, (_Bsdrtmservice1__GetPageMalfunctionAlerts *const*)ptr, "Bsdrtmservice1:GetPageMalfunctionAlerts");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, tag, id, (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *const*)ptr, "Bsdrtmservice1:GetAllMalfunctionAlertCountResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag, id, (_Bsdrtmservice1__GetAllMalfunctionAlertCount *const*)ptr, "Bsdrtmservice1:GetAllMalfunctionAlertCount");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(soap, tag, id, (_Bsdrtmservice1__GetMalfunctionCodeResponse *const*)ptr, "Bsdrtmservice1:GetMalfunctionCodeResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCode:
		return soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, tag, id, (_Bsdrtmservice1__GetMalfunctionCode *const*)ptr, "Bsdrtmservice1:GetMalfunctionCode");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(soap, tag, id, (_Bsdrtmservice1__AddMalfunctionAlertResponse *const*)ptr, "Bsdrtmservice1:AddMalfunctionAlertResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlert:
		return soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, tag, id, (_Bsdrtmservice1__AddMalfunctionAlert *const*)ptr, "Bsdrtmservice1:AddMalfunctionAlert");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse:
		return soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(soap, tag, id, (_Bsdrtmservice1__DelMonReportAttachmentResponse *const*)ptr, "Bsdrtmservice1:DelMonReportAttachmentResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachment:
		return soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, tag, id, (_Bsdrtmservice1__DelMonReportAttachment *const*)ptr, "Bsdrtmservice1:DelMonReportAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(soap, tag, id, (_Bsdrtmservice1__AddMonReportAttachmentResponse *const*)ptr, "Bsdrtmservice1:AddMonReportAttachmentResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachment:
		return soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, tag, id, (_Bsdrtmservice1__AddMonReportAttachment *const*)ptr, "Bsdrtmservice1:AddMonReportAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, tag, id, (_Bsdrtmservice1__GetMonReportAttachmentContentResponse *const*)ptr, "Bsdrtmservice1:GetMonReportAttachmentContentResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag, id, (_Bsdrtmservice1__GetMonReportAttachmentContent *const*)ptr, "Bsdrtmservice1:GetMonReportAttachmentContent");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, tag, id, (_Bsdrtmservice1__GetMonReportAttachmentsResponse *const*)ptr, "Bsdrtmservice1:GetMonReportAttachmentsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachments:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, tag, id, (_Bsdrtmservice1__GetMonReportAttachments *const*)ptr, "Bsdrtmservice1:GetMonReportAttachments");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse:
		return soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(soap, tag, id, (_Bsdrtmservice1__ExistMonReportofFreqResponse *const*)ptr, "Bsdrtmservice1:ExistMonReportofFreqResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreq:
		return soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, tag, id, (_Bsdrtmservice1__ExistMonReportofFreq *const*)ptr, "Bsdrtmservice1:ExistMonReportofFreq");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, tag, id, (_Bsdrtmservice1__GetMonReportFreqTypesResponse *const*)ptr, "Bsdrtmservice1:GetMonReportFreqTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, tag, id, (_Bsdrtmservice1__GetMonReportFreqTypes *const*)ptr, "Bsdrtmservice1:GetMonReportFreqTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, tag, id, (_Bsdrtmservice1__GetMonReportsOfFreqsResponse *const*)ptr, "Bsdrtmservice1:GetMonReportsOfFreqsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag, id, (_Bsdrtmservice1__GetMonReportsOfFreqs *const*)ptr, "Bsdrtmservice1:GetMonReportsOfFreqs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(soap, tag, id, (_Bsdrtmservice1__GetMonReportOfFreqResponse *const*)ptr, "Bsdrtmservice1:GetMonReportOfFreqResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreq:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, tag, id, (_Bsdrtmservice1__GetMonReportOfFreq *const*)ptr, "Bsdrtmservice1:GetMonReportOfFreq");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportResponse:
		return soap_out_PointerTo_Bsdrtmservice1__DelMonReportResponse(soap, tag, id, (_Bsdrtmservice1__DelMonReportResponse *const*)ptr, "Bsdrtmservice1:DelMonReportResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReport:
		return soap_out_PointerTo_Bsdrtmservice1__DelMonReport(soap, tag, id, (_Bsdrtmservice1__DelMonReport *const*)ptr, "Bsdrtmservice1:DelMonReport");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddMonReportResponse(soap, tag, id, (_Bsdrtmservice1__AddMonReportResponse *const*)ptr, "Bsdrtmservice1:AddMonReportResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReport:
		return soap_out_PointerTo_Bsdrtmservice1__AddMonReport(soap, tag, id, (_Bsdrtmservice1__AddMonReport *const*)ptr, "Bsdrtmservice1:AddMonReport");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, tag, id, (_Bsdrtmservice1__GetPreDefinedMonitorsResponse *const*)ptr, "Bsdrtmservice1:GetPreDefinedMonitorsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors:
		return soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, tag, id, (_Bsdrtmservice1__GetPreDefinedMonitors *const*)ptr, "Bsdrtmservice1:GetPreDefinedMonitors");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(soap, tag, id, (_Bsdrtmservice1__GetMonAlertOfDayResponse *const*)ptr, "Bsdrtmservice1:GetMonAlertOfDayResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDay:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, tag, id, (_Bsdrtmservice1__GetMonAlertOfDay *const*)ptr, "Bsdrtmservice1:GetMonAlertOfDay");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, tag, id, (_Bsdrtmservice1__GetMonAlertOfMonthResponse *const*)ptr, "Bsdrtmservice1:GetMonAlertOfMonthResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, tag, id, (_Bsdrtmservice1__GetMonAlertOfMonth *const*)ptr, "Bsdrtmservice1:GetMonAlertOfMonth");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlertResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddMonAlertResponse(soap, tag, id, (_Bsdrtmservice1__AddMonAlertResponse *const*)ptr, "Bsdrtmservice1:AddMonAlertResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlert:
		return soap_out_PointerTo_Bsdrtmservice1__AddMonAlert(soap, tag, id, (_Bsdrtmservice1__AddMonAlert *const*)ptr, "Bsdrtmservice1:AddMonAlert");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskStateResponse:
		return soap_out_PointerTo_Bsdrtmservice1__SetTaskStateResponse(soap, tag, id, (_Bsdrtmservice1__SetTaskStateResponse *const*)ptr, "Bsdrtmservice1:SetTaskStateResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskState:
		return soap_out_PointerTo_Bsdrtmservice1__SetTaskState(soap, tag, id, (_Bsdrtmservice1__SetTaskState *const*)ptr, "Bsdrtmservice1:SetTaskState");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLogResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddTaskLogResponse(soap, tag, id, (_Bsdrtmservice1__AddTaskLogResponse *const*)ptr, "Bsdrtmservice1:AddTaskLogResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLog:
		return soap_out_PointerTo_Bsdrtmservice1__AddTaskLog(soap, tag, id, (_Bsdrtmservice1__AddTaskLog *const*)ptr, "Bsdrtmservice1:AddTaskLog");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(soap, tag, id, (_Bsdrtmservice1__GetRuningTaskByIdResponse *const*)ptr, "Bsdrtmservice1:GetRuningTaskByIdResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskById:
		return soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, tag, id, (_Bsdrtmservice1__GetRuningTaskById *const*)ptr, "Bsdrtmservice1:GetRuningTaskById");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(soap, tag, id, (_Bsdrtmservice1__GetRuningTaskIdsResponse *const*)ptr, "Bsdrtmservice1:GetRuningTaskIdsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIds:
		return soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, tag, id, (_Bsdrtmservice1__GetRuningTaskIds *const*)ptr, "Bsdrtmservice1:GetRuningTaskIds");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(soap, tag, id, (_Bsdrtmservice1__GetMonstationUseTimeResponse *const*)ptr, "Bsdrtmservice1:GetMonstationUseTimeResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTime:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, tag, id, (_Bsdrtmservice1__GetMonstationUseTime *const*)ptr, "Bsdrtmservice1:GetMonstationUseTime");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, tag, id, (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *const*)ptr, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag, id, (_Bsdrtmservice1__GetMonstationUseTimeOfMonth *const*)ptr, "Bsdrtmservice1:GetMonstationUseTimeOfMonth");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLogResponse:
		return soap_out_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(soap, tag, id, (_Bsdrtmservice1__AddDevUseLogResponse *const*)ptr, "Bsdrtmservice1:AddDevUseLogResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLog:
		return soap_out_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, tag, id, (_Bsdrtmservice1__AddDevUseLog *const*)ptr, "Bsdrtmservice1:AddDevUseLog");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAntsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllAntsResponse(soap, tag, id, (_Bsdrtmservice1__GetAllAntsResponse *const*)ptr, "Bsdrtmservice1:GetAllAntsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAnts:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllAnts(soap, tag, id, (_Bsdrtmservice1__GetAllAnts *const*)ptr, "Bsdrtmservice1:GetAllAnts");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetAnts3Response(soap, tag, id, (_Bsdrtmservice1__GetAnts3Response *const*)ptr, "Bsdrtmservice1:GetAnts3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3:
		return soap_out_PointerTo_Bsdrtmservice1__GetAnts3(soap, tag, id, (_Bsdrtmservice1__GetAnts3 *const*)ptr, "Bsdrtmservice1:GetAnts3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(soap, tag, id, (_Bsdrtmservice1__GetDevFunAnts3Response *const*)ptr, "Bsdrtmservice1:GetDevFunAnts3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, tag, id, (_Bsdrtmservice1__GetDevFunAnts3 *const*)ptr, "Bsdrtmservice1:GetDevFunAnts3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(soap, tag, id, (_Bsdrtmservice1__GetDevFunAntsResponse *const*)ptr, "Bsdrtmservice1:GetDevFunAntsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, tag, id, (_Bsdrtmservice1__GetDevFunAnts *const*)ptr, "Bsdrtmservice1:GetDevFunAnts");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3Response(soap, tag, id, (_Bsdrtmservice1__GetDevFuns3Response *const*)ptr, "Bsdrtmservice1:GetDevFuns3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, tag, id, (_Bsdrtmservice1__GetDevFuns3 *const*)ptr, "Bsdrtmservice1:GetDevFuns3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFunsResponse(soap, tag, id, (_Bsdrtmservice1__GetDevFunsResponse *const*)ptr, "Bsdrtmservice1:GetDevFunsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevFuns(soap, tag, id, (_Bsdrtmservice1__GetDevFuns *const*)ptr, "Bsdrtmservice1:GetDevFuns");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevices3Response(soap, tag, id, (_Bsdrtmservice1__GetDevices3Response *const*)ptr, "Bsdrtmservice1:GetDevices3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevices3(soap, tag, id, (_Bsdrtmservice1__GetDevices3 *const*)ptr, "Bsdrtmservice1:GetDevices3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevicesResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevicesResponse(soap, tag, id, (_Bsdrtmservice1__GetDevicesResponse *const*)ptr, "Bsdrtmservice1:GetDevicesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevices(soap, tag, id, (_Bsdrtmservice1__GetDevices *const*)ptr, "Bsdrtmservice1:GetDevices");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse:
		return soap_out_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(soap, tag, id, (_Bsdrtmservice1__SetRNCPasswordResponse *const*)ptr, "Bsdrtmservice1:SetRNCPasswordResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPassword:
		return soap_out_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, tag, id, (_Bsdrtmservice1__SetRNCPassword *const*)ptr, "Bsdrtmservice1:SetRNCPassword");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(soap, tag, id, (_Bsdrtmservice1__GetAllRNCs3Response *const*)ptr, "Bsdrtmservice1:GetAllRNCs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, tag, id, (_Bsdrtmservice1__GetAllRNCs3 *const*)ptr, "Bsdrtmservice1:GetAllRNCs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(soap, tag, id, (_Bsdrtmservice1__GetAllRNCsResponse *const*)ptr, "Bsdrtmservice1:GetAllRNCsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs:
		return soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, tag, id, (_Bsdrtmservice1__GetAllRNCs *const*)ptr, "Bsdrtmservice1:GetAllRNCs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetRNCs3Response(soap, tag, id, (_Bsdrtmservice1__GetRNCs3Response *const*)ptr, "Bsdrtmservice1:GetRNCs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3:
		return soap_out_PointerTo_Bsdrtmservice1__GetRNCs3(soap, tag, id, (_Bsdrtmservice1__GetRNCs3 *const*)ptr, "Bsdrtmservice1:GetRNCs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetRNCsResponse(soap, tag, id, (_Bsdrtmservice1__GetRNCsResponse *const*)ptr, "Bsdrtmservice1:GetRNCsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs:
		return soap_out_PointerTo_Bsdrtmservice1__GetRNCs(soap, tag, id, (_Bsdrtmservice1__GetRNCs *const*)ptr, "Bsdrtmservice1:GetRNCs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStations3Response(soap, tag, id, (_Bsdrtmservice1__GetMonStations3Response *const*)ptr, "Bsdrtmservice1:GetMonStations3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStations3(soap, tag, id, (_Bsdrtmservice1__GetMonStations3 *const*)ptr, "Bsdrtmservice1:GetMonStations3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsResponse(soap, tag, id, (_Bsdrtmservice1__GetMonStationsResponse *const*)ptr, "Bsdrtmservice1:GetMonStationsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStations(soap, tag, id, (_Bsdrtmservice1__GetMonStations *const*)ptr, "Bsdrtmservice1:GetMonStations");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(soap, tag, id, (_Bsdrtmservice1__GetMonControlCenters3Response *const*)ptr, "Bsdrtmservice1:GetMonControlCenters3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, tag, id, (_Bsdrtmservice1__GetMonControlCenters3 *const*)ptr, "Bsdrtmservice1:GetMonControlCenters3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(soap, tag, id, (_Bsdrtmservice1__GetMonControlCentersResponse *const*)ptr, "Bsdrtmservice1:GetMonControlCentersResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, tag, id, (_Bsdrtmservice1__GetMonControlCenters *const*)ptr, "Bsdrtmservice1:GetMonControlCenters");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(soap, tag, id, (_Bsdrtmservice1__GetMonOrgs3Response *const*)ptr, "Bsdrtmservice1:GetMonOrgs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, tag, id, (_Bsdrtmservice1__GetMonOrgs3 *const*)ptr, "Bsdrtmservice1:GetMonOrgs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(soap, tag, id, (_Bsdrtmservice1__GetMonOrgsResponse *const*)ptr, "Bsdrtmservice1:GetMonOrgsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, tag, id, (_Bsdrtmservice1__GetMonOrgs *const*)ptr, "Bsdrtmservice1:GetMonOrgs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(soap, tag, id, (_Bsdrtmservice1__GetDevModelFuncParamResponse *const*)ptr, "Bsdrtmservice1:GetDevModelFuncParamResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParam:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, tag, id, (_Bsdrtmservice1__GetDevModelFuncParam *const*)ptr, "Bsdrtmservice1:GetDevModelFuncParam");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(soap, tag, id, (_Bsdrtmservice1__GetDevModelFuncParams3Response *const*)ptr, "Bsdrtmservice1:GetDevModelFuncParams3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, tag, id, (_Bsdrtmservice1__GetDevModelFuncParams3 *const*)ptr, "Bsdrtmservice1:GetDevModelFuncParams3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, tag, id, (_Bsdrtmservice1__GetDevModelFuncParamsResponse *const*)ptr, "Bsdrtmservice1:GetDevModelFuncParamsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, tag, id, (_Bsdrtmservice1__GetDevModelFuncParams *const*)ptr, "Bsdrtmservice1:GetDevModelFuncParams");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModels3Response(soap, tag, id, (_Bsdrtmservice1__GetDevModels3Response *const*)ptr, "Bsdrtmservice1:GetDevModels3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModels3(soap, tag, id, (_Bsdrtmservice1__GetDevModels3 *const*)ptr, "Bsdrtmservice1:GetDevModels3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModelsResponse(soap, tag, id, (_Bsdrtmservice1__GetDevModelsResponse *const*)ptr, "Bsdrtmservice1:GetDevModelsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevModels(soap, tag, id, (_Bsdrtmservice1__GetDevModels *const*)ptr, "Bsdrtmservice1:GetDevModels");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetFuncs3Response(soap, tag, id, (_Bsdrtmservice1__GetFuncs3Response *const*)ptr, "Bsdrtmservice1:GetFuncs3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3:
		return soap_out_PointerTo_Bsdrtmservice1__GetFuncs3(soap, tag, id, (_Bsdrtmservice1__GetFuncs3 *const*)ptr, "Bsdrtmservice1:GetFuncs3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetFuncsResponse(soap, tag, id, (_Bsdrtmservice1__GetFuncsResponse *const*)ptr, "Bsdrtmservice1:GetFuncsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs:
		return soap_out_PointerTo_Bsdrtmservice1__GetFuncs(soap, tag, id, (_Bsdrtmservice1__GetFuncs *const*)ptr, "Bsdrtmservice1:GetFuncs");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(soap, tag, id, (_Bsdrtmservice1__GetDevProtocols3Response *const*)ptr, "Bsdrtmservice1:GetDevProtocols3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, tag, id, (_Bsdrtmservice1__GetDevProtocols3 *const*)ptr, "Bsdrtmservice1:GetDevProtocols3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(soap, tag, id, (_Bsdrtmservice1__GetDevProtocolsResponse *const*)ptr, "Bsdrtmservice1:GetDevProtocolsResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols:
		return soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, tag, id, (_Bsdrtmservice1__GetDevProtocols *const*)ptr, "Bsdrtmservice1:GetDevProtocols");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(soap, tag, id, (_Bsdrtmservice1__GetDeviceTypes3Response *const*)ptr, "Bsdrtmservice1:GetDeviceTypes3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3:
		return soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, tag, id, (_Bsdrtmservice1__GetDeviceTypes3 *const*)ptr, "Bsdrtmservice1:GetDeviceTypes3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(soap, tag, id, (_Bsdrtmservice1__GetDeviceTypesResponse *const*)ptr, "Bsdrtmservice1:GetDeviceTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes:
		return soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, tag, id, (_Bsdrtmservice1__GetDeviceTypes *const*)ptr, "Bsdrtmservice1:GetDeviceTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(soap, tag, id, (_Bsdrtmservice1__GetMonStationTypes3Response *const*)ptr, "Bsdrtmservice1:GetMonStationTypes3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, tag, id, (_Bsdrtmservice1__GetMonStationTypes3 *const*)ptr, "Bsdrtmservice1:GetMonStationTypes3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(soap, tag, id, (_Bsdrtmservice1__GetMonStationTypesResponse *const*)ptr, "Bsdrtmservice1:GetMonStationTypesResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, tag, id, (_Bsdrtmservice1__GetMonStationTypes *const*)ptr, "Bsdrtmservice1:GetMonStationTypes");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(soap, tag, id, (_Bsdrtmservice1__GetMonStationsByUserID3Response *const*)ptr, "Bsdrtmservice1:GetMonStationsByUserID3Response");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, tag, id, (_Bsdrtmservice1__GetMonStationsByUserID3 *const*)ptr, "Bsdrtmservice1:GetMonStationsByUserID3");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, tag, id, (_Bsdrtmservice1__GetMonStationsByUserIDResponse *const*)ptr, "Bsdrtmservice1:GetMonStationsByUserIDResponse");
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID:
		return soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, tag, id, (_Bsdrtmservice1__GetMonStationsByUserID *const*)ptr, "Bsdrtmservice1:GetMonStationsByUserID");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *const*)ptr, "Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfInt64:
		return soap_out_PointerToBsdrtmservice1__OptResultOfInt64(soap, tag, id, (Bsdrtmservice1__OptResultOfInt64 *const*)ptr, "Bsdrtmservice1:OptResultOfInt64");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfInt:
		return soap_out_PointerToBsdrtmservice1__ArrayOfInt(soap, tag, id, (Bsdrtmservice1__ArrayOfInt *const*)ptr, "Bsdrtmservice1:ArrayOfInt");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfArrayOfByte:
		return soap_out_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, tag, id, (Bsdrtmservice1__OptResultOfArrayOfByte *const*)ptr, "Bsdrtmservice1:OptResultOfArrayOfByte");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfAttachment:
		return soap_out_PointerToBsdrtmservice1__OptResultOfAttachment(soap, tag, id, (Bsdrtmservice1__OptResultOfAttachment *const*)ptr, "Bsdrtmservice1:OptResultOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfBoolean:
		return soap_out_PointerToBsdrtmservice1__OptResultOfBoolean(soap, tag, id, (Bsdrtmservice1__OptResultOfBoolean *const*)ptr, "Bsdrtmservice1:OptResultOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmMonReportEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmMonAlertEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonTaskLogEntity:
		return soap_out_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, tag, id, (Bsdrtmservice1__RtmMonTaskLogEntity *const*)ptr, "Bsdrtmservice1:RtmMonTaskLogEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *const*)ptr, "Bsdrtmservice1:OptResultOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfTimeSpan:
		return soap_out_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, tag, id, (Bsdrtmservice1__OptResultOfTimeSpan *const*)ptr, "Bsdrtmservice1:OptResultOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevUseLogEntity:
		return soap_out_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, tag, id, (Bsdrtmservice1__RtmDevUseLogEntity *const*)ptr, "Bsdrtmservice1:RtmDevUseLogEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmAntEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmAntEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfvRtmDevAntEntity *const*)ptr, "Bsdrtmservice1:OptResultOfvRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfVRtmDevFunEntity *const*)ptr, "Bsdrtmservice1:OptResultOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmDeviceEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, tag, id, (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *const*)ptr, "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *const*)ptr, "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfvRtmMonStationEntity *const*)ptr, "Bsdrtmservice1:OptResultOfvRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmControlCenterEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmMonOrgEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *const*)ptr, "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmDevModelEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity:
		return soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, tag, id, (Bsdrtmservice1__OptResultOfRtmTypeEntity *const*)ptr, "Bsdrtmservice1:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfString:
		return soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, tag, id, (Bsdrtmservice1__OptResultOfString *const*)ptr, "Bsdrtmservice1:OptResultOfString");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **const*)ptr, "Bsdrtmservice1:Rtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_out_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *const*)ptr, "Bsdrtmservice1:Rtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, id, (Bsdrtmservice1__vRtmIntellMonTaskEntity **const*)ptr, "Bsdrtmservice1:vRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity:
		return soap_out_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, id, (Bsdrtmservice1__vRtmIntellMonTaskEntity *const*)ptr, "Bsdrtmservice1:vRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, id, (Bsdrtmservice1__RtmMalfunctionAlertEntity **const*)ptr, "Bsdrtmservice1:RtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity:
		return soap_out_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, id, (Bsdrtmservice1__RtmMalfunctionAlertEntity *const*)ptr, "Bsdrtmservice1:RtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfLong:
		return soap_out_PointerToBsdrtmservice1__ArrayOfLong(soap, tag, id, (Bsdrtmservice1__ArrayOfLong *const*)ptr, "Bsdrtmservice1:ArrayOfLong");
	case SOAP_TYPE_Bsdrtmservice_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_Bsdrtmservice_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBase64Binary:
		return soap_out_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, tag, id, (Bsdrtmservice1__ArrayOfBase64Binary *const*)ptr, "Bsdrtmservice1:ArrayOfBase64Binary");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Attachment:
		return soap_out_PointerToPointerToBsdrtmservice1__Attachment(soap, tag, id, (Bsdrtmservice1__Attachment **const*)ptr, "Bsdrtmservice1:Attachment");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment:
		return soap_out_PointerToBsdrtmservice1__Attachment(soap, tag, id, (Bsdrtmservice1__Attachment *const*)ptr, "Bsdrtmservice1:Attachment");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfAttachment:
		return soap_out_PointerToBsdrtmservice1__ArrayOfAttachment(soap, tag, id, (Bsdrtmservice1__ArrayOfAttachment *const*)ptr, "Bsdrtmservice1:ArrayOfAttachment");
	case SOAP_TYPE_Bsdrtmservice_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBoolean:
		return soap_out_PointerToBsdrtmservice1__ArrayOfBoolean(soap, tag, id, (Bsdrtmservice1__ArrayOfBoolean *const*)ptr, "Bsdrtmservice1:ArrayOfBoolean");
	case SOAP_TYPE_Bsdrtmservice_PointerToLONG64:
		return soap_out_PointerToLONG64(soap, tag, id, (LONG64 *const*)ptr, "xsd:long");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonReportEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(soap, tag, id, (Bsdrtmservice1__RtmMonReportEntity **const*)ptr, "Bsdrtmservice1:RtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity:
		return soap_out_PointerToBsdrtmservice1__RtmMonReportEntity(soap, tag, id, (Bsdrtmservice1__RtmMonReportEntity *const*)ptr, "Bsdrtmservice1:RtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmMonReportEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmMonReportEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, id, (Bsdrtmservice1__RtmPredefinedMonitorEntity **const*)ptr, "Bsdrtmservice1:RtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity:
		return soap_out_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, id, (Bsdrtmservice1__RtmPredefinedMonitorEntity *const*)ptr, "Bsdrtmservice1:RtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag, id, (Bsdrtmservice1__RtmMonAlertEntity **const*)ptr, "Bsdrtmservice1:RtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity:
		return soap_out_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag, id, (Bsdrtmservice1__RtmMonAlertEntity *const*)ptr, "Bsdrtmservice1:RtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmMonAlertEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmMonAlertEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag, id, (Bsdrtmservice1__VRtmMonTaskEntity **const*)ptr, "Bsdrtmservice1:VRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity:
		return soap_out_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag, id, (Bsdrtmservice1__VRtmMonTaskEntity *const*)ptr, "Bsdrtmservice1:VRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmMonTaskEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__TimeSpan:
		return soap_out_PointerToPointerToBsdrtmservice1__TimeSpan(soap, tag, id, (Bsdrtmservice1__TimeSpan **const*)ptr, "Bsdrtmservice1:TimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan:
		return soap_out_PointerToBsdrtmservice1__TimeSpan(soap, tag, id, (Bsdrtmservice1__TimeSpan *const*)ptr, "Bsdrtmservice1:TimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfTimeSpan:
		return soap_out_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, tag, id, (Bsdrtmservice1__ArrayOfTimeSpan *const*)ptr, "Bsdrtmservice1:ArrayOfTimeSpan");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmAntEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmAntEntity(soap, tag, id, (Bsdrtmservice1__RtmAntEntity **const*)ptr, "Bsdrtmservice1:RtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity:
		return soap_out_PointerToBsdrtmservice1__RtmAntEntity(soap, tag, id, (Bsdrtmservice1__RtmAntEntity *const*)ptr, "Bsdrtmservice1:RtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmAntEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmAntEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag, id, (Bsdrtmservice1__vRtmDevAntEntity **const*)ptr, "Bsdrtmservice1:vRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity:
		return soap_out_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag, id, (Bsdrtmservice1__vRtmDevAntEntity *const*)ptr, "Bsdrtmservice1:vRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmDevAntEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmDevAntEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag, id, (Bsdrtmservice1__VRtmDevFunEntity **const*)ptr, "Bsdrtmservice1:VRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity:
		return soap_out_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag, id, (Bsdrtmservice1__VRtmDevFunEntity *const*)ptr, "Bsdrtmservice1:VRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmDevFunEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmDevFunEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDeviceEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(soap, tag, id, (Bsdrtmservice1__RtmDeviceEntity **const*)ptr, "Bsdrtmservice1:RtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity:
		return soap_out_PointerToBsdrtmservice1__RtmDeviceEntity(soap, tag, id, (Bsdrtmservice1__RtmDeviceEntity *const*)ptr, "Bsdrtmservice1:RtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmDeviceEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmDeviceEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity:
		return soap_out_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag, id, (Bsdrtmservice1__vRtmRncPort2Entity **const*)ptr, "Bsdrtmservice1:vRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity:
		return soap_out_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag, id, (Bsdrtmservice1__vRtmRncPort2Entity *const*)ptr, "Bsdrtmservice1:vRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmRncPort2Entity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag, id, (Bsdrtmservice1__vRtmRncPORTEntity **const*)ptr, "Bsdrtmservice1:vRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity:
		return soap_out_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag, id, (Bsdrtmservice1__vRtmRncPORTEntity *const*)ptr, "Bsdrtmservice1:vRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmRncPORTEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag, id, (Bsdrtmservice1__vRtmMonStationEntity **const*)ptr, "Bsdrtmservice1:vRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity:
		return soap_out_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag, id, (Bsdrtmservice1__vRtmMonStationEntity *const*)ptr, "Bsdrtmservice1:vRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmMonStationEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmMonStationEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag, id, (Bsdrtmservice1__RtmControlCenterEntity **const*)ptr, "Bsdrtmservice1:RtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity:
		return soap_out_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag, id, (Bsdrtmservice1__RtmControlCenterEntity *const*)ptr, "Bsdrtmservice1:RtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmControlCenterEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmControlCenterEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag, id, (Bsdrtmservice1__RtmMonOrgEntity **const*)ptr, "Bsdrtmservice1:RtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity:
		return soap_out_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag, id, (Bsdrtmservice1__RtmMonOrgEntity *const*)ptr, "Bsdrtmservice1:RtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmMonOrgEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmMonOrgEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, id, (Bsdrtmservice1__vRtmDevModelFunParamEntity **const*)ptr, "Bsdrtmservice1:vRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity:
		return soap_out_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, id, (Bsdrtmservice1__vRtmDevModelFunParamEntity *const*)ptr, "Bsdrtmservice1:vRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *const*)ptr, "Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDevModelEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(soap, tag, id, (Bsdrtmservice1__RtmDevModelEntity **const*)ptr, "Bsdrtmservice1:RtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity:
		return soap_out_PointerToBsdrtmservice1__RtmDevModelEntity(soap, tag, id, (Bsdrtmservice1__RtmDevModelEntity *const*)ptr, "Bsdrtmservice1:RtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmDevModelEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmDevModelEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmTypeEntity:
		return soap_out_PointerToPointerToBsdrtmservice1__RtmTypeEntity(soap, tag, id, (Bsdrtmservice1__RtmTypeEntity **const*)ptr, "Bsdrtmservice1:RtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity:
		return soap_out_PointerToBsdrtmservice1__RtmTypeEntity(soap, tag, id, (Bsdrtmservice1__RtmTypeEntity *const*)ptr, "Bsdrtmservice1:RtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity:
		return soap_out_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, tag, id, (Bsdrtmservice1__ArrayOfRtmTypeEntity *const*)ptr, "Bsdrtmservice1:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdrtmservice_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfString:
		return soap_out_PointerToBsdrtmservice1__ArrayOfString(soap, tag, id, (Bsdrtmservice1__ArrayOfString *const*)ptr, "Bsdrtmservice1:ArrayOfString");
	case SOAP_TYPE_Bsdrtmservice_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_Bsdrtmservice__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_Bsdrtmservice_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_Bsdrtmservice_StringArray:
		((StringArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse:
		((_Bsdrtmservice1__GetIEMSExDevsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs:
		((_Bsdrtmservice1__GetIEMSExDevs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		((_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes:
		((_Bsdrtmservice1__GetExtendDevicesByDataTypes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse:
		((_Bsdrtmservice1__GetExtendDevicesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices:
		((_Bsdrtmservice1__GetExtendDevices *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse:
		((_Bsdrtmservice1__GetExtendDeviceResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice:
		((_Bsdrtmservice1__GetExtendDevice *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse:
		((_Bsdrtmservice1__SetInetllTaskStateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState:
		((_Bsdrtmservice1__SetInetllTaskState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse:
		((_Bsdrtmservice1__AddInetllTaskLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog:
		((_Bsdrtmservice1__AddInetllTaskLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse:
		((_Bsdrtmservice1__GetIntellTaskResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask:
		((_Bsdrtmservice1__GetIntellTask *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		((_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds:
		((_Bsdrtmservice1__GetRuningIntellTaskIds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse:
		((_Bsdrtmservice1__GetMonStationsByVideoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo:
		((_Bsdrtmservice1__GetMonStationsByVideo *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse:
		((_Bsdrtmservice1__SetConfirmedStateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState:
		((_Bsdrtmservice1__SetConfirmedState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		((_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts:
		((_Bsdrtmservice1__GetPageMalfunctionAlerts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		((_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount:
		((_Bsdrtmservice1__GetAllMalfunctionAlertCount *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse:
		((_Bsdrtmservice1__GetMalfunctionCodeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode:
		((_Bsdrtmservice1__GetMalfunctionCode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse:
		((_Bsdrtmservice1__AddMalfunctionAlertResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert:
		((_Bsdrtmservice1__AddMalfunctionAlert *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse:
		((_Bsdrtmservice1__DelMonReportAttachmentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment:
		((_Bsdrtmservice1__DelMonReportAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse:
		((_Bsdrtmservice1__AddMonReportAttachmentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment:
		((_Bsdrtmservice1__AddMonReportAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		((_Bsdrtmservice1__GetMonReportAttachmentContentResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent:
		((_Bsdrtmservice1__GetMonReportAttachmentContent *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse:
		((_Bsdrtmservice1__GetMonReportAttachmentsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments:
		((_Bsdrtmservice1__GetMonReportAttachments *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse:
		((_Bsdrtmservice1__ExistMonReportofFreqResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq:
		((_Bsdrtmservice1__ExistMonReportofFreq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse:
		((_Bsdrtmservice1__GetMonReportFreqTypesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes:
		((_Bsdrtmservice1__GetMonReportFreqTypes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		((_Bsdrtmservice1__GetMonReportsOfFreqsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs:
		((_Bsdrtmservice1__GetMonReportsOfFreqs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse:
		((_Bsdrtmservice1__GetMonReportOfFreqResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq:
		((_Bsdrtmservice1__GetMonReportOfFreq *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse:
		((_Bsdrtmservice1__DelMonReportResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport:
		((_Bsdrtmservice1__DelMonReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse:
		((_Bsdrtmservice1__AddMonReportResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport:
		((_Bsdrtmservice1__AddMonReport *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		((_Bsdrtmservice1__GetPreDefinedMonitorsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors:
		((_Bsdrtmservice1__GetPreDefinedMonitors *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse:
		((_Bsdrtmservice1__GetMonAlertOfDayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay:
		((_Bsdrtmservice1__GetMonAlertOfDay *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse:
		((_Bsdrtmservice1__GetMonAlertOfMonthResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth:
		((_Bsdrtmservice1__GetMonAlertOfMonth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse:
		((_Bsdrtmservice1__AddMonAlertResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert:
		((_Bsdrtmservice1__AddMonAlert *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse:
		((_Bsdrtmservice1__SetTaskStateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState:
		((_Bsdrtmservice1__SetTaskState *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse:
		((_Bsdrtmservice1__AddTaskLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog:
		((_Bsdrtmservice1__AddTaskLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse:
		((_Bsdrtmservice1__GetRuningTaskByIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById:
		((_Bsdrtmservice1__GetRuningTaskById *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse:
		((_Bsdrtmservice1__GetRuningTaskIdsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds:
		((_Bsdrtmservice1__GetRuningTaskIds *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse:
		((_Bsdrtmservice1__GetMonstationUseTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime:
		((_Bsdrtmservice1__GetMonstationUseTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		((_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		((_Bsdrtmservice1__GetMonstationUseTimeOfMonth *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse:
		((_Bsdrtmservice1__AddDevUseLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog:
		((_Bsdrtmservice1__AddDevUseLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse:
		((_Bsdrtmservice1__GetAllAntsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts:
		((_Bsdrtmservice1__GetAllAnts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response:
		((_Bsdrtmservice1__GetAnts3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3:
		((_Bsdrtmservice1__GetAnts3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response:
		((_Bsdrtmservice1__GetDevFunAnts3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3:
		((_Bsdrtmservice1__GetDevFunAnts3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse:
		((_Bsdrtmservice1__GetDevFunAntsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts:
		((_Bsdrtmservice1__GetDevFunAnts *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response:
		((_Bsdrtmservice1__GetDevFuns3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3:
		((_Bsdrtmservice1__GetDevFuns3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse:
		((_Bsdrtmservice1__GetDevFunsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns:
		((_Bsdrtmservice1__GetDevFuns *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response:
		((_Bsdrtmservice1__GetDevices3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3:
		((_Bsdrtmservice1__GetDevices3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse:
		((_Bsdrtmservice1__GetDevicesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices:
		((_Bsdrtmservice1__GetDevices *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse:
		((_Bsdrtmservice1__SetRNCPasswordResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword:
		((_Bsdrtmservice1__SetRNCPassword *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response:
		((_Bsdrtmservice1__GetAllRNCs3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3:
		((_Bsdrtmservice1__GetAllRNCs3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse:
		((_Bsdrtmservice1__GetAllRNCsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs:
		((_Bsdrtmservice1__GetAllRNCs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response:
		((_Bsdrtmservice1__GetRNCs3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3:
		((_Bsdrtmservice1__GetRNCs3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse:
		((_Bsdrtmservice1__GetRNCsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs:
		((_Bsdrtmservice1__GetRNCs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response:
		((_Bsdrtmservice1__GetMonStations3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3:
		((_Bsdrtmservice1__GetMonStations3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse:
		((_Bsdrtmservice1__GetMonStationsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations:
		((_Bsdrtmservice1__GetMonStations *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response:
		((_Bsdrtmservice1__GetMonControlCenters3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3:
		((_Bsdrtmservice1__GetMonControlCenters3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse:
		((_Bsdrtmservice1__GetMonControlCentersResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters:
		((_Bsdrtmservice1__GetMonControlCenters *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response:
		((_Bsdrtmservice1__GetMonOrgs3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3:
		((_Bsdrtmservice1__GetMonOrgs3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse:
		((_Bsdrtmservice1__GetMonOrgsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs:
		((_Bsdrtmservice1__GetMonOrgs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse:
		((_Bsdrtmservice1__GetDevModelFuncParamResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam:
		((_Bsdrtmservice1__GetDevModelFuncParam *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response:
		((_Bsdrtmservice1__GetDevModelFuncParams3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3:
		((_Bsdrtmservice1__GetDevModelFuncParams3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse:
		((_Bsdrtmservice1__GetDevModelFuncParamsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams:
		((_Bsdrtmservice1__GetDevModelFuncParams *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response:
		((_Bsdrtmservice1__GetDevModels3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3:
		((_Bsdrtmservice1__GetDevModels3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse:
		((_Bsdrtmservice1__GetDevModelsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels:
		((_Bsdrtmservice1__GetDevModels *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response:
		((_Bsdrtmservice1__GetFuncs3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3:
		((_Bsdrtmservice1__GetFuncs3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse:
		((_Bsdrtmservice1__GetFuncsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs:
		((_Bsdrtmservice1__GetFuncs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response:
		((_Bsdrtmservice1__GetDevProtocols3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3:
		((_Bsdrtmservice1__GetDevProtocols3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse:
		((_Bsdrtmservice1__GetDevProtocolsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols:
		((_Bsdrtmservice1__GetDevProtocols *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response:
		((_Bsdrtmservice1__GetDeviceTypes3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3:
		((_Bsdrtmservice1__GetDeviceTypes3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse:
		((_Bsdrtmservice1__GetDeviceTypesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes:
		((_Bsdrtmservice1__GetDeviceTypes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response:
		((_Bsdrtmservice1__GetMonStationTypes3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3:
		((_Bsdrtmservice1__GetMonStationTypes3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse:
		((_Bsdrtmservice1__GetMonStationTypesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes:
		((_Bsdrtmservice1__GetMonStationTypes *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response:
		((_Bsdrtmservice1__GetMonStationsByUserID3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3:
		((_Bsdrtmservice1__GetMonStationsByUserID3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse:
		((_Bsdrtmservice1__GetMonStationsByUserIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID:
		((_Bsdrtmservice1__GetMonStationsByUserID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		((Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		((Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		((Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity:
		((Bsdrtmservice1__RtmIntellMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity:
		((Bsdrtmservice1__vRtmIntellMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		((Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		((Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		((Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		((Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64:
		((Bsdrtmservice1__OptResultOfInt64 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt:
		((Bsdrtmservice1__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity:
		((Bsdrtmservice1__RtmMalfunctionAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary:
		((Bsdrtmservice1__ArrayOfBase64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte:
		((Bsdrtmservice1__OptResultOfArrayOfByte *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment:
		((Bsdrtmservice1__Attachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment:
		((Bsdrtmservice1__ArrayOfAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment:
		((Bsdrtmservice1__OptResultOfAttachment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean:
		((Bsdrtmservice1__ArrayOfBoolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean:
		((Bsdrtmservice1__OptResultOfBoolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong:
		((Bsdrtmservice1__ArrayOfLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity:
		((Bsdrtmservice1__ArrayOfRtmMonReportEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity:
		((Bsdrtmservice1__OptResultOfRtmMonReportEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity:
		((Bsdrtmservice1__RtmMonReportEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity:
		((Bsdrtmservice1__RtmPredefinedMonitorEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		((Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		((Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity:
		((Bsdrtmservice1__ArrayOfRtmMonAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity:
		((Bsdrtmservice1__OptResultOfRtmMonAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity:
		((Bsdrtmservice1__RtmMonAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity:
		((Bsdrtmservice1__RtmMonTaskLogEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity:
		((Bsdrtmservice1__RtmMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity:
		((Bsdrtmservice1__VRtmMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		((Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		((Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan:
		((Bsdrtmservice1__TimeSpan *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan:
		((Bsdrtmservice1__ArrayOfTimeSpan *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan:
		((Bsdrtmservice1__OptResultOfTimeSpan *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity:
		((Bsdrtmservice1__RtmDevUseLogEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity:
		((Bsdrtmservice1__RtmAntEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity:
		((Bsdrtmservice1__ArrayOfRtmAntEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity:
		((Bsdrtmservice1__OptResultOfRtmAntEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity:
		((Bsdrtmservice1__vRtmDevAntEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity:
		((Bsdrtmservice1__ArrayOfVRtmDevAntEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity:
		((Bsdrtmservice1__OptResultOfvRtmDevAntEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity:
		((Bsdrtmservice1__RtmDevFunEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity:
		((Bsdrtmservice1__VRtmDevFunEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity:
		((Bsdrtmservice1__ArrayOfVRtmDevFunEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity:
		((Bsdrtmservice1__OptResultOfVRtmDevFunEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity:
		((Bsdrtmservice1__RtmDeviceEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity:
		((Bsdrtmservice1__ArrayOfRtmDeviceEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity:
		((Bsdrtmservice1__OptResultOfRtmDeviceEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity:
		((Bsdrtmservice1__vRtmRncPort2Entity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		((Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		((Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity:
		((Bsdrtmservice1__RtmRncPortEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity:
		((Bsdrtmservice1__vRtmRncPORTEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		((Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		((Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity:
		((Bsdrtmservice1__RtmMonStationEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity:
		((Bsdrtmservice1__vRtmMonStationEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity:
		((Bsdrtmservice1__ArrayOfVRtmMonStationEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity:
		((Bsdrtmservice1__OptResultOfvRtmMonStationEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity:
		((Bsdrtmservice1__RtmControlCenterEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity:
		((Bsdrtmservice1__ArrayOfRtmControlCenterEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity:
		((Bsdrtmservice1__OptResultOfRtmControlCenterEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity:
		((Bsdrtmservice1__RtmMonOrgEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity:
		((Bsdrtmservice1__ArrayOfRtmMonOrgEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity:
		((Bsdrtmservice1__OptResultOfRtmMonOrgEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity:
		((Bsdrtmservice1__RtmDevModelFunParamEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity:
		((Bsdrtmservice1__vRtmDevModelFunParamEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		((Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		((Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity:
		((Bsdrtmservice1__RtmDevModelEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity:
		((Bsdrtmservice1__ArrayOfRtmDevModelEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity:
		((Bsdrtmservice1__OptResultOfRtmDevModelEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity:
		((Bsdrtmservice1__RtmTypeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity:
		((Bsdrtmservice1__ArrayOfRtmTypeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity:
		((Bsdrtmservice1__OptResultOfRtmTypeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString:
		((Bsdrtmservice1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString:
		((Bsdrtmservice1__OptResultOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIEMSExDevs:
		soap_serialize___Bsdrtmservice1__GetIEMSExDevs(soap, (const struct __Bsdrtmservice1__GetIEMSExDevs *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevicesByDataTypes:
		soap_serialize___Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, (const struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevices:
		soap_serialize___Bsdrtmservice1__GetExtendDevices(soap, (const struct __Bsdrtmservice1__GetExtendDevices *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevice:
		soap_serialize___Bsdrtmservice1__GetExtendDevice(soap, (const struct __Bsdrtmservice1__GetExtendDevice *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetInetllTaskState:
		soap_serialize___Bsdrtmservice1__SetInetllTaskState(soap, (const struct __Bsdrtmservice1__SetInetllTaskState *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddInetllTaskLog:
		soap_serialize___Bsdrtmservice1__AddInetllTaskLog(soap, (const struct __Bsdrtmservice1__AddInetllTaskLog *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIntellTask:
		soap_serialize___Bsdrtmservice1__GetIntellTask(soap, (const struct __Bsdrtmservice1__GetIntellTask *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningIntellTaskIds:
		soap_serialize___Bsdrtmservice1__GetRuningIntellTaskIds(soap, (const struct __Bsdrtmservice1__GetRuningIntellTaskIds *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByVideo:
		soap_serialize___Bsdrtmservice1__GetMonStationsByVideo(soap, (const struct __Bsdrtmservice1__GetMonStationsByVideo *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetConfirmedState:
		soap_serialize___Bsdrtmservice1__SetConfirmedState(soap, (const struct __Bsdrtmservice1__SetConfirmedState *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		soap_serialize___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, (const struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPageMalfunctionAlerts:
		soap_serialize___Bsdrtmservice1__GetPageMalfunctionAlerts(soap, (const struct __Bsdrtmservice1__GetPageMalfunctionAlerts *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllMalfunctionAlertCount:
		soap_serialize___Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, (const struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionCode:
		soap_serialize___Bsdrtmservice1__GetMalfunctionCode(soap, (const struct __Bsdrtmservice1__GetMalfunctionCode *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMalfunctionAlert:
		soap_serialize___Bsdrtmservice1__AddMalfunctionAlert(soap, (const struct __Bsdrtmservice1__AddMalfunctionAlert *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReportAttachment:
		soap_serialize___Bsdrtmservice1__DelMonReportAttachment(soap, (const struct __Bsdrtmservice1__DelMonReportAttachment *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReportAttachment:
		soap_serialize___Bsdrtmservice1__AddMonReportAttachment(soap, (const struct __Bsdrtmservice1__AddMonReportAttachment *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachmentContent:
		soap_serialize___Bsdrtmservice1__GetMonReportAttachmentContent(soap, (const struct __Bsdrtmservice1__GetMonReportAttachmentContent *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachments:
		soap_serialize___Bsdrtmservice1__GetMonReportAttachments(soap, (const struct __Bsdrtmservice1__GetMonReportAttachments *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__ExistMonReportofFreq:
		soap_serialize___Bsdrtmservice1__ExistMonReportofFreq(soap, (const struct __Bsdrtmservice1__ExistMonReportofFreq *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportFreqTypes:
		soap_serialize___Bsdrtmservice1__GetMonReportFreqTypes(soap, (const struct __Bsdrtmservice1__GetMonReportFreqTypes *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportsOfFreqs:
		soap_serialize___Bsdrtmservice1__GetMonReportsOfFreqs(soap, (const struct __Bsdrtmservice1__GetMonReportsOfFreqs *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportOfFreq:
		soap_serialize___Bsdrtmservice1__GetMonReportOfFreq(soap, (const struct __Bsdrtmservice1__GetMonReportOfFreq *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReport:
		soap_serialize___Bsdrtmservice1__DelMonReport(soap, (const struct __Bsdrtmservice1__DelMonReport *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReport:
		soap_serialize___Bsdrtmservice1__AddMonReport(soap, (const struct __Bsdrtmservice1__AddMonReport *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPreDefinedMonitors:
		soap_serialize___Bsdrtmservice1__GetPreDefinedMonitors(soap, (const struct __Bsdrtmservice1__GetPreDefinedMonitors *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfDay:
		soap_serialize___Bsdrtmservice1__GetMonAlertOfDay(soap, (const struct __Bsdrtmservice1__GetMonAlertOfDay *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfMonth:
		soap_serialize___Bsdrtmservice1__GetMonAlertOfMonth(soap, (const struct __Bsdrtmservice1__GetMonAlertOfMonth *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonAlert:
		soap_serialize___Bsdrtmservice1__AddMonAlert(soap, (const struct __Bsdrtmservice1__AddMonAlert *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetTaskState:
		soap_serialize___Bsdrtmservice1__SetTaskState(soap, (const struct __Bsdrtmservice1__SetTaskState *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddTaskLog:
		soap_serialize___Bsdrtmservice1__AddTaskLog(soap, (const struct __Bsdrtmservice1__AddTaskLog *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskById:
		soap_serialize___Bsdrtmservice1__GetRuningTaskById(soap, (const struct __Bsdrtmservice1__GetRuningTaskById *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskIds:
		soap_serialize___Bsdrtmservice1__GetRuningTaskIds(soap, (const struct __Bsdrtmservice1__GetRuningTaskIds *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTime:
		soap_serialize___Bsdrtmservice1__GetMonstationUseTime(soap, (const struct __Bsdrtmservice1__GetMonstationUseTime *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		soap_serialize___Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, (const struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddDevUseLog:
		soap_serialize___Bsdrtmservice1__AddDevUseLog(soap, (const struct __Bsdrtmservice1__AddDevUseLog *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllAnts:
		soap_serialize___Bsdrtmservice1__GetAllAnts(soap, (const struct __Bsdrtmservice1__GetAllAnts *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAnts3:
		soap_serialize___Bsdrtmservice1__GetAnts3(soap, (const struct __Bsdrtmservice1__GetAnts3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts3:
		soap_serialize___Bsdrtmservice1__GetDevFunAnts3(soap, (const struct __Bsdrtmservice1__GetDevFunAnts3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts:
		soap_serialize___Bsdrtmservice1__GetDevFunAnts(soap, (const struct __Bsdrtmservice1__GetDevFunAnts *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns3:
		soap_serialize___Bsdrtmservice1__GetDevFuns3(soap, (const struct __Bsdrtmservice1__GetDevFuns3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns:
		soap_serialize___Bsdrtmservice1__GetDevFuns(soap, (const struct __Bsdrtmservice1__GetDevFuns *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices3:
		soap_serialize___Bsdrtmservice1__GetDevices3(soap, (const struct __Bsdrtmservice1__GetDevices3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices:
		soap_serialize___Bsdrtmservice1__GetDevices(soap, (const struct __Bsdrtmservice1__GetDevices *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetRNCPassword:
		soap_serialize___Bsdrtmservice1__SetRNCPassword(soap, (const struct __Bsdrtmservice1__SetRNCPassword *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs3:
		soap_serialize___Bsdrtmservice1__GetAllRNCs3(soap, (const struct __Bsdrtmservice1__GetAllRNCs3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs:
		soap_serialize___Bsdrtmservice1__GetAllRNCs(soap, (const struct __Bsdrtmservice1__GetAllRNCs *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs3:
		soap_serialize___Bsdrtmservice1__GetRNCs3(soap, (const struct __Bsdrtmservice1__GetRNCs3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs:
		soap_serialize___Bsdrtmservice1__GetRNCs(soap, (const struct __Bsdrtmservice1__GetRNCs *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations3:
		soap_serialize___Bsdrtmservice1__GetMonStations3(soap, (const struct __Bsdrtmservice1__GetMonStations3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations:
		soap_serialize___Bsdrtmservice1__GetMonStations(soap, (const struct __Bsdrtmservice1__GetMonStations *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters3:
		soap_serialize___Bsdrtmservice1__GetMonControlCenters3(soap, (const struct __Bsdrtmservice1__GetMonControlCenters3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters:
		soap_serialize___Bsdrtmservice1__GetMonControlCenters(soap, (const struct __Bsdrtmservice1__GetMonControlCenters *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs3:
		soap_serialize___Bsdrtmservice1__GetMonOrgs3(soap, (const struct __Bsdrtmservice1__GetMonOrgs3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs:
		soap_serialize___Bsdrtmservice1__GetMonOrgs(soap, (const struct __Bsdrtmservice1__GetMonOrgs *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParam:
		soap_serialize___Bsdrtmservice1__GetDevModelFuncParam(soap, (const struct __Bsdrtmservice1__GetDevModelFuncParam *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams3:
		soap_serialize___Bsdrtmservice1__GetDevModelFuncParams3(soap, (const struct __Bsdrtmservice1__GetDevModelFuncParams3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams:
		soap_serialize___Bsdrtmservice1__GetDevModelFuncParams(soap, (const struct __Bsdrtmservice1__GetDevModelFuncParams *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels3:
		soap_serialize___Bsdrtmservice1__GetDevModels3(soap, (const struct __Bsdrtmservice1__GetDevModels3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels:
		soap_serialize___Bsdrtmservice1__GetDevModels(soap, (const struct __Bsdrtmservice1__GetDevModels *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs3:
		soap_serialize___Bsdrtmservice1__GetFuncs3(soap, (const struct __Bsdrtmservice1__GetFuncs3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs:
		soap_serialize___Bsdrtmservice1__GetFuncs(soap, (const struct __Bsdrtmservice1__GetFuncs *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols3:
		soap_serialize___Bsdrtmservice1__GetDevProtocols3(soap, (const struct __Bsdrtmservice1__GetDevProtocols3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols:
		soap_serialize___Bsdrtmservice1__GetDevProtocols(soap, (const struct __Bsdrtmservice1__GetDevProtocols *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes3:
		soap_serialize___Bsdrtmservice1__GetDeviceTypes3(soap, (const struct __Bsdrtmservice1__GetDeviceTypes3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes:
		soap_serialize___Bsdrtmservice1__GetDeviceTypes(soap, (const struct __Bsdrtmservice1__GetDeviceTypes *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes3:
		soap_serialize___Bsdrtmservice1__GetMonStationTypes3(soap, (const struct __Bsdrtmservice1__GetMonStationTypes3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes:
		soap_serialize___Bsdrtmservice1__GetMonStationTypes(soap, (const struct __Bsdrtmservice1__GetMonStationTypes *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID3:
		soap_serialize___Bsdrtmservice1__GetMonStationsByUserID3(soap, (const struct __Bsdrtmservice1__GetMonStationsByUserID3 *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID:
		soap_serialize___Bsdrtmservice1__GetMonStationsByUserID(soap, (const struct __Bsdrtmservice1__GetMonStationsByUserID *)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(soap, (_Bsdrtmservice1__GetIEMSExDevsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevs:
		soap_serialize_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, (_Bsdrtmservice1__GetIEMSExDevs *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes:
		soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, (_Bsdrtmservice1__GetExtendDevicesByDataTypes *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(soap, (_Bsdrtmservice1__GetExtendDevicesResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevices:
		soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, (_Bsdrtmservice1__GetExtendDevices *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(soap, (_Bsdrtmservice1__GetExtendDeviceResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevice:
		soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, (_Bsdrtmservice1__GetExtendDevice *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(soap, (_Bsdrtmservice1__SetInetllTaskStateResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskState:
		soap_serialize_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, (_Bsdrtmservice1__SetInetllTaskState *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(soap, (_Bsdrtmservice1__AddInetllTaskLogResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLog:
		soap_serialize_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, (_Bsdrtmservice1__AddInetllTaskLog *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTaskResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(soap, (_Bsdrtmservice1__GetIntellTaskResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTask:
		soap_serialize_PointerTo_Bsdrtmservice1__GetIntellTask(soap, (_Bsdrtmservice1__GetIntellTask *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, (_Bsdrtmservice1__GetRuningIntellTaskIds *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(soap, (_Bsdrtmservice1__GetMonStationsByVideoResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideo:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, (_Bsdrtmservice1__GetMonStationsByVideo *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(soap, (_Bsdrtmservice1__SetConfirmedStateResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedState:
		soap_serialize_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, (_Bsdrtmservice1__SetConfirmedState *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts:
		soap_serialize_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, (_Bsdrtmservice1__GetPageMalfunctionAlerts *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, (_Bsdrtmservice1__GetAllMalfunctionAlertCount *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(soap, (_Bsdrtmservice1__GetMalfunctionCodeResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCode:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, (_Bsdrtmservice1__GetMalfunctionCode *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(soap, (_Bsdrtmservice1__AddMalfunctionAlertResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlert:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, (_Bsdrtmservice1__AddMalfunctionAlert *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(soap, (_Bsdrtmservice1__DelMonReportAttachmentResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachment:
		soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, (_Bsdrtmservice1__DelMonReportAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(soap, (_Bsdrtmservice1__AddMonReportAttachmentResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachment:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, (_Bsdrtmservice1__AddMonReportAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, (_Bsdrtmservice1__GetMonReportAttachmentContentResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, (_Bsdrtmservice1__GetMonReportAttachmentContent *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, (_Bsdrtmservice1__GetMonReportAttachmentsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachments:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, (_Bsdrtmservice1__GetMonReportAttachments *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(soap, (_Bsdrtmservice1__ExistMonReportofFreqResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreq:
		soap_serialize_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, (_Bsdrtmservice1__ExistMonReportofFreq *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, (_Bsdrtmservice1__GetMonReportFreqTypesResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, (_Bsdrtmservice1__GetMonReportFreqTypes *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, (_Bsdrtmservice1__GetMonReportsOfFreqsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, (_Bsdrtmservice1__GetMonReportsOfFreqs *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(soap, (_Bsdrtmservice1__GetMonReportOfFreqResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreq:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, (_Bsdrtmservice1__GetMonReportOfFreq *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportResponse(soap, (_Bsdrtmservice1__DelMonReportResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReport:
		soap_serialize_PointerTo_Bsdrtmservice1__DelMonReport(soap, (_Bsdrtmservice1__DelMonReport *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportResponse(soap, (_Bsdrtmservice1__AddMonReportResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReport:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMonReport(soap, (_Bsdrtmservice1__AddMonReport *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, (_Bsdrtmservice1__GetPreDefinedMonitorsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors:
		soap_serialize_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, (_Bsdrtmservice1__GetPreDefinedMonitors *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(soap, (_Bsdrtmservice1__GetMonAlertOfDayResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDay:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, (_Bsdrtmservice1__GetMonAlertOfDay *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, (_Bsdrtmservice1__GetMonAlertOfMonthResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, (_Bsdrtmservice1__GetMonAlertOfMonth *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlertResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMonAlertResponse(soap, (_Bsdrtmservice1__AddMonAlertResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlert:
		soap_serialize_PointerTo_Bsdrtmservice1__AddMonAlert(soap, (_Bsdrtmservice1__AddMonAlert *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskStateResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__SetTaskStateResponse(soap, (_Bsdrtmservice1__SetTaskStateResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskState:
		soap_serialize_PointerTo_Bsdrtmservice1__SetTaskState(soap, (_Bsdrtmservice1__SetTaskState *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLogResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddTaskLogResponse(soap, (_Bsdrtmservice1__AddTaskLogResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLog:
		soap_serialize_PointerTo_Bsdrtmservice1__AddTaskLog(soap, (_Bsdrtmservice1__AddTaskLog *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(soap, (_Bsdrtmservice1__GetRuningTaskByIdResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskById:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, (_Bsdrtmservice1__GetRuningTaskById *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(soap, (_Bsdrtmservice1__GetRuningTaskIdsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIds:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, (_Bsdrtmservice1__GetRuningTaskIds *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(soap, (_Bsdrtmservice1__GetMonstationUseTimeResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTime:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, (_Bsdrtmservice1__GetMonstationUseTime *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, (_Bsdrtmservice1__GetMonstationUseTimeOfMonth *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLogResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(soap, (_Bsdrtmservice1__AddDevUseLogResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLog:
		soap_serialize_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, (_Bsdrtmservice1__AddDevUseLog *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAntsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllAntsResponse(soap, (_Bsdrtmservice1__GetAllAntsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAnts:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllAnts(soap, (_Bsdrtmservice1__GetAllAnts *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAnts3Response(soap, (_Bsdrtmservice1__GetAnts3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAnts3(soap, (_Bsdrtmservice1__GetAnts3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(soap, (_Bsdrtmservice1__GetDevFunAnts3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, (_Bsdrtmservice1__GetDevFunAnts3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(soap, (_Bsdrtmservice1__GetDevFunAntsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, (_Bsdrtmservice1__GetDevFunAnts *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns3Response(soap, (_Bsdrtmservice1__GetDevFuns3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, (_Bsdrtmservice1__GetDevFuns3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunsResponse(soap, (_Bsdrtmservice1__GetDevFunsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns(soap, (_Bsdrtmservice1__GetDevFuns *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevices3Response(soap, (_Bsdrtmservice1__GetDevices3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevices3(soap, (_Bsdrtmservice1__GetDevices3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevicesResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevicesResponse(soap, (_Bsdrtmservice1__GetDevicesResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevices(soap, (_Bsdrtmservice1__GetDevices *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(soap, (_Bsdrtmservice1__SetRNCPasswordResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPassword:
		soap_serialize_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, (_Bsdrtmservice1__SetRNCPassword *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(soap, (_Bsdrtmservice1__GetAllRNCs3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, (_Bsdrtmservice1__GetAllRNCs3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(soap, (_Bsdrtmservice1__GetAllRNCsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs:
		soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, (_Bsdrtmservice1__GetAllRNCs *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs3Response(soap, (_Bsdrtmservice1__GetRNCs3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs3(soap, (_Bsdrtmservice1__GetRNCs3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRNCsResponse(soap, (_Bsdrtmservice1__GetRNCsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs:
		soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs(soap, (_Bsdrtmservice1__GetRNCs *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations3Response(soap, (_Bsdrtmservice1__GetMonStations3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations3(soap, (_Bsdrtmservice1__GetMonStations3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsResponse(soap, (_Bsdrtmservice1__GetMonStationsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations(soap, (_Bsdrtmservice1__GetMonStations *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(soap, (_Bsdrtmservice1__GetMonControlCenters3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, (_Bsdrtmservice1__GetMonControlCenters3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(soap, (_Bsdrtmservice1__GetMonControlCentersResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, (_Bsdrtmservice1__GetMonControlCenters *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(soap, (_Bsdrtmservice1__GetMonOrgs3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, (_Bsdrtmservice1__GetMonOrgs3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(soap, (_Bsdrtmservice1__GetMonOrgsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, (_Bsdrtmservice1__GetMonOrgs *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(soap, (_Bsdrtmservice1__GetDevModelFuncParamResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParam:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, (_Bsdrtmservice1__GetDevModelFuncParam *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(soap, (_Bsdrtmservice1__GetDevModelFuncParams3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, (_Bsdrtmservice1__GetDevModelFuncParams3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, (_Bsdrtmservice1__GetDevModelFuncParamsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, (_Bsdrtmservice1__GetDevModelFuncParams *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels3Response(soap, (_Bsdrtmservice1__GetDevModels3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels3(soap, (_Bsdrtmservice1__GetDevModels3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelsResponse(soap, (_Bsdrtmservice1__GetDevModelsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels(soap, (_Bsdrtmservice1__GetDevModels *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs3Response(soap, (_Bsdrtmservice1__GetFuncs3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs3(soap, (_Bsdrtmservice1__GetFuncs3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetFuncsResponse(soap, (_Bsdrtmservice1__GetFuncsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs:
		soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs(soap, (_Bsdrtmservice1__GetFuncs *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(soap, (_Bsdrtmservice1__GetDevProtocols3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, (_Bsdrtmservice1__GetDevProtocols3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(soap, (_Bsdrtmservice1__GetDevProtocolsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, (_Bsdrtmservice1__GetDevProtocols *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(soap, (_Bsdrtmservice1__GetDeviceTypes3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, (_Bsdrtmservice1__GetDeviceTypes3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(soap, (_Bsdrtmservice1__GetDeviceTypesResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes:
		soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, (_Bsdrtmservice1__GetDeviceTypes *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(soap, (_Bsdrtmservice1__GetMonStationTypes3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, (_Bsdrtmservice1__GetMonStationTypes3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(soap, (_Bsdrtmservice1__GetMonStationTypesResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, (_Bsdrtmservice1__GetMonStationTypes *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(soap, (_Bsdrtmservice1__GetMonStationsByUserID3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, (_Bsdrtmservice1__GetMonStationsByUserID3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, (_Bsdrtmservice1__GetMonStationsByUserIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID:
		soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, (_Bsdrtmservice1__GetMonStationsByUserID *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfInt64:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfInt64(soap, (Bsdrtmservice1__OptResultOfInt64 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfInt:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfInt(soap, (Bsdrtmservice1__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfArrayOfByte:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, (Bsdrtmservice1__OptResultOfArrayOfByte *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfAttachment:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfAttachment(soap, (Bsdrtmservice1__OptResultOfAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfBoolean:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfBoolean(soap, (Bsdrtmservice1__OptResultOfBoolean *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, (Bsdrtmservice1__OptResultOfRtmMonReportEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, (Bsdrtmservice1__OptResultOfRtmMonAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonTaskLogEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, (Bsdrtmservice1__RtmMonTaskLogEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfTimeSpan:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, (Bsdrtmservice1__OptResultOfTimeSpan *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevUseLogEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, (Bsdrtmservice1__RtmDevUseLogEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmAntEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, (Bsdrtmservice1__OptResultOfRtmAntEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, (Bsdrtmservice1__OptResultOfvRtmDevAntEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, (Bsdrtmservice1__OptResultOfVRtmDevFunEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, (Bsdrtmservice1__OptResultOfRtmDeviceEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, (Bsdrtmservice1__OptResultOfvRtmMonStationEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, (Bsdrtmservice1__OptResultOfRtmControlCenterEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, (Bsdrtmservice1__OptResultOfRtmMonOrgEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, (Bsdrtmservice1__OptResultOfRtmDevModelEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, (Bsdrtmservice1__OptResultOfRtmTypeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfString:
		soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, (Bsdrtmservice1__OptResultOfString *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		soap_serialize_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, (Bsdrtmservice1__vRtmIntellMonTaskEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity:
		soap_serialize_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, (Bsdrtmservice1__vRtmIntellMonTaskEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, (Bsdrtmservice1__RtmMalfunctionAlertEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, (Bsdrtmservice1__RtmMalfunctionAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfLong:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfLong(soap, (Bsdrtmservice1__ArrayOfLong *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBase64Binary:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, (Bsdrtmservice1__ArrayOfBase64Binary *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Attachment:
		soap_serialize_PointerToPointerToBsdrtmservice1__Attachment(soap, (Bsdrtmservice1__Attachment **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment:
		soap_serialize_PointerToBsdrtmservice1__Attachment(soap, (Bsdrtmservice1__Attachment *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfAttachment:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfAttachment(soap, (Bsdrtmservice1__ArrayOfAttachment *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBoolean:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfBoolean(soap, (Bsdrtmservice1__ArrayOfBoolean *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToLONG64:
		soap_serialize_PointerToLONG64(soap, (LONG64 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonReportEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(soap, (Bsdrtmservice1__RtmMonReportEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmMonReportEntity(soap, (Bsdrtmservice1__RtmMonReportEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, (Bsdrtmservice1__ArrayOfRtmMonReportEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, (Bsdrtmservice1__RtmPredefinedMonitorEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, (Bsdrtmservice1__RtmPredefinedMonitorEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(soap, (Bsdrtmservice1__RtmMonAlertEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, (Bsdrtmservice1__RtmMonAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, (Bsdrtmservice1__ArrayOfRtmMonAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(soap, (Bsdrtmservice1__VRtmMonTaskEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity:
		soap_serialize_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, (Bsdrtmservice1__VRtmMonTaskEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__TimeSpan:
		soap_serialize_PointerToPointerToBsdrtmservice1__TimeSpan(soap, (Bsdrtmservice1__TimeSpan **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan:
		soap_serialize_PointerToBsdrtmservice1__TimeSpan(soap, (Bsdrtmservice1__TimeSpan *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfTimeSpan:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, (Bsdrtmservice1__ArrayOfTimeSpan *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmAntEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmAntEntity(soap, (Bsdrtmservice1__RtmAntEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmAntEntity(soap, (Bsdrtmservice1__RtmAntEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmAntEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, (Bsdrtmservice1__ArrayOfRtmAntEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(soap, (Bsdrtmservice1__vRtmDevAntEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity:
		soap_serialize_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, (Bsdrtmservice1__vRtmDevAntEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, (Bsdrtmservice1__ArrayOfVRtmDevAntEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(soap, (Bsdrtmservice1__VRtmDevFunEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity:
		soap_serialize_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, (Bsdrtmservice1__VRtmDevFunEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, (Bsdrtmservice1__ArrayOfVRtmDevFunEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDeviceEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(soap, (Bsdrtmservice1__RtmDeviceEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmDeviceEntity(soap, (Bsdrtmservice1__RtmDeviceEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, (Bsdrtmservice1__ArrayOfRtmDeviceEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity:
		soap_serialize_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(soap, (Bsdrtmservice1__vRtmRncPort2Entity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity:
		soap_serialize_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, (Bsdrtmservice1__vRtmRncPort2Entity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(soap, (Bsdrtmservice1__vRtmRncPORTEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity:
		soap_serialize_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, (Bsdrtmservice1__vRtmRncPORTEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(soap, (Bsdrtmservice1__vRtmMonStationEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity:
		soap_serialize_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, (Bsdrtmservice1__vRtmMonStationEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, (Bsdrtmservice1__ArrayOfVRtmMonStationEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(soap, (Bsdrtmservice1__RtmControlCenterEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, (Bsdrtmservice1__RtmControlCenterEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, (Bsdrtmservice1__ArrayOfRtmControlCenterEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(soap, (Bsdrtmservice1__RtmMonOrgEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, (Bsdrtmservice1__RtmMonOrgEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, (Bsdrtmservice1__ArrayOfRtmMonOrgEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, (Bsdrtmservice1__vRtmDevModelFunParamEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity:
		soap_serialize_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, (Bsdrtmservice1__vRtmDevModelFunParamEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDevModelEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(soap, (Bsdrtmservice1__RtmDevModelEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmDevModelEntity(soap, (Bsdrtmservice1__RtmDevModelEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, (Bsdrtmservice1__ArrayOfRtmDevModelEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmTypeEntity:
		soap_serialize_PointerToPointerToBsdrtmservice1__RtmTypeEntity(soap, (Bsdrtmservice1__RtmTypeEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity:
		soap_serialize_PointerToBsdrtmservice1__RtmTypeEntity(soap, (Bsdrtmservice1__RtmTypeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, (Bsdrtmservice1__ArrayOfRtmTypeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfString:
		soap_serialize_PointerToBsdrtmservice1__ArrayOfString(soap, (Bsdrtmservice1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 Bsdrtmservice_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_Bsdrtmservice_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmTypeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmDevModelEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMonOrgEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmControlCenterEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMonStationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmRncPortEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmDeviceEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmDevFunEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmAntEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmDevUseLogEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfTimeSpan(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfTimeSpan(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan:
		return (void*)soap_instantiate_Bsdrtmservice1__TimeSpan(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMonTaskLogEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMonAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMonReportEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfBoolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfBoolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment:
		return (void*)soap_instantiate_Bsdrtmservice1__Attachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfArrayOfByte(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfBase64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfInt64(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationTypesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationTypes3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationTypes3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDeviceTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDeviceTypesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDeviceTypes3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDeviceTypes3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevProtocols(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevProtocolsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevProtocols3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevProtocols3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs:
		return (void*)soap_instantiate__Bsdrtmservice1__GetFuncs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetFuncsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetFuncs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetFuncs3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModels(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModels3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModels3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonOrgs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonOrgsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonOrgs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonOrgs3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonControlCenters(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonControlCentersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonControlCenters3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonControlCenters3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStations(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStations3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStations3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRNCs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRNCsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRNCs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRNCs3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllRNCs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllRNCsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllRNCs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllRNCs3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword:
		return (void*)soap_instantiate__Bsdrtmservice1__SetRNCPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__SetRNCPasswordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevices3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevices3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFuns(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFunsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFuns3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFuns3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFunAnts(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFunAntsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFunAnts3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetDevFunAnts3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAnts3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAnts3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllAnts(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllAntsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog:
		return (void*)soap_instantiate__Bsdrtmservice1__AddDevUseLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddDevUseLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonstationUseTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRuningTaskIds(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRuningTaskById(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog:
		return (void*)soap_instantiate__Bsdrtmservice1__AddTaskLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddTaskLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState:
		return (void*)soap_instantiate__Bsdrtmservice1__SetTaskState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__SetTaskStateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMonAlert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMonAlertResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonAlertOfDay(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors:
		return (void*)soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitors(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMonReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMonReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport:
		return (void*)soap_instantiate__Bsdrtmservice1__DelMonReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__DelMonReportResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportOfFreq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq:
		return (void*)soap_instantiate__Bsdrtmservice1__ExistMonReportofFreq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportAttachments(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMonReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment:
		return (void*)soap_instantiate__Bsdrtmservice1__DelMonReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMalfunctionAlert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMalfunctionCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts:
		return (void*)soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState:
		return (void*)soap_instantiate__Bsdrtmservice1__SetConfirmedState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__SetConfirmedStateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsByVideo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIds(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask:
		return (void*)soap_instantiate__Bsdrtmservice1__GetIntellTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetIntellTaskResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog:
		return (void*)soap_instantiate__Bsdrtmservice1__AddInetllTaskLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__AddInetllTaskLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState:
		return (void*)soap_instantiate__Bsdrtmservice1__SetInetllTaskState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__SetInetllTaskStateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice:
		return (void*)soap_instantiate__Bsdrtmservice1__GetExtendDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetExtendDeviceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices:
		return (void*)soap_instantiate__Bsdrtmservice1__GetExtendDevices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetExtendDevicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes:
		return (void*)soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs:
		return (void*)soap_instantiate__Bsdrtmservice1__GetIEMSExDevs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse:
		return (void*)soap_instantiate__Bsdrtmservice1__GetIEMSExDevsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__vRtmMonStationEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__vRtmRncPORTEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__VRtmDevFunEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__vRtmDevAntEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__VRtmMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity:
		return (void*)soap_instantiate_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_StringArray:
		return (void*)soap_instantiate_StringArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity:
		return (void*)soap_instantiate_Bsdrtmservice1__vRtmRncPort2Entity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStationsByUserID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStationsByUserID3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStationTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStationTypes3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDeviceTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDeviceTypes3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevProtocols(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevProtocols3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs:
		return (void*)soap_instantiate___Bsdrtmservice1__GetFuncs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetFuncs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevModels(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevModels3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevModelFuncParams(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevModelFuncParams3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParam:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevModelFuncParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonOrgs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonOrgs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonControlCenters(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonControlCenters3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStations(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStations3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs:
		return (void*)soap_instantiate___Bsdrtmservice1__GetRNCs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetRNCs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs:
		return (void*)soap_instantiate___Bsdrtmservice1__GetAllRNCs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetAllRNCs3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetRNCPassword:
		return (void*)soap_instantiate___Bsdrtmservice1__SetRNCPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevices3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevFuns(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevFuns3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevFunAnts(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetDevFunAnts3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAnts3:
		return (void*)soap_instantiate___Bsdrtmservice1__GetAnts3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllAnts:
		return (void*)soap_instantiate___Bsdrtmservice1__GetAllAnts(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddDevUseLog:
		return (void*)soap_instantiate___Bsdrtmservice1__AddDevUseLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTime:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonstationUseTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskIds:
		return (void*)soap_instantiate___Bsdrtmservice1__GetRuningTaskIds(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskById:
		return (void*)soap_instantiate___Bsdrtmservice1__GetRuningTaskById(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddTaskLog:
		return (void*)soap_instantiate___Bsdrtmservice1__AddTaskLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetTaskState:
		return (void*)soap_instantiate___Bsdrtmservice1__SetTaskState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonAlert:
		return (void*)soap_instantiate___Bsdrtmservice1__AddMonAlert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfMonth:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonAlertOfMonth(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfDay:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonAlertOfDay(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPreDefinedMonitors:
		return (void*)soap_instantiate___Bsdrtmservice1__GetPreDefinedMonitors(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReport:
		return (void*)soap_instantiate___Bsdrtmservice1__AddMonReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReport:
		return (void*)soap_instantiate___Bsdrtmservice1__DelMonReport(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportOfFreq:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonReportOfFreq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportsOfFreqs:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonReportsOfFreqs(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportFreqTypes:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonReportFreqTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__ExistMonReportofFreq:
		return (void*)soap_instantiate___Bsdrtmservice1__ExistMonReportofFreq(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachments:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonReportAttachments(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachmentContent:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonReportAttachmentContent(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReportAttachment:
		return (void*)soap_instantiate___Bsdrtmservice1__AddMonReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReportAttachment:
		return (void*)soap_instantiate___Bsdrtmservice1__DelMonReportAttachment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMalfunctionAlert:
		return (void*)soap_instantiate___Bsdrtmservice1__AddMalfunctionAlert(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionCode:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMalfunctionCode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllMalfunctionAlertCount:
		return (void*)soap_instantiate___Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPageMalfunctionAlerts:
		return (void*)soap_instantiate___Bsdrtmservice1__GetPageMalfunctionAlerts(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetConfirmedState:
		return (void*)soap_instantiate___Bsdrtmservice1__SetConfirmedState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByVideo:
		return (void*)soap_instantiate___Bsdrtmservice1__GetMonStationsByVideo(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningIntellTaskIds:
		return (void*)soap_instantiate___Bsdrtmservice1__GetRuningIntellTaskIds(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIntellTask:
		return (void*)soap_instantiate___Bsdrtmservice1__GetIntellTask(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddInetllTaskLog:
		return (void*)soap_instantiate___Bsdrtmservice1__AddInetllTaskLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetInetllTaskState:
		return (void*)soap_instantiate___Bsdrtmservice1__SetInetllTaskState(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevice:
		return (void*)soap_instantiate___Bsdrtmservice1__GetExtendDevice(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevices:
		return (void*)soap_instantiate___Bsdrtmservice1__GetExtendDevices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevicesByDataTypes:
		return (void*)soap_instantiate___Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIEMSExDevs:
		return (void*)soap_instantiate___Bsdrtmservice1__GetIEMSExDevs(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_Bsdrtmservice_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 Bsdrtmservice_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_Bsdrtmservice_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfString*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfString*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmTypeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmTypeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmTypeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmTypeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmTypeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmTypeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmDevModelEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmDevModelEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmDevModelEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmDevModelEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmDevModelEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmDevModelEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmDevModelFunParamEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmDevModelFunParamEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMonOrgEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMonOrgEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmControlCenterEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmControlCenterEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMonStationEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMonStationEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmRncPortEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmRncPortEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmDeviceEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmDeviceEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmDeviceEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmDeviceEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmDeviceEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmDeviceEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmDevFunEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmDevFunEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmAntEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmAntEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmAntEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmAntEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmAntEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmAntEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmDevUseLogEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmDevUseLogEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfTimeSpan*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfTimeSpan*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfTimeSpan*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfTimeSpan*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__TimeSpan*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__TimeSpan*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMonTaskLogEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMonTaskLogEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMonAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMonAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmPredefinedMonitorEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmPredefinedMonitorEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMonReportEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMonReportEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmMonReportEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmMonReportEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmMonReportEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmMonReportEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfLong*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfLong*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfBoolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfBoolean*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfBoolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfBoolean*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__Attachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__Attachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfArrayOfByte*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfArrayOfByte*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfBase64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfBase64Binary*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmMalfunctionAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmMalfunctionAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfInt*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfInt64*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfInt64*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__RtmIntellMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__RtmIntellMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsByUserID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsByUserID*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsByUserIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsByUserIDResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsByUserID3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsByUserID3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsByUserID3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsByUserID3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationTypesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationTypesResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationTypes3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationTypes3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationTypes3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationTypes3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDeviceTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDeviceTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDeviceTypesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDeviceTypesResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDeviceTypes3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDeviceTypes3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDeviceTypes3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDeviceTypes3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevProtocols*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevProtocols*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevProtocolsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevProtocolsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevProtocols3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevProtocols3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevProtocols3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevProtocols3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetFuncs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetFuncs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetFuncsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetFuncsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetFuncs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetFuncs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetFuncs3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetFuncs3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModels*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModels*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModels3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModels3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModels3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModels3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelFuncParams*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelFuncParams*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelFuncParamsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelFuncParamsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelFuncParams3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelFuncParams3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelFuncParams3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelFuncParams3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelFuncParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelFuncParam*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevModelFuncParamResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevModelFuncParamResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonOrgs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonOrgs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonOrgsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonOrgsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonOrgs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonOrgs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonOrgs3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonOrgs3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonControlCenters*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonControlCenters*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonControlCentersResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonControlCentersResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonControlCenters3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonControlCenters3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonControlCenters3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonControlCenters3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStations*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStations*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStations3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStations3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStations3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStations3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRNCs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRNCs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRNCsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRNCsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRNCs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRNCs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRNCs3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRNCs3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllRNCs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllRNCs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllRNCsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllRNCsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllRNCs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllRNCs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllRNCs3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllRNCs3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetRNCPassword*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetRNCPassword*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetRNCPasswordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetRNCPasswordResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevices*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevices*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevicesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevicesResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevices3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevices3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevices3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevices3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFuns*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFuns*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFunsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFunsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFuns3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFuns3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFuns3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFuns3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFunAnts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFunAnts*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFunAntsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFunAntsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFunAnts3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFunAnts3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetDevFunAnts3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetDevFunAnts3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAnts3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAnts3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAnts3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAnts3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllAnts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllAnts*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllAntsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllAntsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddDevUseLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddDevUseLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddDevUseLogResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddDevUseLogResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonstationUseTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonstationUseTime*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonstationUseTimeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonstationUseTimeResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRuningTaskIds*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRuningTaskIds*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRuningTaskIdsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRuningTaskIdsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRuningTaskById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRuningTaskById*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRuningTaskByIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRuningTaskByIdResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddTaskLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddTaskLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddTaskLogResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddTaskLogResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetTaskState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetTaskState*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetTaskStateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetTaskStateResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMonAlert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMonAlert*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMonAlertResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMonAlertResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonAlertOfMonth*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonAlertOfMonth*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonAlertOfMonthResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonAlertOfMonthResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonAlertOfDay*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonAlertOfDay*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonAlertOfDayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonAlertOfDayResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetPreDefinedMonitors*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetPreDefinedMonitors*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMonReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMonReport*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMonReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMonReportResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__DelMonReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__DelMonReport*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__DelMonReportResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__DelMonReportResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportOfFreq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportOfFreq*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportOfFreqResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportOfFreqResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportsOfFreqs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportsOfFreqs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportFreqTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportFreqTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportFreqTypesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportFreqTypesResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__ExistMonReportofFreq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__ExistMonReportofFreq*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__ExistMonReportofFreqResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__ExistMonReportofFreqResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportAttachments*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportAttachments*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportAttachmentsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportAttachmentsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportAttachmentContent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportAttachmentContent*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMonReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMonReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMonReportAttachmentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMonReportAttachmentResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__DelMonReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__DelMonReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__DelMonReportAttachmentResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__DelMonReportAttachmentResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMalfunctionAlert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMalfunctionAlert*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddMalfunctionAlertResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddMalfunctionAlertResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMalfunctionCode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMalfunctionCode*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMalfunctionCodeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMalfunctionCodeResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllMalfunctionAlertCount*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllMalfunctionAlertCount*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetPageMalfunctionAlerts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetPageMalfunctionAlerts*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetConfirmedState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetConfirmedState*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetConfirmedStateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetConfirmedStateResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsByVideo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsByVideo*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetMonStationsByVideoResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetMonStationsByVideoResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRuningIntellTaskIds*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRuningIntellTaskIds*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetIntellTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetIntellTask*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetIntellTaskResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetIntellTaskResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddInetllTaskLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddInetllTaskLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__AddInetllTaskLogResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__AddInetllTaskLogResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetInetllTaskState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetInetllTaskState*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__SetInetllTaskStateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__SetInetllTaskStateResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetExtendDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetExtendDevice*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetExtendDeviceResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetExtendDeviceResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetExtendDevices*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetExtendDevices*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetExtendDevicesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetExtendDevicesResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetExtendDevicesByDataTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetExtendDevicesByDataTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetIEMSExDevs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetIEMSExDevs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdrtmservice1__GetIEMSExDevsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdrtmservice1__GetIEMSExDevsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__vRtmDevModelFunParamEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__vRtmDevModelFunParamEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__vRtmMonStationEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__vRtmMonStationEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__vRtmRncPORTEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__vRtmRncPORTEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__VRtmDevFunEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__VRtmDevFunEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__vRtmDevAntEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__vRtmDevAntEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__VRtmMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__VRtmMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__vRtmIntellMonTaskEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__vRtmIntellMonTaskEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_StringArray:
		if (p->size < 0)
			SOAP_DELETE((StringArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((StringArray*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity:
		if (p->size < 0)
			SOAP_DELETE((Bsdrtmservice1__vRtmRncPort2Entity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdrtmservice1__vRtmRncPort2Entity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStationsByUserID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStationsByUserID*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStationsByUserID3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStationsByUserID3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStationTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStationTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStationTypes3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStationTypes3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDeviceTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDeviceTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDeviceTypes3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDeviceTypes3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevProtocols*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevProtocols*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevProtocols3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevProtocols3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetFuncs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetFuncs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetFuncs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetFuncs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevModels*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevModels*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevModels3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevModels3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevModelFuncParams*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevModelFuncParams*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevModelFuncParams3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevModelFuncParams3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParam:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevModelFuncParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevModelFuncParam*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonOrgs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonOrgs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonOrgs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonOrgs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonControlCenters*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonControlCenters*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonControlCenters3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonControlCenters3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStations*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStations*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStations3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStations3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetRNCs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetRNCs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetRNCs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetRNCs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetAllRNCs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetAllRNCs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetAllRNCs3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetAllRNCs3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetRNCPassword:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__SetRNCPassword*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__SetRNCPassword*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevices*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevices*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevices3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevices3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevFuns*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevFuns*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevFuns3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevFuns3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevFunAnts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevFunAnts*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetDevFunAnts3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetDevFunAnts3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAnts3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetAnts3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetAnts3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllAnts:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetAllAnts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetAllAnts*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddDevUseLog:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddDevUseLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddDevUseLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTimeOfMonth:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTime:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonstationUseTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonstationUseTime*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskIds:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetRuningTaskIds*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetRuningTaskIds*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskById:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetRuningTaskById*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetRuningTaskById*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddTaskLog:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddTaskLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddTaskLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetTaskState:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__SetTaskState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__SetTaskState*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonAlert:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddMonAlert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddMonAlert*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfMonth:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonAlertOfMonth*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonAlertOfMonth*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfDay:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonAlertOfDay*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonAlertOfDay*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPreDefinedMonitors:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetPreDefinedMonitors*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetPreDefinedMonitors*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReport:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddMonReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddMonReport*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReport:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__DelMonReport*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__DelMonReport*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportOfFreq:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonReportOfFreq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonReportOfFreq*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportsOfFreqs:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonReportsOfFreqs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonReportsOfFreqs*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportFreqTypes:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonReportFreqTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonReportFreqTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__ExistMonReportofFreq:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__ExistMonReportofFreq*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__ExistMonReportofFreq*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachments:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonReportAttachments*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonReportAttachments*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachmentContent:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonReportAttachmentContent*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonReportAttachmentContent*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddMonReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddMonReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReportAttachment:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__DelMonReportAttachment*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__DelMonReportAttachment*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMalfunctionAlert:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddMalfunctionAlert*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddMalfunctionAlert*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionCode:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMalfunctionCode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMalfunctionCode*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllMalfunctionAlertCount:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetAllMalfunctionAlertCount*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetAllMalfunctionAlertCount*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPageMalfunctionAlerts:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetPageMalfunctionAlerts*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetPageMalfunctionAlerts*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetConfirmedState:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__SetConfirmedState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__SetConfirmedState*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByVideo:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetMonStationsByVideo*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetMonStationsByVideo*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningIntellTaskIds:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetRuningIntellTaskIds*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetRuningIntellTaskIds*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIntellTask:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetIntellTask*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetIntellTask*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddInetllTaskLog:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__AddInetllTaskLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__AddInetllTaskLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetInetllTaskState:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__SetInetllTaskState*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__SetInetllTaskState*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevice:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetExtendDevice*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetExtendDevice*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevices:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetExtendDevices*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetExtendDevices*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevicesByDataTypes:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetExtendDevicesByDataTypes*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetExtendDevicesByDataTypes*)p->ptr);
		break;
	case SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIEMSExDevs:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdrtmservice1__GetIEMSExDevs*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdrtmservice1__GetIEMSExDevs*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_Bsdrtmservice_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, Bsdrtmservice_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void StringArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrString = NULL;
}

void StringArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptrString && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrString, 1, SOAP_TYPE_Bsdrtmservice_StringArray))
		for (int i = 0; i < this->__size; i++)
		{	soap_embedded(soap, this->__ptrString + i, SOAP_TYPE_Bsdrtmservice_std__string);
			soap_serialize_std__string(soap, this->__ptrString + i);
		}
}

int StringArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_StringArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StringArray(struct soap *soap, const char *tag, int id, const StringArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = a->__ptrString ? soap_putsize(soap, "xsd:string", a->__size) : NULL;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrString, 1, type, SOAP_TYPE_Bsdrtmservice_StringArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_std__string(soap, "String", -1, &a->__ptrString[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *StringArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_StringArray(soap, tag, this, type);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_in_StringArray(struct soap *soap, const char *tag, StringArray *a, const char *type)
{	int i, j;
	std::string *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (StringArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_StringArray, sizeof(StringArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrString = soap_new_std__string(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__string(soap, a->__ptrString+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__string(soap, NULL, a->__ptrString + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	std::string q;
			if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (std::string *)soap_push_block(soap, NULL, sizeof(std::string));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(std::string));
				soap_default_std__string(soap, p);
				if (!soap_in_std__string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptrString = soap_new_std__string(soap, soap->blist->size/sizeof(std::string));
			else
				a->__ptrString = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptrString, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (StringArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_StringArray, 0, sizeof(StringArray), 0, soap_copy_StringArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int StringArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrString, 1, tag, SOAP_TYPE_Bsdrtmservice_StringArray);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *StringArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_StringArray(soap, this, tag, type);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_get_StringArray(struct soap *soap, StringArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_StringArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 StringArray * SOAP_FMAC2 soap_instantiate_StringArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_StringArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_StringArray, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(StringArray);
		if (size)
			*size = sizeof(StringArray);
		((StringArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(StringArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(StringArray);
		for (int i = 0; i < n; i++)
			((StringArray*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (StringArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_StringArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying StringArray %p -> %p\n", q, p));
	*(StringArray*)p = *(StringArray*)q;
}

void _Bsdrtmservice1__GetIEMSExDevsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetIEMSExDevsResponse::GetIEMSExDevsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetIEMSExDevsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetIEMSExDevsResponse::GetIEMSExDevsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetIEMSExDevsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetIEMSExDevsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetIEMSExDevsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse), type))
		return soap->error;
	if (a->GetIEMSExDevsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetIEMSExDevsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetIEMSExDevsResult", -1, &(a->_Bsdrtmservice1__GetIEMSExDevsResponse::GetIEMSExDevsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetIEMSExDevsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetIEMSExDevsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIEMSExDevsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetIEMSExDevsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse, sizeof(_Bsdrtmservice1__GetIEMSExDevsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetIEMSExDevsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetIEMSExDevsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetIEMSExDevsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetIEMSExDevsResult", &(a->_Bsdrtmservice1__GetIEMSExDevsResponse::GetIEMSExDevsResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetIEMSExDevsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetIEMSExDevsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetIEMSExDevsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse, 0, sizeof(_Bsdrtmservice1__GetIEMSExDevsResponse), 0, soap_copy__Bsdrtmservice1__GetIEMSExDevsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetIEMSExDevsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetIEMSExDevsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetIEMSExDevsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetIEMSExDevsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetIEMSExDevsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetIEMSExDevsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetIEMSExDevsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIEMSExDevsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetIEMSExDevsResponse);
		((_Bsdrtmservice1__GetIEMSExDevsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIEMSExDevsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetIEMSExDevsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetIEMSExDevsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetIEMSExDevsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetIEMSExDevsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetIEMSExDevsResponse*)p = *(_Bsdrtmservice1__GetIEMSExDevsResponse*)q;
}

void _Bsdrtmservice1__GetIEMSExDevs::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::monno);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::ip);
	soap_default_xsd__decimal(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::port);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetIEMSExDevs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::monno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::monno);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::ip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::ip);
	soap_serialize_xsd__decimal(soap, &this->_Bsdrtmservice1__GetIEMSExDevs::port);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetIEMSExDevs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetIEMSExDevs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetIEMSExDevs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monno", -1, &(a->_Bsdrtmservice1__GetIEMSExDevs::monno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:ip", -1, &(a->_Bsdrtmservice1__GetIEMSExDevs::ip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:port", -1, &(a->_Bsdrtmservice1__GetIEMSExDevs::port), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetIEMSExDevs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetIEMSExDevs(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevs * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIEMSExDevs *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetIEMSExDevs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs, sizeof(_Bsdrtmservice1__GetIEMSExDevs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetIEMSExDevs *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monno1 = 1;
	size_t soap_flag_ip1 = 1;
	size_t soap_flag_port1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monno", &(a->_Bsdrtmservice1__GetIEMSExDevs::monno), "xsd:string"))
				{	soap_flag_monno1--;
					continue;
				}
			if (soap_flag_ip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:ip", &(a->_Bsdrtmservice1__GetIEMSExDevs::ip), "xsd:string"))
				{	soap_flag_ip1--;
					continue;
				}
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:port", &(a->_Bsdrtmservice1__GetIEMSExDevs::port), "xsd:decimal"))
				{	soap_flag_port1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetIEMSExDevs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs, 0, sizeof(_Bsdrtmservice1__GetIEMSExDevs), 0, soap_copy__Bsdrtmservice1__GetIEMSExDevs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_port1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetIEMSExDevs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetIEMSExDevs", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetIEMSExDevs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetIEMSExDevs(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevs * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevs *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetIEMSExDevs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetIEMSExDevs * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetIEMSExDevs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIEMSExDevs);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetIEMSExDevs);
		((_Bsdrtmservice1__GetIEMSExDevs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIEMSExDevs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetIEMSExDevs);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetIEMSExDevs*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetIEMSExDevs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetIEMSExDevs %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetIEMSExDevs*)p = *(_Bsdrtmservice1__GetIEMSExDevs*)q;
}

void _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::GetExtendDevicesByDataTypesResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, &this->_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::GetExtendDevicesByDataTypesResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse), type))
		return soap->error;
	if (a->GetExtendDevicesByDataTypesResult)
		soap_element_result(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypesResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypesResult", -1, &(a->_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::GetExtendDevicesByDataTypesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetExtendDevicesByDataTypesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetExtendDevicesByDataTypesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypesResult", &(a->_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::GetExtendDevicesByDataTypesResult), "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity"))
				{	soap_flag_GetExtendDevicesByDataTypesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse, 0, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse), 0, soap_copy__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetExtendDevicesByDataTypesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
		((_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)p = *(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse*)q;
}

void _Bsdrtmservice1__GetExtendDevicesByDataTypes::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevicesByDataTypes::monno);
	this->_Bsdrtmservice1__GetExtendDevicesByDataTypes::datatypes = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetExtendDevicesByDataTypes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetExtendDevicesByDataTypes::monno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevicesByDataTypes::monno);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfString(soap, &this->_Bsdrtmservice1__GetExtendDevicesByDataTypes::datatypes);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetExtendDevicesByDataTypes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetExtendDevicesByDataTypes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monno", -1, &(a->_Bsdrtmservice1__GetExtendDevicesByDataTypes::monno), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:datatypes", -1, &(a->_Bsdrtmservice1__GetExtendDevicesByDataTypes::datatypes), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetExtendDevicesByDataTypes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypes * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevicesByDataTypes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetExtendDevicesByDataTypes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetExtendDevicesByDataTypes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monno1 = 1;
	size_t soap_flag_datatypes1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monno", &(a->_Bsdrtmservice1__GetExtendDevicesByDataTypes::monno), "xsd:string"))
				{	soap_flag_monno1--;
					continue;
				}
			if (soap_flag_datatypes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:datatypes", &(a->_Bsdrtmservice1__GetExtendDevicesByDataTypes::datatypes), "Bsdrtmservice1:ArrayOfString"))
				{	soap_flag_datatypes1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetExtendDevicesByDataTypes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes, 0, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypes), 0, soap_copy__Bsdrtmservice1__GetExtendDevicesByDataTypes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetExtendDevicesByDataTypes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetExtendDevicesByDataTypes", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetExtendDevicesByDataTypes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypes * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetExtendDevicesByDataTypes * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevicesByDataTypes);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypes);
		((_Bsdrtmservice1__GetExtendDevicesByDataTypes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevicesByDataTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypes);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetExtendDevicesByDataTypes*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetExtendDevicesByDataTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetExtendDevicesByDataTypes %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetExtendDevicesByDataTypes*)p = *(_Bsdrtmservice1__GetExtendDevicesByDataTypes*)q;
}

void _Bsdrtmservice1__GetExtendDevicesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetExtendDevicesResponse::GetExtendDevicesResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetExtendDevicesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, &this->_Bsdrtmservice1__GetExtendDevicesResponse::GetExtendDevicesResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetExtendDevicesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetExtendDevicesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetExtendDevicesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse), type))
		return soap->error;
	if (a->GetExtendDevicesResult)
		soap_element_result(soap, "Bsdrtmservice1:GetExtendDevicesResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:GetExtendDevicesResult", -1, &(a->_Bsdrtmservice1__GetExtendDevicesResponse::GetExtendDevicesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetExtendDevicesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetExtendDevicesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevicesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetExtendDevicesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse, sizeof(_Bsdrtmservice1__GetExtendDevicesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetExtendDevicesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetExtendDevicesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetExtendDevicesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:GetExtendDevicesResult", &(a->_Bsdrtmservice1__GetExtendDevicesResponse::GetExtendDevicesResult), "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity"))
				{	soap_flag_GetExtendDevicesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetExtendDevicesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetExtendDevicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse, 0, sizeof(_Bsdrtmservice1__GetExtendDevicesResponse), 0, soap_copy__Bsdrtmservice1__GetExtendDevicesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetExtendDevicesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetExtendDevicesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetExtendDevicesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetExtendDevicesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetExtendDevicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetExtendDevicesResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetExtendDevicesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevicesResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetExtendDevicesResponse);
		((_Bsdrtmservice1__GetExtendDevicesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevicesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetExtendDevicesResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetExtendDevicesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetExtendDevicesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetExtendDevicesResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetExtendDevicesResponse*)p = *(_Bsdrtmservice1__GetExtendDevicesResponse*)q;
}

void _Bsdrtmservice1__GetExtendDevices::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevices::monno);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetExtendDevices::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetExtendDevices::monno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevices::monno);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetExtendDevices::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetExtendDevices(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetExtendDevices(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetExtendDevices *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monno", -1, &(a->_Bsdrtmservice1__GetExtendDevices::monno), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetExtendDevices::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetExtendDevices(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevices * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetExtendDevices(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevices *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetExtendDevices *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices, sizeof(_Bsdrtmservice1__GetExtendDevices), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetExtendDevices *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monno1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monno", &(a->_Bsdrtmservice1__GetExtendDevices::monno), "xsd:string"))
				{	soap_flag_monno1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetExtendDevices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices, 0, sizeof(_Bsdrtmservice1__GetExtendDevices), 0, soap_copy__Bsdrtmservice1__GetExtendDevices);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetExtendDevices::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetExtendDevices", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetExtendDevices::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetExtendDevices(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevices * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetExtendDevices(struct soap *soap, _Bsdrtmservice1__GetExtendDevices *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetExtendDevices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetExtendDevices * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetExtendDevices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetExtendDevices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevices);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetExtendDevices);
		((_Bsdrtmservice1__GetExtendDevices*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetExtendDevices);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetExtendDevices*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetExtendDevices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetExtendDevices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetExtendDevices %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetExtendDevices*)p = *(_Bsdrtmservice1__GetExtendDevices*)q;
}

void _Bsdrtmservice1__GetExtendDeviceResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetExtendDeviceResponse::GetExtendDeviceResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetExtendDeviceResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, &this->_Bsdrtmservice1__GetExtendDeviceResponse::GetExtendDeviceResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetExtendDeviceResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetExtendDeviceResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetExtendDeviceResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse), type))
		return soap->error;
	if (a->GetExtendDeviceResult)
		soap_element_result(soap, "Bsdrtmservice1:GetExtendDeviceResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:GetExtendDeviceResult", -1, &(a->_Bsdrtmservice1__GetExtendDeviceResponse::GetExtendDeviceResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetExtendDeviceResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetExtendDeviceResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDeviceResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDeviceResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetExtendDeviceResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse, sizeof(_Bsdrtmservice1__GetExtendDeviceResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetExtendDeviceResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetExtendDeviceResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetExtendDeviceResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:GetExtendDeviceResult", &(a->_Bsdrtmservice1__GetExtendDeviceResponse::GetExtendDeviceResult), "Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity"))
				{	soap_flag_GetExtendDeviceResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetExtendDeviceResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetExtendDeviceResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse, 0, sizeof(_Bsdrtmservice1__GetExtendDeviceResponse), 0, soap_copy__Bsdrtmservice1__GetExtendDeviceResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetExtendDeviceResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetExtendDeviceResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetExtendDeviceResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetExtendDeviceResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDeviceResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDeviceResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetExtendDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetExtendDeviceResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetExtendDeviceResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDeviceResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetExtendDeviceResponse);
		((_Bsdrtmservice1__GetExtendDeviceResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDeviceResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetExtendDeviceResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetExtendDeviceResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetExtendDeviceResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetExtendDeviceResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetExtendDeviceResponse*)p = *(_Bsdrtmservice1__GetExtendDeviceResponse*)q;
}

void _Bsdrtmservice1__GetExtendDevice::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevice::monno);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevice::datatype);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetExtendDevice::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetExtendDevice::monno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevice::monno);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetExtendDevice::datatype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetExtendDevice::datatype);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetExtendDevice::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetExtendDevice(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetExtendDevice(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetExtendDevice *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monno", -1, &(a->_Bsdrtmservice1__GetExtendDevice::monno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:datatype", -1, &(a->_Bsdrtmservice1__GetExtendDevice::datatype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetExtendDevice::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetExtendDevice(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevice * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetExtendDevice(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevice *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetExtendDevice *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice, sizeof(_Bsdrtmservice1__GetExtendDevice), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetExtendDevice *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monno1 = 1;
	size_t soap_flag_datatype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monno", &(a->_Bsdrtmservice1__GetExtendDevice::monno), "xsd:string"))
				{	soap_flag_monno1--;
					continue;
				}
			if (soap_flag_datatype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:datatype", &(a->_Bsdrtmservice1__GetExtendDevice::datatype), "xsd:string"))
				{	soap_flag_datatype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetExtendDevice *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice, 0, sizeof(_Bsdrtmservice1__GetExtendDevice), 0, soap_copy__Bsdrtmservice1__GetExtendDevice);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetExtendDevice::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetExtendDevice", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetExtendDevice::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetExtendDevice(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevice * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetExtendDevice(struct soap *soap, _Bsdrtmservice1__GetExtendDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetExtendDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetExtendDevice * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetExtendDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetExtendDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevice);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetExtendDevice);
		((_Bsdrtmservice1__GetExtendDevice*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetExtendDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetExtendDevice);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetExtendDevice*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetExtendDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetExtendDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetExtendDevice %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetExtendDevice*)p = *(_Bsdrtmservice1__GetExtendDevice*)q;
}

void _Bsdrtmservice1__SetInetllTaskStateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__SetInetllTaskStateResponse::SetInetllTaskStateResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetInetllTaskStateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__SetInetllTaskStateResponse::SetInetllTaskStateResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetInetllTaskStateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetInetllTaskStateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetInetllTaskStateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse), type))
		return soap->error;
	if (a->SetInetllTaskStateResult)
		soap_element_result(soap, "Bsdrtmservice1:SetInetllTaskStateResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetInetllTaskStateResult", -1, &(a->_Bsdrtmservice1__SetInetllTaskStateResponse::SetInetllTaskStateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetInetllTaskStateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetInetllTaskStateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskStateResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetInetllTaskStateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetInetllTaskStateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse, sizeof(_Bsdrtmservice1__SetInetllTaskStateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetInetllTaskStateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetInetllTaskStateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetInetllTaskStateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetInetllTaskStateResult", &(a->_Bsdrtmservice1__SetInetllTaskStateResponse::SetInetllTaskStateResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_SetInetllTaskStateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:SetInetllTaskStateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetInetllTaskStateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse, 0, sizeof(_Bsdrtmservice1__SetInetllTaskStateResponse), 0, soap_copy__Bsdrtmservice1__SetInetllTaskStateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetInetllTaskStateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetInetllTaskStateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetInetllTaskStateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetInetllTaskStateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskStateResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetInetllTaskStateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetInetllTaskStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetInetllTaskStateResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetInetllTaskStateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetInetllTaskStateResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetInetllTaskStateResponse);
		((_Bsdrtmservice1__SetInetllTaskStateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetInetllTaskStateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetInetllTaskStateResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetInetllTaskStateResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetInetllTaskStateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetInetllTaskStateResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetInetllTaskStateResponse*)p = *(_Bsdrtmservice1__SetInetllTaskStateResponse*)q;
}

void _Bsdrtmservice1__SetInetllTaskState::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetInetllTaskState::taskId);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetInetllTaskState::taskState);
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetInetllTaskState::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__SetInetllTaskState::taskId, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetInetllTaskState::taskId);
	soap_embedded(soap, &this->_Bsdrtmservice1__SetInetllTaskState::taskState, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetInetllTaskState::taskState);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetInetllTaskState::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetInetllTaskState(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetInetllTaskState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:taskId", -1, &(a->_Bsdrtmservice1__SetInetllTaskState::taskId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:taskState", -1, &(a->_Bsdrtmservice1__SetInetllTaskState::taskState), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetInetllTaskState::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetInetllTaskState(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskState * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const char *tag, _Bsdrtmservice1__SetInetllTaskState *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetInetllTaskState *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState, sizeof(_Bsdrtmservice1__SetInetllTaskState), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetInetllTaskState *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_taskId1 = 1;
	size_t soap_flag_taskState1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_taskId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:taskId", &(a->_Bsdrtmservice1__SetInetllTaskState::taskId), "xsd:string"))
				{	soap_flag_taskId1--;
					continue;
				}
			if (soap_flag_taskState1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:taskState", &(a->_Bsdrtmservice1__SetInetllTaskState::taskState), "xsd:string"))
				{	soap_flag_taskState1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetInetllTaskState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState, 0, sizeof(_Bsdrtmservice1__SetInetllTaskState), 0, soap_copy__Bsdrtmservice1__SetInetllTaskState);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetInetllTaskState::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetInetllTaskState", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetInetllTaskState::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetInetllTaskState(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskState * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetInetllTaskState(struct soap *soap, _Bsdrtmservice1__SetInetllTaskState *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetInetllTaskState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetInetllTaskState * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetInetllTaskState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetInetllTaskState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetInetllTaskState);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetInetllTaskState);
		((_Bsdrtmservice1__SetInetllTaskState*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetInetllTaskState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetInetllTaskState);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetInetllTaskState*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetInetllTaskState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetInetllTaskState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetInetllTaskState %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetInetllTaskState*)p = *(_Bsdrtmservice1__SetInetllTaskState*)q;
}

void _Bsdrtmservice1__AddInetllTaskLogResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddInetllTaskLogResponse::AddInetllTaskLogResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddInetllTaskLogResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddInetllTaskLogResponse::AddInetllTaskLogResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddInetllTaskLogResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddInetllTaskLogResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddInetllTaskLogResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse), type))
		return soap->error;
	if (a->AddInetllTaskLogResult)
		soap_element_result(soap, "Bsdrtmservice1:AddInetllTaskLogResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddInetllTaskLogResult", -1, &(a->_Bsdrtmservice1__AddInetllTaskLogResponse::AddInetllTaskLogResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddInetllTaskLogResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddInetllTaskLogResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLogResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddInetllTaskLogResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddInetllTaskLogResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse, sizeof(_Bsdrtmservice1__AddInetllTaskLogResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddInetllTaskLogResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddInetllTaskLogResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddInetllTaskLogResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddInetllTaskLogResult", &(a->_Bsdrtmservice1__AddInetllTaskLogResponse::AddInetllTaskLogResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddInetllTaskLogResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddInetllTaskLogResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddInetllTaskLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse, 0, sizeof(_Bsdrtmservice1__AddInetllTaskLogResponse), 0, soap_copy__Bsdrtmservice1__AddInetllTaskLogResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddInetllTaskLogResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddInetllTaskLogResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddInetllTaskLogResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddInetllTaskLogResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLogResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddInetllTaskLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddInetllTaskLogResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddInetllTaskLogResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddInetllTaskLogResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddInetllTaskLogResponse);
		((_Bsdrtmservice1__AddInetllTaskLogResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddInetllTaskLogResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddInetllTaskLogResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddInetllTaskLogResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddInetllTaskLogResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddInetllTaskLogResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddInetllTaskLogResponse*)p = *(_Bsdrtmservice1__AddInetllTaskLogResponse*)q;
}

void _Bsdrtmservice1__AddInetllTaskLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddInetllTaskLog::taskLog = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddInetllTaskLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, &this->_Bsdrtmservice1__AddInetllTaskLog::taskLog);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddInetllTaskLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddInetllTaskLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddInetllTaskLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, "Bsdrtmservice1:taskLog", -1, &(a->_Bsdrtmservice1__AddInetllTaskLog::taskLog), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddInetllTaskLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddInetllTaskLog(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLog * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const char *tag, _Bsdrtmservice1__AddInetllTaskLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddInetllTaskLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog, sizeof(_Bsdrtmservice1__AddInetllTaskLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddInetllTaskLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_taskLog1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_taskLog1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, "Bsdrtmservice1:taskLog", &(a->_Bsdrtmservice1__AddInetllTaskLog::taskLog), "Bsdrtmservice1:RtmMonTaskLogEntity"))
				{	soap_flag_taskLog1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddInetllTaskLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog, 0, sizeof(_Bsdrtmservice1__AddInetllTaskLog), 0, soap_copy__Bsdrtmservice1__AddInetllTaskLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddInetllTaskLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddInetllTaskLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddInetllTaskLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddInetllTaskLog(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLog * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLog *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddInetllTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddInetllTaskLog * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddInetllTaskLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddInetllTaskLog);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddInetllTaskLog);
		((_Bsdrtmservice1__AddInetllTaskLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddInetllTaskLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddInetllTaskLog);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddInetllTaskLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddInetllTaskLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddInetllTaskLog %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddInetllTaskLog*)p = *(_Bsdrtmservice1__AddInetllTaskLog*)q;
}

void _Bsdrtmservice1__GetIntellTaskResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetIntellTaskResponse::GetIntellTaskResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetIntellTaskResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, &this->_Bsdrtmservice1__GetIntellTaskResponse::GetIntellTaskResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetIntellTaskResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetIntellTaskResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetIntellTaskResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse), type))
		return soap->error;
	if (a->GetIntellTaskResult)
		soap_element_result(soap, "Bsdrtmservice1:GetIntellTaskResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, "Bsdrtmservice1:GetIntellTaskResult", -1, &(a->_Bsdrtmservice1__GetIntellTaskResponse::GetIntellTaskResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetIntellTaskResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetIntellTaskResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTaskResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIntellTaskResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetIntellTaskResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse, sizeof(_Bsdrtmservice1__GetIntellTaskResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetIntellTaskResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetIntellTaskResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetIntellTaskResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, "Bsdrtmservice1:GetIntellTaskResult", &(a->_Bsdrtmservice1__GetIntellTaskResponse::GetIntellTaskResult), "Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity"))
				{	soap_flag_GetIntellTaskResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetIntellTaskResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetIntellTaskResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse, 0, sizeof(_Bsdrtmservice1__GetIntellTaskResponse), 0, soap_copy__Bsdrtmservice1__GetIntellTaskResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetIntellTaskResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetIntellTaskResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetIntellTaskResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetIntellTaskResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTaskResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, _Bsdrtmservice1__GetIntellTaskResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetIntellTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetIntellTaskResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetIntellTaskResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIntellTaskResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetIntellTaskResponse);
		((_Bsdrtmservice1__GetIntellTaskResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIntellTaskResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetIntellTaskResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetIntellTaskResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetIntellTaskResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetIntellTaskResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetIntellTaskResponse*)p = *(_Bsdrtmservice1__GetIntellTaskResponse*)q;
}

void _Bsdrtmservice1__GetIntellTask::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetIntellTask::taskId);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetIntellTask::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetIntellTask::taskId, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetIntellTask::taskId);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetIntellTask::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetIntellTask(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetIntellTask(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetIntellTask *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:taskId", -1, &(a->_Bsdrtmservice1__GetIntellTask::taskId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetIntellTask::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetIntellTask(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTask * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetIntellTask(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIntellTask *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetIntellTask *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask, sizeof(_Bsdrtmservice1__GetIntellTask), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetIntellTask *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_taskId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_taskId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:taskId", &(a->_Bsdrtmservice1__GetIntellTask::taskId), "xsd:string"))
				{	soap_flag_taskId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetIntellTask *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask, 0, sizeof(_Bsdrtmservice1__GetIntellTask), 0, soap_copy__Bsdrtmservice1__GetIntellTask);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetIntellTask::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetIntellTask", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetIntellTask::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetIntellTask(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTask * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetIntellTask(struct soap *soap, _Bsdrtmservice1__GetIntellTask *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetIntellTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetIntellTask * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetIntellTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetIntellTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIntellTask);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetIntellTask);
		((_Bsdrtmservice1__GetIntellTask*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetIntellTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetIntellTask);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetIntellTask*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetIntellTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetIntellTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetIntellTask %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetIntellTask*)p = *(_Bsdrtmservice1__GetIntellTask*)q;
}

void _Bsdrtmservice1__GetRuningIntellTaskIdsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetRuningIntellTaskIdsResponse::GetRuningIntellTaskIdsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRuningIntellTaskIdsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetRuningIntellTaskIdsResponse::GetRuningIntellTaskIdsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRuningIntellTaskIdsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRuningIntellTaskIdsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse), type))
		return soap->error;
	if (a->GetRuningIntellTaskIdsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetRuningIntellTaskIdsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetRuningIntellTaskIdsResult", -1, &(a->_Bsdrtmservice1__GetRuningIntellTaskIdsResponse::GetRuningIntellTaskIdsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRuningIntellTaskIdsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIdsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRuningIntellTaskIdsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRuningIntellTaskIdsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetRuningIntellTaskIdsResult", &(a->_Bsdrtmservice1__GetRuningIntellTaskIdsResponse::GetRuningIntellTaskIdsResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetRuningIntellTaskIdsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetRuningIntellTaskIdsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse, 0, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse), 0, soap_copy__Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRuningIntellTaskIdsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRuningIntellTaskIdsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRuningIntellTaskIdsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIdsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRuningIntellTaskIdsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
		((_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRuningIntellTaskIdsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)p = *(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse*)q;
}

void _Bsdrtmservice1__GetRuningIntellTaskIds::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRuningIntellTaskIds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRuningIntellTaskIds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRuningIntellTaskIds *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRuningIntellTaskIds::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIds * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningIntellTaskIds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRuningIntellTaskIds *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIds), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRuningIntellTaskIds *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRuningIntellTaskIds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds, 0, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIds), 0, soap_copy__Bsdrtmservice1__GetRuningIntellTaskIds);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRuningIntellTaskIds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRuningIntellTaskIds", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRuningIntellTaskIds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRuningIntellTaskIds(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIds * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIds *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRuningIntellTaskIds * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIds(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningIntellTaskIds);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRuningIntellTaskIds);
		((_Bsdrtmservice1__GetRuningIntellTaskIds*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningIntellTaskIds[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRuningIntellTaskIds);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRuningIntellTaskIds*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRuningIntellTaskIds*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRuningIntellTaskIds %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRuningIntellTaskIds*)p = *(_Bsdrtmservice1__GetRuningIntellTaskIds*)q;
}

void _Bsdrtmservice1__GetMonStationsByVideoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStationsByVideoResponse::GetMonStationsByVideoResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsByVideoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetMonStationsByVideoResponse::GetMonStationsByVideoResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsByVideoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsByVideoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse), type))
		return soap->error;
	if (a->GetMonStationsByVideoResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStationsByVideoResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonStationsByVideoResult", -1, &(a->_Bsdrtmservice1__GetMonStationsByVideoResponse::GetMonStationsByVideoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsByVideoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideoResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByVideoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsByVideoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse, sizeof(_Bsdrtmservice1__GetMonStationsByVideoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsByVideoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStationsByVideoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStationsByVideoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonStationsByVideoResult", &(a->_Bsdrtmservice1__GetMonStationsByVideoResponse::GetMonStationsByVideoResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetMonStationsByVideoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStationsByVideoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsByVideoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse, 0, sizeof(_Bsdrtmservice1__GetMonStationsByVideoResponse), 0, soap_copy__Bsdrtmservice1__GetMonStationsByVideoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsByVideoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByVideoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsByVideoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideoResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsByVideoResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsByVideoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByVideoResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsByVideoResponse);
		((_Bsdrtmservice1__GetMonStationsByVideoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByVideoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsByVideoResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsByVideoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsByVideoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsByVideoResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsByVideoResponse*)p = *(_Bsdrtmservice1__GetMonStationsByVideoResponse*)q;
}

void _Bsdrtmservice1__GetMonStationsByVideo::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsByVideo::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsByVideo::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsByVideo(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsByVideo *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsByVideo::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsByVideo(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideo * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByVideo *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsByVideo *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo, sizeof(_Bsdrtmservice1__GetMonStationsByVideo), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsByVideo *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsByVideo *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo, 0, sizeof(_Bsdrtmservice1__GetMonStationsByVideo), 0, soap_copy__Bsdrtmservice1__GetMonStationsByVideo);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsByVideo::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByVideo", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsByVideo::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsByVideo(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideo * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideo *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsByVideo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsByVideo * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsByVideo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByVideo);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsByVideo);
		((_Bsdrtmservice1__GetMonStationsByVideo*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByVideo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsByVideo);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsByVideo*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsByVideo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsByVideo %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsByVideo*)p = *(_Bsdrtmservice1__GetMonStationsByVideo*)q;
}

void _Bsdrtmservice1__SetConfirmedStateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__SetConfirmedStateResponse::SetConfirmedStateResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetConfirmedStateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__SetConfirmedStateResponse::SetConfirmedStateResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetConfirmedStateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetConfirmedStateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetConfirmedStateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse), type))
		return soap->error;
	if (a->SetConfirmedStateResult)
		soap_element_result(soap, "Bsdrtmservice1:SetConfirmedStateResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetConfirmedStateResult", -1, &(a->_Bsdrtmservice1__SetConfirmedStateResponse::SetConfirmedStateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetConfirmedStateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetConfirmedStateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedStateResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetConfirmedStateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetConfirmedStateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse, sizeof(_Bsdrtmservice1__SetConfirmedStateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetConfirmedStateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetConfirmedStateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetConfirmedStateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetConfirmedStateResult", &(a->_Bsdrtmservice1__SetConfirmedStateResponse::SetConfirmedStateResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_SetConfirmedStateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:SetConfirmedStateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetConfirmedStateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse, 0, sizeof(_Bsdrtmservice1__SetConfirmedStateResponse), 0, soap_copy__Bsdrtmservice1__SetConfirmedStateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetConfirmedStateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetConfirmedStateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetConfirmedStateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetConfirmedStateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedStateResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, _Bsdrtmservice1__SetConfirmedStateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetConfirmedStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetConfirmedStateResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetConfirmedStateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetConfirmedStateResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetConfirmedStateResponse);
		((_Bsdrtmservice1__SetConfirmedStateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetConfirmedStateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetConfirmedStateResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetConfirmedStateResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetConfirmedStateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetConfirmedStateResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetConfirmedStateResponse*)p = *(_Bsdrtmservice1__SetConfirmedStateResponse*)q;
}

void _Bsdrtmservice1__SetConfirmedState::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetConfirmedState::alertUid);
	soap_default_int(soap, &this->_Bsdrtmservice1__SetConfirmedState::confirmed);
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetConfirmedState::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__SetConfirmedState::alertUid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetConfirmedState::alertUid);
	soap_embedded(soap, &this->_Bsdrtmservice1__SetConfirmedState::confirmed, SOAP_TYPE_Bsdrtmservice_int);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetConfirmedState::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetConfirmedState(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetConfirmedState(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetConfirmedState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:alertUid", -1, &(a->_Bsdrtmservice1__SetConfirmedState::alertUid), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:confirmed", -1, &(a->_Bsdrtmservice1__SetConfirmedState::confirmed), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetConfirmedState::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetConfirmedState(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedState * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetConfirmedState(struct soap *soap, const char *tag, _Bsdrtmservice1__SetConfirmedState *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetConfirmedState *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState, sizeof(_Bsdrtmservice1__SetConfirmedState), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetConfirmedState *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_alertUid1 = 1;
	size_t soap_flag_confirmed1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_alertUid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:alertUid", &(a->_Bsdrtmservice1__SetConfirmedState::alertUid), "xsd:string"))
				{	soap_flag_alertUid1--;
					continue;
				}
			if (soap_flag_confirmed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:confirmed", &(a->_Bsdrtmservice1__SetConfirmedState::confirmed), "xsd:int"))
				{	soap_flag_confirmed1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetConfirmedState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState, 0, sizeof(_Bsdrtmservice1__SetConfirmedState), 0, soap_copy__Bsdrtmservice1__SetConfirmedState);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_confirmed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetConfirmedState::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetConfirmedState", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetConfirmedState::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetConfirmedState(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedState * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetConfirmedState(struct soap *soap, _Bsdrtmservice1__SetConfirmedState *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetConfirmedState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetConfirmedState * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetConfirmedState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetConfirmedState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetConfirmedState);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetConfirmedState);
		((_Bsdrtmservice1__SetConfirmedState*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetConfirmedState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetConfirmedState);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetConfirmedState*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetConfirmedState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetConfirmedState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetConfirmedState %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetConfirmedState*)p = *(_Bsdrtmservice1__SetConfirmedState*)q;
}

void _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::GetMalfunctionAlertOfMonstationnoResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, &this->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::GetMalfunctionAlertOfMonstationnoResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse), type))
		return soap->error;
	if (a->GetMalfunctionAlertOfMonstationnoResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResult", -1, &(a->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::GetMalfunctionAlertOfMonstationnoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMalfunctionAlertOfMonstationnoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMalfunctionAlertOfMonstationnoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResult", &(a->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::GetMalfunctionAlertOfMonstationnoResult), "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity"))
				{	soap_flag_GetMalfunctionAlertOfMonstationnoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse, 0, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse), 0, soap_copy__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
		((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)p = *(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse*)q;
}

void _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::monstationNo);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::monstationNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::monstationNo);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monstationNo", -1, &(a->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::monstationNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monstationNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monstationNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monstationNo", &(a->_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::monstationNo), "xsd:string"))
				{	soap_flag_monstationNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, 0, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno), 0, soap_copy__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionAlertOfMonstationno", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
		((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)p = *(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)q;
}

void _Bsdrtmservice1__GetPageMalfunctionAlertsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::GetPageMalfunctionAlertsResult = NULL;
	soap_default_int(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::totalCount);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetPageMalfunctionAlertsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::GetPageMalfunctionAlertsResult);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::totalCount, SOAP_TYPE_Bsdrtmservice_int);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetPageMalfunctionAlertsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetPageMalfunctionAlertsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse), type))
		return soap->error;
	if (a->GetPageMalfunctionAlertsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetPageMalfunctionAlertsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:GetPageMalfunctionAlertsResult", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::GetPageMalfunctionAlertsResult), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:totalCount", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::totalCount), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlertsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetPageMalfunctionAlertsResult1 = 1;
	size_t soap_flag_totalCount1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPageMalfunctionAlertsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:GetPageMalfunctionAlertsResult", &(a->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::GetPageMalfunctionAlertsResult), "Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity"))
				{	soap_flag_GetPageMalfunctionAlertsResult1--;
					continue;
				}
			if (soap_flag_totalCount1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:totalCount", &(a->_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::totalCount), "xsd:int"))
				{	soap_flag_totalCount1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetPageMalfunctionAlertsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse, 0, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse), 0, soap_copy__Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_totalCount1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetPageMalfunctionAlertsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetPageMalfunctionAlertsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetPageMalfunctionAlertsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlertsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetPageMalfunctionAlertsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
		((_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetPageMalfunctionAlertsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)p = *(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse*)q;
}

void _Bsdrtmservice1__GetPageMalfunctionAlerts::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageSize);
	soap_default_int(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageIndex);
	this->_Bsdrtmservice1__GetPageMalfunctionAlerts::monstationNos = NULL;
	this->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertTypes = NULL;
	soap_default_int(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertLevel);
	soap_default_bool(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::confirmed);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::startDate);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::endDate);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetPageMalfunctionAlerts::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageSize, SOAP_TYPE_Bsdrtmservice_int);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageIndex, SOAP_TYPE_Bsdrtmservice_int);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfString(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::monstationNos);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfInt(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertTypes);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertLevel, SOAP_TYPE_Bsdrtmservice_int);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::confirmed, SOAP_TYPE_Bsdrtmservice_bool);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::startDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::startDate);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::endDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetPageMalfunctionAlerts::endDate);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetPageMalfunctionAlerts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetPageMalfunctionAlerts *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts), type))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:pageSize", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageSize), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:pageIndex", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageIndex), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:monstationNos", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::monstationNos), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfInt(soap, "Bsdrtmservice1:alertTypes", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertTypes), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:alertLevel", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertLevel), ""))
		return soap->error;
	if (soap_out_bool(soap, "Bsdrtmservice1:confirmed", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::confirmed), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:startDate", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::startDate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:endDate", -1, &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::endDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetPageMalfunctionAlerts::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlerts * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPageMalfunctionAlerts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetPageMalfunctionAlerts *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlerts), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetPageMalfunctionAlerts *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_pageSize1 = 1;
	size_t soap_flag_pageIndex1 = 1;
	size_t soap_flag_monstationNos1 = 1;
	size_t soap_flag_alertTypes1 = 1;
	size_t soap_flag_alertLevel1 = 1;
	size_t soap_flag_confirmed1 = 1;
	size_t soap_flag_startDate1 = 1;
	size_t soap_flag_endDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_pageSize1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:pageSize", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageSize), "xsd:int"))
				{	soap_flag_pageSize1--;
					continue;
				}
			if (soap_flag_pageIndex1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:pageIndex", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::pageIndex), "xsd:int"))
				{	soap_flag_pageIndex1--;
					continue;
				}
			if (soap_flag_monstationNos1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:monstationNos", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::monstationNos), "Bsdrtmservice1:ArrayOfString"))
				{	soap_flag_monstationNos1--;
					continue;
				}
			if (soap_flag_alertTypes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfInt(soap, "Bsdrtmservice1:alertTypes", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertTypes), "Bsdrtmservice1:ArrayOfInt"))
				{	soap_flag_alertTypes1--;
					continue;
				}
			if (soap_flag_alertLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:alertLevel", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::alertLevel), "xsd:int"))
				{	soap_flag_alertLevel1--;
					continue;
				}
			if (soap_flag_confirmed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "Bsdrtmservice1:confirmed", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::confirmed), "xsd:boolean"))
				{	soap_flag_confirmed1--;
					continue;
				}
			if (soap_flag_startDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:startDate", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::startDate), "xsd:string"))
				{	soap_flag_startDate1--;
					continue;
				}
			if (soap_flag_endDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:endDate", &(a->_Bsdrtmservice1__GetPageMalfunctionAlerts::endDate), "xsd:string"))
				{	soap_flag_endDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetPageMalfunctionAlerts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts, 0, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlerts), 0, soap_copy__Bsdrtmservice1__GetPageMalfunctionAlerts);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_pageSize1 > 0 || soap_flag_pageIndex1 > 0 || soap_flag_alertLevel1 > 0 || soap_flag_confirmed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetPageMalfunctionAlerts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetPageMalfunctionAlerts", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetPageMalfunctionAlerts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlerts * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlerts *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetPageMalfunctionAlerts * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlerts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPageMalfunctionAlerts);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetPageMalfunctionAlerts);
		((_Bsdrtmservice1__GetPageMalfunctionAlerts*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPageMalfunctionAlerts[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetPageMalfunctionAlerts);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetPageMalfunctionAlerts*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetPageMalfunctionAlerts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetPageMalfunctionAlerts %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetPageMalfunctionAlerts*)p = *(_Bsdrtmservice1__GetPageMalfunctionAlerts*)q;
}

void _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::GetAllMalfunctionAlertCountResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfInt64(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::GetAllMalfunctionAlertCountResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse), type))
		return soap->error;
	if (a->GetAllMalfunctionAlertCountResult)
		soap_element_result(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCountResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfInt64(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCountResult", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::GetAllMalfunctionAlertCountResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAllMalfunctionAlertCountResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllMalfunctionAlertCountResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfInt64(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCountResult", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::GetAllMalfunctionAlertCountResult), "Bsdrtmservice1:OptResultOfInt64"))
				{	soap_flag_GetAllMalfunctionAlertCountResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCountResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse, 0, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse), 0, soap_copy__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllMalfunctionAlertCountResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
		((_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)p = *(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse*)q;
}

void _Bsdrtmservice1__GetAllMalfunctionAlertCount::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::monstationNos = NULL;
	this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertTypes = NULL;
	soap_default_int(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertLevel);
	soap_default_bool(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::confirmed);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::startDate);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::endDate);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllMalfunctionAlertCount::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__ArrayOfString(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::monstationNos);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfInt(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertTypes);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertLevel, SOAP_TYPE_Bsdrtmservice_int);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::confirmed, SOAP_TYPE_Bsdrtmservice_bool);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::startDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::startDate);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::endDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetAllMalfunctionAlertCount::endDate);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllMalfunctionAlertCount::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllMalfunctionAlertCount *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:monstationNos", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::monstationNos), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfInt(soap, "Bsdrtmservice1:alertTypes", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertTypes), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:alertLevel", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertLevel), ""))
		return soap->error;
	if (soap_out_bool(soap, "Bsdrtmservice1:confirmed", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::confirmed), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:startDate", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::startDate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:endDate", -1, &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::endDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllMalfunctionAlertCount::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCount * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllMalfunctionAlertCount *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllMalfunctionAlertCount *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCount), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllMalfunctionAlertCount *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monstationNos1 = 1;
	size_t soap_flag_alertTypes1 = 1;
	size_t soap_flag_alertLevel1 = 1;
	size_t soap_flag_confirmed1 = 1;
	size_t soap_flag_startDate1 = 1;
	size_t soap_flag_endDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monstationNos1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:monstationNos", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::monstationNos), "Bsdrtmservice1:ArrayOfString"))
				{	soap_flag_monstationNos1--;
					continue;
				}
			if (soap_flag_alertTypes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfInt(soap, "Bsdrtmservice1:alertTypes", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertTypes), "Bsdrtmservice1:ArrayOfInt"))
				{	soap_flag_alertTypes1--;
					continue;
				}
			if (soap_flag_alertLevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:alertLevel", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::alertLevel), "xsd:int"))
				{	soap_flag_alertLevel1--;
					continue;
				}
			if (soap_flag_confirmed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "Bsdrtmservice1:confirmed", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::confirmed), "xsd:boolean"))
				{	soap_flag_confirmed1--;
					continue;
				}
			if (soap_flag_startDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:startDate", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::startDate), "xsd:string"))
				{	soap_flag_startDate1--;
					continue;
				}
			if (soap_flag_endDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:endDate", &(a->_Bsdrtmservice1__GetAllMalfunctionAlertCount::endDate), "xsd:string"))
				{	soap_flag_endDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllMalfunctionAlertCount *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount, 0, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCount), 0, soap_copy__Bsdrtmservice1__GetAllMalfunctionAlertCount);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_alertLevel1 > 0 || soap_flag_confirmed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllMalfunctionAlertCount::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllMalfunctionAlertCount", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllMalfunctionAlertCount::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCount * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCount *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllMalfunctionAlertCount * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCount(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllMalfunctionAlertCount);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCount);
		((_Bsdrtmservice1__GetAllMalfunctionAlertCount*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllMalfunctionAlertCount[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCount);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllMalfunctionAlertCount*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllMalfunctionAlertCount*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllMalfunctionAlertCount %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllMalfunctionAlertCount*)p = *(_Bsdrtmservice1__GetAllMalfunctionAlertCount*)q;
}

void _Bsdrtmservice1__GetMalfunctionCodeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMalfunctionCodeResponse::GetMalfunctionCodeResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMalfunctionCodeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetMalfunctionCodeResponse::GetMalfunctionCodeResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMalfunctionCodeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMalfunctionCodeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse), type))
		return soap->error;
	if (a->GetMalfunctionCodeResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMalfunctionCodeResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMalfunctionCodeResult", -1, &(a->_Bsdrtmservice1__GetMalfunctionCodeResponse::GetMalfunctionCodeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMalfunctionCodeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCodeResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionCodeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMalfunctionCodeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse, sizeof(_Bsdrtmservice1__GetMalfunctionCodeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMalfunctionCodeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMalfunctionCodeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMalfunctionCodeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMalfunctionCodeResult", &(a->_Bsdrtmservice1__GetMalfunctionCodeResponse::GetMalfunctionCodeResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetMalfunctionCodeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMalfunctionCodeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMalfunctionCodeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse, 0, sizeof(_Bsdrtmservice1__GetMalfunctionCodeResponse), 0, soap_copy__Bsdrtmservice1__GetMalfunctionCodeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMalfunctionCodeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionCodeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMalfunctionCodeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCodeResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCodeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMalfunctionCodeResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMalfunctionCodeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionCodeResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMalfunctionCodeResponse);
		((_Bsdrtmservice1__GetMalfunctionCodeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionCodeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMalfunctionCodeResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMalfunctionCodeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMalfunctionCodeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMalfunctionCodeResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMalfunctionCodeResponse*)p = *(_Bsdrtmservice1__GetMalfunctionCodeResponse*)q;
}

void _Bsdrtmservice1__GetMalfunctionCode::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMalfunctionCode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMalfunctionCode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMalfunctionCode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMalfunctionCode *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMalfunctionCode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMalfunctionCode(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCode * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionCode *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMalfunctionCode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode, sizeof(_Bsdrtmservice1__GetMalfunctionCode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMalfunctionCode *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMalfunctionCode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode, 0, sizeof(_Bsdrtmservice1__GetMalfunctionCode), 0, soap_copy__Bsdrtmservice1__GetMalfunctionCode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMalfunctionCode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionCode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMalfunctionCode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMalfunctionCode(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCode * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCode *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMalfunctionCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMalfunctionCode * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMalfunctionCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionCode);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMalfunctionCode);
		((_Bsdrtmservice1__GetMalfunctionCode*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMalfunctionCode[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMalfunctionCode);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMalfunctionCode*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMalfunctionCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMalfunctionCode %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMalfunctionCode*)p = *(_Bsdrtmservice1__GetMalfunctionCode*)q;
}

void _Bsdrtmservice1__AddMalfunctionAlertResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMalfunctionAlertResponse::AddMalfunctionAlertResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMalfunctionAlertResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddMalfunctionAlertResponse::AddMalfunctionAlertResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMalfunctionAlertResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMalfunctionAlertResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse), type))
		return soap->error;
	if (a->AddMalfunctionAlertResult)
		soap_element_result(soap, "Bsdrtmservice1:AddMalfunctionAlertResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMalfunctionAlertResult", -1, &(a->_Bsdrtmservice1__AddMalfunctionAlertResponse::AddMalfunctionAlertResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMalfunctionAlertResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlertResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMalfunctionAlertResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMalfunctionAlertResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse, sizeof(_Bsdrtmservice1__AddMalfunctionAlertResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMalfunctionAlertResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddMalfunctionAlertResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddMalfunctionAlertResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMalfunctionAlertResult", &(a->_Bsdrtmservice1__AddMalfunctionAlertResponse::AddMalfunctionAlertResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddMalfunctionAlertResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddMalfunctionAlertResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMalfunctionAlertResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse, 0, sizeof(_Bsdrtmservice1__AddMalfunctionAlertResponse), 0, soap_copy__Bsdrtmservice1__AddMalfunctionAlertResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMalfunctionAlertResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMalfunctionAlertResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMalfunctionAlertResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlertResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlertResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMalfunctionAlertResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMalfunctionAlertResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMalfunctionAlertResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMalfunctionAlertResponse);
		((_Bsdrtmservice1__AddMalfunctionAlertResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMalfunctionAlertResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMalfunctionAlertResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMalfunctionAlertResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMalfunctionAlertResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMalfunctionAlertResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMalfunctionAlertResponse*)p = *(_Bsdrtmservice1__AddMalfunctionAlertResponse*)q;
}

void _Bsdrtmservice1__AddMalfunctionAlert::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMalfunctionAlert::alert = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMalfunctionAlert::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, &this->_Bsdrtmservice1__AddMalfunctionAlert::alert);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMalfunctionAlert::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMalfunctionAlert(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMalfunctionAlert *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:alert", -1, &(a->_Bsdrtmservice1__AddMalfunctionAlert::alert), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMalfunctionAlert::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMalfunctionAlert(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlert * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMalfunctionAlert *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMalfunctionAlert *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert, sizeof(_Bsdrtmservice1__AddMalfunctionAlert), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMalfunctionAlert *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_alert1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_alert1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:alert", &(a->_Bsdrtmservice1__AddMalfunctionAlert::alert), "Bsdrtmservice1:RtmMalfunctionAlertEntity"))
				{	soap_flag_alert1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMalfunctionAlert *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert, 0, sizeof(_Bsdrtmservice1__AddMalfunctionAlert), 0, soap_copy__Bsdrtmservice1__AddMalfunctionAlert);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMalfunctionAlert::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMalfunctionAlert", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMalfunctionAlert::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMalfunctionAlert(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlert * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlert *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMalfunctionAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMalfunctionAlert * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMalfunctionAlert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMalfunctionAlert);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMalfunctionAlert);
		((_Bsdrtmservice1__AddMalfunctionAlert*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMalfunctionAlert[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMalfunctionAlert);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMalfunctionAlert*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMalfunctionAlert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMalfunctionAlert %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMalfunctionAlert*)p = *(_Bsdrtmservice1__AddMalfunctionAlert*)q;
}

void _Bsdrtmservice1__DelMonReportAttachmentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__DelMonReportAttachmentResponse::DelMonReportAttachmentResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__DelMonReportAttachmentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__DelMonReportAttachmentResponse::DelMonReportAttachmentResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__DelMonReportAttachmentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__DelMonReportAttachmentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse), type))
		return soap->error;
	if (a->DelMonReportAttachmentResult)
		soap_element_result(soap, "Bsdrtmservice1:DelMonReportAttachmentResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:DelMonReportAttachmentResult", -1, &(a->_Bsdrtmservice1__DelMonReportAttachmentResponse::DelMonReportAttachmentResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__DelMonReportAttachmentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachmentResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReportAttachmentResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__DelMonReportAttachmentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse, sizeof(_Bsdrtmservice1__DelMonReportAttachmentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__DelMonReportAttachmentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DelMonReportAttachmentResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DelMonReportAttachmentResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:DelMonReportAttachmentResult", &(a->_Bsdrtmservice1__DelMonReportAttachmentResponse::DelMonReportAttachmentResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_DelMonReportAttachmentResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:DelMonReportAttachmentResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__DelMonReportAttachmentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse, 0, sizeof(_Bsdrtmservice1__DelMonReportAttachmentResponse), 0, soap_copy__Bsdrtmservice1__DelMonReportAttachmentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__DelMonReportAttachmentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:DelMonReportAttachmentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__DelMonReportAttachmentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachmentResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachmentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__DelMonReportAttachmentResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__DelMonReportAttachmentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReportAttachmentResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__DelMonReportAttachmentResponse);
		((_Bsdrtmservice1__DelMonReportAttachmentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReportAttachmentResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__DelMonReportAttachmentResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__DelMonReportAttachmentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__DelMonReportAttachmentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__DelMonReportAttachmentResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__DelMonReportAttachmentResponse*)p = *(_Bsdrtmservice1__DelMonReportAttachmentResponse*)q;
}

void _Bsdrtmservice1__DelMonReportAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__DelMonReportAttachment::reportID);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__DelMonReportAttachment::fileID);
	/* transient soap skipped */
}

void _Bsdrtmservice1__DelMonReportAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__DelMonReportAttachment::reportID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__DelMonReportAttachment::reportID);
	soap_embedded(soap, &this->_Bsdrtmservice1__DelMonReportAttachment::fileID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__DelMonReportAttachment::fileID);
	/* transient soap skipped */
}

int _Bsdrtmservice1__DelMonReportAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__DelMonReportAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__DelMonReportAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:reportID", -1, &(a->_Bsdrtmservice1__DelMonReportAttachment::reportID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:fileID", -1, &(a->_Bsdrtmservice1__DelMonReportAttachment::fileID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__DelMonReportAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__DelMonReportAttachment(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachment * SOAP_FMAC4 soap_in__Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReportAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__DelMonReportAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment, sizeof(_Bsdrtmservice1__DelMonReportAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__DelMonReportAttachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_reportID1 = 1;
	size_t soap_flag_fileID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_reportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:reportID", &(a->_Bsdrtmservice1__DelMonReportAttachment::reportID), "xsd:string"))
				{	soap_flag_reportID1--;
					continue;
				}
			if (soap_flag_fileID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:fileID", &(a->_Bsdrtmservice1__DelMonReportAttachment::fileID), "xsd:string"))
				{	soap_flag_fileID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__DelMonReportAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment, 0, sizeof(_Bsdrtmservice1__DelMonReportAttachment), 0, soap_copy__Bsdrtmservice1__DelMonReportAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__DelMonReportAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:DelMonReportAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__DelMonReportAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__DelMonReportAttachment(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachment * SOAP_FMAC4 soap_get__Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__DelMonReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__DelMonReportAttachment * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__DelMonReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReportAttachment);
		if (size)
			*size = sizeof(_Bsdrtmservice1__DelMonReportAttachment);
		((_Bsdrtmservice1__DelMonReportAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__DelMonReportAttachment);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__DelMonReportAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__DelMonReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__DelMonReportAttachment %p -> %p\n", q, p));
	*(_Bsdrtmservice1__DelMonReportAttachment*)p = *(_Bsdrtmservice1__DelMonReportAttachment*)q;
}

void _Bsdrtmservice1__AddMonReportAttachmentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMonReportAttachmentResponse::AddMonReportAttachmentResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMonReportAttachmentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddMonReportAttachmentResponse::AddMonReportAttachmentResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMonReportAttachmentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMonReportAttachmentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse), type))
		return soap->error;
	if (a->AddMonReportAttachmentResult)
		soap_element_result(soap, "Bsdrtmservice1:AddMonReportAttachmentResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMonReportAttachmentResult", -1, &(a->_Bsdrtmservice1__AddMonReportAttachmentResponse::AddMonReportAttachmentResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMonReportAttachmentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachmentResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReportAttachmentResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMonReportAttachmentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse, sizeof(_Bsdrtmservice1__AddMonReportAttachmentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMonReportAttachmentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddMonReportAttachmentResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddMonReportAttachmentResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMonReportAttachmentResult", &(a->_Bsdrtmservice1__AddMonReportAttachmentResponse::AddMonReportAttachmentResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddMonReportAttachmentResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddMonReportAttachmentResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMonReportAttachmentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse, 0, sizeof(_Bsdrtmservice1__AddMonReportAttachmentResponse), 0, soap_copy__Bsdrtmservice1__AddMonReportAttachmentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMonReportAttachmentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMonReportAttachmentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMonReportAttachmentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachmentResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachmentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMonReportAttachmentResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMonReportAttachmentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReportAttachmentResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMonReportAttachmentResponse);
		((_Bsdrtmservice1__AddMonReportAttachmentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReportAttachmentResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMonReportAttachmentResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMonReportAttachmentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMonReportAttachmentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMonReportAttachmentResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMonReportAttachmentResponse*)p = *(_Bsdrtmservice1__AddMonReportAttachmentResponse*)q;
}

void _Bsdrtmservice1__AddMonReportAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::reportID);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::fileName);
	this->_Bsdrtmservice1__AddMonReportAttachment::binData = NULL;
	soap_default_LONG64(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::offSet);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::flag);
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMonReportAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::reportID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::reportID);
	soap_embedded(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::fileName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::fileName);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::binData);
	soap_embedded(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::offSet, SOAP_TYPE_Bsdrtmservice_LONG64);
	soap_embedded(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::flag, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__AddMonReportAttachment::flag);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMonReportAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMonReportAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMonReportAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:reportID", -1, &(a->_Bsdrtmservice1__AddMonReportAttachment::reportID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:fileName", -1, &(a->_Bsdrtmservice1__AddMonReportAttachment::fileName), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "Bsdrtmservice1:binData", -1, &(a->_Bsdrtmservice1__AddMonReportAttachment::binData), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "Bsdrtmservice1:offSet", -1, &(a->_Bsdrtmservice1__AddMonReportAttachment::offSet), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:flag", -1, &(a->_Bsdrtmservice1__AddMonReportAttachment::flag), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMonReportAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMonReportAttachment(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachment * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReportAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMonReportAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment, sizeof(_Bsdrtmservice1__AddMonReportAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMonReportAttachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_reportID1 = 1;
	size_t soap_flag_fileName1 = 1;
	size_t soap_flag_binData1 = 1;
	size_t soap_flag_offSet1 = 1;
	size_t soap_flag_flag1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_reportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:reportID", &(a->_Bsdrtmservice1__AddMonReportAttachment::reportID), "xsd:string"))
				{	soap_flag_reportID1--;
					continue;
				}
			if (soap_flag_fileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:fileName", &(a->_Bsdrtmservice1__AddMonReportAttachment::fileName), "xsd:string"))
				{	soap_flag_fileName1--;
					continue;
				}
			if (soap_flag_binData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "Bsdrtmservice1:binData", &(a->_Bsdrtmservice1__AddMonReportAttachment::binData), "xsd:base64Binary"))
				{	soap_flag_binData1--;
					continue;
				}
			if (soap_flag_offSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "Bsdrtmservice1:offSet", &(a->_Bsdrtmservice1__AddMonReportAttachment::offSet), "xsd:long"))
				{	soap_flag_offSet1--;
					continue;
				}
			if (soap_flag_flag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:flag", &(a->_Bsdrtmservice1__AddMonReportAttachment::flag), "xsd:string"))
				{	soap_flag_flag1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMonReportAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment, 0, sizeof(_Bsdrtmservice1__AddMonReportAttachment), 0, soap_copy__Bsdrtmservice1__AddMonReportAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_offSet1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMonReportAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMonReportAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMonReportAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMonReportAttachment(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachment * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMonReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMonReportAttachment * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMonReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReportAttachment);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMonReportAttachment);
		((_Bsdrtmservice1__AddMonReportAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMonReportAttachment);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMonReportAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMonReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMonReportAttachment %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMonReportAttachment*)p = *(_Bsdrtmservice1__AddMonReportAttachment*)q;
}

void _Bsdrtmservice1__GetMonReportAttachmentContentResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonReportAttachmentContentResponse::GetMonReportAttachmentContentResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportAttachmentContentResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContentResponse::GetMonReportAttachmentContentResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportAttachmentContentResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportAttachmentContentResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse), type))
		return soap->error;
	if (a->GetMonReportAttachmentContentResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonReportAttachmentContentResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, "Bsdrtmservice1:GetMonReportAttachmentContentResult", -1, &(a->_Bsdrtmservice1__GetMonReportAttachmentContentResponse::GetMonReportAttachmentContentResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportAttachmentContentResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContentResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachmentContentResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportAttachmentContentResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContentResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportAttachmentContentResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonReportAttachmentContentResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonReportAttachmentContentResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, "Bsdrtmservice1:GetMonReportAttachmentContentResult", &(a->_Bsdrtmservice1__GetMonReportAttachmentContentResponse::GetMonReportAttachmentContentResult), "Bsdrtmservice1:OptResultOfArrayOfByte"))
				{	soap_flag_GetMonReportAttachmentContentResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonReportAttachmentContentResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportAttachmentContentResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse, 0, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContentResponse), 0, soap_copy__Bsdrtmservice1__GetMonReportAttachmentContentResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportAttachmentContentResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachmentContentResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportAttachmentContentResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContentResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContentResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportAttachmentContentResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContentResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachmentContentResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportAttachmentContentResponse);
		((_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachmentContentResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportAttachmentContentResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportAttachmentContentResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)p = *(_Bsdrtmservice1__GetMonReportAttachmentContentResponse*)q;
}

void _Bsdrtmservice1__GetMonReportAttachmentContent::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContent::fileID);
	this->_Bsdrtmservice1__GetMonReportAttachmentContent::binData = NULL;
	soap_default_LONG64(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContent::offSet);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportAttachmentContent::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContent::fileID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContent::fileID);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContent::binData);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentContent::offSet, SOAP_TYPE_Bsdrtmservice_LONG64);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportAttachmentContent::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportAttachmentContent *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:fileID", -1, &(a->_Bsdrtmservice1__GetMonReportAttachmentContent::fileID), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "Bsdrtmservice1:binData", -1, &(a->_Bsdrtmservice1__GetMonReportAttachmentContent::binData), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "Bsdrtmservice1:offSet", -1, &(a->_Bsdrtmservice1__GetMonReportAttachmentContent::offSet), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportAttachmentContent::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContent * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachmentContent *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportAttachmentContent *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContent), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportAttachmentContent *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_fileID1 = 1;
	size_t soap_flag_binData1 = 1;
	size_t soap_flag_offSet1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fileID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:fileID", &(a->_Bsdrtmservice1__GetMonReportAttachmentContent::fileID), "xsd:string"))
				{	soap_flag_fileID1--;
					continue;
				}
			if (soap_flag_binData1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "Bsdrtmservice1:binData", &(a->_Bsdrtmservice1__GetMonReportAttachmentContent::binData), "xsd:base64Binary"))
				{	soap_flag_binData1--;
					continue;
				}
			if (soap_flag_offSet1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "Bsdrtmservice1:offSet", &(a->_Bsdrtmservice1__GetMonReportAttachmentContent::offSet), "xsd:long"))
				{	soap_flag_offSet1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportAttachmentContent *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent, 0, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContent), 0, soap_copy__Bsdrtmservice1__GetMonReportAttachmentContent);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_offSet1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportAttachmentContent::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachmentContent", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportAttachmentContent::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportAttachmentContent(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContent * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContent *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportAttachmentContent * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachmentContent);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportAttachmentContent);
		((_Bsdrtmservice1__GetMonReportAttachmentContent*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachmentContent[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportAttachmentContent);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportAttachmentContent*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportAttachmentContent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportAttachmentContent %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportAttachmentContent*)p = *(_Bsdrtmservice1__GetMonReportAttachmentContent*)q;
}

void _Bsdrtmservice1__GetMonReportAttachmentsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonReportAttachmentsResponse::GetMonReportAttachmentsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportAttachmentsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfAttachment(soap, &this->_Bsdrtmservice1__GetMonReportAttachmentsResponse::GetMonReportAttachmentsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportAttachmentsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportAttachmentsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse), type))
		return soap->error;
	if (a->GetMonReportAttachmentsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonReportAttachmentsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfAttachment(soap, "Bsdrtmservice1:GetMonReportAttachmentsResult", -1, &(a->_Bsdrtmservice1__GetMonReportAttachmentsResponse::GetMonReportAttachmentsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportAttachmentsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachmentsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportAttachmentsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse, sizeof(_Bsdrtmservice1__GetMonReportAttachmentsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportAttachmentsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonReportAttachmentsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonReportAttachmentsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfAttachment(soap, "Bsdrtmservice1:GetMonReportAttachmentsResult", &(a->_Bsdrtmservice1__GetMonReportAttachmentsResponse::GetMonReportAttachmentsResult), "Bsdrtmservice1:OptResultOfAttachment"))
				{	soap_flag_GetMonReportAttachmentsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonReportAttachmentsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportAttachmentsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse, 0, sizeof(_Bsdrtmservice1__GetMonReportAttachmentsResponse), 0, soap_copy__Bsdrtmservice1__GetMonReportAttachmentsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportAttachmentsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachmentsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportAttachmentsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportAttachmentsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachmentsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportAttachmentsResponse);
		((_Bsdrtmservice1__GetMonReportAttachmentsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachmentsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportAttachmentsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportAttachmentsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportAttachmentsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportAttachmentsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportAttachmentsResponse*)p = *(_Bsdrtmservice1__GetMonReportAttachmentsResponse*)q;
}

void _Bsdrtmservice1__GetMonReportAttachments::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportAttachments::reportID);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportAttachments::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportAttachments::reportID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportAttachments::reportID);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportAttachments::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportAttachments(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportAttachments *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:reportID", -1, &(a->_Bsdrtmservice1__GetMonReportAttachments::reportID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportAttachments::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportAttachments(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachments * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachments *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportAttachments *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments, sizeof(_Bsdrtmservice1__GetMonReportAttachments), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportAttachments *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_reportID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_reportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:reportID", &(a->_Bsdrtmservice1__GetMonReportAttachments::reportID), "xsd:string"))
				{	soap_flag_reportID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportAttachments *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments, 0, sizeof(_Bsdrtmservice1__GetMonReportAttachments), 0, soap_copy__Bsdrtmservice1__GetMonReportAttachments);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportAttachments::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachments", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportAttachments::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportAttachments(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachments * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachments *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportAttachments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportAttachments * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportAttachments(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachments);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportAttachments);
		((_Bsdrtmservice1__GetMonReportAttachments*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportAttachments[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportAttachments);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportAttachments*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportAttachments*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportAttachments %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportAttachments*)p = *(_Bsdrtmservice1__GetMonReportAttachments*)q;
}

void _Bsdrtmservice1__ExistMonReportofFreqResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__ExistMonReportofFreqResponse::ExistMonReportofFreqResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__ExistMonReportofFreqResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfBoolean(soap, &this->_Bsdrtmservice1__ExistMonReportofFreqResponse::ExistMonReportofFreqResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__ExistMonReportofFreqResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__ExistMonReportofFreqResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse), type))
		return soap->error;
	if (a->ExistMonReportofFreqResult)
		soap_element_result(soap, "Bsdrtmservice1:ExistMonReportofFreqResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfBoolean(soap, "Bsdrtmservice1:ExistMonReportofFreqResult", -1, &(a->_Bsdrtmservice1__ExistMonReportofFreqResponse::ExistMonReportofFreqResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__ExistMonReportofFreqResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreqResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__ExistMonReportofFreqResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__ExistMonReportofFreqResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse, sizeof(_Bsdrtmservice1__ExistMonReportofFreqResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__ExistMonReportofFreqResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ExistMonReportofFreqResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExistMonReportofFreqResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfBoolean(soap, "Bsdrtmservice1:ExistMonReportofFreqResult", &(a->_Bsdrtmservice1__ExistMonReportofFreqResponse::ExistMonReportofFreqResult), "Bsdrtmservice1:OptResultOfBoolean"))
				{	soap_flag_ExistMonReportofFreqResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:ExistMonReportofFreqResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__ExistMonReportofFreqResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse, 0, sizeof(_Bsdrtmservice1__ExistMonReportofFreqResponse), 0, soap_copy__Bsdrtmservice1__ExistMonReportofFreqResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__ExistMonReportofFreqResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ExistMonReportofFreqResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__ExistMonReportofFreqResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreqResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreqResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__ExistMonReportofFreqResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__ExistMonReportofFreqResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__ExistMonReportofFreqResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__ExistMonReportofFreqResponse);
		((_Bsdrtmservice1__ExistMonReportofFreqResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__ExistMonReportofFreqResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__ExistMonReportofFreqResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__ExistMonReportofFreqResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__ExistMonReportofFreqResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__ExistMonReportofFreqResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__ExistMonReportofFreqResponse*)p = *(_Bsdrtmservice1__ExistMonReportofFreqResponse*)q;
}

void _Bsdrtmservice1__ExistMonReportofFreq::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__ExistMonReportofFreq::monStationNo);
	soap_default_LONG64(soap, &this->_Bsdrtmservice1__ExistMonReportofFreq::freq);
	/* transient soap skipped */
}

void _Bsdrtmservice1__ExistMonReportofFreq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__ExistMonReportofFreq::monStationNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__ExistMonReportofFreq::monStationNo);
	soap_embedded(soap, &this->_Bsdrtmservice1__ExistMonReportofFreq::freq, SOAP_TYPE_Bsdrtmservice_LONG64);
	/* transient soap skipped */
}

int _Bsdrtmservice1__ExistMonReportofFreq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__ExistMonReportofFreq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__ExistMonReportofFreq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monStationNo", -1, &(a->_Bsdrtmservice1__ExistMonReportofFreq::monStationNo), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "Bsdrtmservice1:freq", -1, &(a->_Bsdrtmservice1__ExistMonReportofFreq::freq), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__ExistMonReportofFreq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__ExistMonReportofFreq(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreq * SOAP_FMAC4 soap_in__Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const char *tag, _Bsdrtmservice1__ExistMonReportofFreq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__ExistMonReportofFreq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq, sizeof(_Bsdrtmservice1__ExistMonReportofFreq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__ExistMonReportofFreq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monStationNo1 = 1;
	size_t soap_flag_freq1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monStationNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monStationNo", &(a->_Bsdrtmservice1__ExistMonReportofFreq::monStationNo), "xsd:string"))
				{	soap_flag_monStationNo1--;
					continue;
				}
			if (soap_flag_freq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "Bsdrtmservice1:freq", &(a->_Bsdrtmservice1__ExistMonReportofFreq::freq), "xsd:long"))
				{	soap_flag_freq1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__ExistMonReportofFreq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq, 0, sizeof(_Bsdrtmservice1__ExistMonReportofFreq), 0, soap_copy__Bsdrtmservice1__ExistMonReportofFreq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_freq1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__ExistMonReportofFreq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ExistMonReportofFreq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__ExistMonReportofFreq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__ExistMonReportofFreq(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreq * SOAP_FMAC4 soap_get__Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreq *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__ExistMonReportofFreq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__ExistMonReportofFreq * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__ExistMonReportofFreq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__ExistMonReportofFreq);
		if (size)
			*size = sizeof(_Bsdrtmservice1__ExistMonReportofFreq);
		((_Bsdrtmservice1__ExistMonReportofFreq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__ExistMonReportofFreq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__ExistMonReportofFreq);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__ExistMonReportofFreq*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__ExistMonReportofFreq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__ExistMonReportofFreq %p -> %p\n", q, p));
	*(_Bsdrtmservice1__ExistMonReportofFreq*)p = *(_Bsdrtmservice1__ExistMonReportofFreq*)q;
}

void _Bsdrtmservice1__GetMonReportFreqTypesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonReportFreqTypesResponse::GetMonReportFreqTypesResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportFreqTypesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetMonReportFreqTypesResponse::GetMonReportFreqTypesResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportFreqTypesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportFreqTypesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse), type))
		return soap->error;
	if (a->GetMonReportFreqTypesResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonReportFreqTypesResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonReportFreqTypesResult", -1, &(a->_Bsdrtmservice1__GetMonReportFreqTypesResponse::GetMonReportFreqTypesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportFreqTypesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypesResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportFreqTypesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportFreqTypesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse, sizeof(_Bsdrtmservice1__GetMonReportFreqTypesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportFreqTypesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonReportFreqTypesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonReportFreqTypesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonReportFreqTypesResult", &(a->_Bsdrtmservice1__GetMonReportFreqTypesResponse::GetMonReportFreqTypesResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetMonReportFreqTypesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonReportFreqTypesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportFreqTypesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse, 0, sizeof(_Bsdrtmservice1__GetMonReportFreqTypesResponse), 0, soap_copy__Bsdrtmservice1__GetMonReportFreqTypesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportFreqTypesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportFreqTypesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportFreqTypesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypesResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportFreqTypesResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportFreqTypesResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportFreqTypesResponse);
		((_Bsdrtmservice1__GetMonReportFreqTypesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportFreqTypesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportFreqTypesResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportFreqTypesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportFreqTypesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportFreqTypesResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportFreqTypesResponse*)p = *(_Bsdrtmservice1__GetMonReportFreqTypesResponse*)q;
}

void _Bsdrtmservice1__GetMonReportFreqTypes::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportFreqTypes::monStationno);
	this->_Bsdrtmservice1__GetMonReportFreqTypes::freqs = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportFreqTypes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportFreqTypes::monStationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportFreqTypes::monStationno);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfLong(soap, &this->_Bsdrtmservice1__GetMonReportFreqTypes::freqs);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportFreqTypes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportFreqTypes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportFreqTypes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monStationno", -1, &(a->_Bsdrtmservice1__GetMonReportFreqTypes::monStationno), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfLong(soap, "Bsdrtmservice1:freqs", -1, &(a->_Bsdrtmservice1__GetMonReportFreqTypes::freqs), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportFreqTypes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportFreqTypes(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypes * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportFreqTypes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportFreqTypes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes, sizeof(_Bsdrtmservice1__GetMonReportFreqTypes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportFreqTypes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monStationno1 = 1;
	size_t soap_flag_freqs1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monStationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monStationno", &(a->_Bsdrtmservice1__GetMonReportFreqTypes::monStationno), "xsd:string"))
				{	soap_flag_monStationno1--;
					continue;
				}
			if (soap_flag_freqs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfLong(soap, "Bsdrtmservice1:freqs", &(a->_Bsdrtmservice1__GetMonReportFreqTypes::freqs), "Bsdrtmservice1:ArrayOfLong"))
				{	soap_flag_freqs1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportFreqTypes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes, 0, sizeof(_Bsdrtmservice1__GetMonReportFreqTypes), 0, soap_copy__Bsdrtmservice1__GetMonReportFreqTypes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportFreqTypes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportFreqTypes", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportFreqTypes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportFreqTypes(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypes * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportFreqTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportFreqTypes * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportFreqTypes);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportFreqTypes);
		((_Bsdrtmservice1__GetMonReportFreqTypes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportFreqTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportFreqTypes);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportFreqTypes*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportFreqTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportFreqTypes %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportFreqTypes*)p = *(_Bsdrtmservice1__GetMonReportFreqTypes*)q;
}

void _Bsdrtmservice1__GetMonReportsOfFreqsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonReportsOfFreqsResponse::GetMonReportsOfFreqsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportsOfFreqsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqsResponse::GetMonReportsOfFreqsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportsOfFreqsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportsOfFreqsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse), type))
		return soap->error;
	if (a->GetMonReportsOfFreqsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonReportsOfFreqsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, "Bsdrtmservice1:GetMonReportsOfFreqsResult", -1, &(a->_Bsdrtmservice1__GetMonReportsOfFreqsResponse::GetMonReportsOfFreqsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportsOfFreqsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportsOfFreqsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportsOfFreqsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportsOfFreqsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonReportsOfFreqsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonReportsOfFreqsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, "Bsdrtmservice1:GetMonReportsOfFreqsResult", &(a->_Bsdrtmservice1__GetMonReportsOfFreqsResponse::GetMonReportsOfFreqsResult), "Bsdrtmservice1:OptResultOfRtmMonReportEntity"))
				{	soap_flag_GetMonReportsOfFreqsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonReportsOfFreqsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportsOfFreqsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse, 0, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqsResponse), 0, soap_copy__Bsdrtmservice1__GetMonReportsOfFreqsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportsOfFreqsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportsOfFreqsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportsOfFreqsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportsOfFreqsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportsOfFreqsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportsOfFreqsResponse);
		((_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportsOfFreqsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportsOfFreqsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportsOfFreqsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)p = *(_Bsdrtmservice1__GetMonReportsOfFreqsResponse*)q;
}

void _Bsdrtmservice1__GetMonReportsOfFreqs::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::monStationno);
	this->_Bsdrtmservice1__GetMonReportsOfFreqs::freqs = NULL;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::startTime);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::endTime);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportsOfFreqs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::monStationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::monStationno);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfLong(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::freqs);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::startTime, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::startTime);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::endTime, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportsOfFreqs::endTime);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportsOfFreqs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportsOfFreqs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monStationno", -1, &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::monStationno), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfLong(soap, "Bsdrtmservice1:freqs", -1, &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::freqs), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:startTime", -1, &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::startTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:endTime", -1, &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::endTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportsOfFreqs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqs * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportsOfFreqs *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportsOfFreqs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportsOfFreqs *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monStationno1 = 1;
	size_t soap_flag_freqs1 = 1;
	size_t soap_flag_startTime1 = 1;
	size_t soap_flag_endTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monStationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monStationno", &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::monStationno), "xsd:string"))
				{	soap_flag_monStationno1--;
					continue;
				}
			if (soap_flag_freqs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfLong(soap, "Bsdrtmservice1:freqs", &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::freqs), "Bsdrtmservice1:ArrayOfLong"))
				{	soap_flag_freqs1--;
					continue;
				}
			if (soap_flag_startTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:startTime", &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::startTime), "xsd:string"))
				{	soap_flag_startTime1--;
					continue;
				}
			if (soap_flag_endTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:endTime", &(a->_Bsdrtmservice1__GetMonReportsOfFreqs::endTime), "xsd:string"))
				{	soap_flag_endTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportsOfFreqs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs, 0, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqs), 0, soap_copy__Bsdrtmservice1__GetMonReportsOfFreqs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportsOfFreqs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportsOfFreqs", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportsOfFreqs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportsOfFreqs(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqs * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqs *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportsOfFreqs * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportsOfFreqs);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportsOfFreqs);
		((_Bsdrtmservice1__GetMonReportsOfFreqs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportsOfFreqs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportsOfFreqs);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportsOfFreqs*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportsOfFreqs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportsOfFreqs %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportsOfFreqs*)p = *(_Bsdrtmservice1__GetMonReportsOfFreqs*)q;
}

void _Bsdrtmservice1__GetMonReportOfFreqResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonReportOfFreqResponse::GetMonReportOfFreqResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportOfFreqResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, &this->_Bsdrtmservice1__GetMonReportOfFreqResponse::GetMonReportOfFreqResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportOfFreqResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportOfFreqResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse), type))
		return soap->error;
	if (a->GetMonReportOfFreqResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonReportOfFreqResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, "Bsdrtmservice1:GetMonReportOfFreqResult", -1, &(a->_Bsdrtmservice1__GetMonReportOfFreqResponse::GetMonReportOfFreqResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportOfFreqResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreqResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportOfFreqResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportOfFreqResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse, sizeof(_Bsdrtmservice1__GetMonReportOfFreqResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportOfFreqResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonReportOfFreqResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonReportOfFreqResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, "Bsdrtmservice1:GetMonReportOfFreqResult", &(a->_Bsdrtmservice1__GetMonReportOfFreqResponse::GetMonReportOfFreqResult), "Bsdrtmservice1:OptResultOfRtmMonReportEntity"))
				{	soap_flag_GetMonReportOfFreqResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonReportOfFreqResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportOfFreqResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse, 0, sizeof(_Bsdrtmservice1__GetMonReportOfFreqResponse), 0, soap_copy__Bsdrtmservice1__GetMonReportOfFreqResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportOfFreqResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportOfFreqResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportOfFreqResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreqResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreqResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportOfFreqResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportOfFreqResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportOfFreqResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportOfFreqResponse);
		((_Bsdrtmservice1__GetMonReportOfFreqResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportOfFreqResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportOfFreqResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportOfFreqResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportOfFreqResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportOfFreqResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportOfFreqResponse*)p = *(_Bsdrtmservice1__GetMonReportOfFreqResponse*)q;
}

void _Bsdrtmservice1__GetMonReportOfFreq::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::monStationno);
	soap_default_LONG64(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::freq);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::startTime);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::endTime);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonReportOfFreq::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::monStationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::monStationno);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::freq, SOAP_TYPE_Bsdrtmservice_LONG64);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::startTime, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::startTime);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::endTime, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonReportOfFreq::endTime);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonReportOfFreq::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonReportOfFreq(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonReportOfFreq *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monStationno", -1, &(a->_Bsdrtmservice1__GetMonReportOfFreq::monStationno), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "Bsdrtmservice1:freq", -1, &(a->_Bsdrtmservice1__GetMonReportOfFreq::freq), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:startTime", -1, &(a->_Bsdrtmservice1__GetMonReportOfFreq::startTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:endTime", -1, &(a->_Bsdrtmservice1__GetMonReportOfFreq::endTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonReportOfFreq::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonReportOfFreq(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreq * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportOfFreq *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonReportOfFreq *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq, sizeof(_Bsdrtmservice1__GetMonReportOfFreq), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonReportOfFreq *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monStationno1 = 1;
	size_t soap_flag_freq1 = 1;
	size_t soap_flag_startTime1 = 1;
	size_t soap_flag_endTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monStationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monStationno", &(a->_Bsdrtmservice1__GetMonReportOfFreq::monStationno), "xsd:string"))
				{	soap_flag_monStationno1--;
					continue;
				}
			if (soap_flag_freq1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "Bsdrtmservice1:freq", &(a->_Bsdrtmservice1__GetMonReportOfFreq::freq), "xsd:long"))
				{	soap_flag_freq1--;
					continue;
				}
			if (soap_flag_startTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:startTime", &(a->_Bsdrtmservice1__GetMonReportOfFreq::startTime), "xsd:string"))
				{	soap_flag_startTime1--;
					continue;
				}
			if (soap_flag_endTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:endTime", &(a->_Bsdrtmservice1__GetMonReportOfFreq::endTime), "xsd:string"))
				{	soap_flag_endTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonReportOfFreq *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq, 0, sizeof(_Bsdrtmservice1__GetMonReportOfFreq), 0, soap_copy__Bsdrtmservice1__GetMonReportOfFreq);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_freq1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonReportOfFreq::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonReportOfFreq", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonReportOfFreq::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonReportOfFreq(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreq * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreq *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonReportOfFreq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonReportOfFreq * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonReportOfFreq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportOfFreq);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonReportOfFreq);
		((_Bsdrtmservice1__GetMonReportOfFreq*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonReportOfFreq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonReportOfFreq);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonReportOfFreq*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonReportOfFreq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonReportOfFreq %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonReportOfFreq*)p = *(_Bsdrtmservice1__GetMonReportOfFreq*)q;
}

void _Bsdrtmservice1__DelMonReportResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__DelMonReportResponse::DelMonReportResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__DelMonReportResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__DelMonReportResponse::DelMonReportResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__DelMonReportResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__DelMonReportResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__DelMonReportResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__DelMonReportResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse), type))
		return soap->error;
	if (a->DelMonReportResult)
		soap_element_result(soap, "Bsdrtmservice1:DelMonReportResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:DelMonReportResult", -1, &(a->_Bsdrtmservice1__DelMonReportResponse::DelMonReportResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__DelMonReportResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__DelMonReportResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__DelMonReportResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReportResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__DelMonReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse, sizeof(_Bsdrtmservice1__DelMonReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__DelMonReportResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DelMonReportResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DelMonReportResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:DelMonReportResult", &(a->_Bsdrtmservice1__DelMonReportResponse::DelMonReportResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_DelMonReportResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:DelMonReportResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__DelMonReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse, 0, sizeof(_Bsdrtmservice1__DelMonReportResponse), 0, soap_copy__Bsdrtmservice1__DelMonReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__DelMonReportResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:DelMonReportResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__DelMonReportResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__DelMonReportResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__DelMonReportResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__DelMonReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__DelMonReportResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__DelMonReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__DelMonReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReportResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__DelMonReportResponse);
		((_Bsdrtmservice1__DelMonReportResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReportResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__DelMonReportResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__DelMonReportResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__DelMonReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__DelMonReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__DelMonReportResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__DelMonReportResponse*)p = *(_Bsdrtmservice1__DelMonReportResponse*)q;
}

void _Bsdrtmservice1__DelMonReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__DelMonReport::reportID);
	/* transient soap skipped */
}

void _Bsdrtmservice1__DelMonReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__DelMonReport::reportID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__DelMonReport::reportID);
	/* transient soap skipped */
}

int _Bsdrtmservice1__DelMonReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__DelMonReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__DelMonReport(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__DelMonReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:reportID", -1, &(a->_Bsdrtmservice1__DelMonReport::reportID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__DelMonReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__DelMonReport(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReport * SOAP_FMAC4 soap_in__Bsdrtmservice1__DelMonReport(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__DelMonReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport, sizeof(_Bsdrtmservice1__DelMonReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__DelMonReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_reportID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_reportID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:reportID", &(a->_Bsdrtmservice1__DelMonReport::reportID), "xsd:string"))
				{	soap_flag_reportID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__DelMonReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport, 0, sizeof(_Bsdrtmservice1__DelMonReport), 0, soap_copy__Bsdrtmservice1__DelMonReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__DelMonReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:DelMonReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__DelMonReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__DelMonReport(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReport * SOAP_FMAC4 soap_get__Bsdrtmservice1__DelMonReport(struct soap *soap, _Bsdrtmservice1__DelMonReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__DelMonReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__DelMonReport * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__DelMonReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__DelMonReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReport);
		if (size)
			*size = sizeof(_Bsdrtmservice1__DelMonReport);
		((_Bsdrtmservice1__DelMonReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__DelMonReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__DelMonReport);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__DelMonReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__DelMonReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__DelMonReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__DelMonReport %p -> %p\n", q, p));
	*(_Bsdrtmservice1__DelMonReport*)p = *(_Bsdrtmservice1__DelMonReport*)q;
}

void _Bsdrtmservice1__AddMonReportResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMonReportResponse::AddMonReportResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMonReportResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddMonReportResponse::AddMonReportResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMonReportResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMonReportResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMonReportResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMonReportResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse), type))
		return soap->error;
	if (a->AddMonReportResult)
		soap_element_result(soap, "Bsdrtmservice1:AddMonReportResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMonReportResult", -1, &(a->_Bsdrtmservice1__AddMonReportResponse::AddMonReportResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMonReportResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMonReportResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMonReportResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReportResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMonReportResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse, sizeof(_Bsdrtmservice1__AddMonReportResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMonReportResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddMonReportResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddMonReportResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMonReportResult", &(a->_Bsdrtmservice1__AddMonReportResponse::AddMonReportResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddMonReportResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddMonReportResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMonReportResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse, 0, sizeof(_Bsdrtmservice1__AddMonReportResponse), 0, soap_copy__Bsdrtmservice1__AddMonReportResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMonReportResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMonReportResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMonReportResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMonReportResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMonReportResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMonReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMonReportResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMonReportResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMonReportResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReportResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMonReportResponse);
		((_Bsdrtmservice1__AddMonReportResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReportResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMonReportResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMonReportResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMonReportResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMonReportResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMonReportResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMonReportResponse*)p = *(_Bsdrtmservice1__AddMonReportResponse*)q;
}

void _Bsdrtmservice1__AddMonReport::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMonReport::report = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMonReport::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__RtmMonReportEntity(soap, &this->_Bsdrtmservice1__AddMonReport::report);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMonReport::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMonReport(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMonReport(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMonReport *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__RtmMonReportEntity(soap, "Bsdrtmservice1:report", -1, &(a->_Bsdrtmservice1__AddMonReport::report), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMonReport::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMonReport(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReport * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMonReport(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReport *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMonReport *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport, sizeof(_Bsdrtmservice1__AddMonReport), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMonReport *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_report1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_report1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__RtmMonReportEntity(soap, "Bsdrtmservice1:report", &(a->_Bsdrtmservice1__AddMonReport::report), "Bsdrtmservice1:RtmMonReportEntity"))
				{	soap_flag_report1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMonReport *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport, 0, sizeof(_Bsdrtmservice1__AddMonReport), 0, soap_copy__Bsdrtmservice1__AddMonReport);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMonReport::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMonReport", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMonReport::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMonReport(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReport * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMonReport(struct soap *soap, _Bsdrtmservice1__AddMonReport *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMonReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMonReport * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMonReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMonReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReport);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMonReport);
		((_Bsdrtmservice1__AddMonReport*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMonReport);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMonReport*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMonReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMonReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMonReport %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMonReport*)p = *(_Bsdrtmservice1__AddMonReport*)q;
}

void _Bsdrtmservice1__GetPreDefinedMonitorsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetPreDefinedMonitorsResponse::GetPreDefinedMonitorsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetPreDefinedMonitorsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, &this->_Bsdrtmservice1__GetPreDefinedMonitorsResponse::GetPreDefinedMonitorsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetPreDefinedMonitorsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetPreDefinedMonitorsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse), type))
		return soap->error;
	if (a->GetPreDefinedMonitorsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetPreDefinedMonitorsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, "Bsdrtmservice1:GetPreDefinedMonitorsResult", -1, &(a->_Bsdrtmservice1__GetPreDefinedMonitorsResponse::GetPreDefinedMonitorsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetPreDefinedMonitorsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitorsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPreDefinedMonitorsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetPreDefinedMonitorsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse, sizeof(_Bsdrtmservice1__GetPreDefinedMonitorsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetPreDefinedMonitorsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetPreDefinedMonitorsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPreDefinedMonitorsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, "Bsdrtmservice1:GetPreDefinedMonitorsResult", &(a->_Bsdrtmservice1__GetPreDefinedMonitorsResponse::GetPreDefinedMonitorsResult), "Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity"))
				{	soap_flag_GetPreDefinedMonitorsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetPreDefinedMonitorsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetPreDefinedMonitorsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse, 0, sizeof(_Bsdrtmservice1__GetPreDefinedMonitorsResponse), 0, soap_copy__Bsdrtmservice1__GetPreDefinedMonitorsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetPreDefinedMonitorsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetPreDefinedMonitorsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetPreDefinedMonitorsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitorsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitorsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetPreDefinedMonitorsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitorsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPreDefinedMonitorsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetPreDefinedMonitorsResponse);
		((_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPreDefinedMonitorsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetPreDefinedMonitorsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetPreDefinedMonitorsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)p = *(_Bsdrtmservice1__GetPreDefinedMonitorsResponse*)q;
}

void _Bsdrtmservice1__GetPreDefinedMonitors::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetPreDefinedMonitors::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetPreDefinedMonitors::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetPreDefinedMonitors::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetPreDefinedMonitors::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetPreDefinedMonitors::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetPreDefinedMonitors(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetPreDefinedMonitors *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetPreDefinedMonitors::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetPreDefinedMonitors::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetPreDefinedMonitors(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitors * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPreDefinedMonitors *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetPreDefinedMonitors *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors, sizeof(_Bsdrtmservice1__GetPreDefinedMonitors), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetPreDefinedMonitors *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetPreDefinedMonitors::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetPreDefinedMonitors *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors, 0, sizeof(_Bsdrtmservice1__GetPreDefinedMonitors), 0, soap_copy__Bsdrtmservice1__GetPreDefinedMonitors);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetPreDefinedMonitors::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetPreDefinedMonitors", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetPreDefinedMonitors::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetPreDefinedMonitors(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitors * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitors *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetPreDefinedMonitors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetPreDefinedMonitors * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitors(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPreDefinedMonitors);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetPreDefinedMonitors);
		((_Bsdrtmservice1__GetPreDefinedMonitors*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetPreDefinedMonitors[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetPreDefinedMonitors);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetPreDefinedMonitors*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetPreDefinedMonitors*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetPreDefinedMonitors %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetPreDefinedMonitors*)p = *(_Bsdrtmservice1__GetPreDefinedMonitors*)q;
}

void _Bsdrtmservice1__GetMonAlertOfDayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonAlertOfDayResponse::GetMonAlertOfDayResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonAlertOfDayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, &this->_Bsdrtmservice1__GetMonAlertOfDayResponse::GetMonAlertOfDayResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonAlertOfDayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonAlertOfDayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse), type))
		return soap->error;
	if (a->GetMonAlertOfDayResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonAlertOfDayResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, "Bsdrtmservice1:GetMonAlertOfDayResult", -1, &(a->_Bsdrtmservice1__GetMonAlertOfDayResponse::GetMonAlertOfDayResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonAlertOfDayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDayResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfDayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonAlertOfDayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse, sizeof(_Bsdrtmservice1__GetMonAlertOfDayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonAlertOfDayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonAlertOfDayResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonAlertOfDayResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, "Bsdrtmservice1:GetMonAlertOfDayResult", &(a->_Bsdrtmservice1__GetMonAlertOfDayResponse::GetMonAlertOfDayResult), "Bsdrtmservice1:OptResultOfRtmMonAlertEntity"))
				{	soap_flag_GetMonAlertOfDayResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonAlertOfDayResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonAlertOfDayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse, 0, sizeof(_Bsdrtmservice1__GetMonAlertOfDayResponse), 0, soap_copy__Bsdrtmservice1__GetMonAlertOfDayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonAlertOfDayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfDayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonAlertOfDayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDayResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonAlertOfDayResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonAlertOfDayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfDayResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonAlertOfDayResponse);
		((_Bsdrtmservice1__GetMonAlertOfDayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfDayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonAlertOfDayResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonAlertOfDayResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonAlertOfDayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonAlertOfDayResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonAlertOfDayResponse*)p = *(_Bsdrtmservice1__GetMonAlertOfDayResponse*)q;
}

void _Bsdrtmservice1__GetMonAlertOfDay::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonAlertOfDay::day);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonAlertOfDay::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonAlertOfDay::day, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonAlertOfDay::day);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonAlertOfDay::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonAlertOfDay(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonAlertOfDay *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:day", -1, &(a->_Bsdrtmservice1__GetMonAlertOfDay::day), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonAlertOfDay::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonAlertOfDay(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDay * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfDay *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonAlertOfDay *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay, sizeof(_Bsdrtmservice1__GetMonAlertOfDay), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonAlertOfDay *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_day1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_day1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:day", &(a->_Bsdrtmservice1__GetMonAlertOfDay::day), "xsd:string"))
				{	soap_flag_day1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonAlertOfDay *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay, 0, sizeof(_Bsdrtmservice1__GetMonAlertOfDay), 0, soap_copy__Bsdrtmservice1__GetMonAlertOfDay);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonAlertOfDay::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfDay", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonAlertOfDay::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonAlertOfDay(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDay * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDay *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonAlertOfDay(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonAlertOfDay * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonAlertOfDay(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfDay);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonAlertOfDay);
		((_Bsdrtmservice1__GetMonAlertOfDay*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfDay[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonAlertOfDay);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonAlertOfDay*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonAlertOfDay*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonAlertOfDay %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonAlertOfDay*)p = *(_Bsdrtmservice1__GetMonAlertOfDay*)q;
}

void _Bsdrtmservice1__GetMonAlertOfMonthResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonAlertOfMonthResponse::GetMonAlertOfMonthResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonAlertOfMonthResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, &this->_Bsdrtmservice1__GetMonAlertOfMonthResponse::GetMonAlertOfMonthResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonAlertOfMonthResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonAlertOfMonthResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse), type))
		return soap->error;
	if (a->GetMonAlertOfMonthResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonAlertOfMonthResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, "Bsdrtmservice1:GetMonAlertOfMonthResult", -1, &(a->_Bsdrtmservice1__GetMonAlertOfMonthResponse::GetMonAlertOfMonthResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonAlertOfMonthResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonthResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfMonthResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonAlertOfMonthResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse, sizeof(_Bsdrtmservice1__GetMonAlertOfMonthResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonAlertOfMonthResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonAlertOfMonthResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonAlertOfMonthResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, "Bsdrtmservice1:GetMonAlertOfMonthResult", &(a->_Bsdrtmservice1__GetMonAlertOfMonthResponse::GetMonAlertOfMonthResult), "Bsdrtmservice1:OptResultOfRtmMonAlertEntity"))
				{	soap_flag_GetMonAlertOfMonthResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonAlertOfMonthResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonAlertOfMonthResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse, 0, sizeof(_Bsdrtmservice1__GetMonAlertOfMonthResponse), 0, soap_copy__Bsdrtmservice1__GetMonAlertOfMonthResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonAlertOfMonthResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfMonthResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonAlertOfMonthResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonthResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonthResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonAlertOfMonthResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonthResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfMonthResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonAlertOfMonthResponse);
		((_Bsdrtmservice1__GetMonAlertOfMonthResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfMonthResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonAlertOfMonthResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonAlertOfMonthResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonAlertOfMonthResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonAlertOfMonthResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonAlertOfMonthResponse*)p = *(_Bsdrtmservice1__GetMonAlertOfMonthResponse*)q;
}

void _Bsdrtmservice1__GetMonAlertOfMonth::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonAlertOfMonth::month);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonAlertOfMonth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonAlertOfMonth::month, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonAlertOfMonth::month);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonAlertOfMonth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonAlertOfMonth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonAlertOfMonth *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:month", -1, &(a->_Bsdrtmservice1__GetMonAlertOfMonth::month), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonAlertOfMonth::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonAlertOfMonth(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonth * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfMonth *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonAlertOfMonth *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth, sizeof(_Bsdrtmservice1__GetMonAlertOfMonth), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonAlertOfMonth *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_month1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_month1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:month", &(a->_Bsdrtmservice1__GetMonAlertOfMonth::month), "xsd:string"))
				{	soap_flag_month1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonAlertOfMonth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth, 0, sizeof(_Bsdrtmservice1__GetMonAlertOfMonth), 0, soap_copy__Bsdrtmservice1__GetMonAlertOfMonth);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonAlertOfMonth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfMonth", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonAlertOfMonth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonAlertOfMonth(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonth * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonth *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonAlertOfMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonAlertOfMonth * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfMonth);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonAlertOfMonth);
		((_Bsdrtmservice1__GetMonAlertOfMonth*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonAlertOfMonth[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonAlertOfMonth);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonAlertOfMonth*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonAlertOfMonth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonAlertOfMonth %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonAlertOfMonth*)p = *(_Bsdrtmservice1__GetMonAlertOfMonth*)q;
}

void _Bsdrtmservice1__AddMonAlertResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMonAlertResponse::AddMonAlertResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMonAlertResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddMonAlertResponse::AddMonAlertResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMonAlertResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMonAlertResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMonAlertResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse), type))
		return soap->error;
	if (a->AddMonAlertResult)
		soap_element_result(soap, "Bsdrtmservice1:AddMonAlertResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMonAlertResult", -1, &(a->_Bsdrtmservice1__AddMonAlertResponse::AddMonAlertResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMonAlertResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMonAlertResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlertResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonAlertResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMonAlertResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse, sizeof(_Bsdrtmservice1__AddMonAlertResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMonAlertResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddMonAlertResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddMonAlertResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddMonAlertResult", &(a->_Bsdrtmservice1__AddMonAlertResponse::AddMonAlertResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddMonAlertResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddMonAlertResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMonAlertResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse, 0, sizeof(_Bsdrtmservice1__AddMonAlertResponse), 0, soap_copy__Bsdrtmservice1__AddMonAlertResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMonAlertResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMonAlertResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMonAlertResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMonAlertResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlertResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMonAlertResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMonAlertResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMonAlertResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMonAlertResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonAlertResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMonAlertResponse);
		((_Bsdrtmservice1__AddMonAlertResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonAlertResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMonAlertResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMonAlertResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMonAlertResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMonAlertResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMonAlertResponse*)p = *(_Bsdrtmservice1__AddMonAlertResponse*)q;
}

void _Bsdrtmservice1__AddMonAlert::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddMonAlert::alert = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddMonAlert::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, &this->_Bsdrtmservice1__AddMonAlert::alert);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddMonAlert::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddMonAlert(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddMonAlert(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddMonAlert *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, "Bsdrtmservice1:alert", -1, &(a->_Bsdrtmservice1__AddMonAlert::alert), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddMonAlert::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddMonAlert(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlert * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddMonAlert(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonAlert *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddMonAlert *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert, sizeof(_Bsdrtmservice1__AddMonAlert), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddMonAlert *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_alert1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_alert1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, "Bsdrtmservice1:alert", &(a->_Bsdrtmservice1__AddMonAlert::alert), "Bsdrtmservice1:RtmMonAlertEntity"))
				{	soap_flag_alert1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddMonAlert *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert, 0, sizeof(_Bsdrtmservice1__AddMonAlert), 0, soap_copy__Bsdrtmservice1__AddMonAlert);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddMonAlert::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddMonAlert", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddMonAlert::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddMonAlert(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlert * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddMonAlert(struct soap *soap, _Bsdrtmservice1__AddMonAlert *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddMonAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddMonAlert * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddMonAlert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddMonAlert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonAlert);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddMonAlert);
		((_Bsdrtmservice1__AddMonAlert*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddMonAlert[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddMonAlert);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddMonAlert*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddMonAlert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddMonAlert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddMonAlert %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddMonAlert*)p = *(_Bsdrtmservice1__AddMonAlert*)q;
}

void _Bsdrtmservice1__SetTaskStateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__SetTaskStateResponse::SetTaskStateResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetTaskStateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__SetTaskStateResponse::SetTaskStateResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetTaskStateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetTaskStateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetTaskStateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse), type))
		return soap->error;
	if (a->SetTaskStateResult)
		soap_element_result(soap, "Bsdrtmservice1:SetTaskStateResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetTaskStateResult", -1, &(a->_Bsdrtmservice1__SetTaskStateResponse::SetTaskStateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetTaskStateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetTaskStateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskStateResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetTaskStateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetTaskStateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse, sizeof(_Bsdrtmservice1__SetTaskStateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetTaskStateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetTaskStateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetTaskStateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetTaskStateResult", &(a->_Bsdrtmservice1__SetTaskStateResponse::SetTaskStateResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_SetTaskStateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:SetTaskStateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetTaskStateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse, 0, sizeof(_Bsdrtmservice1__SetTaskStateResponse), 0, soap_copy__Bsdrtmservice1__SetTaskStateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetTaskStateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetTaskStateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetTaskStateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetTaskStateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskStateResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetTaskStateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetTaskStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetTaskStateResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetTaskStateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetTaskStateResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetTaskStateResponse);
		((_Bsdrtmservice1__SetTaskStateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetTaskStateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetTaskStateResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetTaskStateResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetTaskStateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetTaskStateResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetTaskStateResponse*)p = *(_Bsdrtmservice1__SetTaskStateResponse*)q;
}

void _Bsdrtmservice1__SetTaskState::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetTaskState::taskId);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetTaskState::taskState);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetTaskState::stateDesc);
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetTaskState::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__SetTaskState::taskId, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetTaskState::taskId);
	soap_embedded(soap, &this->_Bsdrtmservice1__SetTaskState::taskState, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetTaskState::taskState);
	soap_embedded(soap, &this->_Bsdrtmservice1__SetTaskState::stateDesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetTaskState::stateDesc);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetTaskState::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetTaskState(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetTaskState(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetTaskState *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:taskId", -1, &(a->_Bsdrtmservice1__SetTaskState::taskId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:taskState", -1, &(a->_Bsdrtmservice1__SetTaskState::taskState), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:stateDesc", -1, &(a->_Bsdrtmservice1__SetTaskState::stateDesc), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetTaskState::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetTaskState(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskState * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetTaskState(struct soap *soap, const char *tag, _Bsdrtmservice1__SetTaskState *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetTaskState *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState, sizeof(_Bsdrtmservice1__SetTaskState), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetTaskState *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_taskId1 = 1;
	size_t soap_flag_taskState1 = 1;
	size_t soap_flag_stateDesc1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_taskId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:taskId", &(a->_Bsdrtmservice1__SetTaskState::taskId), "xsd:string"))
				{	soap_flag_taskId1--;
					continue;
				}
			if (soap_flag_taskState1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:taskState", &(a->_Bsdrtmservice1__SetTaskState::taskState), "xsd:string"))
				{	soap_flag_taskState1--;
					continue;
				}
			if (soap_flag_stateDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:stateDesc", &(a->_Bsdrtmservice1__SetTaskState::stateDesc), "xsd:string"))
				{	soap_flag_stateDesc1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetTaskState *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState, 0, sizeof(_Bsdrtmservice1__SetTaskState), 0, soap_copy__Bsdrtmservice1__SetTaskState);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetTaskState::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetTaskState", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetTaskState::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetTaskState(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskState * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetTaskState(struct soap *soap, _Bsdrtmservice1__SetTaskState *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetTaskState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetTaskState * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetTaskState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetTaskState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetTaskState);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetTaskState);
		((_Bsdrtmservice1__SetTaskState*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetTaskState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetTaskState);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetTaskState*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetTaskState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetTaskState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetTaskState %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetTaskState*)p = *(_Bsdrtmservice1__SetTaskState*)q;
}

void _Bsdrtmservice1__AddTaskLogResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddTaskLogResponse::AddTaskLogResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddTaskLogResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddTaskLogResponse::AddTaskLogResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddTaskLogResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddTaskLogResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddTaskLogResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse), type))
		return soap->error;
	if (a->AddTaskLogResult)
		soap_element_result(soap, "Bsdrtmservice1:AddTaskLogResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddTaskLogResult", -1, &(a->_Bsdrtmservice1__AddTaskLogResponse::AddTaskLogResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddTaskLogResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddTaskLogResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLogResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddTaskLogResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddTaskLogResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse, sizeof(_Bsdrtmservice1__AddTaskLogResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddTaskLogResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddTaskLogResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddTaskLogResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddTaskLogResult", &(a->_Bsdrtmservice1__AddTaskLogResponse::AddTaskLogResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddTaskLogResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddTaskLogResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddTaskLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse, 0, sizeof(_Bsdrtmservice1__AddTaskLogResponse), 0, soap_copy__Bsdrtmservice1__AddTaskLogResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddTaskLogResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddTaskLogResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddTaskLogResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddTaskLogResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLogResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddTaskLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddTaskLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddTaskLogResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddTaskLogResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddTaskLogResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddTaskLogResponse);
		((_Bsdrtmservice1__AddTaskLogResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddTaskLogResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddTaskLogResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddTaskLogResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddTaskLogResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddTaskLogResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddTaskLogResponse*)p = *(_Bsdrtmservice1__AddTaskLogResponse*)q;
}

void _Bsdrtmservice1__AddTaskLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddTaskLog::taskLog = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddTaskLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, &this->_Bsdrtmservice1__AddTaskLog::taskLog);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddTaskLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddTaskLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddTaskLog(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddTaskLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, "Bsdrtmservice1:taskLog", -1, &(a->_Bsdrtmservice1__AddTaskLog::taskLog), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddTaskLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddTaskLog(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLog * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddTaskLog(struct soap *soap, const char *tag, _Bsdrtmservice1__AddTaskLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddTaskLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog, sizeof(_Bsdrtmservice1__AddTaskLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddTaskLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_taskLog1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_taskLog1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, "Bsdrtmservice1:taskLog", &(a->_Bsdrtmservice1__AddTaskLog::taskLog), "Bsdrtmservice1:RtmMonTaskLogEntity"))
				{	soap_flag_taskLog1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddTaskLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog, 0, sizeof(_Bsdrtmservice1__AddTaskLog), 0, soap_copy__Bsdrtmservice1__AddTaskLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddTaskLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddTaskLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddTaskLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddTaskLog(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLog * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddTaskLog(struct soap *soap, _Bsdrtmservice1__AddTaskLog *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddTaskLog * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddTaskLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddTaskLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddTaskLog);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddTaskLog);
		((_Bsdrtmservice1__AddTaskLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddTaskLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddTaskLog);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddTaskLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddTaskLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddTaskLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddTaskLog %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddTaskLog*)p = *(_Bsdrtmservice1__AddTaskLog*)q;
}

void _Bsdrtmservice1__GetRuningTaskByIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetRuningTaskByIdResponse::GetRuningTaskByIdResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRuningTaskByIdResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, &this->_Bsdrtmservice1__GetRuningTaskByIdResponse::GetRuningTaskByIdResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRuningTaskByIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRuningTaskByIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse), type))
		return soap->error;
	if (a->GetRuningTaskByIdResult)
		soap_element_result(soap, "Bsdrtmservice1:GetRuningTaskByIdResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, "Bsdrtmservice1:GetRuningTaskByIdResult", -1, &(a->_Bsdrtmservice1__GetRuningTaskByIdResponse::GetRuningTaskByIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRuningTaskByIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskByIdResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskByIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRuningTaskByIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse, sizeof(_Bsdrtmservice1__GetRuningTaskByIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRuningTaskByIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRuningTaskByIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRuningTaskByIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, "Bsdrtmservice1:GetRuningTaskByIdResult", &(a->_Bsdrtmservice1__GetRuningTaskByIdResponse::GetRuningTaskByIdResult), "Bsdrtmservice1:OptResultOfVRtmMonTaskEntity"))
				{	soap_flag_GetRuningTaskByIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetRuningTaskByIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRuningTaskByIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse, 0, sizeof(_Bsdrtmservice1__GetRuningTaskByIdResponse), 0, soap_copy__Bsdrtmservice1__GetRuningTaskByIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRuningTaskByIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskByIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRuningTaskByIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskByIdResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskByIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRuningTaskByIdResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRuningTaskByIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskByIdResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRuningTaskByIdResponse);
		((_Bsdrtmservice1__GetRuningTaskByIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskByIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRuningTaskByIdResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRuningTaskByIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRuningTaskByIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRuningTaskByIdResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRuningTaskByIdResponse*)p = *(_Bsdrtmservice1__GetRuningTaskByIdResponse*)q;
}

void _Bsdrtmservice1__GetRuningTaskById::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetRuningTaskById::taskId);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRuningTaskById::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetRuningTaskById::taskId, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetRuningTaskById::taskId);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRuningTaskById::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRuningTaskById(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRuningTaskById *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:taskId", -1, &(a->_Bsdrtmservice1__GetRuningTaskById::taskId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRuningTaskById::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRuningTaskById(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskById * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskById *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRuningTaskById *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById, sizeof(_Bsdrtmservice1__GetRuningTaskById), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRuningTaskById *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_taskId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_taskId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:taskId", &(a->_Bsdrtmservice1__GetRuningTaskById::taskId), "xsd:string"))
				{	soap_flag_taskId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRuningTaskById *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById, 0, sizeof(_Bsdrtmservice1__GetRuningTaskById), 0, soap_copy__Bsdrtmservice1__GetRuningTaskById);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRuningTaskById::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskById", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRuningTaskById::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRuningTaskById(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskById * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRuningTaskById(struct soap *soap, _Bsdrtmservice1__GetRuningTaskById *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRuningTaskById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRuningTaskById * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRuningTaskById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRuningTaskById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskById);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRuningTaskById);
		((_Bsdrtmservice1__GetRuningTaskById*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskById[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRuningTaskById);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRuningTaskById*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRuningTaskById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRuningTaskById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRuningTaskById %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRuningTaskById*)p = *(_Bsdrtmservice1__GetRuningTaskById*)q;
}

void _Bsdrtmservice1__GetRuningTaskIdsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetRuningTaskIdsResponse::GetRuningTaskIdsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRuningTaskIdsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetRuningTaskIdsResponse::GetRuningTaskIdsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRuningTaskIdsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRuningTaskIdsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse), type))
		return soap->error;
	if (a->GetRuningTaskIdsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetRuningTaskIdsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetRuningTaskIdsResult", -1, &(a->_Bsdrtmservice1__GetRuningTaskIdsResponse::GetRuningTaskIdsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRuningTaskIdsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIdsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskIdsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRuningTaskIdsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse, sizeof(_Bsdrtmservice1__GetRuningTaskIdsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRuningTaskIdsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRuningTaskIdsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRuningTaskIdsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetRuningTaskIdsResult", &(a->_Bsdrtmservice1__GetRuningTaskIdsResponse::GetRuningTaskIdsResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetRuningTaskIdsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetRuningTaskIdsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRuningTaskIdsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse, 0, sizeof(_Bsdrtmservice1__GetRuningTaskIdsResponse), 0, soap_copy__Bsdrtmservice1__GetRuningTaskIdsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRuningTaskIdsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskIdsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRuningTaskIdsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIdsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIdsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRuningTaskIdsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRuningTaskIdsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskIdsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRuningTaskIdsResponse);
		((_Bsdrtmservice1__GetRuningTaskIdsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskIdsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRuningTaskIdsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRuningTaskIdsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRuningTaskIdsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRuningTaskIdsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRuningTaskIdsResponse*)p = *(_Bsdrtmservice1__GetRuningTaskIdsResponse*)q;
}

void _Bsdrtmservice1__GetRuningTaskIds::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRuningTaskIds::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRuningTaskIds::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRuningTaskIds(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRuningTaskIds *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRuningTaskIds::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRuningTaskIds(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIds * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskIds *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRuningTaskIds *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds, sizeof(_Bsdrtmservice1__GetRuningTaskIds), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRuningTaskIds *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRuningTaskIds *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds, 0, sizeof(_Bsdrtmservice1__GetRuningTaskIds), 0, soap_copy__Bsdrtmservice1__GetRuningTaskIds);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRuningTaskIds::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskIds", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRuningTaskIds::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRuningTaskIds(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIds * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIds *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRuningTaskIds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRuningTaskIds * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRuningTaskIds(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskIds);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRuningTaskIds);
		((_Bsdrtmservice1__GetRuningTaskIds*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRuningTaskIds[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRuningTaskIds);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRuningTaskIds*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRuningTaskIds*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRuningTaskIds %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRuningTaskIds*)p = *(_Bsdrtmservice1__GetRuningTaskIds*)q;
}

void _Bsdrtmservice1__GetMonstationUseTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonstationUseTimeResponse::GetMonstationUseTimeResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonstationUseTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeResponse::GetMonstationUseTimeResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonstationUseTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonstationUseTimeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse), type))
		return soap->error;
	if (a->GetMonstationUseTimeResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonstationUseTimeResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonstationUseTimeResult", -1, &(a->_Bsdrtmservice1__GetMonstationUseTimeResponse::GetMonstationUseTimeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonstationUseTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTimeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonstationUseTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse, sizeof(_Bsdrtmservice1__GetMonstationUseTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonstationUseTimeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonstationUseTimeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonstationUseTimeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonstationUseTimeResult", &(a->_Bsdrtmservice1__GetMonstationUseTimeResponse::GetMonstationUseTimeResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetMonstationUseTimeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonstationUseTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonstationUseTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse, 0, sizeof(_Bsdrtmservice1__GetMonstationUseTimeResponse), 0, soap_copy__Bsdrtmservice1__GetMonstationUseTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonstationUseTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTimeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonstationUseTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonstationUseTimeResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTimeResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonstationUseTimeResponse);
		((_Bsdrtmservice1__GetMonstationUseTimeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTimeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonstationUseTimeResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonstationUseTimeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonstationUseTimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonstationUseTimeResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonstationUseTimeResponse*)p = *(_Bsdrtmservice1__GetMonstationUseTimeResponse*)q;
}

void _Bsdrtmservice1__GetMonstationUseTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::monStationNo);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::startDate);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::endDate);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonstationUseTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::monStationNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::monStationNo);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::startDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::startDate);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::endDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTime::endDate);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonstationUseTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonstationUseTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonstationUseTime *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monStationNo", -1, &(a->_Bsdrtmservice1__GetMonstationUseTime::monStationNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:startDate", -1, &(a->_Bsdrtmservice1__GetMonstationUseTime::startDate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:endDate", -1, &(a->_Bsdrtmservice1__GetMonstationUseTime::endDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonstationUseTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonstationUseTime(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTime * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonstationUseTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime, sizeof(_Bsdrtmservice1__GetMonstationUseTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonstationUseTime *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monStationNo1 = 1;
	size_t soap_flag_startDate1 = 1;
	size_t soap_flag_endDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monStationNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monStationNo", &(a->_Bsdrtmservice1__GetMonstationUseTime::monStationNo), "xsd:string"))
				{	soap_flag_monStationNo1--;
					continue;
				}
			if (soap_flag_startDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:startDate", &(a->_Bsdrtmservice1__GetMonstationUseTime::startDate), "xsd:string"))
				{	soap_flag_startDate1--;
					continue;
				}
			if (soap_flag_endDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:endDate", &(a->_Bsdrtmservice1__GetMonstationUseTime::endDate), "xsd:string"))
				{	soap_flag_endDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonstationUseTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime, 0, sizeof(_Bsdrtmservice1__GetMonstationUseTime), 0, soap_copy__Bsdrtmservice1__GetMonstationUseTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonstationUseTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonstationUseTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonstationUseTime(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTime * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonstationUseTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonstationUseTime * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonstationUseTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTime);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonstationUseTime);
		((_Bsdrtmservice1__GetMonstationUseTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonstationUseTime);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonstationUseTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonstationUseTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonstationUseTime %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonstationUseTime*)p = *(_Bsdrtmservice1__GetMonstationUseTime*)q;
}

void _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::GetMonstationUseTimeOfMonthResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::GetMonstationUseTimeOfMonthResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse), type))
		return soap->error;
	if (a->GetMonstationUseTimeOfMonthResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResult", -1, &(a->_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::GetMonstationUseTimeOfMonthResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonstationUseTimeOfMonthResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonstationUseTimeOfMonthResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResult", &(a->_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::GetMonstationUseTimeOfMonthResult), "Bsdrtmservice1:OptResultOfTimeSpan"))
				{	soap_flag_GetMonstationUseTimeOfMonthResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonthResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse, 0, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse), 0, soap_copy__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTimeOfMonthResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
		((_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)p = *(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse*)q;
}

void _Bsdrtmservice1__GetMonstationUseTimeOfMonth::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::monStationNo);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::month);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonstationUseTimeOfMonth::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::monStationNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::monStationNo);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::month, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::month);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonstationUseTimeOfMonth::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonstationUseTimeOfMonth *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:monStationNo", -1, &(a->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::monStationNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:month", -1, &(a->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::month), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonstationUseTimeOfMonth::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonth * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTimeOfMonth *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonth *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonth), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonstationUseTimeOfMonth *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_monStationNo1 = 1;
	size_t soap_flag_month1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_monStationNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:monStationNo", &(a->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::monStationNo), "xsd:string"))
				{	soap_flag_monStationNo1--;
					continue;
				}
			if (soap_flag_month1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:month", &(a->_Bsdrtmservice1__GetMonstationUseTimeOfMonth::month), "xsd:string"))
				{	soap_flag_month1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonth *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth, 0, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonth), 0, soap_copy__Bsdrtmservice1__GetMonstationUseTimeOfMonth);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonstationUseTimeOfMonth::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTimeOfMonth", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonstationUseTimeOfMonth::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonth * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonth *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonstationUseTimeOfMonth * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTimeOfMonth);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonth);
		((_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonstationUseTimeOfMonth[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonth);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonstationUseTimeOfMonth %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)p = *(_Bsdrtmservice1__GetMonstationUseTimeOfMonth*)q;
}

void _Bsdrtmservice1__AddDevUseLogResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddDevUseLogResponse::AddDevUseLogResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddDevUseLogResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__AddDevUseLogResponse::AddDevUseLogResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddDevUseLogResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddDevUseLogResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddDevUseLogResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse), type))
		return soap->error;
	if (a->AddDevUseLogResult)
		soap_element_result(soap, "Bsdrtmservice1:AddDevUseLogResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddDevUseLogResult", -1, &(a->_Bsdrtmservice1__AddDevUseLogResponse::AddDevUseLogResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddDevUseLogResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddDevUseLogResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLogResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddDevUseLogResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddDevUseLogResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse, sizeof(_Bsdrtmservice1__AddDevUseLogResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddDevUseLogResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AddDevUseLogResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddDevUseLogResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:AddDevUseLogResult", &(a->_Bsdrtmservice1__AddDevUseLogResponse::AddDevUseLogResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_AddDevUseLogResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:AddDevUseLogResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddDevUseLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse, 0, sizeof(_Bsdrtmservice1__AddDevUseLogResponse), 0, soap_copy__Bsdrtmservice1__AddDevUseLogResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddDevUseLogResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddDevUseLogResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddDevUseLogResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddDevUseLogResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLogResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, _Bsdrtmservice1__AddDevUseLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddDevUseLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddDevUseLogResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddDevUseLogResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddDevUseLogResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddDevUseLogResponse);
		((_Bsdrtmservice1__AddDevUseLogResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddDevUseLogResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddDevUseLogResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddDevUseLogResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddDevUseLogResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddDevUseLogResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddDevUseLogResponse*)p = *(_Bsdrtmservice1__AddDevUseLogResponse*)q;
}

void _Bsdrtmservice1__AddDevUseLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__AddDevUseLog::useLog = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__AddDevUseLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, &this->_Bsdrtmservice1__AddDevUseLog::useLog);
	/* transient soap skipped */
}

int _Bsdrtmservice1__AddDevUseLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__AddDevUseLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__AddDevUseLog(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__AddDevUseLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog), type))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, "Bsdrtmservice1:useLog", -1, &(a->_Bsdrtmservice1__AddDevUseLog::useLog), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__AddDevUseLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__AddDevUseLog(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLog * SOAP_FMAC4 soap_in__Bsdrtmservice1__AddDevUseLog(struct soap *soap, const char *tag, _Bsdrtmservice1__AddDevUseLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__AddDevUseLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog, sizeof(_Bsdrtmservice1__AddDevUseLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__AddDevUseLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_useLog1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_useLog1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, "Bsdrtmservice1:useLog", &(a->_Bsdrtmservice1__AddDevUseLog::useLog), "Bsdrtmservice1:RtmDevUseLogEntity"))
				{	soap_flag_useLog1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__AddDevUseLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog, 0, sizeof(_Bsdrtmservice1__AddDevUseLog), 0, soap_copy__Bsdrtmservice1__AddDevUseLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__AddDevUseLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:AddDevUseLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__AddDevUseLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__AddDevUseLog(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLog * SOAP_FMAC4 soap_get__Bsdrtmservice1__AddDevUseLog(struct soap *soap, _Bsdrtmservice1__AddDevUseLog *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__AddDevUseLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__AddDevUseLog * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__AddDevUseLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__AddDevUseLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddDevUseLog);
		if (size)
			*size = sizeof(_Bsdrtmservice1__AddDevUseLog);
		((_Bsdrtmservice1__AddDevUseLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__AddDevUseLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__AddDevUseLog);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__AddDevUseLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__AddDevUseLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__AddDevUseLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__AddDevUseLog %p -> %p\n", q, p));
	*(_Bsdrtmservice1__AddDevUseLog*)p = *(_Bsdrtmservice1__AddDevUseLog*)q;
}

void _Bsdrtmservice1__GetAllAntsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetAllAntsResponse::GetAllAntsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllAntsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, &this->_Bsdrtmservice1__GetAllAntsResponse::GetAllAntsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllAntsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllAntsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllAntsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse), type))
		return soap->error;
	if (a->GetAllAntsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetAllAntsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, "Bsdrtmservice1:GetAllAntsResult", -1, &(a->_Bsdrtmservice1__GetAllAntsResponse::GetAllAntsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllAntsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllAntsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAntsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllAntsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllAntsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse, sizeof(_Bsdrtmservice1__GetAllAntsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllAntsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAllAntsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllAntsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, "Bsdrtmservice1:GetAllAntsResult", &(a->_Bsdrtmservice1__GetAllAntsResponse::GetAllAntsResult), "Bsdrtmservice1:OptResultOfRtmAntEntity"))
				{	soap_flag_GetAllAntsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetAllAntsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllAntsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse, 0, sizeof(_Bsdrtmservice1__GetAllAntsResponse), 0, soap_copy__Bsdrtmservice1__GetAllAntsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllAntsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllAntsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllAntsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllAntsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAntsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, _Bsdrtmservice1__GetAllAntsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllAntsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllAntsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllAntsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllAntsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllAntsResponse);
		((_Bsdrtmservice1__GetAllAntsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllAntsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllAntsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllAntsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllAntsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllAntsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllAntsResponse*)p = *(_Bsdrtmservice1__GetAllAntsResponse*)q;
}

void _Bsdrtmservice1__GetAllAnts::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllAnts::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllAnts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllAnts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllAnts(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllAnts *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllAnts::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllAnts(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAnts * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllAnts(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllAnts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllAnts *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts, sizeof(_Bsdrtmservice1__GetAllAnts), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllAnts *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllAnts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts, 0, sizeof(_Bsdrtmservice1__GetAllAnts), 0, soap_copy__Bsdrtmservice1__GetAllAnts);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllAnts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllAnts", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllAnts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllAnts(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAnts * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllAnts(struct soap *soap, _Bsdrtmservice1__GetAllAnts *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllAnts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllAnts * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllAnts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllAnts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllAnts);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllAnts);
		((_Bsdrtmservice1__GetAllAnts*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllAnts[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllAnts);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllAnts*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllAnts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllAnts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllAnts %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllAnts*)p = *(_Bsdrtmservice1__GetAllAnts*)q;
}

void _Bsdrtmservice1__GetAnts3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetAnts3Response::GetAnts3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAnts3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, &this->_Bsdrtmservice1__GetAnts3Response::GetAnts3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAnts3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAnts3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAnts3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAnts3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response), type))
		return soap->error;
	if (a->GetAnts3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetAnts3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, "Bsdrtmservice1:GetAnts3Result", -1, &(a->_Bsdrtmservice1__GetAnts3Response::GetAnts3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAnts3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAnts3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAnts3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAnts3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAnts3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response, sizeof(_Bsdrtmservice1__GetAnts3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAnts3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAnts3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAnts3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, "Bsdrtmservice1:GetAnts3Result", &(a->_Bsdrtmservice1__GetAnts3Response::GetAnts3Result), "Bsdrtmservice1:OptResultOfRtmAntEntity"))
				{	soap_flag_GetAnts3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetAnts3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAnts3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response, 0, sizeof(_Bsdrtmservice1__GetAnts3Response), 0, soap_copy__Bsdrtmservice1__GetAnts3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAnts3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAnts3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAnts3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAnts3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAnts3Response(struct soap *soap, _Bsdrtmservice1__GetAnts3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAnts3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAnts3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAnts3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAnts3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAnts3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAnts3Response);
		((_Bsdrtmservice1__GetAnts3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAnts3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAnts3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAnts3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAnts3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAnts3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAnts3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAnts3Response*)p = *(_Bsdrtmservice1__GetAnts3Response*)q;
}

void _Bsdrtmservice1__GetAnts3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetAnts3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAnts3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetAnts3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetAnts3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAnts3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAnts3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAnts3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAnts3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetAnts3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAnts3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAnts3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAnts3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAnts3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAnts3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3, sizeof(_Bsdrtmservice1__GetAnts3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAnts3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetAnts3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAnts3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3, 0, sizeof(_Bsdrtmservice1__GetAnts3), 0, soap_copy__Bsdrtmservice1__GetAnts3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAnts3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAnts3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAnts3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAnts3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAnts3(struct soap *soap, _Bsdrtmservice1__GetAnts3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAnts3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAnts3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAnts3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAnts3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAnts3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAnts3);
		((_Bsdrtmservice1__GetAnts3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAnts3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAnts3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAnts3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAnts3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAnts3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAnts3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAnts3*)p = *(_Bsdrtmservice1__GetAnts3*)q;
}

void _Bsdrtmservice1__GetDevFunAnts3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevFunAnts3Response::GetDevFunAnts3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFunAnts3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, &this->_Bsdrtmservice1__GetDevFunAnts3Response::GetDevFunAnts3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFunAnts3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFunAnts3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFunAnts3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response), type))
		return soap->error;
	if (a->GetDevFunAnts3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDevFunAnts3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, "Bsdrtmservice1:GetDevFunAnts3Result", -1, &(a->_Bsdrtmservice1__GetDevFunAnts3Response::GetDevFunAnts3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFunAnts3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFunAnts3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAnts3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFunAnts3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response, sizeof(_Bsdrtmservice1__GetDevFunAnts3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFunAnts3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevFunAnts3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevFunAnts3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, "Bsdrtmservice1:GetDevFunAnts3Result", &(a->_Bsdrtmservice1__GetDevFunAnts3Response::GetDevFunAnts3Result), "Bsdrtmservice1:OptResultOfvRtmDevAntEntity"))
				{	soap_flag_GetDevFunAnts3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevFunAnts3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFunAnts3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response, 0, sizeof(_Bsdrtmservice1__GetDevFunAnts3Response), 0, soap_copy__Bsdrtmservice1__GetDevFunAnts3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFunAnts3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFunAnts3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFunAnts3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFunAnts3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFunAnts3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFunAnts3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFunAnts3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAnts3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFunAnts3Response);
		((_Bsdrtmservice1__GetDevFunAnts3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAnts3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFunAnts3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFunAnts3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFunAnts3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFunAnts3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFunAnts3Response*)p = *(_Bsdrtmservice1__GetDevFunAnts3Response*)q;
}

void _Bsdrtmservice1__GetDevFunAnts3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevFunAnts3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFunAnts3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevFunAnts3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevFunAnts3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFunAnts3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFunAnts3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFunAnts3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevFunAnts3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFunAnts3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFunAnts3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAnts3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFunAnts3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3, sizeof(_Bsdrtmservice1__GetDevFunAnts3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFunAnts3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevFunAnts3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFunAnts3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3, 0, sizeof(_Bsdrtmservice1__GetDevFunAnts3), 0, soap_copy__Bsdrtmservice1__GetDevFunAnts3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFunAnts3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFunAnts3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFunAnts3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFunAnts3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFunAnts3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFunAnts3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFunAnts3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAnts3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFunAnts3);
		((_Bsdrtmservice1__GetDevFunAnts3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAnts3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFunAnts3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFunAnts3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFunAnts3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFunAnts3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFunAnts3*)p = *(_Bsdrtmservice1__GetDevFunAnts3*)q;
}

void _Bsdrtmservice1__GetDevFunAntsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevFunAntsResponse::GetDevFunAntsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFunAntsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, &this->_Bsdrtmservice1__GetDevFunAntsResponse::GetDevFunAntsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFunAntsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFunAntsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFunAntsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse), type))
		return soap->error;
	if (a->GetDevFunAntsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevFunAntsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, "Bsdrtmservice1:GetDevFunAntsResult", -1, &(a->_Bsdrtmservice1__GetDevFunAntsResponse::GetDevFunAntsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFunAntsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFunAntsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAntsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAntsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFunAntsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse, sizeof(_Bsdrtmservice1__GetDevFunAntsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFunAntsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevFunAntsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevFunAntsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, "Bsdrtmservice1:GetDevFunAntsResult", &(a->_Bsdrtmservice1__GetDevFunAntsResponse::GetDevFunAntsResult), "Bsdrtmservice1:OptResultOfvRtmDevAntEntity"))
				{	soap_flag_GetDevFunAntsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevFunAntsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFunAntsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse, 0, sizeof(_Bsdrtmservice1__GetDevFunAntsResponse), 0, soap_copy__Bsdrtmservice1__GetDevFunAntsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFunAntsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFunAntsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFunAntsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFunAntsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAntsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunAntsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFunAntsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFunAntsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFunAntsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAntsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFunAntsResponse);
		((_Bsdrtmservice1__GetDevFunAntsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAntsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFunAntsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFunAntsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFunAntsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFunAntsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFunAntsResponse*)p = *(_Bsdrtmservice1__GetDevFunAntsResponse*)q;
}

void _Bsdrtmservice1__GetDevFunAnts::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevFunAnts::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFunAnts::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevFunAnts::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevFunAnts::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFunAnts::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFunAnts(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFunAnts *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevFunAnts::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFunAnts::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFunAnts(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAnts *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFunAnts *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts, sizeof(_Bsdrtmservice1__GetDevFunAnts), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFunAnts *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevFunAnts::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFunAnts *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts, 0, sizeof(_Bsdrtmservice1__GetDevFunAnts), 0, soap_copy__Bsdrtmservice1__GetDevFunAnts);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFunAnts::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFunAnts", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFunAnts::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFunAnts(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFunAnts(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFunAnts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFunAnts * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFunAnts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFunAnts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAnts);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFunAnts);
		((_Bsdrtmservice1__GetDevFunAnts*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunAnts[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFunAnts);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFunAnts*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFunAnts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFunAnts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFunAnts %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFunAnts*)p = *(_Bsdrtmservice1__GetDevFunAnts*)q;
}

void _Bsdrtmservice1__GetDevFuns3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevFuns3Response::GetDevFuns3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFuns3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, &this->_Bsdrtmservice1__GetDevFuns3Response::GetDevFuns3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFuns3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFuns3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFuns3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response), type))
		return soap->error;
	if (a->GetDevFuns3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDevFuns3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, "Bsdrtmservice1:GetDevFuns3Result", -1, &(a->_Bsdrtmservice1__GetDevFuns3Response::GetDevFuns3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFuns3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFuns3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFuns3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFuns3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response, sizeof(_Bsdrtmservice1__GetDevFuns3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFuns3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevFuns3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevFuns3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, "Bsdrtmservice1:GetDevFuns3Result", &(a->_Bsdrtmservice1__GetDevFuns3Response::GetDevFuns3Result), "Bsdrtmservice1:OptResultOfVRtmDevFunEntity"))
				{	soap_flag_GetDevFuns3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevFuns3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFuns3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response, 0, sizeof(_Bsdrtmservice1__GetDevFuns3Response), 0, soap_copy__Bsdrtmservice1__GetDevFuns3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFuns3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFuns3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFuns3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFuns3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, _Bsdrtmservice1__GetDevFuns3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFuns3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFuns3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFuns3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFuns3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFuns3Response);
		((_Bsdrtmservice1__GetDevFuns3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFuns3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFuns3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFuns3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFuns3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFuns3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFuns3Response*)p = *(_Bsdrtmservice1__GetDevFuns3Response*)q;
}

void _Bsdrtmservice1__GetDevFuns3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevFuns3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFuns3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevFuns3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevFuns3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFuns3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFuns3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFuns3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFuns3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevFuns3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFuns3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFuns3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFuns3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFuns3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFuns3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3, sizeof(_Bsdrtmservice1__GetDevFuns3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFuns3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevFuns3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFuns3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3, 0, sizeof(_Bsdrtmservice1__GetDevFuns3), 0, soap_copy__Bsdrtmservice1__GetDevFuns3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFuns3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFuns3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFuns3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFuns3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFuns3(struct soap *soap, _Bsdrtmservice1__GetDevFuns3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFuns3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFuns3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFuns3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFuns3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFuns3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFuns3);
		((_Bsdrtmservice1__GetDevFuns3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFuns3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFuns3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFuns3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFuns3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFuns3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFuns3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFuns3*)p = *(_Bsdrtmservice1__GetDevFuns3*)q;
}

void _Bsdrtmservice1__GetDevFunsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevFunsResponse::GetDevFunsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFunsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, &this->_Bsdrtmservice1__GetDevFunsResponse::GetDevFunsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFunsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFunsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFunsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse), type))
		return soap->error;
	if (a->GetDevFunsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevFunsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, "Bsdrtmservice1:GetDevFunsResult", -1, &(a->_Bsdrtmservice1__GetDevFunsResponse::GetDevFunsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFunsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFunsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFunsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse, sizeof(_Bsdrtmservice1__GetDevFunsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFunsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevFunsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevFunsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, "Bsdrtmservice1:GetDevFunsResult", &(a->_Bsdrtmservice1__GetDevFunsResponse::GetDevFunsResult), "Bsdrtmservice1:OptResultOfVRtmDevFunEntity"))
				{	soap_flag_GetDevFunsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevFunsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFunsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse, 0, sizeof(_Bsdrtmservice1__GetDevFunsResponse), 0, soap_copy__Bsdrtmservice1__GetDevFunsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFunsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFunsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFunsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFunsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFunsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFunsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFunsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFunsResponse);
		((_Bsdrtmservice1__GetDevFunsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFunsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFunsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFunsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFunsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFunsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFunsResponse*)p = *(_Bsdrtmservice1__GetDevFunsResponse*)q;
}

void _Bsdrtmservice1__GetDevFuns::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevFuns::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevFuns::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevFuns::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevFuns::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevFuns::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevFuns(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevFuns(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevFuns *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevFuns::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevFuns::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevFuns(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevFuns(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFuns *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevFuns *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns, sizeof(_Bsdrtmservice1__GetDevFuns), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevFuns *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevFuns::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevFuns *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns, 0, sizeof(_Bsdrtmservice1__GetDevFuns), 0, soap_copy__Bsdrtmservice1__GetDevFuns);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevFuns::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevFuns", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevFuns::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevFuns(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevFuns(struct soap *soap, _Bsdrtmservice1__GetDevFuns *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevFuns(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevFuns * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevFuns(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevFuns(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFuns);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevFuns);
		((_Bsdrtmservice1__GetDevFuns*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevFuns[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevFuns);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevFuns*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevFuns*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevFuns(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevFuns %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevFuns*)p = *(_Bsdrtmservice1__GetDevFuns*)q;
}

void _Bsdrtmservice1__GetDevices3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevices3Response::GetDevices3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevices3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, &this->_Bsdrtmservice1__GetDevices3Response::GetDevices3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevices3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevices3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevices3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevices3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response), type))
		return soap->error;
	if (a->GetDevices3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDevices3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, "Bsdrtmservice1:GetDevices3Result", -1, &(a->_Bsdrtmservice1__GetDevices3Response::GetDevices3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevices3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevices3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevices3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevices3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevices3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response, sizeof(_Bsdrtmservice1__GetDevices3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevices3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevices3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevices3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, "Bsdrtmservice1:GetDevices3Result", &(a->_Bsdrtmservice1__GetDevices3Response::GetDevices3Result), "Bsdrtmservice1:OptResultOfRtmDeviceEntity"))
				{	soap_flag_GetDevices3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevices3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevices3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response, 0, sizeof(_Bsdrtmservice1__GetDevices3Response), 0, soap_copy__Bsdrtmservice1__GetDevices3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevices3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevices3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevices3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevices3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevices3Response(struct soap *soap, _Bsdrtmservice1__GetDevices3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevices3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevices3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevices3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevices3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevices3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevices3Response);
		((_Bsdrtmservice1__GetDevices3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevices3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevices3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevices3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevices3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevices3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevices3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevices3Response*)p = *(_Bsdrtmservice1__GetDevices3Response*)q;
}

void _Bsdrtmservice1__GetDevices3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevices3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevices3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevices3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevices3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevices3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevices3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevices3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevices3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevices3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevices3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevices3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevices3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevices3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevices3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3, sizeof(_Bsdrtmservice1__GetDevices3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevices3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevices3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevices3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3, 0, sizeof(_Bsdrtmservice1__GetDevices3), 0, soap_copy__Bsdrtmservice1__GetDevices3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevices3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevices3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevices3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevices3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevices3(struct soap *soap, _Bsdrtmservice1__GetDevices3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevices3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevices3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevices3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevices3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevices3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevices3);
		((_Bsdrtmservice1__GetDevices3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevices3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevices3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevices3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevices3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevices3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevices3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevices3*)p = *(_Bsdrtmservice1__GetDevices3*)q;
}

void _Bsdrtmservice1__GetDevicesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevicesResponse::GetDevicesResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevicesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, &this->_Bsdrtmservice1__GetDevicesResponse::GetDevicesResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevicesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevicesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevicesResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevicesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse), type))
		return soap->error;
	if (a->GetDevicesResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevicesResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, "Bsdrtmservice1:GetDevicesResult", -1, &(a->_Bsdrtmservice1__GetDevicesResponse::GetDevicesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevicesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevicesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevicesResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevicesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevicesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevicesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse, sizeof(_Bsdrtmservice1__GetDevicesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevicesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevicesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevicesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, "Bsdrtmservice1:GetDevicesResult", &(a->_Bsdrtmservice1__GetDevicesResponse::GetDevicesResult), "Bsdrtmservice1:OptResultOfRtmDeviceEntity"))
				{	soap_flag_GetDevicesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevicesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse, 0, sizeof(_Bsdrtmservice1__GetDevicesResponse), 0, soap_copy__Bsdrtmservice1__GetDevicesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevicesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevicesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevicesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevicesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevicesResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetDevicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevicesResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevicesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevicesResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevicesResponse);
		((_Bsdrtmservice1__GetDevicesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevicesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevicesResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevicesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevicesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevicesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevicesResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevicesResponse*)p = *(_Bsdrtmservice1__GetDevicesResponse*)q;
}

void _Bsdrtmservice1__GetDevices::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevices::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevices::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevices::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevices::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevices::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevices(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevices(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevices *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevices::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevices::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevices(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevices(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevices *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevices *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices, sizeof(_Bsdrtmservice1__GetDevices), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevices *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevices::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices, 0, sizeof(_Bsdrtmservice1__GetDevices), 0, soap_copy__Bsdrtmservice1__GetDevices);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevices::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevices", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevices::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevices(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevices(struct soap *soap, _Bsdrtmservice1__GetDevices *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevices * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevices);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevices);
		((_Bsdrtmservice1__GetDevices*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevices);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevices*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevices %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevices*)p = *(_Bsdrtmservice1__GetDevices*)q;
}

void _Bsdrtmservice1__SetRNCPasswordResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__SetRNCPasswordResponse::SetRNCPasswordResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetRNCPasswordResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__SetRNCPasswordResponse::SetRNCPasswordResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetRNCPasswordResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetRNCPasswordResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetRNCPasswordResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse), type))
		return soap->error;
	if (a->SetRNCPasswordResult)
		soap_element_result(soap, "Bsdrtmservice1:SetRNCPasswordResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetRNCPasswordResult", -1, &(a->_Bsdrtmservice1__SetRNCPasswordResponse::SetRNCPasswordResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetRNCPasswordResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetRNCPasswordResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPasswordResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetRNCPasswordResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetRNCPasswordResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse, sizeof(_Bsdrtmservice1__SetRNCPasswordResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetRNCPasswordResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SetRNCPasswordResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SetRNCPasswordResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:SetRNCPasswordResult", &(a->_Bsdrtmservice1__SetRNCPasswordResponse::SetRNCPasswordResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_SetRNCPasswordResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:SetRNCPasswordResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetRNCPasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse, 0, sizeof(_Bsdrtmservice1__SetRNCPasswordResponse), 0, soap_copy__Bsdrtmservice1__SetRNCPasswordResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetRNCPasswordResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetRNCPasswordResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetRNCPasswordResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetRNCPasswordResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPasswordResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, _Bsdrtmservice1__SetRNCPasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetRNCPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetRNCPasswordResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetRNCPasswordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetRNCPasswordResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetRNCPasswordResponse);
		((_Bsdrtmservice1__SetRNCPasswordResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetRNCPasswordResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetRNCPasswordResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetRNCPasswordResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetRNCPasswordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetRNCPasswordResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetRNCPasswordResponse*)p = *(_Bsdrtmservice1__SetRNCPasswordResponse*)q;
}

void _Bsdrtmservice1__SetRNCPassword::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetRNCPassword::rncUid);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__SetRNCPassword::password);
	/* transient soap skipped */
}

void _Bsdrtmservice1__SetRNCPassword::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__SetRNCPassword::rncUid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetRNCPassword::rncUid);
	soap_embedded(soap, &this->_Bsdrtmservice1__SetRNCPassword::password, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__SetRNCPassword::password);
	/* transient soap skipped */
}

int _Bsdrtmservice1__SetRNCPassword::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__SetRNCPassword(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__SetRNCPassword(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__SetRNCPassword *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:rncUid", -1, &(a->_Bsdrtmservice1__SetRNCPassword::rncUid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:password", -1, &(a->_Bsdrtmservice1__SetRNCPassword::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__SetRNCPassword::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__SetRNCPassword(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPassword * SOAP_FMAC4 soap_in__Bsdrtmservice1__SetRNCPassword(struct soap *soap, const char *tag, _Bsdrtmservice1__SetRNCPassword *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__SetRNCPassword *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword, sizeof(_Bsdrtmservice1__SetRNCPassword), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__SetRNCPassword *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_rncUid1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_rncUid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:rncUid", &(a->_Bsdrtmservice1__SetRNCPassword::rncUid), "xsd:string"))
				{	soap_flag_rncUid1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:password", &(a->_Bsdrtmservice1__SetRNCPassword::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__SetRNCPassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword, 0, sizeof(_Bsdrtmservice1__SetRNCPassword), 0, soap_copy__Bsdrtmservice1__SetRNCPassword);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__SetRNCPassword::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:SetRNCPassword", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__SetRNCPassword::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__SetRNCPassword(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPassword * SOAP_FMAC4 soap_get__Bsdrtmservice1__SetRNCPassword(struct soap *soap, _Bsdrtmservice1__SetRNCPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__SetRNCPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__SetRNCPassword * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__SetRNCPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__SetRNCPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetRNCPassword);
		if (size)
			*size = sizeof(_Bsdrtmservice1__SetRNCPassword);
		((_Bsdrtmservice1__SetRNCPassword*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__SetRNCPassword[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__SetRNCPassword);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__SetRNCPassword*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__SetRNCPassword*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__SetRNCPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__SetRNCPassword %p -> %p\n", q, p));
	*(_Bsdrtmservice1__SetRNCPassword*)p = *(_Bsdrtmservice1__SetRNCPassword*)q;
}

void _Bsdrtmservice1__GetAllRNCs3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetAllRNCs3Response::GetAllRNCs3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllRNCs3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, &this->_Bsdrtmservice1__GetAllRNCs3Response::GetAllRNCs3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllRNCs3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllRNCs3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllRNCs3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response), type))
		return soap->error;
	if (a->GetAllRNCs3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetAllRNCs3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, "Bsdrtmservice1:GetAllRNCs3Result", -1, &(a->_Bsdrtmservice1__GetAllRNCs3Response::GetAllRNCs3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllRNCs3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllRNCs3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCs3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllRNCs3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response, sizeof(_Bsdrtmservice1__GetAllRNCs3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllRNCs3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAllRNCs3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllRNCs3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, "Bsdrtmservice1:GetAllRNCs3Result", &(a->_Bsdrtmservice1__GetAllRNCs3Response::GetAllRNCs3Result), "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity"))
				{	soap_flag_GetAllRNCs3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetAllRNCs3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllRNCs3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response, 0, sizeof(_Bsdrtmservice1__GetAllRNCs3Response), 0, soap_copy__Bsdrtmservice1__GetAllRNCs3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllRNCs3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllRNCs3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllRNCs3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllRNCs3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllRNCs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllRNCs3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllRNCs3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCs3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllRNCs3Response);
		((_Bsdrtmservice1__GetAllRNCs3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCs3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllRNCs3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllRNCs3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllRNCs3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllRNCs3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllRNCs3Response*)p = *(_Bsdrtmservice1__GetAllRNCs3Response*)q;
}

void _Bsdrtmservice1__GetAllRNCs3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetAllRNCs3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllRNCs3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetAllRNCs3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetAllRNCs3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllRNCs3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllRNCs3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllRNCs3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetAllRNCs3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllRNCs3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllRNCs3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCs3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllRNCs3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3, sizeof(_Bsdrtmservice1__GetAllRNCs3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllRNCs3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetAllRNCs3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllRNCs3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3, 0, sizeof(_Bsdrtmservice1__GetAllRNCs3), 0, soap_copy__Bsdrtmservice1__GetAllRNCs3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllRNCs3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllRNCs3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllRNCs3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllRNCs3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllRNCs3(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllRNCs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllRNCs3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllRNCs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllRNCs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCs3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllRNCs3);
		((_Bsdrtmservice1__GetAllRNCs3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllRNCs3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllRNCs3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllRNCs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllRNCs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllRNCs3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllRNCs3*)p = *(_Bsdrtmservice1__GetAllRNCs3*)q;
}

void _Bsdrtmservice1__GetAllRNCsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetAllRNCsResponse::GetAllRNCsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllRNCsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, &this->_Bsdrtmservice1__GetAllRNCsResponse::GetAllRNCsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllRNCsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllRNCsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllRNCsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse), type))
		return soap->error;
	if (a->GetAllRNCsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetAllRNCsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, "Bsdrtmservice1:GetAllRNCsResult", -1, &(a->_Bsdrtmservice1__GetAllRNCsResponse::GetAllRNCsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllRNCsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllRNCsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllRNCsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse, sizeof(_Bsdrtmservice1__GetAllRNCsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllRNCsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAllRNCsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllRNCsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, "Bsdrtmservice1:GetAllRNCsResult", &(a->_Bsdrtmservice1__GetAllRNCsResponse::GetAllRNCsResult), "Bsdrtmservice1:OptResultOfvRtmRncPort2Entity"))
				{	soap_flag_GetAllRNCsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetAllRNCsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllRNCsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse, 0, sizeof(_Bsdrtmservice1__GetAllRNCsResponse), 0, soap_copy__Bsdrtmservice1__GetAllRNCsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllRNCsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllRNCsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllRNCsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllRNCsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetAllRNCsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllRNCsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllRNCsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllRNCsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllRNCsResponse);
		((_Bsdrtmservice1__GetAllRNCsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllRNCsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllRNCsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllRNCsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllRNCsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllRNCsResponse*)p = *(_Bsdrtmservice1__GetAllRNCsResponse*)q;
}

void _Bsdrtmservice1__GetAllRNCs::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetAllRNCs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetAllRNCs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetAllRNCs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetAllRNCs(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetAllRNCs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetAllRNCs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetAllRNCs(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetAllRNCs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCs *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetAllRNCs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs, sizeof(_Bsdrtmservice1__GetAllRNCs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetAllRNCs *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetAllRNCs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs, 0, sizeof(_Bsdrtmservice1__GetAllRNCs), 0, soap_copy__Bsdrtmservice1__GetAllRNCs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetAllRNCs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetAllRNCs", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetAllRNCs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetAllRNCs(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetAllRNCs(struct soap *soap, _Bsdrtmservice1__GetAllRNCs *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetAllRNCs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetAllRNCs * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetAllRNCs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetAllRNCs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCs);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetAllRNCs);
		((_Bsdrtmservice1__GetAllRNCs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetAllRNCs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetAllRNCs);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetAllRNCs*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetAllRNCs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetAllRNCs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetAllRNCs %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetAllRNCs*)p = *(_Bsdrtmservice1__GetAllRNCs*)q;
}

void _Bsdrtmservice1__GetRNCs3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetRNCs3Response::GetRNCs3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRNCs3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, &this->_Bsdrtmservice1__GetRNCs3Response::GetRNCs3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRNCs3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRNCs3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRNCs3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRNCs3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response), type))
		return soap->error;
	if (a->GetRNCs3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetRNCs3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, "Bsdrtmservice1:GetRNCs3Result", -1, &(a->_Bsdrtmservice1__GetRNCs3Response::GetRNCs3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRNCs3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRNCs3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRNCs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCs3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRNCs3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response, sizeof(_Bsdrtmservice1__GetRNCs3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRNCs3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRNCs3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRNCs3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, "Bsdrtmservice1:GetRNCs3Result", &(a->_Bsdrtmservice1__GetRNCs3Response::GetRNCs3Result), "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity"))
				{	soap_flag_GetRNCs3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetRNCs3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRNCs3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response, 0, sizeof(_Bsdrtmservice1__GetRNCs3Response), 0, soap_copy__Bsdrtmservice1__GetRNCs3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRNCs3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRNCs3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRNCs3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRNCs3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetRNCs3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRNCs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRNCs3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRNCs3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRNCs3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCs3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRNCs3Response);
		((_Bsdrtmservice1__GetRNCs3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCs3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRNCs3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRNCs3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRNCs3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRNCs3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRNCs3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRNCs3Response*)p = *(_Bsdrtmservice1__GetRNCs3Response*)q;
}

void _Bsdrtmservice1__GetRNCs3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetRNCs3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRNCs3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetRNCs3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetRNCs3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRNCs3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRNCs3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRNCs3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRNCs3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetRNCs3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRNCs3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRNCs3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRNCs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCs3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRNCs3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3, sizeof(_Bsdrtmservice1__GetRNCs3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRNCs3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetRNCs3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRNCs3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3, 0, sizeof(_Bsdrtmservice1__GetRNCs3), 0, soap_copy__Bsdrtmservice1__GetRNCs3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRNCs3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRNCs3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRNCs3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRNCs3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRNCs3(struct soap *soap, _Bsdrtmservice1__GetRNCs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRNCs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRNCs3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRNCs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRNCs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCs3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRNCs3);
		((_Bsdrtmservice1__GetRNCs3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRNCs3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRNCs3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRNCs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRNCs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRNCs3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRNCs3*)p = *(_Bsdrtmservice1__GetRNCs3*)q;
}

void _Bsdrtmservice1__GetRNCsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetRNCsResponse::GetRNCsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRNCsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, &this->_Bsdrtmservice1__GetRNCsResponse::GetRNCsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRNCsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRNCsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRNCsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRNCsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse), type))
		return soap->error;
	if (a->GetRNCsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetRNCsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, "Bsdrtmservice1:GetRNCsResult", -1, &(a->_Bsdrtmservice1__GetRNCsResponse::GetRNCsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRNCsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRNCsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRNCsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRNCsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse, sizeof(_Bsdrtmservice1__GetRNCsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRNCsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRNCsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRNCsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, "Bsdrtmservice1:GetRNCsResult", &(a->_Bsdrtmservice1__GetRNCsResponse::GetRNCsResult), "Bsdrtmservice1:OptResultOfvRtmRncPORTEntity"))
				{	soap_flag_GetRNCsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetRNCsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRNCsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse, 0, sizeof(_Bsdrtmservice1__GetRNCsResponse), 0, soap_copy__Bsdrtmservice1__GetRNCsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRNCsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRNCsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRNCsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRNCsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetRNCsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRNCsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRNCsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRNCsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRNCsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRNCsResponse);
		((_Bsdrtmservice1__GetRNCsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRNCsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRNCsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRNCsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRNCsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRNCsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRNCsResponse*)p = *(_Bsdrtmservice1__GetRNCsResponse*)q;
}

void _Bsdrtmservice1__GetRNCs::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetRNCs::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetRNCs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetRNCs::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetRNCs::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetRNCs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetRNCs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetRNCs(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetRNCs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetRNCs::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetRNCs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetRNCs(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetRNCs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCs *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetRNCs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs, sizeof(_Bsdrtmservice1__GetRNCs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetRNCs *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetRNCs::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetRNCs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs, 0, sizeof(_Bsdrtmservice1__GetRNCs), 0, soap_copy__Bsdrtmservice1__GetRNCs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetRNCs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetRNCs", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetRNCs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetRNCs(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetRNCs(struct soap *soap, _Bsdrtmservice1__GetRNCs *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetRNCs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetRNCs * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetRNCs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetRNCs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCs);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetRNCs);
		((_Bsdrtmservice1__GetRNCs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetRNCs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetRNCs);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetRNCs*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetRNCs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetRNCs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetRNCs %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetRNCs*)p = *(_Bsdrtmservice1__GetRNCs*)q;
}

void _Bsdrtmservice1__GetMonStations3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStations3Response::GetMonStations3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStations3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, &this->_Bsdrtmservice1__GetMonStations3Response::GetMonStations3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStations3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStations3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStations3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStations3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response), type))
		return soap->error;
	if (a->GetMonStations3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStations3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, "Bsdrtmservice1:GetMonStations3Result", -1, &(a->_Bsdrtmservice1__GetMonStations3Response::GetMonStations3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStations3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStations3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStations3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStations3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStations3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response, sizeof(_Bsdrtmservice1__GetMonStations3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStations3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStations3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStations3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, "Bsdrtmservice1:GetMonStations3Result", &(a->_Bsdrtmservice1__GetMonStations3Response::GetMonStations3Result), "Bsdrtmservice1:OptResultOfvRtmMonStationEntity"))
				{	soap_flag_GetMonStations3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStations3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStations3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response, 0, sizeof(_Bsdrtmservice1__GetMonStations3Response), 0, soap_copy__Bsdrtmservice1__GetMonStations3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStations3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStations3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStations3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStations3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStations3Response(struct soap *soap, _Bsdrtmservice1__GetMonStations3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStations3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStations3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStations3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStations3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStations3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStations3Response);
		((_Bsdrtmservice1__GetMonStations3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStations3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStations3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStations3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStations3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStations3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStations3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStations3Response*)p = *(_Bsdrtmservice1__GetMonStations3Response*)q;
}

void _Bsdrtmservice1__GetMonStations3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStations3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStations3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStations3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStations3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStations3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStations3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStations3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStations3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonStations3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStations3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStations3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStations3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStations3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStations3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3, sizeof(_Bsdrtmservice1__GetMonStations3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStations3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonStations3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStations3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3, 0, sizeof(_Bsdrtmservice1__GetMonStations3), 0, soap_copy__Bsdrtmservice1__GetMonStations3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStations3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStations3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStations3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStations3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStations3(struct soap *soap, _Bsdrtmservice1__GetMonStations3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStations3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStations3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStations3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStations3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStations3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStations3);
		((_Bsdrtmservice1__GetMonStations3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStations3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStations3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStations3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStations3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStations3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStations3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStations3*)p = *(_Bsdrtmservice1__GetMonStations3*)q;
}

void _Bsdrtmservice1__GetMonStationsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStationsResponse::GetMonStationsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, &this->_Bsdrtmservice1__GetMonStationsResponse::GetMonStationsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse), type))
		return soap->error;
	if (a->GetMonStationsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStationsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, "Bsdrtmservice1:GetMonStationsResult", -1, &(a->_Bsdrtmservice1__GetMonStationsResponse::GetMonStationsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse, sizeof(_Bsdrtmservice1__GetMonStationsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStationsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStationsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, "Bsdrtmservice1:GetMonStationsResult", &(a->_Bsdrtmservice1__GetMonStationsResponse::GetMonStationsResult), "Bsdrtmservice1:OptResultOfvRtmMonStationEntity"))
				{	soap_flag_GetMonStationsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStationsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse, 0, sizeof(_Bsdrtmservice1__GetMonStationsResponse), 0, soap_copy__Bsdrtmservice1__GetMonStationsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsResponse);
		((_Bsdrtmservice1__GetMonStationsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsResponse*)p = *(_Bsdrtmservice1__GetMonStationsResponse*)q;
}

void _Bsdrtmservice1__GetMonStations::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStations::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStations::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStations::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStations::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStations::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStations(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStations(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStations *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonStations::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStations::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStations(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStations(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStations *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStations *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations, sizeof(_Bsdrtmservice1__GetMonStations), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStations *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonStations::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStations *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations, 0, sizeof(_Bsdrtmservice1__GetMonStations), 0, soap_copy__Bsdrtmservice1__GetMonStations);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStations::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStations", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStations::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStations(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStations(struct soap *soap, _Bsdrtmservice1__GetMonStations *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStations * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStations(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStations(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStations);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStations);
		((_Bsdrtmservice1__GetMonStations*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStations[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStations);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStations*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStations*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStations(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStations %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStations*)p = *(_Bsdrtmservice1__GetMonStations*)q;
}

void _Bsdrtmservice1__GetMonControlCenters3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonControlCenters3Response::GetMonControlCenters3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonControlCenters3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, &this->_Bsdrtmservice1__GetMonControlCenters3Response::GetMonControlCenters3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonControlCenters3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonControlCenters3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonControlCenters3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response), type))
		return soap->error;
	if (a->GetMonControlCenters3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetMonControlCenters3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, "Bsdrtmservice1:GetMonControlCenters3Result", -1, &(a->_Bsdrtmservice1__GetMonControlCenters3Response::GetMonControlCenters3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonControlCenters3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonControlCenters3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCenters3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonControlCenters3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response, sizeof(_Bsdrtmservice1__GetMonControlCenters3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonControlCenters3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonControlCenters3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonControlCenters3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, "Bsdrtmservice1:GetMonControlCenters3Result", &(a->_Bsdrtmservice1__GetMonControlCenters3Response::GetMonControlCenters3Result), "Bsdrtmservice1:OptResultOfRtmControlCenterEntity"))
				{	soap_flag_GetMonControlCenters3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonControlCenters3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonControlCenters3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response, 0, sizeof(_Bsdrtmservice1__GetMonControlCenters3Response), 0, soap_copy__Bsdrtmservice1__GetMonControlCenters3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonControlCenters3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonControlCenters3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonControlCenters3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonControlCenters3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonControlCenters3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonControlCenters3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonControlCenters3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCenters3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonControlCenters3Response);
		((_Bsdrtmservice1__GetMonControlCenters3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCenters3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonControlCenters3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonControlCenters3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonControlCenters3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonControlCenters3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonControlCenters3Response*)p = *(_Bsdrtmservice1__GetMonControlCenters3Response*)q;
}

void _Bsdrtmservice1__GetMonControlCenters3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonControlCenters3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonControlCenters3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonControlCenters3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonControlCenters3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonControlCenters3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonControlCenters3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonControlCenters3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonControlCenters3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonControlCenters3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonControlCenters3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCenters3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonControlCenters3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3, sizeof(_Bsdrtmservice1__GetMonControlCenters3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonControlCenters3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonControlCenters3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonControlCenters3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3, 0, sizeof(_Bsdrtmservice1__GetMonControlCenters3), 0, soap_copy__Bsdrtmservice1__GetMonControlCenters3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonControlCenters3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonControlCenters3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonControlCenters3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonControlCenters3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonControlCenters3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonControlCenters3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonControlCenters3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCenters3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonControlCenters3);
		((_Bsdrtmservice1__GetMonControlCenters3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCenters3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonControlCenters3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonControlCenters3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonControlCenters3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonControlCenters3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonControlCenters3*)p = *(_Bsdrtmservice1__GetMonControlCenters3*)q;
}

void _Bsdrtmservice1__GetMonControlCentersResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonControlCentersResponse::GetMonControlCentersResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonControlCentersResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, &this->_Bsdrtmservice1__GetMonControlCentersResponse::GetMonControlCentersResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonControlCentersResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonControlCentersResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonControlCentersResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse), type))
		return soap->error;
	if (a->GetMonControlCentersResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonControlCentersResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, "Bsdrtmservice1:GetMonControlCentersResult", -1, &(a->_Bsdrtmservice1__GetMonControlCentersResponse::GetMonControlCentersResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonControlCentersResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonControlCentersResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCentersResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCentersResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonControlCentersResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse, sizeof(_Bsdrtmservice1__GetMonControlCentersResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonControlCentersResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonControlCentersResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonControlCentersResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, "Bsdrtmservice1:GetMonControlCentersResult", &(a->_Bsdrtmservice1__GetMonControlCentersResponse::GetMonControlCentersResult), "Bsdrtmservice1:OptResultOfRtmControlCenterEntity"))
				{	soap_flag_GetMonControlCentersResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonControlCentersResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonControlCentersResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse, 0, sizeof(_Bsdrtmservice1__GetMonControlCentersResponse), 0, soap_copy__Bsdrtmservice1__GetMonControlCentersResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonControlCentersResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonControlCentersResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonControlCentersResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonControlCentersResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCentersResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, _Bsdrtmservice1__GetMonControlCentersResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonControlCentersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonControlCentersResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonControlCentersResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCentersResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonControlCentersResponse);
		((_Bsdrtmservice1__GetMonControlCentersResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCentersResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonControlCentersResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonControlCentersResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonControlCentersResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonControlCentersResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonControlCentersResponse*)p = *(_Bsdrtmservice1__GetMonControlCentersResponse*)q;
}

void _Bsdrtmservice1__GetMonControlCenters::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonControlCenters::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonControlCenters::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonControlCenters(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonControlCenters *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonControlCenters::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonControlCenters(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCenters *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonControlCenters *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters, sizeof(_Bsdrtmservice1__GetMonControlCenters), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonControlCenters *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonControlCenters *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters, 0, sizeof(_Bsdrtmservice1__GetMonControlCenters), 0, soap_copy__Bsdrtmservice1__GetMonControlCenters);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonControlCenters::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonControlCenters", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonControlCenters::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonControlCenters(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonControlCenters(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonControlCenters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonControlCenters * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonControlCenters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonControlCenters(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCenters);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonControlCenters);
		((_Bsdrtmservice1__GetMonControlCenters*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonControlCenters[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonControlCenters);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonControlCenters*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonControlCenters*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonControlCenters(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonControlCenters %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonControlCenters*)p = *(_Bsdrtmservice1__GetMonControlCenters*)q;
}

void _Bsdrtmservice1__GetMonOrgs3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonOrgs3Response::GetMonOrgs3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonOrgs3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, &this->_Bsdrtmservice1__GetMonOrgs3Response::GetMonOrgs3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonOrgs3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonOrgs3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonOrgs3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response), type))
		return soap->error;
	if (a->GetMonOrgs3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetMonOrgs3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, "Bsdrtmservice1:GetMonOrgs3Result", -1, &(a->_Bsdrtmservice1__GetMonOrgs3Response::GetMonOrgs3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonOrgs3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonOrgs3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgs3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonOrgs3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response, sizeof(_Bsdrtmservice1__GetMonOrgs3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonOrgs3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonOrgs3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonOrgs3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, "Bsdrtmservice1:GetMonOrgs3Result", &(a->_Bsdrtmservice1__GetMonOrgs3Response::GetMonOrgs3Result), "Bsdrtmservice1:OptResultOfRtmMonOrgEntity"))
				{	soap_flag_GetMonOrgs3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonOrgs3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonOrgs3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response, 0, sizeof(_Bsdrtmservice1__GetMonOrgs3Response), 0, soap_copy__Bsdrtmservice1__GetMonOrgs3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonOrgs3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonOrgs3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonOrgs3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonOrgs3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonOrgs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonOrgs3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonOrgs3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgs3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonOrgs3Response);
		((_Bsdrtmservice1__GetMonOrgs3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgs3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonOrgs3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonOrgs3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonOrgs3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonOrgs3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonOrgs3Response*)p = *(_Bsdrtmservice1__GetMonOrgs3Response*)q;
}

void _Bsdrtmservice1__GetMonOrgs3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonOrgs3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonOrgs3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonOrgs3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonOrgs3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonOrgs3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonOrgs3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonOrgs3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonOrgs3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonOrgs3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonOrgs3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgs3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonOrgs3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3, sizeof(_Bsdrtmservice1__GetMonOrgs3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonOrgs3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonOrgs3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonOrgs3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3, 0, sizeof(_Bsdrtmservice1__GetMonOrgs3), 0, soap_copy__Bsdrtmservice1__GetMonOrgs3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonOrgs3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonOrgs3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonOrgs3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonOrgs3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonOrgs3(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonOrgs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonOrgs3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonOrgs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonOrgs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgs3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonOrgs3);
		((_Bsdrtmservice1__GetMonOrgs3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonOrgs3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonOrgs3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonOrgs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonOrgs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonOrgs3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonOrgs3*)p = *(_Bsdrtmservice1__GetMonOrgs3*)q;
}

void _Bsdrtmservice1__GetMonOrgsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonOrgsResponse::GetMonOrgsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonOrgsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, &this->_Bsdrtmservice1__GetMonOrgsResponse::GetMonOrgsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonOrgsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonOrgsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonOrgsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse), type))
		return soap->error;
	if (a->GetMonOrgsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonOrgsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, "Bsdrtmservice1:GetMonOrgsResult", -1, &(a->_Bsdrtmservice1__GetMonOrgsResponse::GetMonOrgsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonOrgsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonOrgsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonOrgsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse, sizeof(_Bsdrtmservice1__GetMonOrgsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonOrgsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonOrgsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonOrgsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, "Bsdrtmservice1:GetMonOrgsResult", &(a->_Bsdrtmservice1__GetMonOrgsResponse::GetMonOrgsResult), "Bsdrtmservice1:OptResultOfRtmMonOrgEntity"))
				{	soap_flag_GetMonOrgsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonOrgsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonOrgsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse, 0, sizeof(_Bsdrtmservice1__GetMonOrgsResponse), 0, soap_copy__Bsdrtmservice1__GetMonOrgsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonOrgsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonOrgsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonOrgsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonOrgsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, _Bsdrtmservice1__GetMonOrgsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonOrgsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonOrgsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonOrgsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonOrgsResponse);
		((_Bsdrtmservice1__GetMonOrgsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonOrgsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonOrgsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonOrgsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonOrgsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonOrgsResponse*)p = *(_Bsdrtmservice1__GetMonOrgsResponse*)q;
}

void _Bsdrtmservice1__GetMonOrgs::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonOrgs::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonOrgs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonOrgs::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonOrgs::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonOrgs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonOrgs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonOrgs(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonOrgs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonOrgs::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonOrgs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonOrgs(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonOrgs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgs *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonOrgs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs, sizeof(_Bsdrtmservice1__GetMonOrgs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonOrgs *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonOrgs::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonOrgs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs, 0, sizeof(_Bsdrtmservice1__GetMonOrgs), 0, soap_copy__Bsdrtmservice1__GetMonOrgs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonOrgs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonOrgs", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonOrgs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonOrgs(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonOrgs(struct soap *soap, _Bsdrtmservice1__GetMonOrgs *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonOrgs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonOrgs * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonOrgs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonOrgs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgs);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonOrgs);
		((_Bsdrtmservice1__GetMonOrgs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonOrgs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonOrgs);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonOrgs*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonOrgs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonOrgs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonOrgs %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonOrgs*)p = *(_Bsdrtmservice1__GetMonOrgs*)q;
}

void _Bsdrtmservice1__GetDevModelFuncParamResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevModelFuncParamResponse::GetDevModelFuncParamResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelFuncParamResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetDevModelFuncParamResponse::GetDevModelFuncParamResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelFuncParamResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelFuncParamResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse), type))
		return soap->error;
	if (a->GetDevModelFuncParamResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevModelFuncParamResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetDevModelFuncParamResult", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParamResponse::GetDevModelFuncParamResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelFuncParamResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParamResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelFuncParamResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse, sizeof(_Bsdrtmservice1__GetDevModelFuncParamResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelFuncParamResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevModelFuncParamResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevModelFuncParamResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetDevModelFuncParamResult", &(a->_Bsdrtmservice1__GetDevModelFuncParamResponse::GetDevModelFuncParamResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetDevModelFuncParamResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevModelFuncParamResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelFuncParamResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse, 0, sizeof(_Bsdrtmservice1__GetDevModelFuncParamResponse), 0, soap_copy__Bsdrtmservice1__GetDevModelFuncParamResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelFuncParamResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParamResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelFuncParamResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelFuncParamResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParamResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelFuncParamResponse);
		((_Bsdrtmservice1__GetDevModelFuncParamResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParamResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelFuncParamResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelFuncParamResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelFuncParamResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelFuncParamResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelFuncParamResponse*)p = *(_Bsdrtmservice1__GetDevModelFuncParamResponse*)q;
}

void _Bsdrtmservice1__GetDevModelFuncParam::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParam::devModelName);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParam::funcNo);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelFuncParam::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevModelFuncParam::devModelName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParam::devModelName);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevModelFuncParam::funcNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParam::funcNo);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelFuncParam::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelFuncParam(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelFuncParam *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:devModelName", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParam::devModelName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:funcNo", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParam::funcNo), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelFuncParam::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelFuncParam(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParam * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParam *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelFuncParam *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam, sizeof(_Bsdrtmservice1__GetDevModelFuncParam), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelFuncParam *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_devModelName1 = 1;
	size_t soap_flag_funcNo1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_devModelName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:devModelName", &(a->_Bsdrtmservice1__GetDevModelFuncParam::devModelName), "xsd:string"))
				{	soap_flag_devModelName1--;
					continue;
				}
			if (soap_flag_funcNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:funcNo", &(a->_Bsdrtmservice1__GetDevModelFuncParam::funcNo), "xsd:string"))
				{	soap_flag_funcNo1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelFuncParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam, 0, sizeof(_Bsdrtmservice1__GetDevModelFuncParam), 0, soap_copy__Bsdrtmservice1__GetDevModelFuncParam);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelFuncParam::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParam", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelFuncParam::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelFuncParam(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParam * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParam *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelFuncParam * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelFuncParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParam);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelFuncParam);
		((_Bsdrtmservice1__GetDevModelFuncParam*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParam[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelFuncParam);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelFuncParam*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelFuncParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelFuncParam %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelFuncParam*)p = *(_Bsdrtmservice1__GetDevModelFuncParam*)q;
}

void _Bsdrtmservice1__GetDevModelFuncParams3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevModelFuncParams3Response::GetDevModelFuncParams3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelFuncParams3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams3Response::GetDevModelFuncParams3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelFuncParams3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelFuncParams3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response), type))
		return soap->error;
	if (a->GetDevModelFuncParams3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDevModelFuncParams3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:GetDevModelFuncParams3Result", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParams3Response::GetDevModelFuncParams3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelFuncParams3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParams3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelFuncParams3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelFuncParams3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevModelFuncParams3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevModelFuncParams3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:GetDevModelFuncParams3Result", &(a->_Bsdrtmservice1__GetDevModelFuncParams3Response::GetDevModelFuncParams3Result), "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity"))
				{	soap_flag_GetDevModelFuncParams3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevModelFuncParams3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelFuncParams3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response, 0, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3Response), 0, soap_copy__Bsdrtmservice1__GetDevModelFuncParams3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelFuncParams3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParams3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelFuncParams3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelFuncParams3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParams3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelFuncParams3Response);
		((_Bsdrtmservice1__GetDevModelFuncParams3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParams3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelFuncParams3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelFuncParams3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelFuncParams3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelFuncParams3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelFuncParams3Response*)p = *(_Bsdrtmservice1__GetDevModelFuncParams3Response*)q;
}

void _Bsdrtmservice1__GetDevModelFuncParams3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelFuncParams3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelFuncParams3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelFuncParams3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelFuncParams3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParams3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelFuncParams3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelFuncParams3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParams3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelFuncParams3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelFuncParams3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevModelFuncParams3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelFuncParams3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3, 0, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3), 0, soap_copy__Bsdrtmservice1__GetDevModelFuncParams3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelFuncParams3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParams3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelFuncParams3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelFuncParams3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelFuncParams3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelFuncParams3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParams3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelFuncParams3);
		((_Bsdrtmservice1__GetDevModelFuncParams3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParams3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelFuncParams3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelFuncParams3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelFuncParams3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelFuncParams3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelFuncParams3*)p = *(_Bsdrtmservice1__GetDevModelFuncParams3*)q;
}

void _Bsdrtmservice1__GetDevModelFuncParamsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevModelFuncParamsResponse::GetDevModelFuncParamsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelFuncParamsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, &this->_Bsdrtmservice1__GetDevModelFuncParamsResponse::GetDevModelFuncParamsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelFuncParamsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelFuncParamsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse), type))
		return soap->error;
	if (a->GetDevModelFuncParamsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevModelFuncParamsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:GetDevModelFuncParamsResult", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParamsResponse::GetDevModelFuncParamsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelFuncParamsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParamsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelFuncParamsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse, sizeof(_Bsdrtmservice1__GetDevModelFuncParamsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelFuncParamsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevModelFuncParamsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevModelFuncParamsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:GetDevModelFuncParamsResult", &(a->_Bsdrtmservice1__GetDevModelFuncParamsResponse::GetDevModelFuncParamsResult), "Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity"))
				{	soap_flag_GetDevModelFuncParamsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevModelFuncParamsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelFuncParamsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse, 0, sizeof(_Bsdrtmservice1__GetDevModelFuncParamsResponse), 0, soap_copy__Bsdrtmservice1__GetDevModelFuncParamsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelFuncParamsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParamsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelFuncParamsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelFuncParamsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParamsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelFuncParamsResponse);
		((_Bsdrtmservice1__GetDevModelFuncParamsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParamsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelFuncParamsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelFuncParamsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelFuncParamsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelFuncParamsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelFuncParamsResponse*)p = *(_Bsdrtmservice1__GetDevModelFuncParamsResponse*)q;
}

void _Bsdrtmservice1__GetDevModelFuncParams::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelFuncParams::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevModelFuncParams::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelFuncParams::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelFuncParams(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelFuncParams *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevModelFuncParams::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelFuncParams::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelFuncParams(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParams *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelFuncParams *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams, sizeof(_Bsdrtmservice1__GetDevModelFuncParams), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelFuncParams *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevModelFuncParams::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelFuncParams *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams, 0, sizeof(_Bsdrtmservice1__GetDevModelFuncParams), 0, soap_copy__Bsdrtmservice1__GetDevModelFuncParams);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelFuncParams::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParams", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelFuncParams::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelFuncParams(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelFuncParams(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelFuncParams * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParams);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelFuncParams);
		((_Bsdrtmservice1__GetDevModelFuncParams*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelFuncParams[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelFuncParams);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelFuncParams*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelFuncParams*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelFuncParams %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelFuncParams*)p = *(_Bsdrtmservice1__GetDevModelFuncParams*)q;
}

void _Bsdrtmservice1__GetDevModels3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevModels3Response::GetDevModels3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModels3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, &this->_Bsdrtmservice1__GetDevModels3Response::GetDevModels3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModels3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModels3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModels3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModels3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response), type))
		return soap->error;
	if (a->GetDevModels3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDevModels3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, "Bsdrtmservice1:GetDevModels3Result", -1, &(a->_Bsdrtmservice1__GetDevModels3Response::GetDevModels3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModels3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModels3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModels3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModels3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModels3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response, sizeof(_Bsdrtmservice1__GetDevModels3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModels3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevModels3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevModels3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, "Bsdrtmservice1:GetDevModels3Result", &(a->_Bsdrtmservice1__GetDevModels3Response::GetDevModels3Result), "Bsdrtmservice1:OptResultOfRtmDevModelEntity"))
				{	soap_flag_GetDevModels3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevModels3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModels3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response, 0, sizeof(_Bsdrtmservice1__GetDevModels3Response), 0, soap_copy__Bsdrtmservice1__GetDevModels3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModels3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModels3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModels3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModels3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModels3Response(struct soap *soap, _Bsdrtmservice1__GetDevModels3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModels3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModels3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModels3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModels3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModels3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModels3Response);
		((_Bsdrtmservice1__GetDevModels3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModels3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModels3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModels3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModels3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModels3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModels3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModels3Response*)p = *(_Bsdrtmservice1__GetDevModels3Response*)q;
}

void _Bsdrtmservice1__GetDevModels3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevModels3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModels3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevModels3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevModels3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModels3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModels3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModels3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModels3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevModels3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModels3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModels3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModels3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModels3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModels3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3, sizeof(_Bsdrtmservice1__GetDevModels3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModels3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevModels3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModels3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3, 0, sizeof(_Bsdrtmservice1__GetDevModels3), 0, soap_copy__Bsdrtmservice1__GetDevModels3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModels3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModels3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModels3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModels3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModels3(struct soap *soap, _Bsdrtmservice1__GetDevModels3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModels3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModels3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModels3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModels3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModels3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModels3);
		((_Bsdrtmservice1__GetDevModels3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModels3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModels3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModels3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModels3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModels3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModels3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModels3*)p = *(_Bsdrtmservice1__GetDevModels3*)q;
}

void _Bsdrtmservice1__GetDevModelsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevModelsResponse::GetDevModelsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModelsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, &this->_Bsdrtmservice1__GetDevModelsResponse::GetDevModelsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModelsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModelsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModelsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse), type))
		return soap->error;
	if (a->GetDevModelsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevModelsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, "Bsdrtmservice1:GetDevModelsResult", -1, &(a->_Bsdrtmservice1__GetDevModelsResponse::GetDevModelsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModelsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModelsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModelsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse, sizeof(_Bsdrtmservice1__GetDevModelsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModelsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevModelsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevModelsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, "Bsdrtmservice1:GetDevModelsResult", &(a->_Bsdrtmservice1__GetDevModelsResponse::GetDevModelsResult), "Bsdrtmservice1:OptResultOfRtmDevModelEntity"))
				{	soap_flag_GetDevModelsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevModelsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModelsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse, 0, sizeof(_Bsdrtmservice1__GetDevModelsResponse), 0, soap_copy__Bsdrtmservice1__GetDevModelsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModelsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModelsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModelsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModelsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModelsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModelsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModelsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModelsResponse);
		((_Bsdrtmservice1__GetDevModelsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModelsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModelsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModelsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModelsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModelsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModelsResponse*)p = *(_Bsdrtmservice1__GetDevModelsResponse*)q;
}

void _Bsdrtmservice1__GetDevModels::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevModels::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevModels::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevModels::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevModels::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevModels::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevModels(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevModels(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevModels *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevModels::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevModels::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevModels(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevModels(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModels *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevModels *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels, sizeof(_Bsdrtmservice1__GetDevModels), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevModels *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevModels::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevModels *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels, 0, sizeof(_Bsdrtmservice1__GetDevModels), 0, soap_copy__Bsdrtmservice1__GetDevModels);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevModels::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevModels", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevModels::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevModels(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevModels(struct soap *soap, _Bsdrtmservice1__GetDevModels *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevModels(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevModels * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevModels(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevModels(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModels);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevModels);
		((_Bsdrtmservice1__GetDevModels*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevModels[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevModels);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevModels*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevModels*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevModels(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevModels %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevModels*)p = *(_Bsdrtmservice1__GetDevModels*)q;
}

void _Bsdrtmservice1__GetFuncs3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetFuncs3Response::GetFuncs3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetFuncs3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetFuncs3Response::GetFuncs3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetFuncs3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetFuncs3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetFuncs3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetFuncs3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response), type))
		return soap->error;
	if (a->GetFuncs3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetFuncs3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetFuncs3Result", -1, &(a->_Bsdrtmservice1__GetFuncs3Response::GetFuncs3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetFuncs3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetFuncs3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetFuncs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncs3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetFuncs3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response, sizeof(_Bsdrtmservice1__GetFuncs3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetFuncs3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetFuncs3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetFuncs3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetFuncs3Result", &(a->_Bsdrtmservice1__GetFuncs3Response::GetFuncs3Result), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetFuncs3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetFuncs3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetFuncs3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response, 0, sizeof(_Bsdrtmservice1__GetFuncs3Response), 0, soap_copy__Bsdrtmservice1__GetFuncs3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetFuncs3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetFuncs3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetFuncs3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetFuncs3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetFuncs3Response(struct soap *soap, _Bsdrtmservice1__GetFuncs3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetFuncs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetFuncs3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetFuncs3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetFuncs3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncs3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetFuncs3Response);
		((_Bsdrtmservice1__GetFuncs3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncs3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetFuncs3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetFuncs3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetFuncs3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetFuncs3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetFuncs3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetFuncs3Response*)p = *(_Bsdrtmservice1__GetFuncs3Response*)q;
}

void _Bsdrtmservice1__GetFuncs3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetFuncs3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetFuncs3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetFuncs3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetFuncs3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetFuncs3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetFuncs3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetFuncs3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetFuncs3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetFuncs3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetFuncs3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetFuncs3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetFuncs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncs3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetFuncs3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3, sizeof(_Bsdrtmservice1__GetFuncs3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetFuncs3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetFuncs3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetFuncs3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3, 0, sizeof(_Bsdrtmservice1__GetFuncs3), 0, soap_copy__Bsdrtmservice1__GetFuncs3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetFuncs3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetFuncs3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetFuncs3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetFuncs3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetFuncs3(struct soap *soap, _Bsdrtmservice1__GetFuncs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetFuncs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetFuncs3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetFuncs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetFuncs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncs3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetFuncs3);
		((_Bsdrtmservice1__GetFuncs3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetFuncs3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetFuncs3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetFuncs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetFuncs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetFuncs3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetFuncs3*)p = *(_Bsdrtmservice1__GetFuncs3*)q;
}

void _Bsdrtmservice1__GetFuncsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetFuncsResponse::GetFuncsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetFuncsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetFuncsResponse::GetFuncsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetFuncsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetFuncsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetFuncsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetFuncsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse), type))
		return soap->error;
	if (a->GetFuncsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetFuncsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetFuncsResult", -1, &(a->_Bsdrtmservice1__GetFuncsResponse::GetFuncsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetFuncsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetFuncsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetFuncsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetFuncsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse, sizeof(_Bsdrtmservice1__GetFuncsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetFuncsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetFuncsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetFuncsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetFuncsResult", &(a->_Bsdrtmservice1__GetFuncsResponse::GetFuncsResult), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetFuncsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetFuncsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetFuncsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse, 0, sizeof(_Bsdrtmservice1__GetFuncsResponse), 0, soap_copy__Bsdrtmservice1__GetFuncsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetFuncsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetFuncsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetFuncsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetFuncsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetFuncsResponse(struct soap *soap, _Bsdrtmservice1__GetFuncsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetFuncsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetFuncsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetFuncsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetFuncsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetFuncsResponse);
		((_Bsdrtmservice1__GetFuncsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetFuncsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetFuncsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetFuncsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetFuncsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetFuncsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetFuncsResponse*)p = *(_Bsdrtmservice1__GetFuncsResponse*)q;
}

void _Bsdrtmservice1__GetFuncs::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetFuncs::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetFuncs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetFuncs::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetFuncs::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetFuncs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetFuncs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetFuncs(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetFuncs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetFuncs::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetFuncs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetFuncs(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetFuncs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncs *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetFuncs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs, sizeof(_Bsdrtmservice1__GetFuncs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetFuncs *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetFuncs::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetFuncs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs, 0, sizeof(_Bsdrtmservice1__GetFuncs), 0, soap_copy__Bsdrtmservice1__GetFuncs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetFuncs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetFuncs", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetFuncs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetFuncs(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetFuncs(struct soap *soap, _Bsdrtmservice1__GetFuncs *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetFuncs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetFuncs * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetFuncs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetFuncs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncs);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetFuncs);
		((_Bsdrtmservice1__GetFuncs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetFuncs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetFuncs);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetFuncs*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetFuncs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetFuncs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetFuncs %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetFuncs*)p = *(_Bsdrtmservice1__GetFuncs*)q;
}

void _Bsdrtmservice1__GetDevProtocols3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevProtocols3Response::GetDevProtocols3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevProtocols3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetDevProtocols3Response::GetDevProtocols3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevProtocols3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevProtocols3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevProtocols3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response), type))
		return soap->error;
	if (a->GetDevProtocols3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDevProtocols3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDevProtocols3Result", -1, &(a->_Bsdrtmservice1__GetDevProtocols3Response::GetDevProtocols3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevProtocols3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevProtocols3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocols3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevProtocols3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response, sizeof(_Bsdrtmservice1__GetDevProtocols3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevProtocols3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevProtocols3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevProtocols3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDevProtocols3Result", &(a->_Bsdrtmservice1__GetDevProtocols3Response::GetDevProtocols3Result), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetDevProtocols3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevProtocols3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevProtocols3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response, 0, sizeof(_Bsdrtmservice1__GetDevProtocols3Response), 0, soap_copy__Bsdrtmservice1__GetDevProtocols3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevProtocols3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevProtocols3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevProtocols3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevProtocols3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevProtocols3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevProtocols3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevProtocols3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocols3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevProtocols3Response);
		((_Bsdrtmservice1__GetDevProtocols3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocols3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevProtocols3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevProtocols3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevProtocols3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevProtocols3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevProtocols3Response*)p = *(_Bsdrtmservice1__GetDevProtocols3Response*)q;
}

void _Bsdrtmservice1__GetDevProtocols3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevProtocols3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevProtocols3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevProtocols3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevProtocols3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevProtocols3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevProtocols3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevProtocols3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevProtocols3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevProtocols3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevProtocols3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocols3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevProtocols3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3, sizeof(_Bsdrtmservice1__GetDevProtocols3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevProtocols3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevProtocols3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevProtocols3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3, 0, sizeof(_Bsdrtmservice1__GetDevProtocols3), 0, soap_copy__Bsdrtmservice1__GetDevProtocols3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevProtocols3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevProtocols3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevProtocols3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevProtocols3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevProtocols3(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevProtocols3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevProtocols3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevProtocols3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevProtocols3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocols3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevProtocols3);
		((_Bsdrtmservice1__GetDevProtocols3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocols3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevProtocols3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevProtocols3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevProtocols3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevProtocols3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevProtocols3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevProtocols3*)p = *(_Bsdrtmservice1__GetDevProtocols3*)q;
}

void _Bsdrtmservice1__GetDevProtocolsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDevProtocolsResponse::GetDevProtocolsResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevProtocolsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetDevProtocolsResponse::GetDevProtocolsResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevProtocolsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevProtocolsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevProtocolsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse), type))
		return soap->error;
	if (a->GetDevProtocolsResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDevProtocolsResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDevProtocolsResult", -1, &(a->_Bsdrtmservice1__GetDevProtocolsResponse::GetDevProtocolsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevProtocolsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevProtocolsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocolsResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocolsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevProtocolsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse, sizeof(_Bsdrtmservice1__GetDevProtocolsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevProtocolsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDevProtocolsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDevProtocolsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDevProtocolsResult", &(a->_Bsdrtmservice1__GetDevProtocolsResponse::GetDevProtocolsResult), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetDevProtocolsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDevProtocolsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevProtocolsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse, 0, sizeof(_Bsdrtmservice1__GetDevProtocolsResponse), 0, soap_copy__Bsdrtmservice1__GetDevProtocolsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevProtocolsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevProtocolsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevProtocolsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevProtocolsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocolsResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, _Bsdrtmservice1__GetDevProtocolsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevProtocolsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevProtocolsResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevProtocolsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocolsResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevProtocolsResponse);
		((_Bsdrtmservice1__GetDevProtocolsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocolsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevProtocolsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevProtocolsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevProtocolsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevProtocolsResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevProtocolsResponse*)p = *(_Bsdrtmservice1__GetDevProtocolsResponse*)q;
}

void _Bsdrtmservice1__GetDevProtocols::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDevProtocols::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDevProtocols::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDevProtocols::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDevProtocols::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDevProtocols::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDevProtocols(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDevProtocols(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDevProtocols *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDevProtocols::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDevProtocols::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDevProtocols(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDevProtocols(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocols *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDevProtocols *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols, sizeof(_Bsdrtmservice1__GetDevProtocols), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDevProtocols *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDevProtocols::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDevProtocols *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols, 0, sizeof(_Bsdrtmservice1__GetDevProtocols), 0, soap_copy__Bsdrtmservice1__GetDevProtocols);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDevProtocols::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDevProtocols", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDevProtocols::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDevProtocols(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDevProtocols(struct soap *soap, _Bsdrtmservice1__GetDevProtocols *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDevProtocols(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDevProtocols * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDevProtocols(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDevProtocols(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocols);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDevProtocols);
		((_Bsdrtmservice1__GetDevProtocols*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDevProtocols[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDevProtocols);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDevProtocols*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDevProtocols*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDevProtocols(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDevProtocols %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDevProtocols*)p = *(_Bsdrtmservice1__GetDevProtocols*)q;
}

void _Bsdrtmservice1__GetDeviceTypes3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDeviceTypes3Response::GetDeviceTypes3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDeviceTypes3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetDeviceTypes3Response::GetDeviceTypes3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDeviceTypes3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDeviceTypes3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDeviceTypes3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response), type))
		return soap->error;
	if (a->GetDeviceTypes3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetDeviceTypes3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDeviceTypes3Result", -1, &(a->_Bsdrtmservice1__GetDeviceTypes3Response::GetDeviceTypes3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDeviceTypes3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDeviceTypes3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypes3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDeviceTypes3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response, sizeof(_Bsdrtmservice1__GetDeviceTypes3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDeviceTypes3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDeviceTypes3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDeviceTypes3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDeviceTypes3Result", &(a->_Bsdrtmservice1__GetDeviceTypes3Response::GetDeviceTypes3Result), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetDeviceTypes3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDeviceTypes3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDeviceTypes3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response, 0, sizeof(_Bsdrtmservice1__GetDeviceTypes3Response), 0, soap_copy__Bsdrtmservice1__GetDeviceTypes3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDeviceTypes3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypes3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDeviceTypes3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDeviceTypes3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDeviceTypes3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDeviceTypes3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDeviceTypes3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypes3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDeviceTypes3Response);
		((_Bsdrtmservice1__GetDeviceTypes3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypes3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDeviceTypes3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDeviceTypes3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDeviceTypes3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDeviceTypes3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDeviceTypes3Response*)p = *(_Bsdrtmservice1__GetDeviceTypes3Response*)q;
}

void _Bsdrtmservice1__GetDeviceTypes3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDeviceTypes3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDeviceTypes3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDeviceTypes3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDeviceTypes3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDeviceTypes3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDeviceTypes3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDeviceTypes3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDeviceTypes3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDeviceTypes3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDeviceTypes3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypes3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDeviceTypes3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3, sizeof(_Bsdrtmservice1__GetDeviceTypes3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDeviceTypes3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDeviceTypes3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDeviceTypes3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3, 0, sizeof(_Bsdrtmservice1__GetDeviceTypes3), 0, soap_copy__Bsdrtmservice1__GetDeviceTypes3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDeviceTypes3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypes3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDeviceTypes3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDeviceTypes3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDeviceTypes3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDeviceTypes3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDeviceTypes3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypes3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDeviceTypes3);
		((_Bsdrtmservice1__GetDeviceTypes3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypes3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDeviceTypes3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDeviceTypes3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDeviceTypes3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDeviceTypes3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDeviceTypes3*)p = *(_Bsdrtmservice1__GetDeviceTypes3*)q;
}

void _Bsdrtmservice1__GetDeviceTypesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetDeviceTypesResponse::GetDeviceTypesResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDeviceTypesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetDeviceTypesResponse::GetDeviceTypesResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDeviceTypesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDeviceTypesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDeviceTypesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse), type))
		return soap->error;
	if (a->GetDeviceTypesResult)
		soap_element_result(soap, "Bsdrtmservice1:GetDeviceTypesResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDeviceTypesResult", -1, &(a->_Bsdrtmservice1__GetDeviceTypesResponse::GetDeviceTypesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDeviceTypesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDeviceTypesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypesResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDeviceTypesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse, sizeof(_Bsdrtmservice1__GetDeviceTypesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDeviceTypesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDeviceTypesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDeviceTypesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetDeviceTypesResult", &(a->_Bsdrtmservice1__GetDeviceTypesResponse::GetDeviceTypesResult), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetDeviceTypesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetDeviceTypesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDeviceTypesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse, 0, sizeof(_Bsdrtmservice1__GetDeviceTypesResponse), 0, soap_copy__Bsdrtmservice1__GetDeviceTypesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDeviceTypesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDeviceTypesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDeviceTypesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypesResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, _Bsdrtmservice1__GetDeviceTypesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDeviceTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDeviceTypesResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDeviceTypesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypesResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDeviceTypesResponse);
		((_Bsdrtmservice1__GetDeviceTypesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDeviceTypesResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDeviceTypesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDeviceTypesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDeviceTypesResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDeviceTypesResponse*)p = *(_Bsdrtmservice1__GetDeviceTypesResponse*)q;
}

void _Bsdrtmservice1__GetDeviceTypes::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetDeviceTypes::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetDeviceTypes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetDeviceTypes::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetDeviceTypes::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetDeviceTypes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetDeviceTypes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetDeviceTypes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetDeviceTypes::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetDeviceTypes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetDeviceTypes(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetDeviceTypes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes, sizeof(_Bsdrtmservice1__GetDeviceTypes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetDeviceTypes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetDeviceTypes::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetDeviceTypes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes, 0, sizeof(_Bsdrtmservice1__GetDeviceTypes), 0, soap_copy__Bsdrtmservice1__GetDeviceTypes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetDeviceTypes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypes", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetDeviceTypes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetDeviceTypes(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetDeviceTypes(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetDeviceTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetDeviceTypes * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetDeviceTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetDeviceTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypes);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetDeviceTypes);
		((_Bsdrtmservice1__GetDeviceTypes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetDeviceTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetDeviceTypes);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetDeviceTypes*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetDeviceTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetDeviceTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetDeviceTypes %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetDeviceTypes*)p = *(_Bsdrtmservice1__GetDeviceTypes*)q;
}

void _Bsdrtmservice1__GetMonStationTypes3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStationTypes3Response::GetMonStationTypes3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationTypes3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetMonStationTypes3Response::GetMonStationTypes3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationTypes3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationTypes3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationTypes3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response), type))
		return soap->error;
	if (a->GetMonStationTypes3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStationTypes3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetMonStationTypes3Result", -1, &(a->_Bsdrtmservice1__GetMonStationTypes3Response::GetMonStationTypes3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationTypes3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationTypes3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypes3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationTypes3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response, sizeof(_Bsdrtmservice1__GetMonStationTypes3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationTypes3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStationTypes3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStationTypes3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetMonStationTypes3Result", &(a->_Bsdrtmservice1__GetMonStationTypes3Response::GetMonStationTypes3Result), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetMonStationTypes3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStationTypes3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationTypes3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response, 0, sizeof(_Bsdrtmservice1__GetMonStationTypes3Response), 0, soap_copy__Bsdrtmservice1__GetMonStationTypes3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationTypes3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypes3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationTypes3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationTypes3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationTypes3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationTypes3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationTypes3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypes3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationTypes3Response);
		((_Bsdrtmservice1__GetMonStationTypes3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypes3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationTypes3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationTypes3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationTypes3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationTypes3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationTypes3Response*)p = *(_Bsdrtmservice1__GetMonStationTypes3Response*)q;
}

void _Bsdrtmservice1__GetMonStationTypes3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStationTypes3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationTypes3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStationTypes3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStationTypes3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationTypes3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationTypes3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationTypes3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonStationTypes3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationTypes3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationTypes3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypes3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationTypes3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3, sizeof(_Bsdrtmservice1__GetMonStationTypes3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationTypes3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonStationTypes3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationTypes3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3, 0, sizeof(_Bsdrtmservice1__GetMonStationTypes3), 0, soap_copy__Bsdrtmservice1__GetMonStationTypes3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationTypes3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypes3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationTypes3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationTypes3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationTypes3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationTypes3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationTypes3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypes3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationTypes3);
		((_Bsdrtmservice1__GetMonStationTypes3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypes3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationTypes3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationTypes3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationTypes3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationTypes3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationTypes3*)p = *(_Bsdrtmservice1__GetMonStationTypes3*)q;
}

void _Bsdrtmservice1__GetMonStationTypesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStationTypesResponse::GetMonStationTypesResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationTypesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, &this->_Bsdrtmservice1__GetMonStationTypesResponse::GetMonStationTypesResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationTypesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationTypesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationTypesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse), type))
		return soap->error;
	if (a->GetMonStationTypesResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStationTypesResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetMonStationTypesResult", -1, &(a->_Bsdrtmservice1__GetMonStationTypesResponse::GetMonStationTypesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationTypesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationTypesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypesResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationTypesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse, sizeof(_Bsdrtmservice1__GetMonStationTypesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationTypesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStationTypesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStationTypesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, "Bsdrtmservice1:GetMonStationTypesResult", &(a->_Bsdrtmservice1__GetMonStationTypesResponse::GetMonStationTypesResult), "Bsdrtmservice1:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetMonStationTypesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStationTypesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationTypesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse, 0, sizeof(_Bsdrtmservice1__GetMonStationTypesResponse), 0, soap_copy__Bsdrtmservice1__GetMonStationTypesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationTypesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationTypesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationTypesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypesResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationTypesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationTypesResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationTypesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypesResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationTypesResponse);
		((_Bsdrtmservice1__GetMonStationTypesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationTypesResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationTypesResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationTypesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationTypesResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationTypesResponse*)p = *(_Bsdrtmservice1__GetMonStationTypesResponse*)q;
}

void _Bsdrtmservice1__GetMonStationTypes::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStationTypes::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationTypes::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStationTypes::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStationTypes::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationTypes::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationTypes(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationTypes *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonStationTypes::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationTypes::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationTypes(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypes *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationTypes *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes, sizeof(_Bsdrtmservice1__GetMonStationTypes), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationTypes *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonStationTypes::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationTypes *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes, 0, sizeof(_Bsdrtmservice1__GetMonStationTypes), 0, soap_copy__Bsdrtmservice1__GetMonStationTypes);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationTypes::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypes", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationTypes::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationTypes(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationTypes(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationTypes * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypes);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationTypes);
		((_Bsdrtmservice1__GetMonStationTypes*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationTypes);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationTypes*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationTypes %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationTypes*)p = *(_Bsdrtmservice1__GetMonStationTypes*)q;
}

void _Bsdrtmservice1__GetMonStationsByUserID3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStationsByUserID3Response::GetMonStationsByUserID3Result = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsByUserID3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3Response::GetMonStationsByUserID3Result);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsByUserID3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsByUserID3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response), type))
		return soap->error;
	if (a->GetMonStationsByUserID3Result)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStationsByUserID3Result");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonStationsByUserID3Result", -1, &(a->_Bsdrtmservice1__GetMonStationsByUserID3Response::GetMonStationsByUserID3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsByUserID3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3Response * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserID3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsByUserID3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsByUserID3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStationsByUserID3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStationsByUserID3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonStationsByUserID3Result", &(a->_Bsdrtmservice1__GetMonStationsByUserID3Response::GetMonStationsByUserID3Result), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetMonStationsByUserID3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStationsByUserID3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsByUserID3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response, 0, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3Response), 0, soap_copy__Bsdrtmservice1__GetMonStationsByUserID3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsByUserID3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserID3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsByUserID3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3Response * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsByUserID3Response * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserID3Response);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsByUserID3Response);
		((_Bsdrtmservice1__GetMonStationsByUserID3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserID3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsByUserID3Response);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsByUserID3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsByUserID3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsByUserID3Response %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsByUserID3Response*)p = *(_Bsdrtmservice1__GetMonStationsByUserID3Response*)q;
}

void _Bsdrtmservice1__GetMonStationsByUserID3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3::userID);
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3::update);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsByUserID3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3::userID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3::userID);
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3::update, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID3::update);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsByUserID3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsByUserID3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsByUserID3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:userID", -1, &(a->_Bsdrtmservice1__GetMonStationsByUserID3::userID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:update", -1, &(a->_Bsdrtmservice1__GetMonStationsByUserID3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsByUserID3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsByUserID3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3 * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserID3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsByUserID3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsByUserID3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:userID", &(a->_Bsdrtmservice1__GetMonStationsByUserID3::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:update", &(a->_Bsdrtmservice1__GetMonStationsByUserID3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsByUserID3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3, 0, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3), 0, soap_copy__Bsdrtmservice1__GetMonStationsByUserID3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsByUserID3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserID3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsByUserID3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsByUserID3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3 * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsByUserID3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsByUserID3 * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserID3);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsByUserID3);
		((_Bsdrtmservice1__GetMonStationsByUserID3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserID3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsByUserID3);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsByUserID3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsByUserID3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsByUserID3 %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsByUserID3*)p = *(_Bsdrtmservice1__GetMonStationsByUserID3*)q;
}

void _Bsdrtmservice1__GetMonStationsByUserIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdrtmservice1__GetMonStationsByUserIDResponse::GetMonStationsByUserIDResult = NULL;
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsByUserIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdrtmservice1__OptResultOfString(soap, &this->_Bsdrtmservice1__GetMonStationsByUserIDResponse::GetMonStationsByUserIDResult);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsByUserIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsByUserIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse), type))
		return soap->error;
	if (a->GetMonStationsByUserIDResult)
		soap_element_result(soap, "Bsdrtmservice1:GetMonStationsByUserIDResult");
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonStationsByUserIDResult", -1, &(a->_Bsdrtmservice1__GetMonStationsByUserIDResponse::GetMonStationsByUserIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsByUserIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserIDResponse * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserIDResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsByUserIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse, sizeof(_Bsdrtmservice1__GetMonStationsByUserIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsByUserIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMonStationsByUserIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMonStationsByUserIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, "Bsdrtmservice1:GetMonStationsByUserIDResult", &(a->_Bsdrtmservice1__GetMonStationsByUserIDResponse::GetMonStationsByUserIDResult), "Bsdrtmservice1:OptResultOfString"))
				{	soap_flag_GetMonStationsByUserIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdrtmservice1:GetMonStationsByUserIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsByUserIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse, 0, sizeof(_Bsdrtmservice1__GetMonStationsByUserIDResponse), 0, soap_copy__Bsdrtmservice1__GetMonStationsByUserIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsByUserIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsByUserIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserIDResponse * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsByUserIDResponse * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsByUserIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserIDResponse);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsByUserIDResponse);
		((_Bsdrtmservice1__GetMonStationsByUserIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserIDResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsByUserIDResponse);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsByUserIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsByUserIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsByUserIDResponse %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsByUserIDResponse*)p = *(_Bsdrtmservice1__GetMonStationsByUserIDResponse*)q;
}

void _Bsdrtmservice1__GetMonStationsByUserID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID::userID);
	/* transient soap skipped */
}

void _Bsdrtmservice1__GetMonStationsByUserID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID::userID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdrtmservice1__GetMonStationsByUserID::userID);
	/* transient soap skipped */
}

int _Bsdrtmservice1__GetMonStationsByUserID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdrtmservice1__GetMonStationsByUserID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const char *tag, int id, const _Bsdrtmservice1__GetMonStationsByUserID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:userID", -1, &(a->_Bsdrtmservice1__GetMonStationsByUserID::userID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdrtmservice1__GetMonStationsByUserID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdrtmservice1__GetMonStationsByUserID(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID * SOAP_FMAC4 soap_in__Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserID *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdrtmservice1__GetMonStationsByUserID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID, sizeof(_Bsdrtmservice1__GetMonStationsByUserID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdrtmservice1__GetMonStationsByUserID *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:userID", &(a->_Bsdrtmservice1__GetMonStationsByUserID::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdrtmservice1__GetMonStationsByUserID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID, 0, sizeof(_Bsdrtmservice1__GetMonStationsByUserID), 0, soap_copy__Bsdrtmservice1__GetMonStationsByUserID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdrtmservice1__GetMonStationsByUserID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdrtmservice1__GetMonStationsByUserID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdrtmservice1__GetMonStationsByUserID(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID * SOAP_FMAC4 soap_get__Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdrtmservice1__GetMonStationsByUserID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdrtmservice1__GetMonStationsByUserID * SOAP_FMAC2 soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserID);
		if (size)
			*size = sizeof(_Bsdrtmservice1__GetMonStationsByUserID);
		((_Bsdrtmservice1__GetMonStationsByUserID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdrtmservice1__GetMonStationsByUserID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdrtmservice1__GetMonStationsByUserID);
		for (int i = 0; i < n; i++)
			((_Bsdrtmservice1__GetMonStationsByUserID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdrtmservice1__GetMonStationsByUserID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdrtmservice1__GetMonStationsByUserID %p -> %p\n", q, p));
	*(_Bsdrtmservice1__GetMonStationsByUserID*)p = *(_Bsdrtmservice1__GetMonStationsByUserID*)q;
}

void Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EmsID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EDevID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::DataTypeID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsAlert);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Content);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsComfirm);
	/* transient soap skipped */
}

void Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EmsID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EmsID);
	soap_embedded(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EDevID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EDevID);
	soap_embedded(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::DataTypeID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::DataTypeID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsAlert);
	soap_embedded(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Content, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Content);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsComfirm);
	/* transient soap skipped */
}

int Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:EmsID", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EmsID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:EDevID", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EDevID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DataTypeID", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::DataTypeID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:IsAlert", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsAlert), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Content", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Content), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:IsComfirm", -1, &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsComfirm), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_EmsID1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_EDevID1 = 1;
	size_t soap_flag_DataTypeID1 = 1;
	size_t soap_flag_IsAlert1 = 1;
	size_t soap_flag_Content1 = 1;
	size_t soap_flag_IsComfirm1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EmsID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:EmsID", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EmsID), "xsd:string"))
				{	soap_flag_EmsID1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_EDevID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:EDevID", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::EDevID), "xsd:string"))
				{	soap_flag_EDevID1--;
					continue;
				}
			if (soap_flag_DataTypeID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DataTypeID", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::DataTypeID), "xsd:string"))
				{	soap_flag_DataTypeID1--;
					continue;
				}
			if (soap_flag_IsAlert1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:IsAlert", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsAlert), "xsd:decimal"))
				{	soap_flag_IsAlert1--;
					continue;
				}
			if (soap_flag_Content1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Content", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::Content), "xsd:string"))
				{	soap_flag_Content1--;
					continue;
				}
			if (soap_flag_IsComfirm1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:IsComfirm", &(a->Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::IsComfirm), "xsd:decimal"))
				{	soap_flag_IsComfirm1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity, 0, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity), 0, soap_copy_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IsAlert1 > 0 || soap_flag_IsComfirm1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:Rtm_mon_ems_devEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
		((Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)p = *(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::__sizeRtm_USCOREmon_USCOREems_USCOREdevEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::__sizeRtm_USCOREmon_USCOREems_USCOREdevEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, this->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::__sizeRtm_USCOREmon_USCOREems_USCOREdevEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:Rtm_mon_ems_devEntity", -1, a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:Rtm_mon_ems_devEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity == NULL)
				{	if (soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1 == NULL)
						soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_push_block(soap, soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:Rtm_mon_ems_devEntity", a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity, "Bsdrtmservice1:Rtm_mon_ems_devEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::__sizeRtm_USCOREmon_USCOREems_USCOREdevEntity++;
					a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity)
			soap_pop_block(soap, soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::__sizeRtm_USCOREmon_USCOREems_USCOREdevEntity)
			a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_save_block(soap, soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Rtm_USCOREmon_USCOREems_USCOREdevEntity = NULL;
			if (soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1)
				soap_end_block(soap, soap_blist_Rtm_USCOREmon_USCOREems_USCOREdevEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		((Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)p = *(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::Data), "Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		((Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)p = *(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity*)q;
}

void Bsdrtmservice1__RtmIntellMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStartDate);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonEndDate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::CreateTime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmIntellMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmIntellMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmIntellMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:TaskId", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskName", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:MonStartDate", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStartDate), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:MonEndDate", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonEndDate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Manager", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Tel", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonStationNo", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevNo", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FunNo", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevParam", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskDesc", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskConfig", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskState", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:ArrowRun", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:CreateTime", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::CreateTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonType", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:ScanType", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmIntellMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmIntellMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmIntellMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmIntellMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__RtmIntellMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmIntellMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TaskId1 = 1;
	size_t soap_flag_TaskName1 = 1;
	size_t soap_flag_MonStartDate1 = 1;
	size_t soap_flag_MonEndDate1 = 1;
	size_t soap_flag_Manager1 = 1;
	size_t soap_flag_Tel1 = 1;
	size_t soap_flag_MonStationNo1 = 1;
	size_t soap_flag_DevNo1 = 1;
	size_t soap_flag_FunNo1 = 1;
	size_t soap_flag_DevParam1 = 1;
	size_t soap_flag_TaskDesc1 = 1;
	size_t soap_flag_TaskConfig1 = 1;
	size_t soap_flag_TaskState1 = 1;
	size_t soap_flag_ArrowRun1 = 1;
	size_t soap_flag_CreateTime1 = 1;
	size_t soap_flag_MonType1 = 1;
	size_t soap_flag_ScanType1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TaskId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:TaskId", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId), "xsd:decimal"))
				{	soap_flag_TaskId1--;
					continue;
				}
			if (soap_flag_TaskName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskName", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName), "xsd:string"))
				{	soap_flag_TaskName1--;
					continue;
				}
			if (soap_flag_MonStartDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:MonStartDate", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStartDate), "xsd:dateTime"))
				{	soap_flag_MonStartDate1--;
					continue;
				}
			if (soap_flag_MonEndDate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:MonEndDate", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonEndDate), "xsd:dateTime"))
				{	soap_flag_MonEndDate1--;
					continue;
				}
			if (soap_flag_Manager1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Manager", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager), "xsd:string"))
				{	soap_flag_Manager1--;
					continue;
				}
			if (soap_flag_Tel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Tel", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel), "xsd:string"))
				{	soap_flag_Tel1--;
					continue;
				}
			if (soap_flag_MonStationNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonStationNo", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo), "xsd:string"))
				{	soap_flag_MonStationNo1--;
					continue;
				}
			if (soap_flag_DevNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevNo", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo), "xsd:string"))
				{	soap_flag_DevNo1--;
					continue;
				}
			if (soap_flag_FunNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FunNo", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo), "xsd:string"))
				{	soap_flag_FunNo1--;
					continue;
				}
			if (soap_flag_DevParam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevParam", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam), "xsd:string"))
				{	soap_flag_DevParam1--;
					continue;
				}
			if (soap_flag_TaskDesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskDesc", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc), "xsd:string"))
				{	soap_flag_TaskDesc1--;
					continue;
				}
			if (soap_flag_TaskConfig1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskConfig", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig), "xsd:string"))
				{	soap_flag_TaskConfig1--;
					continue;
				}
			if (soap_flag_TaskState1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskState", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState), "xsd:string"))
				{	soap_flag_TaskState1--;
					continue;
				}
			if (soap_flag_ArrowRun1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:ArrowRun", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun), "xsd:string"))
				{	soap_flag_ArrowRun1--;
					continue;
				}
			if (soap_flag_CreateTime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:CreateTime", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::CreateTime), "xsd:dateTime"))
				{	soap_flag_CreateTime1--;
					continue;
				}
			if (soap_flag_MonType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonType", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType), "xsd:string"))
				{	soap_flag_MonType1--;
					continue;
				}
			if (soap_flag_ScanType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:ScanType", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType), "xsd:string"))
				{	soap_flag_ScanType1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmIntellMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity, 0, sizeof(Bsdrtmservice1__RtmIntellMonTaskEntity), 0, soap_copy_Bsdrtmservice1__RtmIntellMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TaskId1 > 0 || soap_flag_MonStartDate1 > 0 || soap_flag_MonEndDate1 > 0 || soap_flag_CreateTime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmIntellMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmIntellMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmIntellMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmIntellMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__RtmIntellMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmIntellMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmIntellMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmIntellMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmIntellMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmIntellMonTaskEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmIntellMonTaskEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity);
			((Bsdrtmservice1__vRtmIntellMonTaskEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmIntellMonTaskEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmIntellMonTaskEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmIntellMonTaskEntity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmIntellMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmIntellMonTaskEntity);
		((Bsdrtmservice1__RtmIntellMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmIntellMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmIntellMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmIntellMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmIntellMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmIntellMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmIntellMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmIntellMonTaskEntity*)p = *(Bsdrtmservice1__RtmIntellMonTaskEntity*)q;
}

void Bsdrtmservice1__vRtmIntellMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::MonStationName);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevName);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevModelUid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::FunName);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::ArrowRunName);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::TaskStateName);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::Longi);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::Lati);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStartDate);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonEndDate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::CreateTime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType);
	/* transient soap skipped */
}

void Bsdrtmservice1__vRtmIntellMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::MonStationName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::MonStationName);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevName);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevModelUid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevModelUid);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::FunName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::FunName);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::ArrowRunName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::ArrowRunName);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::TaskStateName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::TaskStateName);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::Longi);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmIntellMonTaskEntity::Lati);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType);
	/* transient soap skipped */
}

int Bsdrtmservice1__vRtmIntellMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__vRtmIntellMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity), "Bsdrtmservice1:vRtmIntellMonTaskEntity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:TaskId", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskName", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:MonStartDate", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStartDate), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:MonEndDate", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonEndDate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Manager", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Tel", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonStationNo", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevNo", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FunNo", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevParam", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskDesc", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskConfig", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskState", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:ArrowRun", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:CreateTime", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::CreateTime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonType", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:ScanType", -1, &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonStationName", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::MonStationName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevName", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevModelUid", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevModelUid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FunName", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::FunName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:ArrowRunName", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::ArrowRunName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:TaskStateName", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::TaskStateName), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Longi", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::Longi), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Lati", -1, &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::Lati), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__vRtmIntellMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmIntellMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmIntellMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__vRtmIntellMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__vRtmIntellMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TaskId2 = 1;
	size_t soap_flag_TaskName2 = 1;
	size_t soap_flag_MonStartDate2 = 1;
	size_t soap_flag_MonEndDate2 = 1;
	size_t soap_flag_Manager2 = 1;
	size_t soap_flag_Tel2 = 1;
	size_t soap_flag_MonStationNo2 = 1;
	size_t soap_flag_DevNo2 = 1;
	size_t soap_flag_FunNo2 = 1;
	size_t soap_flag_DevParam2 = 1;
	size_t soap_flag_TaskDesc2 = 1;
	size_t soap_flag_TaskConfig2 = 1;
	size_t soap_flag_TaskState2 = 1;
	size_t soap_flag_ArrowRun2 = 1;
	size_t soap_flag_CreateTime2 = 1;
	size_t soap_flag_MonType2 = 1;
	size_t soap_flag_ScanType2 = 1;
	size_t soap_flag_MonStationName1 = 1;
	size_t soap_flag_DevName1 = 1;
	size_t soap_flag_DevModelUid1 = 1;
	size_t soap_flag_FunName1 = 1;
	size_t soap_flag_ArrowRunName1 = 1;
	size_t soap_flag_TaskStateName1 = 1;
	size_t soap_flag_Longi1 = 1;
	size_t soap_flag_Lati1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TaskId2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:TaskId", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskId), "xsd:decimal"))
				{	soap_flag_TaskId2--;
					continue;
				}
			if (soap_flag_TaskName2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskName", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskName), "xsd:string"))
				{	soap_flag_TaskName2--;
					continue;
				}
			if (soap_flag_MonStartDate2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:MonStartDate", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStartDate), "xsd:dateTime"))
				{	soap_flag_MonStartDate2--;
					continue;
				}
			if (soap_flag_MonEndDate2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:MonEndDate", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonEndDate), "xsd:dateTime"))
				{	soap_flag_MonEndDate2--;
					continue;
				}
			if (soap_flag_Manager2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Manager", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Manager), "xsd:string"))
				{	soap_flag_Manager2--;
					continue;
				}
			if (soap_flag_Tel2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Tel", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::Tel), "xsd:string"))
				{	soap_flag_Tel2--;
					continue;
				}
			if (soap_flag_MonStationNo2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonStationNo", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonStationNo), "xsd:string"))
				{	soap_flag_MonStationNo2--;
					continue;
				}
			if (soap_flag_DevNo2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevNo", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevNo), "xsd:string"))
				{	soap_flag_DevNo2--;
					continue;
				}
			if (soap_flag_FunNo2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FunNo", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::FunNo), "xsd:string"))
				{	soap_flag_FunNo2--;
					continue;
				}
			if (soap_flag_DevParam2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevParam", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::DevParam), "xsd:string"))
				{	soap_flag_DevParam2--;
					continue;
				}
			if (soap_flag_TaskDesc2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskDesc", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskDesc), "xsd:string"))
				{	soap_flag_TaskDesc2--;
					continue;
				}
			if (soap_flag_TaskConfig2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskConfig", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskConfig), "xsd:string"))
				{	soap_flag_TaskConfig2--;
					continue;
				}
			if (soap_flag_TaskState2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskState", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::TaskState), "xsd:string"))
				{	soap_flag_TaskState2--;
					continue;
				}
			if (soap_flag_ArrowRun2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:ArrowRun", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ArrowRun), "xsd:string"))
				{	soap_flag_ArrowRun2--;
					continue;
				}
			if (soap_flag_CreateTime2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:CreateTime", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::CreateTime), "xsd:dateTime"))
				{	soap_flag_CreateTime2--;
					continue;
				}
			if (soap_flag_MonType2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonType", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::MonType), "xsd:string"))
				{	soap_flag_MonType2--;
					continue;
				}
			if (soap_flag_ScanType2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:ScanType", &(a->Bsdrtmservice1__RtmIntellMonTaskEntity::ScanType), "xsd:string"))
				{	soap_flag_ScanType2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_MonStationName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonStationName", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::MonStationName), "xsd:string"))
				{	soap_flag_MonStationName1--;
					continue;
				}
			if (soap_flag_DevName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevName", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevName), "xsd:string"))
				{	soap_flag_DevName1--;
					continue;
				}
			if (soap_flag_DevModelUid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevModelUid", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::DevModelUid), "xsd:string"))
				{	soap_flag_DevModelUid1--;
					continue;
				}
			if (soap_flag_FunName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FunName", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::FunName), "xsd:string"))
				{	soap_flag_FunName1--;
					continue;
				}
			if (soap_flag_ArrowRunName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:ArrowRunName", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::ArrowRunName), "xsd:string"))
				{	soap_flag_ArrowRunName1--;
					continue;
				}
			if (soap_flag_TaskStateName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:TaskStateName", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::TaskStateName), "xsd:string"))
				{	soap_flag_TaskStateName1--;
					continue;
				}
			if (soap_flag_Longi1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Longi", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::Longi), "xsd:decimal"))
				{	soap_flag_Longi1--;
					continue;
				}
			if (soap_flag_Lati1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Lati", &(a->Bsdrtmservice1__vRtmIntellMonTaskEntity::Lati), "xsd:decimal"))
				{	soap_flag_Lati1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmIntellMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity, 0, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity), 0, soap_copy_Bsdrtmservice1__vRtmIntellMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TaskId2 > 0 || soap_flag_MonStartDate2 > 0 || soap_flag_MonEndDate2 > 0 || soap_flag_CreateTime2 > 0 || soap_flag_Longi1 > 0 || soap_flag_Lati1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__vRtmIntellMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:vRtmIntellMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__vRtmIntellMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmIntellMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__vRtmIntellMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__vRtmIntellMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmIntellMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity);
		((Bsdrtmservice1__vRtmIntellMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmIntellMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__vRtmIntellMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__vRtmIntellMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__vRtmIntellMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__vRtmIntellMonTaskEntity*)p = *(Bsdrtmservice1__vRtmIntellMonTaskEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::__sizevRtmIntellMonTaskEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::__sizevRtmIntellMonTaskEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::__sizevRtmIntellMonTaskEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, "Bsdrtmservice1:vRtmIntellMonTaskEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_vRtmIntellMonTaskEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:vRtmIntellMonTaskEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity == NULL)
				{	if (soap_blist_vRtmIntellMonTaskEntity1 == NULL)
						soap_blist_vRtmIntellMonTaskEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity = (Bsdrtmservice1__vRtmIntellMonTaskEntity **)soap_push_block(soap, soap_blist_vRtmIntellMonTaskEntity1, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, "Bsdrtmservice1:vRtmIntellMonTaskEntity", a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity, "Bsdrtmservice1:vRtmIntellMonTaskEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::__sizevRtmIntellMonTaskEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity)
			soap_pop_block(soap, soap_blist_vRtmIntellMonTaskEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::__sizevRtmIntellMonTaskEntity)
			a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity = (Bsdrtmservice1__vRtmIntellMonTaskEntity **)soap_save_block(soap, soap_blist_vRtmIntellMonTaskEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::vRtmIntellMonTaskEntity = NULL;
			if (soap_blist_vRtmIntellMonTaskEntity1)
				soap_end_block(soap, soap_blist_vRtmIntellMonTaskEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
		((Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity*)q;
}

void Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Msg);
	this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::Data), "Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity, 0, sizeof(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
		((Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)p = *(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::__sizeRtmMalfunctionAlertEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::__sizeRtmMalfunctionAlertEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, this->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::__sizeRtmMalfunctionAlertEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:RtmMalfunctionAlertEntity", -1, a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmMalfunctionAlertEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmMalfunctionAlertEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity == NULL)
				{	if (soap_blist_RtmMalfunctionAlertEntity1 == NULL)
						soap_blist_RtmMalfunctionAlertEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity = (Bsdrtmservice1__RtmMalfunctionAlertEntity **)soap_push_block(soap, soap_blist_RtmMalfunctionAlertEntity1, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:RtmMalfunctionAlertEntity", a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity, "Bsdrtmservice1:RtmMalfunctionAlertEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::__sizeRtmMalfunctionAlertEntity++;
					a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity)
			soap_pop_block(soap, soap_blist_RtmMalfunctionAlertEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::__sizeRtmMalfunctionAlertEntity)
			a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity = (Bsdrtmservice1__RtmMalfunctionAlertEntity **)soap_save_block(soap, soap_blist_RtmMalfunctionAlertEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::RtmMalfunctionAlertEntity = NULL;
			if (soap_blist_RtmMalfunctionAlertEntity1)
				soap_end_block(soap, soap_blist_RtmMalfunctionAlertEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
		((Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)p = *(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::Data), "Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
		((Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)p = *(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity*)q;
}

void Bsdrtmservice1__OptResultOfInt64::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfInt64::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfInt64::Msg);
	this->Bsdrtmservice1__OptResultOfInt64::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfInt64::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfInt64::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfInt64::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfInt64::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfInt64::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfInt64::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfLong(soap, &this->Bsdrtmservice1__OptResultOfInt64::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfInt64::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfInt64::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfInt64::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfInt64(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfInt64(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfInt64 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfInt64::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfInt64::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfLong(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfInt64::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfInt64::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfInt64::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfInt64(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfInt64 * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfInt64(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfInt64 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfInt64 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64, sizeof(Bsdrtmservice1__OptResultOfInt64), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfInt64 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfInt64::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfInt64::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfLong(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfInt64::Data), "Bsdrtmservice1:ArrayOfLong"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfInt64::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfInt64 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64, 0, sizeof(Bsdrtmservice1__OptResultOfInt64), 0, soap_copy_Bsdrtmservice1__OptResultOfInt64);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfInt64::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfInt64", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfInt64::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfInt64(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfInt64 * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfInt64(struct soap *soap, Bsdrtmservice1__OptResultOfInt64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfInt64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfInt64 * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfInt64(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfInt64(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfInt64);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfInt64);
		((Bsdrtmservice1__OptResultOfInt64*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfInt64[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfInt64);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfInt64*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfInt64*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfInt64(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfInt64 %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfInt64*)p = *(Bsdrtmservice1__OptResultOfInt64*)q;
}

void Bsdrtmservice1__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfInt::__sizeint_ = 0;
	this->Bsdrtmservice1__ArrayOfInt::int_ = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfInt::__sizeint_; i++)
		{
			soap_embedded(soap, this->Bsdrtmservice1__ArrayOfInt::int_ + i, SOAP_TYPE_Bsdrtmservice_int);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfInt(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfInt::__sizeint_; i++)
			if (soap_out_int(soap, "Bsdrtmservice1:int", -1, a->Bsdrtmservice1__ArrayOfInt::int_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfInt * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfInt(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt, sizeof(Bsdrtmservice1__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_int_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:int", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfInt::int_ == NULL)
				{	if (soap_blist_int_1 == NULL)
						soap_blist_int_1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfInt::int_ = (int *)soap_push_block(soap, soap_blist_int_1, sizeof(int));
					if (a->Bsdrtmservice1__ArrayOfInt::int_ == NULL)
						return NULL;
					soap_default_int(soap, a->Bsdrtmservice1__ArrayOfInt::int_);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "Bsdrtmservice1:int", a->Bsdrtmservice1__ArrayOfInt::int_, "xsd:int"))
				{	a->Bsdrtmservice1__ArrayOfInt::__sizeint_++;
					a->Bsdrtmservice1__ArrayOfInt::int_ = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfInt::int_)
			soap_pop_block(soap, soap_blist_int_1);
		if (a->Bsdrtmservice1__ArrayOfInt::__sizeint_)
			a->Bsdrtmservice1__ArrayOfInt::int_ = (int *)soap_save_block(soap, soap_blist_int_1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfInt::int_ = NULL;
			if (soap_blist_int_1)
				soap_end_block(soap, soap_blist_int_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt, 0, sizeof(Bsdrtmservice1__ArrayOfInt), 0, soap_copy_Bsdrtmservice1__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfInt * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfInt(struct soap *soap, Bsdrtmservice1__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfInt * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfInt);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfInt);
		((Bsdrtmservice1__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfInt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfInt);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfInt %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfInt*)p = *(Bsdrtmservice1__ArrayOfInt*)q;
}

void Bsdrtmservice1__RtmMalfunctionAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::AlertUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devtype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devno);
	soap_default_int(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alerttype);
	soap_default_int(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertlevel);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Content);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertdate);
	soap_default_int(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Confirmed);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Note);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Remark);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMalfunctionAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::AlertUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::AlertUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devtype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devtype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alerttype, SOAP_TYPE_Bsdrtmservice_int);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertlevel, SOAP_TYPE_Bsdrtmservice_int);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Content, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Content);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Confirmed, SOAP_TYPE_Bsdrtmservice_int);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Note, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Note);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Remark, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMalfunctionAlertEntity::Remark);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMalfunctionAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMalfunctionAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:AlertUID", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::AlertUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devtype", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devtype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devno), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:Alerttype", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alerttype), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:Alertlevel", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertlevel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Content", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Content), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Alertdate", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertdate), ""))
		return soap->error;
	if (soap_out_int(soap, "Bsdrtmservice1:Confirmed", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Confirmed), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Note", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Note), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Remark", -1, &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Remark), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMalfunctionAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMalfunctionAlertEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMalfunctionAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMalfunctionAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMalfunctionAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AlertUID1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devtype1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Alerttype1 = 1;
	size_t soap_flag_Alertlevel1 = 1;
	size_t soap_flag_Content1 = 1;
	size_t soap_flag_Alertdate1 = 1;
	size_t soap_flag_Confirmed1 = 1;
	size_t soap_flag_Note1 = 1;
	size_t soap_flag_Remark1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AlertUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:AlertUID", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::AlertUID), "xsd:string"))
				{	soap_flag_AlertUID1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devtype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devtype", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devtype), "xsd:string"))
				{	soap_flag_Devtype1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Alerttype1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:Alerttype", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alerttype), "xsd:int"))
				{	soap_flag_Alerttype1--;
					continue;
				}
			if (soap_flag_Alertlevel1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:Alertlevel", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertlevel), "xsd:int"))
				{	soap_flag_Alertlevel1--;
					continue;
				}
			if (soap_flag_Content1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Content", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Content), "xsd:string"))
				{	soap_flag_Content1--;
					continue;
				}
			if (soap_flag_Alertdate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Alertdate", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Alertdate), "xsd:dateTime"))
				{	soap_flag_Alertdate1--;
					continue;
				}
			if (soap_flag_Confirmed1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdrtmservice1:Confirmed", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Confirmed), "xsd:int"))
				{	soap_flag_Confirmed1--;
					continue;
				}
			if (soap_flag_Note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Note", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Note), "xsd:string"))
				{	soap_flag_Note1--;
					continue;
				}
			if (soap_flag_Remark1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Remark", &(a->Bsdrtmservice1__RtmMalfunctionAlertEntity::Remark), "xsd:string"))
				{	soap_flag_Remark1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMalfunctionAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity, 0, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity), 0, soap_copy_Bsdrtmservice1__RtmMalfunctionAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Alerttype1 > 0 || soap_flag_Alertlevel1 > 0 || soap_flag_Alertdate1 > 0 || soap_flag_Confirmed1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMalfunctionAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMalfunctionAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMalfunctionAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMalfunctionAlertEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMalfunctionAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMalfunctionAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMalfunctionAlertEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity);
		((Bsdrtmservice1__RtmMalfunctionAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMalfunctionAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMalfunctionAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMalfunctionAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMalfunctionAlertEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMalfunctionAlertEntity*)p = *(Bsdrtmservice1__RtmMalfunctionAlertEntity*)q;
}

void Bsdrtmservice1__ArrayOfBase64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfBase64Binary::__sizebase64Binary = 0;
	this->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfBase64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfBase64Binary::__sizebase64Binary; i++)
		{
			soap_embedded(soap, this->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary + i, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary);
			this->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary[i].soap_serialize(soap);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfBase64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfBase64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfBase64Binary *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfBase64Binary::__sizebase64Binary; i++)
			if (a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary[i].soap_out(soap, "Bsdrtmservice1:base64Binary", -1, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfBase64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfBase64Binary(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBase64Binary * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfBase64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfBase64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary, sizeof(Bsdrtmservice1__ArrayOfBase64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfBase64Binary *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_base64Binary1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:base64Binary", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary == NULL)
				{	if (soap_blist_base64Binary1 == NULL)
						soap_blist_base64Binary1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary = (xsd__base64Binary *)soap_push_block(soap, soap_blist_base64Binary1, sizeof(xsd__base64Binary));
					if (a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary == NULL)
						return NULL;
					xsd__base64Binary p;
					memcpy(a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary, &p, sizeof(xsd__base64Binary)); // a bit rough but portable
					a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary->soap_default(soap);
				}
				soap_revert(soap);
				if (soap_in_xsd__base64Binary(soap, "Bsdrtmservice1:base64Binary", a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary, "xsd:base64Binary"))
				{	a->Bsdrtmservice1__ArrayOfBase64Binary::__sizebase64Binary++;
					a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary)
			soap_pop_block(soap, soap_blist_base64Binary1);
		if (a->Bsdrtmservice1__ArrayOfBase64Binary::__sizebase64Binary)
			a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary = (xsd__base64Binary *)soap_save_block(soap, soap_blist_base64Binary1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfBase64Binary::base64Binary = NULL;
			if (soap_blist_base64Binary1)
				soap_end_block(soap, soap_blist_base64Binary1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfBase64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary, 0, sizeof(Bsdrtmservice1__ArrayOfBase64Binary), 0, soap_copy_Bsdrtmservice1__ArrayOfBase64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfBase64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfBase64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfBase64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfBase64Binary(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBase64Binary * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, Bsdrtmservice1__ArrayOfBase64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfBase64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfBase64Binary * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfBase64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfBase64Binary);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfBase64Binary);
		((Bsdrtmservice1__ArrayOfBase64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfBase64Binary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfBase64Binary);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfBase64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfBase64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfBase64Binary %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfBase64Binary*)p = *(Bsdrtmservice1__ArrayOfBase64Binary*)q;
}

void Bsdrtmservice1__OptResultOfArrayOfByte::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Msg);
	this->Bsdrtmservice1__OptResultOfArrayOfByte::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfArrayOfByte::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfArrayOfByte::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfArrayOfByte::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfArrayOfByte(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfArrayOfByte *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfArrayOfByte::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfArrayOfByte::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfArrayOfByte::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfArrayOfByte::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfArrayOfByte::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfArrayOfByte(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfArrayOfByte * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfArrayOfByte *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfArrayOfByte *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte, sizeof(Bsdrtmservice1__OptResultOfArrayOfByte), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfArrayOfByte *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfArrayOfByte::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfArrayOfByte::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfArrayOfByte::Data), "Bsdrtmservice1:ArrayOfBase64Binary"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfArrayOfByte::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfArrayOfByte *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte, 0, sizeof(Bsdrtmservice1__OptResultOfArrayOfByte), 0, soap_copy_Bsdrtmservice1__OptResultOfArrayOfByte);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfArrayOfByte::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfArrayOfByte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfArrayOfByte::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfArrayOfByte(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfArrayOfByte * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, Bsdrtmservice1__OptResultOfArrayOfByte *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfArrayOfByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfArrayOfByte * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfArrayOfByte(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfArrayOfByte);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfArrayOfByte);
		((Bsdrtmservice1__OptResultOfArrayOfByte*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfArrayOfByte[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfArrayOfByte);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfArrayOfByte*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfArrayOfByte*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfArrayOfByte %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfArrayOfByte*)p = *(Bsdrtmservice1__OptResultOfArrayOfByte*)q;
}

void Bsdrtmservice1__Attachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__Attachment::FileID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Attachment::FileName);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Attachment::State);
	soap_default_LONG64(soap, &this->Bsdrtmservice1__Attachment::Length);
	soap_default_std__string(soap, &this->Bsdrtmservice1__Attachment::SizeHtmlView);
	/* transient soap skipped */
}

void Bsdrtmservice1__Attachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__Attachment::FileID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Attachment::FileID);
	soap_embedded(soap, &this->Bsdrtmservice1__Attachment::FileName, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Attachment::FileName);
	soap_embedded(soap, &this->Bsdrtmservice1__Attachment::State, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Attachment::State);
	soap_embedded(soap, &this->Bsdrtmservice1__Attachment::Length, SOAP_TYPE_Bsdrtmservice_LONG64);
	soap_embedded(soap, &this->Bsdrtmservice1__Attachment::SizeHtmlView, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__Attachment::SizeHtmlView);
	/* transient soap skipped */
}

int Bsdrtmservice1__Attachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__Attachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__Attachment(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__Attachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FileID", -1, &(a->Bsdrtmservice1__Attachment::FileID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FileName", -1, &(a->Bsdrtmservice1__Attachment::FileName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:State", -1, &(a->Bsdrtmservice1__Attachment::State), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "Bsdrtmservice1:Length", -1, &(a->Bsdrtmservice1__Attachment::Length), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:SizeHtmlView", -1, &(a->Bsdrtmservice1__Attachment::SizeHtmlView), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__Attachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__Attachment(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__Attachment * SOAP_FMAC4 soap_in_Bsdrtmservice1__Attachment(struct soap *soap, const char *tag, Bsdrtmservice1__Attachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__Attachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment, sizeof(Bsdrtmservice1__Attachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__Attachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_FileID1 = 1;
	size_t soap_flag_FileName1 = 1;
	size_t soap_flag_State1 = 1;
	size_t soap_flag_Length1 = 1;
	size_t soap_flag_SizeHtmlView1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_FileID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FileID", &(a->Bsdrtmservice1__Attachment::FileID), "xsd:string"))
				{	soap_flag_FileID1--;
					continue;
				}
			if (soap_flag_FileName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FileName", &(a->Bsdrtmservice1__Attachment::FileName), "xsd:string"))
				{	soap_flag_FileName1--;
					continue;
				}
			if (soap_flag_State1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:State", &(a->Bsdrtmservice1__Attachment::State), "xsd:string"))
				{	soap_flag_State1--;
					continue;
				}
			if (soap_flag_Length1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "Bsdrtmservice1:Length", &(a->Bsdrtmservice1__Attachment::Length), "xsd:long"))
				{	soap_flag_Length1--;
					continue;
				}
			if (soap_flag_SizeHtmlView1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:SizeHtmlView", &(a->Bsdrtmservice1__Attachment::SizeHtmlView), "xsd:string"))
				{	soap_flag_SizeHtmlView1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__Attachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment, 0, sizeof(Bsdrtmservice1__Attachment), 0, soap_copy_Bsdrtmservice1__Attachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Length1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__Attachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:Attachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__Attachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__Attachment(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__Attachment * SOAP_FMAC4 soap_get_Bsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__Attachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__Attachment * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__Attachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__Attachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__Attachment);
		if (size)
			*size = sizeof(Bsdrtmservice1__Attachment);
		((Bsdrtmservice1__Attachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__Attachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__Attachment);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__Attachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__Attachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__Attachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__Attachment %p -> %p\n", q, p));
	*(Bsdrtmservice1__Attachment*)p = *(Bsdrtmservice1__Attachment*)q;
}

void Bsdrtmservice1__ArrayOfAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfAttachment::__sizeAttachment = 0;
	this->Bsdrtmservice1__ArrayOfAttachment::Attachment = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfAttachment::Attachment)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfAttachment::__sizeAttachment; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__Attachment(soap, this->Bsdrtmservice1__ArrayOfAttachment::Attachment + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfAttachment(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfAttachment::Attachment)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfAttachment::__sizeAttachment; i++)
			if (soap_out_PointerToBsdrtmservice1__Attachment(soap, "Bsdrtmservice1:Attachment", -1, a->Bsdrtmservice1__ArrayOfAttachment::Attachment + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfAttachment(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfAttachment * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfAttachment(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment, sizeof(Bsdrtmservice1__ArrayOfAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfAttachment *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Attachment1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:Attachment", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfAttachment::Attachment == NULL)
				{	if (soap_blist_Attachment1 == NULL)
						soap_blist_Attachment1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfAttachment::Attachment = (Bsdrtmservice1__Attachment **)soap_push_block(soap, soap_blist_Attachment1, sizeof(Bsdrtmservice1__Attachment *));
					if (a->Bsdrtmservice1__ArrayOfAttachment::Attachment == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfAttachment::Attachment = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__Attachment(soap, "Bsdrtmservice1:Attachment", a->Bsdrtmservice1__ArrayOfAttachment::Attachment, "Bsdrtmservice1:Attachment"))
				{	a->Bsdrtmservice1__ArrayOfAttachment::__sizeAttachment++;
					a->Bsdrtmservice1__ArrayOfAttachment::Attachment = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfAttachment::Attachment)
			soap_pop_block(soap, soap_blist_Attachment1);
		if (a->Bsdrtmservice1__ArrayOfAttachment::__sizeAttachment)
			a->Bsdrtmservice1__ArrayOfAttachment::Attachment = (Bsdrtmservice1__Attachment **)soap_save_block(soap, soap_blist_Attachment1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfAttachment::Attachment = NULL;
			if (soap_blist_Attachment1)
				soap_end_block(soap, soap_blist_Attachment1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment, 0, sizeof(Bsdrtmservice1__ArrayOfAttachment), 0, soap_copy_Bsdrtmservice1__ArrayOfAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfAttachment(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfAttachment * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfAttachment(struct soap *soap, Bsdrtmservice1__ArrayOfAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfAttachment * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfAttachment);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfAttachment);
		((Bsdrtmservice1__ArrayOfAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfAttachment);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfAttachment %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfAttachment*)p = *(Bsdrtmservice1__ArrayOfAttachment*)q;
}

void Bsdrtmservice1__OptResultOfAttachment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Msg);
	this->Bsdrtmservice1__OptResultOfAttachment::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfAttachment::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfAttachment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfAttachment(soap, &this->Bsdrtmservice1__OptResultOfAttachment::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfAttachment::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfAttachment::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfAttachment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfAttachment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfAttachment(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfAttachment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfAttachment::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfAttachment::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfAttachment(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfAttachment::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfAttachment::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfAttachment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfAttachment(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfAttachment * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfAttachment(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfAttachment *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfAttachment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment, sizeof(Bsdrtmservice1__OptResultOfAttachment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfAttachment *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfAttachment::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfAttachment::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfAttachment(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfAttachment::Data), "Bsdrtmservice1:ArrayOfAttachment"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfAttachment::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfAttachment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment, 0, sizeof(Bsdrtmservice1__OptResultOfAttachment), 0, soap_copy_Bsdrtmservice1__OptResultOfAttachment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfAttachment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfAttachment", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfAttachment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfAttachment(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfAttachment * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfAttachment(struct soap *soap, Bsdrtmservice1__OptResultOfAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfAttachment * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfAttachment);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfAttachment);
		((Bsdrtmservice1__OptResultOfAttachment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfAttachment);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfAttachment*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfAttachment %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfAttachment*)p = *(Bsdrtmservice1__OptResultOfAttachment*)q;
}

void Bsdrtmservice1__ArrayOfBoolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfBoolean::__sizeboolean = 0;
	this->Bsdrtmservice1__ArrayOfBoolean::boolean = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfBoolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfBoolean::boolean)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfBoolean::__sizeboolean; i++)
		{
			soap_embedded(soap, this->Bsdrtmservice1__ArrayOfBoolean::boolean + i, SOAP_TYPE_Bsdrtmservice_bool);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfBoolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfBoolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfBoolean(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfBoolean *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfBoolean::boolean)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfBoolean::__sizeboolean; i++)
			if (soap_out_bool(soap, "Bsdrtmservice1:boolean", -1, a->Bsdrtmservice1__ArrayOfBoolean::boolean + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfBoolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfBoolean(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBoolean * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfBoolean(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfBoolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfBoolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean, sizeof(Bsdrtmservice1__ArrayOfBoolean), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfBoolean *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_boolean1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:boolean", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfBoolean::boolean == NULL)
				{	if (soap_blist_boolean1 == NULL)
						soap_blist_boolean1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfBoolean::boolean = (bool *)soap_push_block(soap, soap_blist_boolean1, sizeof(bool));
					if (a->Bsdrtmservice1__ArrayOfBoolean::boolean == NULL)
						return NULL;
					soap_default_bool(soap, a->Bsdrtmservice1__ArrayOfBoolean::boolean);
				}
				soap_revert(soap);
				if (soap_in_bool(soap, "Bsdrtmservice1:boolean", a->Bsdrtmservice1__ArrayOfBoolean::boolean, "xsd:boolean"))
				{	a->Bsdrtmservice1__ArrayOfBoolean::__sizeboolean++;
					a->Bsdrtmservice1__ArrayOfBoolean::boolean = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfBoolean::boolean)
			soap_pop_block(soap, soap_blist_boolean1);
		if (a->Bsdrtmservice1__ArrayOfBoolean::__sizeboolean)
			a->Bsdrtmservice1__ArrayOfBoolean::boolean = (bool *)soap_save_block(soap, soap_blist_boolean1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfBoolean::boolean = NULL;
			if (soap_blist_boolean1)
				soap_end_block(soap, soap_blist_boolean1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfBoolean *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean, 0, sizeof(Bsdrtmservice1__ArrayOfBoolean), 0, soap_copy_Bsdrtmservice1__ArrayOfBoolean);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfBoolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfBoolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfBoolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfBoolean(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBoolean * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfBoolean(struct soap *soap, Bsdrtmservice1__ArrayOfBoolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfBoolean * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfBoolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfBoolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfBoolean);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfBoolean);
		((Bsdrtmservice1__ArrayOfBoolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfBoolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfBoolean);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfBoolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfBoolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfBoolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfBoolean %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfBoolean*)p = *(Bsdrtmservice1__ArrayOfBoolean*)q;
}

void Bsdrtmservice1__OptResultOfBoolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Msg);
	this->Bsdrtmservice1__OptResultOfBoolean::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfBoolean::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfBoolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfBoolean(soap, &this->Bsdrtmservice1__OptResultOfBoolean::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfBoolean::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfBoolean::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfBoolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfBoolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfBoolean(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfBoolean *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfBoolean::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfBoolean::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfBoolean(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfBoolean::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfBoolean::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfBoolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfBoolean(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfBoolean * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfBoolean(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfBoolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfBoolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean, sizeof(Bsdrtmservice1__OptResultOfBoolean), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfBoolean *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfBoolean::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfBoolean::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfBoolean(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfBoolean::Data), "Bsdrtmservice1:ArrayOfBoolean"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfBoolean::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfBoolean *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean, 0, sizeof(Bsdrtmservice1__OptResultOfBoolean), 0, soap_copy_Bsdrtmservice1__OptResultOfBoolean);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfBoolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfBoolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfBoolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfBoolean(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfBoolean * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfBoolean(struct soap *soap, Bsdrtmservice1__OptResultOfBoolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfBoolean * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfBoolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfBoolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfBoolean);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfBoolean);
		((Bsdrtmservice1__OptResultOfBoolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfBoolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfBoolean);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfBoolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfBoolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfBoolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfBoolean %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfBoolean*)p = *(Bsdrtmservice1__OptResultOfBoolean*)q;
}

void Bsdrtmservice1__ArrayOfLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfLong::__sizelong_ = 0;
	this->Bsdrtmservice1__ArrayOfLong::long_ = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfLong::long_)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfLong::__sizelong_; i++)
		{
			soap_embedded(soap, this->Bsdrtmservice1__ArrayOfLong::long_ + i, SOAP_TYPE_Bsdrtmservice_LONG64);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfLong(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfLong *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfLong::long_)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfLong::__sizelong_; i++)
			if (soap_out_LONG64(soap, "Bsdrtmservice1:long", -1, a->Bsdrtmservice1__ArrayOfLong::long_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfLong(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfLong * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfLong(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfLong *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfLong *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong, sizeof(Bsdrtmservice1__ArrayOfLong), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfLong *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_long_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:long", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfLong::long_ == NULL)
				{	if (soap_blist_long_1 == NULL)
						soap_blist_long_1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfLong::long_ = (LONG64 *)soap_push_block(soap, soap_blist_long_1, sizeof(LONG64));
					if (a->Bsdrtmservice1__ArrayOfLong::long_ == NULL)
						return NULL;
					soap_default_LONG64(soap, a->Bsdrtmservice1__ArrayOfLong::long_);
				}
				soap_revert(soap);
				if (soap_in_LONG64(soap, "Bsdrtmservice1:long", a->Bsdrtmservice1__ArrayOfLong::long_, "xsd:long"))
				{	a->Bsdrtmservice1__ArrayOfLong::__sizelong_++;
					a->Bsdrtmservice1__ArrayOfLong::long_ = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfLong::long_)
			soap_pop_block(soap, soap_blist_long_1);
		if (a->Bsdrtmservice1__ArrayOfLong::__sizelong_)
			a->Bsdrtmservice1__ArrayOfLong::long_ = (LONG64 *)soap_save_block(soap, soap_blist_long_1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfLong::long_ = NULL;
			if (soap_blist_long_1)
				soap_end_block(soap, soap_blist_long_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfLong *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong, 0, sizeof(Bsdrtmservice1__ArrayOfLong), 0, soap_copy_Bsdrtmservice1__ArrayOfLong);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfLong", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfLong(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfLong * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfLong(struct soap *soap, Bsdrtmservice1__ArrayOfLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfLong * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfLong(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfLong);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfLong);
		((Bsdrtmservice1__ArrayOfLong*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfLong[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfLong);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfLong*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfLong*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfLong(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfLong %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfLong*)p = *(Bsdrtmservice1__ArrayOfLong*)q;
}

void Bsdrtmservice1__ArrayOfRtmMonReportEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmMonReportEntity::__sizeRtmMonReportEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmMonReportEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmMonReportEntity::__sizeRtmMonReportEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmMonReportEntity(soap, this->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmMonReportEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmMonReportEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::__sizeRtmMonReportEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmMonReportEntity(soap, "Bsdrtmservice1:RtmMonReportEntity", -1, a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmMonReportEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonReportEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMonReportEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmMonReportEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMonReportEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmMonReportEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmMonReportEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmMonReportEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity == NULL)
				{	if (soap_blist_RtmMonReportEntity1 == NULL)
						soap_blist_RtmMonReportEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity = (Bsdrtmservice1__RtmMonReportEntity **)soap_push_block(soap, soap_blist_RtmMonReportEntity1, sizeof(Bsdrtmservice1__RtmMonReportEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmMonReportEntity(soap, "Bsdrtmservice1:RtmMonReportEntity", a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity, "Bsdrtmservice1:RtmMonReportEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::__sizeRtmMonReportEntity++;
					a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity)
			soap_pop_block(soap, soap_blist_RtmMonReportEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::__sizeRtmMonReportEntity)
			a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity = (Bsdrtmservice1__RtmMonReportEntity **)soap_save_block(soap, soap_blist_RtmMonReportEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmMonReportEntity::RtmMonReportEntity = NULL;
			if (soap_blist_RtmMonReportEntity1)
				soap_end_block(soap, soap_blist_RtmMonReportEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmMonReportEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmMonReportEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmMonReportEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmMonReportEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMonReportEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmMonReportEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonReportEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonReportEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmMonReportEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonReportEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMonReportEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmMonReportEntity);
		((Bsdrtmservice1__ArrayOfRtmMonReportEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMonReportEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmMonReportEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmMonReportEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmMonReportEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmMonReportEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmMonReportEntity*)p = *(Bsdrtmservice1__ArrayOfRtmMonReportEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmMonReportEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmMonReportEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonReportEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmMonReportEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmMonReportEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmMonReportEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonReportEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMonReportEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmMonReportEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMonReportEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmMonReportEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::Data), "Bsdrtmservice1:ArrayOfRtmMonReportEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmMonReportEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmMonReportEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmMonReportEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmMonReportEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmMonReportEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMonReportEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmMonReportEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonReportEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonReportEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmMonReportEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonReportEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMonReportEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmMonReportEntity);
		((Bsdrtmservice1__OptResultOfRtmMonReportEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMonReportEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmMonReportEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmMonReportEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmMonReportEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmMonReportEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmMonReportEntity*)p = *(Bsdrtmservice1__OptResultOfRtmMonReportEntity*)q;
}

void Bsdrtmservice1__RtmMonReportEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Reportuid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monstationno);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Freq);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Montime);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Fieldstrength);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Azimuth);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Spectrumtype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Layoutdesc);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monband);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Used);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Userreport);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Availdate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Confirmed);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Confirmdate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monempno);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMonReportEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Reportuid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Reportuid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monstationno);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Freq);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Fieldstrength);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Azimuth);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Spectrumtype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Spectrumtype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Layoutdesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Layoutdesc);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monband);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Used, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Used);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Userreport, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Userreport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Confirmed, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Confirmed);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monempno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonReportEntity::Monempno);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMonReportEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMonReportEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMonReportEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMonReportEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Reportuid", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Reportuid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Freq", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Freq), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Montime", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Montime), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Fieldstrength", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Fieldstrength), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Azimuth", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Azimuth), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Spectrumtype", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Spectrumtype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Layoutdesc", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Layoutdesc), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Monband", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Monband), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Used", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Used), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Userreport", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Userreport), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Availdate", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Availdate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Confirmed", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Confirmed), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Confirmdate", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Confirmdate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monempno", -1, &(a->Bsdrtmservice1__RtmMonReportEntity::Monempno), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMonReportEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMonReportEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonReportEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonReportEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMonReportEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity, sizeof(Bsdrtmservice1__RtmMonReportEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMonReportEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Reportuid1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Freq1 = 1;
	size_t soap_flag_Montime1 = 1;
	size_t soap_flag_Fieldstrength1 = 1;
	size_t soap_flag_Azimuth1 = 1;
	size_t soap_flag_Spectrumtype1 = 1;
	size_t soap_flag_Layoutdesc1 = 1;
	size_t soap_flag_Monband1 = 1;
	size_t soap_flag_Used1 = 1;
	size_t soap_flag_Userreport1 = 1;
	size_t soap_flag_Availdate1 = 1;
	size_t soap_flag_Confirmed1 = 1;
	size_t soap_flag_Confirmdate1 = 1;
	size_t soap_flag_Monempno1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Reportuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Reportuid", &(a->Bsdrtmservice1__RtmMonReportEntity::Reportuid), "xsd:string"))
				{	soap_flag_Reportuid1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMonReportEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Freq1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Freq", &(a->Bsdrtmservice1__RtmMonReportEntity::Freq), "xsd:decimal"))
				{	soap_flag_Freq1--;
					continue;
				}
			if (soap_flag_Montime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Montime", &(a->Bsdrtmservice1__RtmMonReportEntity::Montime), "xsd:dateTime"))
				{	soap_flag_Montime1--;
					continue;
				}
			if (soap_flag_Fieldstrength1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Fieldstrength", &(a->Bsdrtmservice1__RtmMonReportEntity::Fieldstrength), "xsd:decimal"))
				{	soap_flag_Fieldstrength1--;
					continue;
				}
			if (soap_flag_Azimuth1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Azimuth", &(a->Bsdrtmservice1__RtmMonReportEntity::Azimuth), "xsd:decimal"))
				{	soap_flag_Azimuth1--;
					continue;
				}
			if (soap_flag_Spectrumtype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Spectrumtype", &(a->Bsdrtmservice1__RtmMonReportEntity::Spectrumtype), "xsd:string"))
				{	soap_flag_Spectrumtype1--;
					continue;
				}
			if (soap_flag_Layoutdesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Layoutdesc", &(a->Bsdrtmservice1__RtmMonReportEntity::Layoutdesc), "xsd:string"))
				{	soap_flag_Layoutdesc1--;
					continue;
				}
			if (soap_flag_Monband1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Monband", &(a->Bsdrtmservice1__RtmMonReportEntity::Monband), "xsd:decimal"))
				{	soap_flag_Monband1--;
					continue;
				}
			if (soap_flag_Used1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Used", &(a->Bsdrtmservice1__RtmMonReportEntity::Used), "xsd:string"))
				{	soap_flag_Used1--;
					continue;
				}
			if (soap_flag_Userreport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Userreport", &(a->Bsdrtmservice1__RtmMonReportEntity::Userreport), "xsd:string"))
				{	soap_flag_Userreport1--;
					continue;
				}
			if (soap_flag_Availdate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Availdate", &(a->Bsdrtmservice1__RtmMonReportEntity::Availdate), "xsd:dateTime"))
				{	soap_flag_Availdate1--;
					continue;
				}
			if (soap_flag_Confirmed1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Confirmed", &(a->Bsdrtmservice1__RtmMonReportEntity::Confirmed), "xsd:string"))
				{	soap_flag_Confirmed1--;
					continue;
				}
			if (soap_flag_Confirmdate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Confirmdate", &(a->Bsdrtmservice1__RtmMonReportEntity::Confirmdate), "xsd:dateTime"))
				{	soap_flag_Confirmdate1--;
					continue;
				}
			if (soap_flag_Monempno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monempno", &(a->Bsdrtmservice1__RtmMonReportEntity::Monempno), "xsd:string"))
				{	soap_flag_Monempno1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonReportEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity, 0, sizeof(Bsdrtmservice1__RtmMonReportEntity), 0, soap_copy_Bsdrtmservice1__RtmMonReportEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Freq1 > 0 || soap_flag_Montime1 > 0 || soap_flag_Fieldstrength1 > 0 || soap_flag_Azimuth1 > 0 || soap_flag_Monband1 > 0 || soap_flag_Availdate1 > 0 || soap_flag_Confirmdate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMonReportEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMonReportEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMonReportEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMonReportEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonReportEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMonReportEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMonReportEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMonReportEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonReportEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMonReportEntity);
		((Bsdrtmservice1__RtmMonReportEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonReportEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMonReportEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMonReportEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMonReportEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMonReportEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMonReportEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMonReportEntity*)p = *(Bsdrtmservice1__RtmMonReportEntity*)q;
}

void Bsdrtmservice1__RtmPredefinedMonitorEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::MonUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monname);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Createtime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Funno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Creator);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monconfig);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devparam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmPredefinedMonitorEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::MonUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Funno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Funno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Creator, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Creator);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monconfig, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monconfig);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devparam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devparam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmPredefinedMonitorEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmPredefinedMonitorEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmPredefinedMonitorEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:MonUID", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::MonUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monname", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monname), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Createtime", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Createtime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funno", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Funno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Creator", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Creator), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monconfig", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monconfig), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devparam", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devparam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmPredefinedMonitorEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmPredefinedMonitorEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmPredefinedMonitorEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmPredefinedMonitorEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmPredefinedMonitorEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_MonUID1 = 1;
	size_t soap_flag_Monname1 = 1;
	size_t soap_flag_Createtime1 = 1;
	size_t soap_flag_Funno1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Creator1 = 1;
	size_t soap_flag_Monconfig1 = 1;
	size_t soap_flag_Devparam1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MonUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:MonUID", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::MonUID), "xsd:decimal"))
				{	soap_flag_MonUID1--;
					continue;
				}
			if (soap_flag_Monname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monname", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monname), "xsd:string"))
				{	soap_flag_Monname1--;
					continue;
				}
			if (soap_flag_Createtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Createtime", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Createtime), "xsd:dateTime"))
				{	soap_flag_Createtime1--;
					continue;
				}
			if (soap_flag_Funno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funno", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Funno), "xsd:string"))
				{	soap_flag_Funno1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Creator1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Creator", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Creator), "xsd:string"))
				{	soap_flag_Creator1--;
					continue;
				}
			if (soap_flag_Monconfig1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monconfig", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Monconfig), "xsd:string"))
				{	soap_flag_Monconfig1--;
					continue;
				}
			if (soap_flag_Devparam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devparam", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Devparam), "xsd:string"))
				{	soap_flag_Devparam1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmPredefinedMonitorEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmPredefinedMonitorEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity, 0, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity), 0, soap_copy_Bsdrtmservice1__RtmPredefinedMonitorEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_MonUID1 > 0 || soap_flag_Createtime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmPredefinedMonitorEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmPredefinedMonitorEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmPredefinedMonitorEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmPredefinedMonitorEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmPredefinedMonitorEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmPredefinedMonitorEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmPredefinedMonitorEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity);
		((Bsdrtmservice1__RtmPredefinedMonitorEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmPredefinedMonitorEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmPredefinedMonitorEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmPredefinedMonitorEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmPredefinedMonitorEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmPredefinedMonitorEntity*)p = *(Bsdrtmservice1__RtmPredefinedMonitorEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::__sizeRtmPredefinedMonitorEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::__sizeRtmPredefinedMonitorEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, this->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::__sizeRtmPredefinedMonitorEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, "Bsdrtmservice1:RtmPredefinedMonitorEntity", -1, a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmPredefinedMonitorEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmPredefinedMonitorEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity == NULL)
				{	if (soap_blist_RtmPredefinedMonitorEntity1 == NULL)
						soap_blist_RtmPredefinedMonitorEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity = (Bsdrtmservice1__RtmPredefinedMonitorEntity **)soap_push_block(soap, soap_blist_RtmPredefinedMonitorEntity1, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, "Bsdrtmservice1:RtmPredefinedMonitorEntity", a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity, "Bsdrtmservice1:RtmPredefinedMonitorEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::__sizeRtmPredefinedMonitorEntity++;
					a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity)
			soap_pop_block(soap, soap_blist_RtmPredefinedMonitorEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::__sizeRtmPredefinedMonitorEntity)
			a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity = (Bsdrtmservice1__RtmPredefinedMonitorEntity **)soap_save_block(soap, soap_blist_RtmPredefinedMonitorEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::RtmPredefinedMonitorEntity = NULL;
			if (soap_blist_RtmPredefinedMonitorEntity1)
				soap_end_block(soap, soap_blist_RtmPredefinedMonitorEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
		((Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)p = *(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::Data), "Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
		((Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)p = *(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmMonAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::__sizeRtmMonAlertEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmMonAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::__sizeRtmMonAlertEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, this->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmMonAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmMonAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::__sizeRtmMonAlertEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, "Bsdrtmservice1:RtmMonAlertEntity", -1, a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmMonAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonAlertEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMonAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmMonAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMonAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmMonAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmMonAlertEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmMonAlertEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity == NULL)
				{	if (soap_blist_RtmMonAlertEntity1 == NULL)
						soap_blist_RtmMonAlertEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity = (Bsdrtmservice1__RtmMonAlertEntity **)soap_push_block(soap, soap_blist_RtmMonAlertEntity1, sizeof(Bsdrtmservice1__RtmMonAlertEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, "Bsdrtmservice1:RtmMonAlertEntity", a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity, "Bsdrtmservice1:RtmMonAlertEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::__sizeRtmMonAlertEntity++;
					a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity)
			soap_pop_block(soap, soap_blist_RtmMonAlertEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::__sizeRtmMonAlertEntity)
			a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity = (Bsdrtmservice1__RtmMonAlertEntity **)soap_save_block(soap, soap_blist_RtmMonAlertEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmMonAlertEntity::RtmMonAlertEntity = NULL;
			if (soap_blist_RtmMonAlertEntity1)
				soap_end_block(soap, soap_blist_RtmMonAlertEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmMonAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmMonAlertEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmMonAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmMonAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMonAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmMonAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonAlertEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmMonAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMonAlertEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmMonAlertEntity);
		((Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMonAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmMonAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmMonAlertEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)p = *(Bsdrtmservice1__ArrayOfRtmMonAlertEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmMonAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmMonAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmMonAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmMonAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmMonAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonAlertEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMonAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmMonAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMonAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmMonAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::Data), "Bsdrtmservice1:ArrayOfRtmMonAlertEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmMonAlertEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmMonAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmMonAlertEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmMonAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmMonAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMonAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmMonAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonAlertEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmMonAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMonAlertEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmMonAlertEntity);
		((Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMonAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmMonAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmMonAlertEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)p = *(Bsdrtmservice1__OptResultOfRtmMonAlertEntity*)q;
}

void Bsdrtmservice1__RtmMonAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::AlertUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Devno);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Freq);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::AlertBand);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Stfield);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Alertdate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Content);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Userid);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMonAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::AlertUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::AlertUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Devno);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Freq);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::AlertBand);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Stfield);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Content, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Content);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Userid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonAlertEntity::Userid);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMonAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMonAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMonAlertEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMonAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:AlertUID", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::AlertUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Devno), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Freq", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Freq), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:AlertBand", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::AlertBand), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Stfield", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Stfield), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Alertdate", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Alertdate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Content", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Content), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Userid", -1, &(a->Bsdrtmservice1__RtmMonAlertEntity::Userid), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMonAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMonAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonAlertEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMonAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity, sizeof(Bsdrtmservice1__RtmMonAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMonAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AlertUID1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Freq1 = 1;
	size_t soap_flag_AlertBand1 = 1;
	size_t soap_flag_Stfield1 = 1;
	size_t soap_flag_Alertdate1 = 1;
	size_t soap_flag_Content1 = 1;
	size_t soap_flag_Userid1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AlertUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:AlertUID", &(a->Bsdrtmservice1__RtmMonAlertEntity::AlertUID), "xsd:string"))
				{	soap_flag_AlertUID1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMonAlertEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmMonAlertEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Freq1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Freq", &(a->Bsdrtmservice1__RtmMonAlertEntity::Freq), "xsd:decimal"))
				{	soap_flag_Freq1--;
					continue;
				}
			if (soap_flag_AlertBand1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:AlertBand", &(a->Bsdrtmservice1__RtmMonAlertEntity::AlertBand), "xsd:decimal"))
				{	soap_flag_AlertBand1--;
					continue;
				}
			if (soap_flag_Stfield1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Stfield", &(a->Bsdrtmservice1__RtmMonAlertEntity::Stfield), "xsd:decimal"))
				{	soap_flag_Stfield1--;
					continue;
				}
			if (soap_flag_Alertdate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Alertdate", &(a->Bsdrtmservice1__RtmMonAlertEntity::Alertdate), "xsd:dateTime"))
				{	soap_flag_Alertdate1--;
					continue;
				}
			if (soap_flag_Content1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Content", &(a->Bsdrtmservice1__RtmMonAlertEntity::Content), "xsd:string"))
				{	soap_flag_Content1--;
					continue;
				}
			if (soap_flag_Userid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Userid", &(a->Bsdrtmservice1__RtmMonAlertEntity::Userid), "xsd:string"))
				{	soap_flag_Userid1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity, 0, sizeof(Bsdrtmservice1__RtmMonAlertEntity), 0, soap_copy_Bsdrtmservice1__RtmMonAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Freq1 > 0 || soap_flag_AlertBand1 > 0 || soap_flag_Stfield1 > 0 || soap_flag_Alertdate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMonAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMonAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMonAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMonAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonAlertEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMonAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMonAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMonAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonAlertEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMonAlertEntity);
		((Bsdrtmservice1__RtmMonAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMonAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMonAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMonAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMonAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMonAlertEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMonAlertEntity*)p = *(Bsdrtmservice1__RtmMonAlertEntity*)q;
}

void Bsdrtmservice1__RtmMonTaskLogEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Taskuid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Logtype);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Logtime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Content);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMonTaskLogEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Taskuid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Logtype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Logtype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Content, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskLogEntity::Content);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMonTaskLogEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMonTaskLogEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMonTaskLogEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Taskuid", -1, &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Taskuid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Logtype", -1, &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Logtype), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Logtime", -1, &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Logtime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Content", -1, &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Content), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMonTaskLogEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMonTaskLogEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonTaskLogEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonTaskLogEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMonTaskLogEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity, sizeof(Bsdrtmservice1__RtmMonTaskLogEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMonTaskLogEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Taskuid1 = 1;
	size_t soap_flag_Logtype1 = 1;
	size_t soap_flag_Logtime1 = 1;
	size_t soap_flag_Content1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Taskuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Taskuid", &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Taskuid), "xsd:decimal"))
				{	soap_flag_Taskuid1--;
					continue;
				}
			if (soap_flag_Logtype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Logtype", &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Logtype), "xsd:string"))
				{	soap_flag_Logtype1--;
					continue;
				}
			if (soap_flag_Logtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Logtime", &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Logtime), "xsd:dateTime"))
				{	soap_flag_Logtime1--;
					continue;
				}
			if (soap_flag_Content1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Content", &(a->Bsdrtmservice1__RtmMonTaskLogEntity::Content), "xsd:string"))
				{	soap_flag_Content1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonTaskLogEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity, 0, sizeof(Bsdrtmservice1__RtmMonTaskLogEntity), 0, soap_copy_Bsdrtmservice1__RtmMonTaskLogEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Taskuid1 > 0 || soap_flag_Logtime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMonTaskLogEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMonTaskLogEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMonTaskLogEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMonTaskLogEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonTaskLogEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, Bsdrtmservice1__RtmMonTaskLogEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMonTaskLogEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMonTaskLogEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMonTaskLogEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonTaskLogEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMonTaskLogEntity);
		((Bsdrtmservice1__RtmMonTaskLogEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonTaskLogEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMonTaskLogEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMonTaskLogEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMonTaskLogEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMonTaskLogEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMonTaskLogEntity*)p = *(Bsdrtmservice1__RtmMonTaskLogEntity*)q;
}

void Bsdrtmservice1__RtmMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskuid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Curtel);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstartdate);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monenddate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Funno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devparam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monconfig);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskstate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Statedesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::MonType);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskuid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Curtel, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Curtel);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Funno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Funno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devparam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devparam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monconfig, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monconfig);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskstate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskstate);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Statedesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Statedesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::MonType, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::MonType);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Taskuid", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskuid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskname", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Curtel", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Curtel), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Monstartdate", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstartdate), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Monenddate", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monenddate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Tasktypeid", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Devno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funno", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Funno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devparam", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Devparam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monconfig", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monconfig), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskdesc", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskstate", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskstate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Statedesc", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Statedesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Arrowrun", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonType", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::MonType), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity, sizeof(Bsdrtmservice1__RtmMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Taskuid1 = 1;
	size_t soap_flag_Taskname1 = 1;
	size_t soap_flag_Curtel1 = 1;
	size_t soap_flag_Monstartdate1 = 1;
	size_t soap_flag_Monenddate1 = 1;
	size_t soap_flag_Tasktypeid1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Funno1 = 1;
	size_t soap_flag_Devparam1 = 1;
	size_t soap_flag_Monconfig1 = 1;
	size_t soap_flag_Taskdesc1 = 1;
	size_t soap_flag_Taskstate1 = 1;
	size_t soap_flag_Statedesc1 = 1;
	size_t soap_flag_Arrowrun1 = 1;
	size_t soap_flag_MonType1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Taskuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Taskuid", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskuid), "xsd:decimal"))
				{	soap_flag_Taskuid1--;
					continue;
				}
			if (soap_flag_Taskname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskname", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskname), "xsd:string"))
				{	soap_flag_Taskname1--;
					continue;
				}
			if (soap_flag_Curtel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Curtel", &(a->Bsdrtmservice1__RtmMonTaskEntity::Curtel), "xsd:string"))
				{	soap_flag_Curtel1--;
					continue;
				}
			if (soap_flag_Monstartdate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Monstartdate", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstartdate), "xsd:dateTime"))
				{	soap_flag_Monstartdate1--;
					continue;
				}
			if (soap_flag_Monenddate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Monenddate", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monenddate), "xsd:dateTime"))
				{	soap_flag_Monenddate1--;
					continue;
				}
			if (soap_flag_Tasktypeid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Tasktypeid", &(a->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid), "xsd:string"))
				{	soap_flag_Tasktypeid1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmMonTaskEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Funno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funno", &(a->Bsdrtmservice1__RtmMonTaskEntity::Funno), "xsd:string"))
				{	soap_flag_Funno1--;
					continue;
				}
			if (soap_flag_Devparam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devparam", &(a->Bsdrtmservice1__RtmMonTaskEntity::Devparam), "xsd:string"))
				{	soap_flag_Devparam1--;
					continue;
				}
			if (soap_flag_Monconfig1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monconfig", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monconfig), "xsd:string"))
				{	soap_flag_Monconfig1--;
					continue;
				}
			if (soap_flag_Taskdesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskdesc", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc), "xsd:string"))
				{	soap_flag_Taskdesc1--;
					continue;
				}
			if (soap_flag_Taskstate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskstate", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskstate), "xsd:string"))
				{	soap_flag_Taskstate1--;
					continue;
				}
			if (soap_flag_Statedesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Statedesc", &(a->Bsdrtmservice1__RtmMonTaskEntity::Statedesc), "xsd:string"))
				{	soap_flag_Statedesc1--;
					continue;
				}
			if (soap_flag_Arrowrun1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Arrowrun", &(a->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun), "xsd:string"))
				{	soap_flag_Arrowrun1--;
					continue;
				}
			if (soap_flag_MonType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonType", &(a->Bsdrtmservice1__RtmMonTaskEntity::MonType), "xsd:string"))
				{	soap_flag_MonType1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity, 0, sizeof(Bsdrtmservice1__RtmMonTaskEntity), 0, soap_copy_Bsdrtmservice1__RtmMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Taskuid1 > 0 || soap_flag_Monstartdate1 > 0 || soap_flag_Monenddate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__RtmMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:VRtmMonTaskEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmMonTaskEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__VRtmMonTaskEntity);
			((Bsdrtmservice1__VRtmMonTaskEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmMonTaskEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__VRtmMonTaskEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__VRtmMonTaskEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__VRtmMonTaskEntity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMonTaskEntity);
		((Bsdrtmservice1__RtmMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMonTaskEntity*)p = *(Bsdrtmservice1__RtmMonTaskEntity*)q;
}

void Bsdrtmservice1__VRtmMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Username);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Name);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Tasktype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstationname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Funname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Arrowrunname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Taskstatename);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devuid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Serviceip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Serviceport);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devprotocol);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devmodeluid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devmodelname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstartdatename);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monenddatename);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstarttimename);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monendtimename);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskuid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Curtel);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstartdate);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monenddate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Funno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devparam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monconfig);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskstate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Statedesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::MonType);
	/* transient soap skipped */
}

void Bsdrtmservice1__VRtmMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Username, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Username);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Name, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Name);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Tasktype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Tasktype);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstationname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstationname);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devname);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Funname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Funname);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Arrowrunname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Arrowrunname);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Taskstatename, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Taskstatename);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devuid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devuid);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Serviceip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Serviceip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Serviceport);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devprotocol);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devmodeluid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devmodeluid);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devmodelname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Devmodelname);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstartdatename, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstartdatename);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monenddatename, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monenddatename);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstarttimename, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monstarttimename);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monendtimename, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmMonTaskEntity::Monendtimename);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskuid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Curtel, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Curtel);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Funno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Funno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devparam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Devparam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monconfig, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Monconfig);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskstate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Taskstate);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Statedesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Statedesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::MonType, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonTaskEntity::MonType);
	/* transient soap skipped */
}

int Bsdrtmservice1__VRtmMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__VRtmMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__VRtmMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity), "Bsdrtmservice1:VRtmMonTaskEntity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Taskuid", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskuid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskname", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Curtel", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Curtel), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Monstartdate", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstartdate), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Monenddate", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monenddate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Tasktypeid", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Devno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funno", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Funno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devparam", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Devparam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monconfig", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Monconfig), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskdesc", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskstate", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskstate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Statedesc", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Statedesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Arrowrun", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:MonType", -1, &(a->Bsdrtmservice1__RtmMonTaskEntity::MonType), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:Username", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Name", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Tasktype", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Tasktype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationname", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monstationname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devname", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funname", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Funname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Arrowrunname", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Arrowrunname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Taskstatename", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Taskstatename), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devuid", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devuid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Serviceip", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Serviceip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Serviceport", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Serviceport), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Devprotocol", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devprotocol), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devmodeluid", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devmodeluid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devmodelname", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devmodelname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstartdatename", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monstartdatename), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monenddatename", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monenddatename), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstarttimename", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monstarttimename), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monendtimename", -1, &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monendtimename), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__VRtmMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__VRtmMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__VRtmMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__VRtmMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity, sizeof(Bsdrtmservice1__VRtmMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__VRtmMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Taskuid2 = 1;
	size_t soap_flag_Taskname2 = 1;
	size_t soap_flag_Curtel2 = 1;
	size_t soap_flag_Monstartdate2 = 1;
	size_t soap_flag_Monenddate2 = 1;
	size_t soap_flag_Tasktypeid2 = 1;
	size_t soap_flag_Monstationno2 = 1;
	size_t soap_flag_Devno2 = 1;
	size_t soap_flag_Funno2 = 1;
	size_t soap_flag_Devparam2 = 1;
	size_t soap_flag_Monconfig2 = 1;
	size_t soap_flag_Taskdesc2 = 1;
	size_t soap_flag_Taskstate2 = 1;
	size_t soap_flag_Statedesc2 = 1;
	size_t soap_flag_Arrowrun2 = 1;
	size_t soap_flag_MonType2 = 1;
	size_t soap_flag_Username1 = 1;
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Tasktype1 = 1;
	size_t soap_flag_Monstationname1 = 1;
	size_t soap_flag_Devname1 = 1;
	size_t soap_flag_Funname1 = 1;
	size_t soap_flag_Arrowrunname1 = 1;
	size_t soap_flag_Taskstatename1 = 1;
	size_t soap_flag_Devuid1 = 1;
	size_t soap_flag_Serviceip1 = 1;
	size_t soap_flag_Serviceport1 = 1;
	size_t soap_flag_Devprotocol1 = 1;
	size_t soap_flag_Devmodeluid1 = 1;
	size_t soap_flag_Devmodelname1 = 1;
	size_t soap_flag_Monstartdatename1 = 1;
	size_t soap_flag_Monenddatename1 = 1;
	size_t soap_flag_Monstarttimename1 = 1;
	size_t soap_flag_Monendtimename1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Taskuid2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Taskuid", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskuid), "xsd:decimal"))
				{	soap_flag_Taskuid2--;
					continue;
				}
			if (soap_flag_Taskname2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskname", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskname), "xsd:string"))
				{	soap_flag_Taskname2--;
					continue;
				}
			if (soap_flag_Curtel2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Curtel", &(a->Bsdrtmservice1__RtmMonTaskEntity::Curtel), "xsd:string"))
				{	soap_flag_Curtel2--;
					continue;
				}
			if (soap_flag_Monstartdate2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Monstartdate", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstartdate), "xsd:dateTime"))
				{	soap_flag_Monstartdate2--;
					continue;
				}
			if (soap_flag_Monenddate2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Monenddate", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monenddate), "xsd:dateTime"))
				{	soap_flag_Monenddate2--;
					continue;
				}
			if (soap_flag_Tasktypeid2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Tasktypeid", &(a->Bsdrtmservice1__RtmMonTaskEntity::Tasktypeid), "xsd:string"))
				{	soap_flag_Tasktypeid2--;
					continue;
				}
			if (soap_flag_Monstationno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno2--;
					continue;
				}
			if (soap_flag_Devno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmMonTaskEntity::Devno), "xsd:string"))
				{	soap_flag_Devno2--;
					continue;
				}
			if (soap_flag_Funno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funno", &(a->Bsdrtmservice1__RtmMonTaskEntity::Funno), "xsd:string"))
				{	soap_flag_Funno2--;
					continue;
				}
			if (soap_flag_Devparam2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devparam", &(a->Bsdrtmservice1__RtmMonTaskEntity::Devparam), "xsd:string"))
				{	soap_flag_Devparam2--;
					continue;
				}
			if (soap_flag_Monconfig2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monconfig", &(a->Bsdrtmservice1__RtmMonTaskEntity::Monconfig), "xsd:string"))
				{	soap_flag_Monconfig2--;
					continue;
				}
			if (soap_flag_Taskdesc2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskdesc", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskdesc), "xsd:string"))
				{	soap_flag_Taskdesc2--;
					continue;
				}
			if (soap_flag_Taskstate2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskstate", &(a->Bsdrtmservice1__RtmMonTaskEntity::Taskstate), "xsd:string"))
				{	soap_flag_Taskstate2--;
					continue;
				}
			if (soap_flag_Statedesc2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Statedesc", &(a->Bsdrtmservice1__RtmMonTaskEntity::Statedesc), "xsd:string"))
				{	soap_flag_Statedesc2--;
					continue;
				}
			if (soap_flag_Arrowrun2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Arrowrun", &(a->Bsdrtmservice1__RtmMonTaskEntity::Arrowrun), "xsd:string"))
				{	soap_flag_Arrowrun2--;
					continue;
				}
			if (soap_flag_MonType2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:MonType", &(a->Bsdrtmservice1__RtmMonTaskEntity::MonType), "xsd:string"))
				{	soap_flag_MonType2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Username", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Username), "xsd:string"))
				{	soap_flag_Username1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Name", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Tasktype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Tasktype", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Tasktype), "xsd:string"))
				{	soap_flag_Tasktype1--;
					continue;
				}
			if (soap_flag_Monstationname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationname", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monstationname), "xsd:string"))
				{	soap_flag_Monstationname1--;
					continue;
				}
			if (soap_flag_Devname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devname", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devname), "xsd:string"))
				{	soap_flag_Devname1--;
					continue;
				}
			if (soap_flag_Funname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funname", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Funname), "xsd:string"))
				{	soap_flag_Funname1--;
					continue;
				}
			if (soap_flag_Arrowrunname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Arrowrunname", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Arrowrunname), "xsd:string"))
				{	soap_flag_Arrowrunname1--;
					continue;
				}
			if (soap_flag_Taskstatename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Taskstatename", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Taskstatename), "xsd:string"))
				{	soap_flag_Taskstatename1--;
					continue;
				}
			if (soap_flag_Devuid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devuid", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devuid), "xsd:string"))
				{	soap_flag_Devuid1--;
					continue;
				}
			if (soap_flag_Serviceip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Serviceip", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Serviceip), "xsd:string"))
				{	soap_flag_Serviceip1--;
					continue;
				}
			if (soap_flag_Serviceport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Serviceport", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Serviceport), "xsd:decimal"))
				{	soap_flag_Serviceport1--;
					continue;
				}
			if (soap_flag_Devprotocol1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Devprotocol", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devprotocol), "xsd:decimal"))
				{	soap_flag_Devprotocol1--;
					continue;
				}
			if (soap_flag_Devmodeluid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devmodeluid", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devmodeluid), "xsd:string"))
				{	soap_flag_Devmodeluid1--;
					continue;
				}
			if (soap_flag_Devmodelname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devmodelname", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Devmodelname), "xsd:string"))
				{	soap_flag_Devmodelname1--;
					continue;
				}
			if (soap_flag_Monstartdatename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstartdatename", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monstartdatename), "xsd:string"))
				{	soap_flag_Monstartdatename1--;
					continue;
				}
			if (soap_flag_Monenddatename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monenddatename", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monenddatename), "xsd:string"))
				{	soap_flag_Monenddatename1--;
					continue;
				}
			if (soap_flag_Monstarttimename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstarttimename", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monstarttimename), "xsd:string"))
				{	soap_flag_Monstarttimename1--;
					continue;
				}
			if (soap_flag_Monendtimename1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monendtimename", &(a->Bsdrtmservice1__VRtmMonTaskEntity::Monendtimename), "xsd:string"))
				{	soap_flag_Monendtimename1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__VRtmMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity, 0, sizeof(Bsdrtmservice1__VRtmMonTaskEntity), 0, soap_copy_Bsdrtmservice1__VRtmMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Taskuid2 > 0 || soap_flag_Monstartdate2 > 0 || soap_flag_Monenddate2 > 0 || soap_flag_Serviceport1 > 0 || soap_flag_Devprotocol1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__VRtmMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:VRtmMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__VRtmMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__VRtmMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__VRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__VRtmMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__VRtmMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__VRtmMonTaskEntity);
		((Bsdrtmservice1__VRtmMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__VRtmMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__VRtmMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__VRtmMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__VRtmMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__VRtmMonTaskEntity*)p = *(Bsdrtmservice1__VRtmMonTaskEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::__sizeVRtmMonTaskEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::__sizeVRtmMonTaskEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::__sizeVRtmMonTaskEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, "Bsdrtmservice1:VRtmMonTaskEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_VRtmMonTaskEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:VRtmMonTaskEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity == NULL)
				{	if (soap_blist_VRtmMonTaskEntity1 == NULL)
						soap_blist_VRtmMonTaskEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity = (Bsdrtmservice1__VRtmMonTaskEntity **)soap_push_block(soap, soap_blist_VRtmMonTaskEntity1, sizeof(Bsdrtmservice1__VRtmMonTaskEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, "Bsdrtmservice1:VRtmMonTaskEntity", a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity, "Bsdrtmservice1:VRtmMonTaskEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::__sizeVRtmMonTaskEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity)
			soap_pop_block(soap, soap_blist_VRtmMonTaskEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::__sizeVRtmMonTaskEntity)
			a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity = (Bsdrtmservice1__VRtmMonTaskEntity **)soap_save_block(soap, soap_blist_VRtmMonTaskEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::VRtmMonTaskEntity = NULL;
			if (soap_blist_VRtmMonTaskEntity1)
				soap_end_block(soap, soap_blist_VRtmMonTaskEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity);
		((Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity*)q;
}

void Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Msg);
	this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmMonTaskEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity, sizeof(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::Data), "Bsdrtmservice1:ArrayOfVRtmMonTaskEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity, 0, sizeof(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfVRtmMonTaskEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfVRtmMonTaskEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmMonTaskEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfVRtmMonTaskEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity);
		((Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfVRtmMonTaskEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)p = *(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity*)q;
}

void Bsdrtmservice1__TimeSpan::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void Bsdrtmservice1__TimeSpan::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int Bsdrtmservice1__TimeSpan::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__TimeSpan(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__TimeSpan(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__TimeSpan *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__TimeSpan::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__TimeSpan(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__TimeSpan * SOAP_FMAC4 soap_in_Bsdrtmservice1__TimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__TimeSpan *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__TimeSpan *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan, sizeof(Bsdrtmservice1__TimeSpan), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__TimeSpan *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__TimeSpan *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan, 0, sizeof(Bsdrtmservice1__TimeSpan), 0, soap_copy_Bsdrtmservice1__TimeSpan);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__TimeSpan::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:TimeSpan", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__TimeSpan::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__TimeSpan(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__TimeSpan * SOAP_FMAC4 soap_get_Bsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__TimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__TimeSpan * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__TimeSpan(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__TimeSpan(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__TimeSpan);
		if (size)
			*size = sizeof(Bsdrtmservice1__TimeSpan);
		((Bsdrtmservice1__TimeSpan*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__TimeSpan[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__TimeSpan);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__TimeSpan*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__TimeSpan*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__TimeSpan(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__TimeSpan %p -> %p\n", q, p));
	*(Bsdrtmservice1__TimeSpan*)p = *(Bsdrtmservice1__TimeSpan*)q;
}

void Bsdrtmservice1__ArrayOfTimeSpan::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfTimeSpan::__sizeTimeSpan = 0;
	this->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfTimeSpan::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfTimeSpan::__sizeTimeSpan; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__TimeSpan(soap, this->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfTimeSpan::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfTimeSpan(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfTimeSpan *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfTimeSpan::__sizeTimeSpan; i++)
			if (soap_out_PointerToBsdrtmservice1__TimeSpan(soap, "Bsdrtmservice1:TimeSpan", -1, a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfTimeSpan::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfTimeSpan(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfTimeSpan * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfTimeSpan *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfTimeSpan *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan, sizeof(Bsdrtmservice1__ArrayOfTimeSpan), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfTimeSpan *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_TimeSpan1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:TimeSpan", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan == NULL)
				{	if (soap_blist_TimeSpan1 == NULL)
						soap_blist_TimeSpan1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan = (Bsdrtmservice1__TimeSpan **)soap_push_block(soap, soap_blist_TimeSpan1, sizeof(Bsdrtmservice1__TimeSpan *));
					if (a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__TimeSpan(soap, "Bsdrtmservice1:TimeSpan", a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan, "Bsdrtmservice1:TimeSpan"))
				{	a->Bsdrtmservice1__ArrayOfTimeSpan::__sizeTimeSpan++;
					a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan)
			soap_pop_block(soap, soap_blist_TimeSpan1);
		if (a->Bsdrtmservice1__ArrayOfTimeSpan::__sizeTimeSpan)
			a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan = (Bsdrtmservice1__TimeSpan **)soap_save_block(soap, soap_blist_TimeSpan1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfTimeSpan::TimeSpan = NULL;
			if (soap_blist_TimeSpan1)
				soap_end_block(soap, soap_blist_TimeSpan1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfTimeSpan *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan, 0, sizeof(Bsdrtmservice1__ArrayOfTimeSpan), 0, soap_copy_Bsdrtmservice1__ArrayOfTimeSpan);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfTimeSpan::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfTimeSpan", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfTimeSpan::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfTimeSpan(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfTimeSpan * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, Bsdrtmservice1__ArrayOfTimeSpan *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfTimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfTimeSpan * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfTimeSpan(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfTimeSpan);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfTimeSpan);
		((Bsdrtmservice1__ArrayOfTimeSpan*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfTimeSpan[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfTimeSpan);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfTimeSpan*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfTimeSpan*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfTimeSpan %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfTimeSpan*)p = *(Bsdrtmservice1__ArrayOfTimeSpan*)q;
}

void Bsdrtmservice1__OptResultOfTimeSpan::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Msg);
	this->Bsdrtmservice1__OptResultOfTimeSpan::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfTimeSpan::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfTimeSpan::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfTimeSpan::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfTimeSpan(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfTimeSpan *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfTimeSpan::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfTimeSpan::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfTimeSpan::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfTimeSpan::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfTimeSpan::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfTimeSpan(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfTimeSpan * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfTimeSpan *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfTimeSpan *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan, sizeof(Bsdrtmservice1__OptResultOfTimeSpan), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfTimeSpan *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfTimeSpan::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfTimeSpan::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfTimeSpan::Data), "Bsdrtmservice1:ArrayOfTimeSpan"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfTimeSpan::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfTimeSpan *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan, 0, sizeof(Bsdrtmservice1__OptResultOfTimeSpan), 0, soap_copy_Bsdrtmservice1__OptResultOfTimeSpan);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfTimeSpan::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfTimeSpan", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfTimeSpan::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfTimeSpan(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfTimeSpan * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, Bsdrtmservice1__OptResultOfTimeSpan *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfTimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfTimeSpan * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfTimeSpan(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfTimeSpan);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfTimeSpan);
		((Bsdrtmservice1__OptResultOfTimeSpan*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfTimeSpan[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfTimeSpan);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfTimeSpan*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfTimeSpan*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfTimeSpan %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfTimeSpan*)p = *(Bsdrtmservice1__OptResultOfTimeSpan*)q;
}

void Bsdrtmservice1__RtmDevUseLogEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Userid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Devno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Funno);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Starttime);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Endtime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Devparam);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmDevUseLogEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Userid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Userid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Funno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Funno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Devparam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevUseLogEntity::Devparam);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmDevUseLogEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmDevUseLogEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmDevUseLogEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Userid", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Userid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Devno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funno", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Funno), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Starttime", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Starttime), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Endtime", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Endtime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devparam", -1, &(a->Bsdrtmservice1__RtmDevUseLogEntity::Devparam), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmDevUseLogEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmDevUseLogEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevUseLogEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevUseLogEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmDevUseLogEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity, sizeof(Bsdrtmservice1__RtmDevUseLogEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmDevUseLogEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Userid1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Funno1 = 1;
	size_t soap_flag_Starttime1 = 1;
	size_t soap_flag_Endtime1 = 1;
	size_t soap_flag_Devparam1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Userid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Userid", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Userid), "xsd:string"))
				{	soap_flag_Userid1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Funno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funno", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Funno), "xsd:string"))
				{	soap_flag_Funno1--;
					continue;
				}
			if (soap_flag_Starttime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Starttime", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Starttime), "xsd:dateTime"))
				{	soap_flag_Starttime1--;
					continue;
				}
			if (soap_flag_Endtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Endtime", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Endtime), "xsd:dateTime"))
				{	soap_flag_Endtime1--;
					continue;
				}
			if (soap_flag_Devparam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devparam", &(a->Bsdrtmservice1__RtmDevUseLogEntity::Devparam), "xsd:string"))
				{	soap_flag_Devparam1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDevUseLogEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity, 0, sizeof(Bsdrtmservice1__RtmDevUseLogEntity), 0, soap_copy_Bsdrtmservice1__RtmDevUseLogEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Starttime1 > 0 || soap_flag_Endtime1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmDevUseLogEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmDevUseLogEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmDevUseLogEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmDevUseLogEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevUseLogEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, Bsdrtmservice1__RtmDevUseLogEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmDevUseLogEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmDevUseLogEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmDevUseLogEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevUseLogEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmDevUseLogEntity);
		((Bsdrtmservice1__RtmDevUseLogEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevUseLogEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmDevUseLogEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmDevUseLogEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmDevUseLogEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmDevUseLogEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmDevUseLogEntity*)p = *(Bsdrtmservice1__RtmDevUseLogEntity*)q;
}

void Bsdrtmservice1__RtmAntEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::AntUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Antname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Antfactor);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::Startfreq);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::Stopfreq);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::AntHeight);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Note);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmAntEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::AntUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmAntEntity::Antname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Antname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmAntEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmAntEntity::Antfactor, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Antfactor);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::Startfreq);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::Stopfreq);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmAntEntity::AntHeight);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmAntEntity::Note, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Note);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmAntEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmAntEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmAntEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmAntEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmAntEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmAntEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:AntUID", -1, &(a->Bsdrtmservice1__RtmAntEntity::AntUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Antname", -1, &(a->Bsdrtmservice1__RtmAntEntity::Antname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmAntEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Antfactor", -1, &(a->Bsdrtmservice1__RtmAntEntity::Antfactor), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Startfreq", -1, &(a->Bsdrtmservice1__RtmAntEntity::Startfreq), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Stopfreq", -1, &(a->Bsdrtmservice1__RtmAntEntity::Stopfreq), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:AntHeight", -1, &(a->Bsdrtmservice1__RtmAntEntity::AntHeight), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Note", -1, &(a->Bsdrtmservice1__RtmAntEntity::Note), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmAntEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmAntEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmAntEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmAntEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmAntEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmAntEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity, sizeof(Bsdrtmservice1__RtmAntEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmAntEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AntUID1 = 1;
	size_t soap_flag_Antname1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Antfactor1 = 1;
	size_t soap_flag_Startfreq1 = 1;
	size_t soap_flag_Stopfreq1 = 1;
	size_t soap_flag_AntHeight1 = 1;
	size_t soap_flag_Note1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AntUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:AntUID", &(a->Bsdrtmservice1__RtmAntEntity::AntUID), "xsd:decimal"))
				{	soap_flag_AntUID1--;
					continue;
				}
			if (soap_flag_Antname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Antname", &(a->Bsdrtmservice1__RtmAntEntity::Antname), "xsd:string"))
				{	soap_flag_Antname1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmAntEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Antfactor1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Antfactor", &(a->Bsdrtmservice1__RtmAntEntity::Antfactor), "xsd:string"))
				{	soap_flag_Antfactor1--;
					continue;
				}
			if (soap_flag_Startfreq1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Startfreq", &(a->Bsdrtmservice1__RtmAntEntity::Startfreq), "xsd:decimal"))
				{	soap_flag_Startfreq1--;
					continue;
				}
			if (soap_flag_Stopfreq1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Stopfreq", &(a->Bsdrtmservice1__RtmAntEntity::Stopfreq), "xsd:decimal"))
				{	soap_flag_Stopfreq1--;
					continue;
				}
			if (soap_flag_AntHeight1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:AntHeight", &(a->Bsdrtmservice1__RtmAntEntity::AntHeight), "xsd:decimal"))
				{	soap_flag_AntHeight1--;
					continue;
				}
			if (soap_flag_Note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Note", &(a->Bsdrtmservice1__RtmAntEntity::Note), "xsd:string"))
				{	soap_flag_Note1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmAntEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmAntEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity, 0, sizeof(Bsdrtmservice1__RtmAntEntity), 0, soap_copy_Bsdrtmservice1__RtmAntEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_AntUID1 > 0 || soap_flag_Startfreq1 > 0 || soap_flag_Stopfreq1 > 0 || soap_flag_AntHeight1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmAntEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmAntEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmAntEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmAntEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmAntEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmAntEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmAntEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmAntEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmAntEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmAntEntity);
		((Bsdrtmservice1__RtmAntEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmAntEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmAntEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmAntEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmAntEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmAntEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmAntEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmAntEntity*)p = *(Bsdrtmservice1__RtmAntEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmAntEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmAntEntity::__sizeRtmAntEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmAntEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmAntEntity::__sizeRtmAntEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmAntEntity(soap, this->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmAntEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmAntEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmAntEntity::__sizeRtmAntEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmAntEntity(soap, "Bsdrtmservice1:RtmAntEntity", -1, a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmAntEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmAntEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmAntEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmAntEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity, sizeof(Bsdrtmservice1__ArrayOfRtmAntEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmAntEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmAntEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmAntEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity == NULL)
				{	if (soap_blist_RtmAntEntity1 == NULL)
						soap_blist_RtmAntEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity = (Bsdrtmservice1__RtmAntEntity **)soap_push_block(soap, soap_blist_RtmAntEntity1, sizeof(Bsdrtmservice1__RtmAntEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmAntEntity(soap, "Bsdrtmservice1:RtmAntEntity", a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity, "Bsdrtmservice1:RtmAntEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmAntEntity::__sizeRtmAntEntity++;
					a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity)
			soap_pop_block(soap, soap_blist_RtmAntEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmAntEntity::__sizeRtmAntEntity)
			a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity = (Bsdrtmservice1__RtmAntEntity **)soap_save_block(soap, soap_blist_RtmAntEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmAntEntity::RtmAntEntity = NULL;
			if (soap_blist_RtmAntEntity1)
				soap_end_block(soap, soap_blist_RtmAntEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmAntEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmAntEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmAntEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmAntEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmAntEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmAntEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmAntEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmAntEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmAntEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmAntEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmAntEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmAntEntity);
		((Bsdrtmservice1__ArrayOfRtmAntEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmAntEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmAntEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmAntEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmAntEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmAntEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmAntEntity*)p = *(Bsdrtmservice1__ArrayOfRtmAntEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmAntEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmAntEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmAntEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmAntEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmAntEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmAntEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmAntEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmAntEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmAntEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmAntEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity, sizeof(Bsdrtmservice1__OptResultOfRtmAntEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmAntEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::Data), "Bsdrtmservice1:ArrayOfRtmAntEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmAntEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmAntEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmAntEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmAntEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmAntEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmAntEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmAntEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmAntEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmAntEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmAntEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmAntEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmAntEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmAntEntity);
		((Bsdrtmservice1__OptResultOfRtmAntEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmAntEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmAntEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmAntEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmAntEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmAntEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmAntEntity*)p = *(Bsdrtmservice1__OptResultOfRtmAntEntity*)q;
}

void Bsdrtmservice1__vRtmDevAntEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Devno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Antname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevFunUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevModelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__vRtmDevAntEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Antname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmDevAntEntity::Antname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevFunUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevModelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__vRtmDevAntEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__vRtmDevAntEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__vRtmDevAntEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__vRtmDevAntEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity), "Bsdrtmservice1:vRtmDevAntEntity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DevFunUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevFunUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevUID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DevModelUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevModelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FunNo", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::FunNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__vRtmDevAntEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__vRtmDevAntEntity::Devno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Antname", -1, &(a->Bsdrtmservice1__vRtmDevAntEntity::Antname), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__vRtmDevAntEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__vRtmDevAntEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevAntEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__vRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmDevAntEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__vRtmDevAntEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity, sizeof(Bsdrtmservice1__vRtmDevAntEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__vRtmDevAntEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DevFunUID2 = 1;
	size_t soap_flag_DevUID2 = 1;
	size_t soap_flag_DevModelUID2 = 1;
	size_t soap_flag_FunNo2 = 1;
	size_t soap_flag_Opttype2 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Antname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DevFunUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DevFunUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevFunUID), "xsd:decimal"))
				{	soap_flag_DevFunUID2--;
					continue;
				}
			if (soap_flag_DevUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevUID), "xsd:string"))
				{	soap_flag_DevUID2--;
					continue;
				}
			if (soap_flag_DevModelUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DevModelUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevModelUID), "xsd:decimal"))
				{	soap_flag_DevModelUID2--;
					continue;
				}
			if (soap_flag_FunNo2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FunNo", &(a->Bsdrtmservice1__RtmDevFunEntity::FunNo), "xsd:string"))
				{	soap_flag_FunNo2--;
					continue;
				}
			if (soap_flag_Opttype2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDevFunEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__vRtmDevAntEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__vRtmDevAntEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Antname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Antname", &(a->Bsdrtmservice1__vRtmDevAntEntity::Antname), "xsd:string"))
				{	soap_flag_Antname1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmDevAntEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity, 0, sizeof(Bsdrtmservice1__vRtmDevAntEntity), 0, soap_copy_Bsdrtmservice1__vRtmDevAntEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DevFunUID2 > 0 || soap_flag_DevModelUID2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__vRtmDevAntEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:vRtmDevAntEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__vRtmDevAntEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__vRtmDevAntEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevAntEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__vRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__vRtmDevAntEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__vRtmDevAntEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__vRtmDevAntEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevAntEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__vRtmDevAntEntity);
		((Bsdrtmservice1__vRtmDevAntEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevAntEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__vRtmDevAntEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__vRtmDevAntEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__vRtmDevAntEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__vRtmDevAntEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__vRtmDevAntEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__vRtmDevAntEntity*)p = *(Bsdrtmservice1__vRtmDevAntEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmDevAntEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::__sizevRtmDevAntEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmDevAntEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::__sizevRtmDevAntEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmDevAntEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmDevAntEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::__sizevRtmDevAntEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, "Bsdrtmservice1:vRtmDevAntEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmDevAntEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevAntEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmDevAntEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmDevAntEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmDevAntEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmDevAntEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_vRtmDevAntEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:vRtmDevAntEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity == NULL)
				{	if (soap_blist_vRtmDevAntEntity1 == NULL)
						soap_blist_vRtmDevAntEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity = (Bsdrtmservice1__vRtmDevAntEntity **)soap_push_block(soap, soap_blist_vRtmDevAntEntity1, sizeof(Bsdrtmservice1__vRtmDevAntEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, "Bsdrtmservice1:vRtmDevAntEntity", a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity, "Bsdrtmservice1:vRtmDevAntEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::__sizevRtmDevAntEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity)
			soap_pop_block(soap, soap_blist_vRtmDevAntEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::__sizevRtmDevAntEntity)
			a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity = (Bsdrtmservice1__vRtmDevAntEntity **)soap_save_block(soap, soap_blist_vRtmDevAntEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmDevAntEntity::vRtmDevAntEntity = NULL;
			if (soap_blist_vRtmDevAntEntity1)
				soap_end_block(soap, soap_blist_vRtmDevAntEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmDevAntEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmDevAntEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmDevAntEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmDevAntEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmDevAntEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmDevAntEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevAntEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevAntEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmDevAntEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmDevAntEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmDevAntEntity);
		((Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmDevAntEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmDevAntEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmDevAntEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmDevAntEntity*)q;
}

void Bsdrtmservice1__OptResultOfvRtmDevAntEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Msg);
	this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfvRtmDevAntEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfvRtmDevAntEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfvRtmDevAntEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfvRtmDevAntEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevAntEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmDevAntEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfvRtmDevAntEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmDevAntEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfvRtmDevAntEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::Data), "Bsdrtmservice1:ArrayOfVRtmDevAntEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfvRtmDevAntEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfvRtmDevAntEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity, 0, sizeof(Bsdrtmservice1__OptResultOfvRtmDevAntEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfvRtmDevAntEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfvRtmDevAntEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmDevAntEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfvRtmDevAntEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevAntEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevAntEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfvRtmDevAntEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmDevAntEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfvRtmDevAntEntity);
		((Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmDevAntEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfvRtmDevAntEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfvRtmDevAntEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)p = *(Bsdrtmservice1__OptResultOfvRtmDevAntEntity*)q;
}

void Bsdrtmservice1__RtmDevFunEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevFunUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevModelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmDevFunEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevFunUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevModelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmDevFunEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmDevFunEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmDevFunEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmDevFunEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DevFunUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevFunUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevUID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DevModelUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevModelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FunNo", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::FunNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmDevFunEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmDevFunEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevFunEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevFunEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmDevFunEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity, sizeof(Bsdrtmservice1__RtmDevFunEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmDevFunEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DevFunUID1 = 1;
	size_t soap_flag_DevUID1 = 1;
	size_t soap_flag_DevModelUID1 = 1;
	size_t soap_flag_FunNo1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DevFunUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DevFunUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevFunUID), "xsd:decimal"))
				{	soap_flag_DevFunUID1--;
					continue;
				}
			if (soap_flag_DevUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevUID), "xsd:string"))
				{	soap_flag_DevUID1--;
					continue;
				}
			if (soap_flag_DevModelUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DevModelUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevModelUID), "xsd:decimal"))
				{	soap_flag_DevModelUID1--;
					continue;
				}
			if (soap_flag_FunNo1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FunNo", &(a->Bsdrtmservice1__RtmDevFunEntity::FunNo), "xsd:string"))
				{	soap_flag_FunNo1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDevFunEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDevFunEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity, 0, sizeof(Bsdrtmservice1__RtmDevFunEntity), 0, soap_copy_Bsdrtmservice1__RtmDevFunEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DevFunUID1 > 0 || soap_flag_DevModelUID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmDevFunEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmDevFunEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmDevFunEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmDevFunEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevFunEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmDevFunEntity(struct soap *soap, Bsdrtmservice1__RtmDevFunEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmDevFunEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmDevFunEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmDevFunEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevFunEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:VRtmDevFunEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmDevFunEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__VRtmDevFunEntity);
			((Bsdrtmservice1__VRtmDevFunEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmDevFunEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__VRtmDevFunEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__VRtmDevFunEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__VRtmDevFunEntity*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmDevAntEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevAntEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmDevAntEntity);
			((Bsdrtmservice1__vRtmDevAntEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevAntEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmDevAntEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmDevAntEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmDevAntEntity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevFunEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmDevFunEntity);
		((Bsdrtmservice1__RtmDevFunEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevFunEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmDevFunEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmDevFunEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmDevFunEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmDevFunEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmDevFunEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmDevFunEntity*)p = *(Bsdrtmservice1__RtmDevFunEntity*)q;
}

void Bsdrtmservice1__VRtmDevFunEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Devmodelname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Devno);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::ParamUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevFunUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevModelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__VRtmDevFunEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Devmodelname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Devmodelname);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::Devno);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__VRtmDevFunEntity::ParamUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevFunUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevFunEntity::DevModelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::FunNo);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevFunEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__VRtmDevFunEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__VRtmDevFunEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__VRtmDevFunEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__VRtmDevFunEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity), "Bsdrtmservice1:VRtmDevFunEntity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DevFunUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevFunUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevUID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DevModelUID", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::DevModelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:FunNo", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::FunNo), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDevFunEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devmodelname", -1, &(a->Bsdrtmservice1__VRtmDevFunEntity::Devmodelname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__VRtmDevFunEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__VRtmDevFunEntity::Devno), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:ParamUID", -1, &(a->Bsdrtmservice1__VRtmDevFunEntity::ParamUID), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__VRtmDevFunEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__VRtmDevFunEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmDevFunEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__VRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__VRtmDevFunEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__VRtmDevFunEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity, sizeof(Bsdrtmservice1__VRtmDevFunEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__VRtmDevFunEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DevFunUID2 = 1;
	size_t soap_flag_DevUID2 = 1;
	size_t soap_flag_DevModelUID2 = 1;
	size_t soap_flag_FunNo2 = 1;
	size_t soap_flag_Opttype2 = 1;
	size_t soap_flag_Devmodelname1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_ParamUID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DevFunUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DevFunUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevFunUID), "xsd:decimal"))
				{	soap_flag_DevFunUID2--;
					continue;
				}
			if (soap_flag_DevUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevUID), "xsd:string"))
				{	soap_flag_DevUID2--;
					continue;
				}
			if (soap_flag_DevModelUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DevModelUID", &(a->Bsdrtmservice1__RtmDevFunEntity::DevModelUID), "xsd:decimal"))
				{	soap_flag_DevModelUID2--;
					continue;
				}
			if (soap_flag_FunNo2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:FunNo", &(a->Bsdrtmservice1__RtmDevFunEntity::FunNo), "xsd:string"))
				{	soap_flag_FunNo2--;
					continue;
				}
			if (soap_flag_Opttype2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDevFunEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Devmodelname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devmodelname", &(a->Bsdrtmservice1__VRtmDevFunEntity::Devmodelname), "xsd:string"))
				{	soap_flag_Devmodelname1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__VRtmDevFunEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__VRtmDevFunEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_ParamUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:ParamUID", &(a->Bsdrtmservice1__VRtmDevFunEntity::ParamUID), "xsd:decimal"))
				{	soap_flag_ParamUID1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__VRtmDevFunEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity, 0, sizeof(Bsdrtmservice1__VRtmDevFunEntity), 0, soap_copy_Bsdrtmservice1__VRtmDevFunEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DevFunUID2 > 0 || soap_flag_DevModelUID2 > 0 || soap_flag_ParamUID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__VRtmDevFunEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:VRtmDevFunEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__VRtmDevFunEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__VRtmDevFunEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmDevFunEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__VRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__VRtmDevFunEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__VRtmDevFunEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__VRtmDevFunEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmDevFunEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__VRtmDevFunEntity);
		((Bsdrtmservice1__VRtmDevFunEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__VRtmDevFunEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__VRtmDevFunEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__VRtmDevFunEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__VRtmDevFunEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__VRtmDevFunEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__VRtmDevFunEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__VRtmDevFunEntity*)p = *(Bsdrtmservice1__VRtmDevFunEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmDevFunEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::__sizeVRtmDevFunEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmDevFunEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::__sizeVRtmDevFunEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmDevFunEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmDevFunEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::__sizeVRtmDevFunEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, "Bsdrtmservice1:VRtmDevFunEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmDevFunEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevFunEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmDevFunEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmDevFunEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmDevFunEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmDevFunEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_VRtmDevFunEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:VRtmDevFunEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity == NULL)
				{	if (soap_blist_VRtmDevFunEntity1 == NULL)
						soap_blist_VRtmDevFunEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity = (Bsdrtmservice1__VRtmDevFunEntity **)soap_push_block(soap, soap_blist_VRtmDevFunEntity1, sizeof(Bsdrtmservice1__VRtmDevFunEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, "Bsdrtmservice1:VRtmDevFunEntity", a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity, "Bsdrtmservice1:VRtmDevFunEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::__sizeVRtmDevFunEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity)
			soap_pop_block(soap, soap_blist_VRtmDevFunEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::__sizeVRtmDevFunEntity)
			a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity = (Bsdrtmservice1__VRtmDevFunEntity **)soap_save_block(soap, soap_blist_VRtmDevFunEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmDevFunEntity::VRtmDevFunEntity = NULL;
			if (soap_blist_VRtmDevFunEntity1)
				soap_end_block(soap, soap_blist_VRtmDevFunEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmDevFunEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmDevFunEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmDevFunEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmDevFunEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmDevFunEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmDevFunEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevFunEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevFunEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmDevFunEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmDevFunEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmDevFunEntity);
		((Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmDevFunEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmDevFunEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmDevFunEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmDevFunEntity*)q;
}

void Bsdrtmservice1__OptResultOfVRtmDevFunEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Msg);
	this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfVRtmDevFunEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfVRtmDevFunEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfVRtmDevFunEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfVRtmDevFunEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmDevFunEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfVRtmDevFunEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfVRtmDevFunEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity, sizeof(Bsdrtmservice1__OptResultOfVRtmDevFunEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfVRtmDevFunEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::Data), "Bsdrtmservice1:ArrayOfVRtmDevFunEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfVRtmDevFunEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfVRtmDevFunEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity, 0, sizeof(Bsdrtmservice1__OptResultOfVRtmDevFunEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfVRtmDevFunEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfVRtmDevFunEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfVRtmDevFunEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfVRtmDevFunEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmDevFunEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmDevFunEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfVRtmDevFunEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfVRtmDevFunEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfVRtmDevFunEntity);
		((Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfVRtmDevFunEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfVRtmDevFunEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfVRtmDevFunEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)p = *(Bsdrtmservice1__OptResultOfVRtmDevFunEntity*)q;
}

void Bsdrtmservice1__RtmDeviceEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::DevUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::DevmodelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devdesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devtype);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Buydate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Supplier);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Repairtel);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Curaddress);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Curstate);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Responer);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Maxrunnum);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Serviceip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Serviceport);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devprotocol);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Opttype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Isintegrated);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Tdoaip);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmDeviceEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::DevUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::DevUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::DevmodelUID, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::DevmodelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devdesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devdesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devtype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devtype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Supplier, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Supplier);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Repairtel, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Repairtel);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Curaddress, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Curaddress);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Curstate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Curstate);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Responer, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Responer);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Maxrunnum);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Serviceip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Serviceip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Serviceport);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Devprotocol);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Opttype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Isintegrated, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Isintegrated);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Tdoaip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDeviceEntity::Tdoaip);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmDeviceEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmDeviceEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmDeviceEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmDeviceEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevUID", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::DevUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devno", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Devno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devname", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Devname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DevmodelUID", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::DevmodelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devdesc", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Devdesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devtype", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Devtype), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Buydate", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Buydate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Supplier", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Supplier), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Repairtel", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Repairtel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Curaddress", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Curaddress), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Curstate", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Curstate), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Responer", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Responer), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Maxrunnum", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Maxrunnum), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Serviceip", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Serviceip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Serviceport", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Serviceport), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Devprotocol", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Devprotocol), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Opttype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Isintegrated", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Isintegrated), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Tdoaip", -1, &(a->Bsdrtmservice1__RtmDeviceEntity::Tdoaip), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmDeviceEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmDeviceEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDeviceEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDeviceEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmDeviceEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity, sizeof(Bsdrtmservice1__RtmDeviceEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmDeviceEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DevUID1 = 1;
	size_t soap_flag_Devno1 = 1;
	size_t soap_flag_Devname1 = 1;
	size_t soap_flag_DevmodelUID1 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Devdesc1 = 1;
	size_t soap_flag_Devtype1 = 1;
	size_t soap_flag_Buydate1 = 1;
	size_t soap_flag_Supplier1 = 1;
	size_t soap_flag_Repairtel1 = 1;
	size_t soap_flag_Curaddress1 = 1;
	size_t soap_flag_Curstate1 = 1;
	size_t soap_flag_Responer1 = 1;
	size_t soap_flag_Maxrunnum1 = 1;
	size_t soap_flag_Serviceip1 = 1;
	size_t soap_flag_Serviceport1 = 1;
	size_t soap_flag_Devprotocol1 = 1;
	size_t soap_flag_Opttype1 = 1;
	size_t soap_flag_Isintegrated1 = 1;
	size_t soap_flag_Tdoaip1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DevUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevUID", &(a->Bsdrtmservice1__RtmDeviceEntity::DevUID), "xsd:string"))
				{	soap_flag_DevUID1--;
					continue;
				}
			if (soap_flag_Devno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devno", &(a->Bsdrtmservice1__RtmDeviceEntity::Devno), "xsd:string"))
				{	soap_flag_Devno1--;
					continue;
				}
			if (soap_flag_Devname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devname", &(a->Bsdrtmservice1__RtmDeviceEntity::Devname), "xsd:string"))
				{	soap_flag_Devname1--;
					continue;
				}
			if (soap_flag_DevmodelUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DevmodelUID", &(a->Bsdrtmservice1__RtmDeviceEntity::DevmodelUID), "xsd:string"))
				{	soap_flag_DevmodelUID1--;
					continue;
				}
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmDeviceEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Devdesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devdesc", &(a->Bsdrtmservice1__RtmDeviceEntity::Devdesc), "xsd:string"))
				{	soap_flag_Devdesc1--;
					continue;
				}
			if (soap_flag_Devtype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devtype", &(a->Bsdrtmservice1__RtmDeviceEntity::Devtype), "xsd:string"))
				{	soap_flag_Devtype1--;
					continue;
				}
			if (soap_flag_Buydate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Buydate", &(a->Bsdrtmservice1__RtmDeviceEntity::Buydate), "xsd:dateTime"))
				{	soap_flag_Buydate1--;
					continue;
				}
			if (soap_flag_Supplier1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Supplier", &(a->Bsdrtmservice1__RtmDeviceEntity::Supplier), "xsd:string"))
				{	soap_flag_Supplier1--;
					continue;
				}
			if (soap_flag_Repairtel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Repairtel", &(a->Bsdrtmservice1__RtmDeviceEntity::Repairtel), "xsd:string"))
				{	soap_flag_Repairtel1--;
					continue;
				}
			if (soap_flag_Curaddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Curaddress", &(a->Bsdrtmservice1__RtmDeviceEntity::Curaddress), "xsd:string"))
				{	soap_flag_Curaddress1--;
					continue;
				}
			if (soap_flag_Curstate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Curstate", &(a->Bsdrtmservice1__RtmDeviceEntity::Curstate), "xsd:string"))
				{	soap_flag_Curstate1--;
					continue;
				}
			if (soap_flag_Responer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Responer", &(a->Bsdrtmservice1__RtmDeviceEntity::Responer), "xsd:string"))
				{	soap_flag_Responer1--;
					continue;
				}
			if (soap_flag_Maxrunnum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Maxrunnum", &(a->Bsdrtmservice1__RtmDeviceEntity::Maxrunnum), "xsd:decimal"))
				{	soap_flag_Maxrunnum1--;
					continue;
				}
			if (soap_flag_Serviceip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Serviceip", &(a->Bsdrtmservice1__RtmDeviceEntity::Serviceip), "xsd:string"))
				{	soap_flag_Serviceip1--;
					continue;
				}
			if (soap_flag_Serviceport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Serviceport", &(a->Bsdrtmservice1__RtmDeviceEntity::Serviceport), "xsd:decimal"))
				{	soap_flag_Serviceport1--;
					continue;
				}
			if (soap_flag_Devprotocol1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Devprotocol", &(a->Bsdrtmservice1__RtmDeviceEntity::Devprotocol), "xsd:decimal"))
				{	soap_flag_Devprotocol1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDeviceEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			if (soap_flag_Isintegrated1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Isintegrated", &(a->Bsdrtmservice1__RtmDeviceEntity::Isintegrated), "xsd:string"))
				{	soap_flag_Isintegrated1--;
					continue;
				}
			if (soap_flag_Tdoaip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Tdoaip", &(a->Bsdrtmservice1__RtmDeviceEntity::Tdoaip), "xsd:string"))
				{	soap_flag_Tdoaip1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDeviceEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity, 0, sizeof(Bsdrtmservice1__RtmDeviceEntity), 0, soap_copy_Bsdrtmservice1__RtmDeviceEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Buydate1 > 0 || soap_flag_Maxrunnum1 > 0 || soap_flag_Serviceport1 > 0 || soap_flag_Devprotocol1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmDeviceEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmDeviceEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmDeviceEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmDeviceEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDeviceEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmDeviceEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmDeviceEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmDeviceEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDeviceEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmDeviceEntity);
		((Bsdrtmservice1__RtmDeviceEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDeviceEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmDeviceEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmDeviceEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmDeviceEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmDeviceEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmDeviceEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmDeviceEntity*)p = *(Bsdrtmservice1__RtmDeviceEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmDeviceEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmDeviceEntity::__sizeRtmDeviceEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmDeviceEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmDeviceEntity::__sizeRtmDeviceEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmDeviceEntity(soap, this->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmDeviceEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmDeviceEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::__sizeRtmDeviceEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmDeviceEntity(soap, "Bsdrtmservice1:RtmDeviceEntity", -1, a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmDeviceEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDeviceEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmDeviceEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmDeviceEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity, sizeof(Bsdrtmservice1__ArrayOfRtmDeviceEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmDeviceEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmDeviceEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmDeviceEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity == NULL)
				{	if (soap_blist_RtmDeviceEntity1 == NULL)
						soap_blist_RtmDeviceEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity = (Bsdrtmservice1__RtmDeviceEntity **)soap_push_block(soap, soap_blist_RtmDeviceEntity1, sizeof(Bsdrtmservice1__RtmDeviceEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmDeviceEntity(soap, "Bsdrtmservice1:RtmDeviceEntity", a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity, "Bsdrtmservice1:RtmDeviceEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::__sizeRtmDeviceEntity++;
					a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity)
			soap_pop_block(soap, soap_blist_RtmDeviceEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::__sizeRtmDeviceEntity)
			a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity = (Bsdrtmservice1__RtmDeviceEntity **)soap_save_block(soap, soap_blist_RtmDeviceEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmDeviceEntity::RtmDeviceEntity = NULL;
			if (soap_blist_RtmDeviceEntity1)
				soap_end_block(soap, soap_blist_RtmDeviceEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmDeviceEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmDeviceEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmDeviceEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmDeviceEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmDeviceEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmDeviceEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDeviceEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDeviceEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmDeviceEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmDeviceEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmDeviceEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmDeviceEntity);
		((Bsdrtmservice1__ArrayOfRtmDeviceEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmDeviceEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmDeviceEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmDeviceEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmDeviceEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmDeviceEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmDeviceEntity*)p = *(Bsdrtmservice1__ArrayOfRtmDeviceEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmDeviceEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmDeviceEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDeviceEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmDeviceEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmDeviceEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmDeviceEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDeviceEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmDeviceEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmDeviceEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity, sizeof(Bsdrtmservice1__OptResultOfRtmDeviceEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmDeviceEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::Data), "Bsdrtmservice1:ArrayOfRtmDeviceEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmDeviceEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmDeviceEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmDeviceEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmDeviceEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmDeviceEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmDeviceEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmDeviceEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDeviceEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDeviceEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmDeviceEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmDeviceEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmDeviceEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmDeviceEntity);
		((Bsdrtmservice1__OptResultOfRtmDeviceEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmDeviceEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmDeviceEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmDeviceEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmDeviceEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmDeviceEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmDeviceEntity*)p = *(Bsdrtmservice1__OptResultOfRtmDeviceEntity*)q;
}

void Bsdrtmservice1__vRtmRncPort2Entity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPort2Entity::Rnctype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPort2Entity::Password);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncPortUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Powerport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__vRtmRncPort2Entity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPort2Entity::Rnctype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPort2Entity::Rnctype);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPort2Entity::Password, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPort2Entity::Password);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncPortUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Powerport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__vRtmRncPort2Entity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__vRtmRncPort2Entity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__vRtmRncPort2Entity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity), "Bsdrtmservice1:vRtmRncPort2Entity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:RncPortUID", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::RncPortUID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:RncUID", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::RncUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devname", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Devname), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Powerport", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Powerport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Hasos", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Hasos), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Osip", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Osip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Osport", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Osport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rncip", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Rncport", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rncip2", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Rncport2", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rncname", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rnctype", -1, &(a->Bsdrtmservice1__vRtmRncPort2Entity::Rnctype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Password", -1, &(a->Bsdrtmservice1__vRtmRncPort2Entity::Password), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__vRtmRncPort2Entity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__vRtmRncPort2Entity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPort2Entity * SOAP_FMAC4 soap_in_Bsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmRncPort2Entity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__vRtmRncPort2Entity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity, sizeof(Bsdrtmservice1__vRtmRncPort2Entity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__vRtmRncPort2Entity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RncPortUID3 = 1;
	size_t soap_flag_RncUID3 = 1;
	size_t soap_flag_Devname3 = 1;
	size_t soap_flag_Powerport3 = 1;
	size_t soap_flag_Hasos3 = 1;
	size_t soap_flag_Osip3 = 1;
	size_t soap_flag_Osport3 = 1;
	size_t soap_flag_Opttype3 = 1;
	size_t soap_flag_Monstationno2 = 1;
	size_t soap_flag_Rncip2 = 1;
	size_t soap_flag_Rncport2 = 1;
	size_t soap_flag_Rncip22 = 1;
	size_t soap_flag_Rncport22 = 1;
	size_t soap_flag_Rncname2 = 1;
	size_t soap_flag_Rnctype1 = 1;
	size_t soap_flag_Password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RncPortUID3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:RncPortUID", &(a->Bsdrtmservice1__RtmRncPortEntity::RncPortUID), "xsd:decimal"))
				{	soap_flag_RncPortUID3--;
					continue;
				}
			if (soap_flag_RncUID3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:RncUID", &(a->Bsdrtmservice1__RtmRncPortEntity::RncUID), "xsd:decimal"))
				{	soap_flag_RncUID3--;
					continue;
				}
			if (soap_flag_Devname3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devname", &(a->Bsdrtmservice1__RtmRncPortEntity::Devname), "xsd:string"))
				{	soap_flag_Devname3--;
					continue;
				}
			if (soap_flag_Powerport3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Powerport", &(a->Bsdrtmservice1__RtmRncPortEntity::Powerport), "xsd:decimal"))
				{	soap_flag_Powerport3--;
					continue;
				}
			if (soap_flag_Hasos3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Hasos", &(a->Bsdrtmservice1__RtmRncPortEntity::Hasos), "xsd:string"))
				{	soap_flag_Hasos3--;
					continue;
				}
			if (soap_flag_Osip3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Osip", &(a->Bsdrtmservice1__RtmRncPortEntity::Osip), "xsd:string"))
				{	soap_flag_Osip3--;
					continue;
				}
			if (soap_flag_Osport3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Osport", &(a->Bsdrtmservice1__RtmRncPortEntity::Osport), "xsd:decimal"))
				{	soap_flag_Osport3--;
					continue;
				}
			if (soap_flag_Opttype3 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmRncPortEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype3--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Monstationno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno2--;
					continue;
				}
			if (soap_flag_Rncip2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rncip", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip), "xsd:string"))
				{	soap_flag_Rncip2--;
					continue;
				}
			if (soap_flag_Rncport2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Rncport", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport), "xsd:decimal"))
				{	soap_flag_Rncport2--;
					continue;
				}
			if (soap_flag_Rncip22 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rncip2", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2), "xsd:string"))
				{	soap_flag_Rncip22--;
					continue;
				}
			if (soap_flag_Rncport22 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Rncport2", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2), "xsd:decimal"))
				{	soap_flag_Rncport22--;
					continue;
				}
			if (soap_flag_Rncname2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rncname", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncname), "xsd:string"))
				{	soap_flag_Rncname2--;
					continue;
				}
			if (soap_flag_Rnctype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rnctype", &(a->Bsdrtmservice1__vRtmRncPort2Entity::Rnctype), "xsd:string"))
				{	soap_flag_Rnctype1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Password", &(a->Bsdrtmservice1__vRtmRncPort2Entity::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmRncPort2Entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity, 0, sizeof(Bsdrtmservice1__vRtmRncPort2Entity), 0, soap_copy_Bsdrtmservice1__vRtmRncPort2Entity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RncPortUID3 > 0 || soap_flag_RncUID3 > 0 || soap_flag_Powerport3 > 0 || soap_flag_Osport3 > 0 || soap_flag_Rncport2 > 0 || soap_flag_Rncport22 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__vRtmRncPort2Entity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:vRtmRncPort2Entity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__vRtmRncPort2Entity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__vRtmRncPort2Entity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPort2Entity * SOAP_FMAC4 soap_get_Bsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__vRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__vRtmRncPort2Entity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__vRtmRncPort2Entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPort2Entity);
		if (size)
			*size = sizeof(Bsdrtmservice1__vRtmRncPort2Entity);
		((Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPort2Entity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__vRtmRncPort2Entity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__vRtmRncPort2Entity %p -> %p\n", q, p));
	*(Bsdrtmservice1__vRtmRncPort2Entity*)p = *(Bsdrtmservice1__vRtmRncPort2Entity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::__sizevRtmRncPort2Entity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::__sizevRtmRncPort2Entity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, this->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::__sizevRtmRncPort2Entity; i++)
			if (soap_out_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, "Bsdrtmservice1:vRtmRncPort2Entity", -1, a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPort2Entity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_vRtmRncPort2Entity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:vRtmRncPort2Entity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity == NULL)
				{	if (soap_blist_vRtmRncPort2Entity1 == NULL)
						soap_blist_vRtmRncPort2Entity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity = (Bsdrtmservice1__vRtmRncPort2Entity **)soap_push_block(soap, soap_blist_vRtmRncPort2Entity1, sizeof(Bsdrtmservice1__vRtmRncPort2Entity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, "Bsdrtmservice1:vRtmRncPort2Entity", a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity, "Bsdrtmservice1:vRtmRncPort2Entity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::__sizevRtmRncPort2Entity++;
					a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity)
			soap_pop_block(soap, soap_blist_vRtmRncPort2Entity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::__sizevRtmRncPort2Entity)
			a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity = (Bsdrtmservice1__vRtmRncPort2Entity **)soap_save_block(soap, soap_blist_vRtmRncPort2Entity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::vRtmRncPort2Entity = NULL;
			if (soap_blist_vRtmRncPort2Entity1)
				soap_end_block(soap, soap_blist_vRtmRncPort2Entity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmRncPort2Entity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmRncPort2Entity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPort2Entity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmRncPort2Entity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity);
		((Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmRncPort2Entity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)p = *(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity*)q;
}

void Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Msg);
	this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPort2Entity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::Data), "Bsdrtmservice1:ArrayOfVRtmRncPort2Entity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity, 0, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity), 0, soap_copy_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmRncPort2Entity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfvRtmRncPort2Entity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPort2Entity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfvRtmRncPort2Entity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity);
		((Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfvRtmRncPort2Entity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)p = *(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity*)q;
}

void Bsdrtmservice1__RtmRncPortEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncPortUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Powerport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmRncPortEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncPortUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Powerport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmRncPortEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmRncPortEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmRncPortEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmRncPortEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:RncPortUID", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::RncPortUID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:RncUID", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::RncUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devname", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Devname), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Powerport", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Powerport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Hasos", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Hasos), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Osip", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Osip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Osport", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Osport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmRncPortEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmRncPortEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmRncPortEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmRncPortEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmRncPortEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmRncPortEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity, sizeof(Bsdrtmservice1__RtmRncPortEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmRncPortEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RncPortUID1 = 1;
	size_t soap_flag_RncUID1 = 1;
	size_t soap_flag_Devname1 = 1;
	size_t soap_flag_Powerport1 = 1;
	size_t soap_flag_Hasos1 = 1;
	size_t soap_flag_Osip1 = 1;
	size_t soap_flag_Osport1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RncPortUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:RncPortUID", &(a->Bsdrtmservice1__RtmRncPortEntity::RncPortUID), "xsd:decimal"))
				{	soap_flag_RncPortUID1--;
					continue;
				}
			if (soap_flag_RncUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:RncUID", &(a->Bsdrtmservice1__RtmRncPortEntity::RncUID), "xsd:decimal"))
				{	soap_flag_RncUID1--;
					continue;
				}
			if (soap_flag_Devname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devname", &(a->Bsdrtmservice1__RtmRncPortEntity::Devname), "xsd:string"))
				{	soap_flag_Devname1--;
					continue;
				}
			if (soap_flag_Powerport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Powerport", &(a->Bsdrtmservice1__RtmRncPortEntity::Powerport), "xsd:decimal"))
				{	soap_flag_Powerport1--;
					continue;
				}
			if (soap_flag_Hasos1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Hasos", &(a->Bsdrtmservice1__RtmRncPortEntity::Hasos), "xsd:string"))
				{	soap_flag_Hasos1--;
					continue;
				}
			if (soap_flag_Osip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Osip", &(a->Bsdrtmservice1__RtmRncPortEntity::Osip), "xsd:string"))
				{	soap_flag_Osip1--;
					continue;
				}
			if (soap_flag_Osport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Osport", &(a->Bsdrtmservice1__RtmRncPortEntity::Osport), "xsd:decimal"))
				{	soap_flag_Osport1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmRncPortEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmRncPortEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity, 0, sizeof(Bsdrtmservice1__RtmRncPortEntity), 0, soap_copy_Bsdrtmservice1__RtmRncPortEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RncPortUID1 > 0 || soap_flag_RncUID1 > 0 || soap_flag_Powerport1 > 0 || soap_flag_Osport1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmRncPortEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmRncPortEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmRncPortEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmRncPortEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmRncPortEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmRncPortEntity(struct soap *soap, Bsdrtmservice1__RtmRncPortEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmRncPortEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmRncPortEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmRncPortEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmRncPortEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmRncPortEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmRncPORTEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPORTEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmRncPORTEntity);
			((Bsdrtmservice1__vRtmRncPORTEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPORTEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmRncPORTEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmRncPORTEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmRncPORTEntity*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmRncPort2Entity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPort2Entity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmRncPort2Entity);
			((Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPort2Entity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmRncPort2Entity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmRncPortEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmRncPortEntity);
		((Bsdrtmservice1__RtmRncPortEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmRncPortEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmRncPortEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmRncPortEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmRncPortEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmRncPortEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmRncPortEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmRncPortEntity*)p = *(Bsdrtmservice1__RtmRncPortEntity*)q;
}

void Bsdrtmservice1__vRtmRncPORTEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2);
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncPortUID);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Powerport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__vRtmRncPORTEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2);
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmRncPORTEntity::Rncname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncPortUID);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::RncUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Devname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Powerport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Hasos);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Osport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmRncPortEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__vRtmRncPORTEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__vRtmRncPORTEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__vRtmRncPORTEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity), "Bsdrtmservice1:vRtmRncPORTEntity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:RncPortUID", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::RncPortUID), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:RncUID", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::RncUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devname", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Devname), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Powerport", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Powerport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Hasos", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Hasos), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Osip", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Osip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Osport", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Osport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmRncPortEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rncip", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Rncport", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rncip2", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Rncport2", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Rncname", -1, &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncname), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__vRtmRncPORTEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__vRtmRncPORTEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPORTEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmRncPORTEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__vRtmRncPORTEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity, sizeof(Bsdrtmservice1__vRtmRncPORTEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__vRtmRncPORTEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_RncPortUID2 = 1;
	size_t soap_flag_RncUID2 = 1;
	size_t soap_flag_Devname2 = 1;
	size_t soap_flag_Powerport2 = 1;
	size_t soap_flag_Hasos2 = 1;
	size_t soap_flag_Osip2 = 1;
	size_t soap_flag_Osport2 = 1;
	size_t soap_flag_Opttype2 = 1;
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Rncip1 = 1;
	size_t soap_flag_Rncport1 = 1;
	size_t soap_flag_Rncip21 = 1;
	size_t soap_flag_Rncport21 = 1;
	size_t soap_flag_Rncname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_RncPortUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:RncPortUID", &(a->Bsdrtmservice1__RtmRncPortEntity::RncPortUID), "xsd:decimal"))
				{	soap_flag_RncPortUID2--;
					continue;
				}
			if (soap_flag_RncUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:RncUID", &(a->Bsdrtmservice1__RtmRncPortEntity::RncUID), "xsd:decimal"))
				{	soap_flag_RncUID2--;
					continue;
				}
			if (soap_flag_Devname2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devname", &(a->Bsdrtmservice1__RtmRncPortEntity::Devname), "xsd:string"))
				{	soap_flag_Devname2--;
					continue;
				}
			if (soap_flag_Powerport2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Powerport", &(a->Bsdrtmservice1__RtmRncPortEntity::Powerport), "xsd:decimal"))
				{	soap_flag_Powerport2--;
					continue;
				}
			if (soap_flag_Hasos2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Hasos", &(a->Bsdrtmservice1__RtmRncPortEntity::Hasos), "xsd:string"))
				{	soap_flag_Hasos2--;
					continue;
				}
			if (soap_flag_Osip2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Osip", &(a->Bsdrtmservice1__RtmRncPortEntity::Osip), "xsd:string"))
				{	soap_flag_Osip2--;
					continue;
				}
			if (soap_flag_Osport2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Osport", &(a->Bsdrtmservice1__RtmRncPortEntity::Osport), "xsd:decimal"))
				{	soap_flag_Osport2--;
					continue;
				}
			if (soap_flag_Opttype2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmRncPortEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Rncip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rncip", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip), "xsd:string"))
				{	soap_flag_Rncip1--;
					continue;
				}
			if (soap_flag_Rncport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Rncport", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport), "xsd:decimal"))
				{	soap_flag_Rncport1--;
					continue;
				}
			if (soap_flag_Rncip21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rncip2", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncip2), "xsd:string"))
				{	soap_flag_Rncip21--;
					continue;
				}
			if (soap_flag_Rncport21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Rncport2", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncport2), "xsd:decimal"))
				{	soap_flag_Rncport21--;
					continue;
				}
			if (soap_flag_Rncname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Rncname", &(a->Bsdrtmservice1__vRtmRncPORTEntity::Rncname), "xsd:string"))
				{	soap_flag_Rncname1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmRncPORTEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity, 0, sizeof(Bsdrtmservice1__vRtmRncPORTEntity), 0, soap_copy_Bsdrtmservice1__vRtmRncPORTEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_RncPortUID2 > 0 || soap_flag_RncUID2 > 0 || soap_flag_Powerport2 > 0 || soap_flag_Osport2 > 0 || soap_flag_Rncport1 > 0 || soap_flag_Rncport21 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__vRtmRncPORTEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:vRtmRncPORTEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__vRtmRncPORTEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__vRtmRncPORTEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPORTEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__vRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__vRtmRncPORTEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__vRtmRncPORTEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmRncPort2Entity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPort2Entity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmRncPort2Entity);
			((Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPort2Entity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmRncPort2Entity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmRncPort2Entity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPORTEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__vRtmRncPORTEntity);
		((Bsdrtmservice1__vRtmRncPORTEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmRncPORTEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__vRtmRncPORTEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__vRtmRncPORTEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__vRtmRncPORTEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__vRtmRncPORTEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__vRtmRncPORTEntity*)p = *(Bsdrtmservice1__vRtmRncPORTEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::__sizevRtmRncPORTEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::__sizevRtmRncPORTEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::__sizevRtmRncPORTEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, "Bsdrtmservice1:vRtmRncPORTEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPORTEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_vRtmRncPORTEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:vRtmRncPORTEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity == NULL)
				{	if (soap_blist_vRtmRncPORTEntity1 == NULL)
						soap_blist_vRtmRncPORTEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity = (Bsdrtmservice1__vRtmRncPORTEntity **)soap_push_block(soap, soap_blist_vRtmRncPORTEntity1, sizeof(Bsdrtmservice1__vRtmRncPORTEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, "Bsdrtmservice1:vRtmRncPORTEntity", a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity, "Bsdrtmservice1:vRtmRncPORTEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::__sizevRtmRncPORTEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity)
			soap_pop_block(soap, soap_blist_vRtmRncPORTEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::__sizevRtmRncPORTEntity)
			a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity = (Bsdrtmservice1__vRtmRncPORTEntity **)soap_save_block(soap, soap_blist_vRtmRncPORTEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::vRtmRncPORTEntity = NULL;
			if (soap_blist_vRtmRncPORTEntity1)
				soap_end_block(soap, soap_blist_vRtmRncPORTEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmRncPORTEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmRncPORTEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPORTEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmRncPORTEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity);
		((Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmRncPORTEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity*)q;
}

void Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Msg);
	this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPORTEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::Data), "Bsdrtmservice1:ArrayOfVRtmRncPORTEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity, 0, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmRncPORTEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfvRtmRncPORTEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPORTEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfvRtmRncPORTEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity);
		((Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfvRtmRncPORTEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)p = *(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity*)q;
}

void Bsdrtmservice1__RtmMonStationEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationname);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Createtime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Address);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Longi);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Lati);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monrange);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::State);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Type);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Linkman);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monorgno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Opttype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Nettype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMonStationEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Address, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Address);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Longi);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Lati);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monrange);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::State, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::State);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Type, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Type);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Linkman, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Linkman);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monorgno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monorgno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Opttype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Nettype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Nettype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMonStationEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMonStationEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMonStationEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMonStationEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationname", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationname), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Createtime", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Createtime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Address", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Address), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Longi", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Longi), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Lati", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Lati), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Monrange", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monrange), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:State", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::State), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Type", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Type), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Linkman", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Linkman), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monorgno", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monorgno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationdesc", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Gpsip", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Gpsport", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Compassip", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Compassip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Compassport", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Compassport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Opttype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Nettype", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Nettype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMonStationEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMonStationEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonStationEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonStationEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMonStationEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity, sizeof(Bsdrtmservice1__RtmMonStationEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMonStationEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Monstationno1 = 1;
	size_t soap_flag_Monstationname1 = 1;
	size_t soap_flag_Createtime1 = 1;
	size_t soap_flag_Address1 = 1;
	size_t soap_flag_Longi1 = 1;
	size_t soap_flag_Lati1 = 1;
	size_t soap_flag_Monrange1 = 1;
	size_t soap_flag_State1 = 1;
	size_t soap_flag_Type1 = 1;
	size_t soap_flag_Linkman1 = 1;
	size_t soap_flag_Monorgno1 = 1;
	size_t soap_flag_Monstationdesc1 = 1;
	size_t soap_flag_Gpsip1 = 1;
	size_t soap_flag_Gpsport1 = 1;
	size_t soap_flag_Compassip1 = 1;
	size_t soap_flag_Compassport1 = 1;
	size_t soap_flag_Opttype1 = 1;
	size_t soap_flag_Nettype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Monstationno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno1--;
					continue;
				}
			if (soap_flag_Monstationname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationname", &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationname), "xsd:string"))
				{	soap_flag_Monstationname1--;
					continue;
				}
			if (soap_flag_Createtime1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Createtime", &(a->Bsdrtmservice1__RtmMonStationEntity::Createtime), "xsd:dateTime"))
				{	soap_flag_Createtime1--;
					continue;
				}
			if (soap_flag_Address1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Address", &(a->Bsdrtmservice1__RtmMonStationEntity::Address), "xsd:string"))
				{	soap_flag_Address1--;
					continue;
				}
			if (soap_flag_Longi1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Longi", &(a->Bsdrtmservice1__RtmMonStationEntity::Longi), "xsd:decimal"))
				{	soap_flag_Longi1--;
					continue;
				}
			if (soap_flag_Lati1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Lati", &(a->Bsdrtmservice1__RtmMonStationEntity::Lati), "xsd:decimal"))
				{	soap_flag_Lati1--;
					continue;
				}
			if (soap_flag_Monrange1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Monrange", &(a->Bsdrtmservice1__RtmMonStationEntity::Monrange), "xsd:decimal"))
				{	soap_flag_Monrange1--;
					continue;
				}
			if (soap_flag_State1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:State", &(a->Bsdrtmservice1__RtmMonStationEntity::State), "xsd:string"))
				{	soap_flag_State1--;
					continue;
				}
			if (soap_flag_Type1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Type", &(a->Bsdrtmservice1__RtmMonStationEntity::Type), "xsd:string"))
				{	soap_flag_Type1--;
					continue;
				}
			if (soap_flag_Linkman1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Linkman", &(a->Bsdrtmservice1__RtmMonStationEntity::Linkman), "xsd:string"))
				{	soap_flag_Linkman1--;
					continue;
				}
			if (soap_flag_Monorgno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monorgno", &(a->Bsdrtmservice1__RtmMonStationEntity::Monorgno), "xsd:string"))
				{	soap_flag_Monorgno1--;
					continue;
				}
			if (soap_flag_Monstationdesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationdesc", &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc), "xsd:string"))
				{	soap_flag_Monstationdesc1--;
					continue;
				}
			if (soap_flag_Gpsip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Gpsip", &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsip), "xsd:string"))
				{	soap_flag_Gpsip1--;
					continue;
				}
			if (soap_flag_Gpsport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Gpsport", &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsport), "xsd:decimal"))
				{	soap_flag_Gpsport1--;
					continue;
				}
			if (soap_flag_Compassip1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Compassip", &(a->Bsdrtmservice1__RtmMonStationEntity::Compassip), "xsd:string"))
				{	soap_flag_Compassip1--;
					continue;
				}
			if (soap_flag_Compassport1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Compassport", &(a->Bsdrtmservice1__RtmMonStationEntity::Compassport), "xsd:decimal"))
				{	soap_flag_Compassport1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmMonStationEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			if (soap_flag_Nettype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Nettype", &(a->Bsdrtmservice1__RtmMonStationEntity::Nettype), "xsd:string"))
				{	soap_flag_Nettype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonStationEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity, 0, sizeof(Bsdrtmservice1__RtmMonStationEntity), 0, soap_copy_Bsdrtmservice1__RtmMonStationEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Createtime1 > 0 || soap_flag_Longi1 > 0 || soap_flag_Lati1 > 0 || soap_flag_Monrange1 > 0 || soap_flag_Gpsport1 > 0 || soap_flag_Compassport1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMonStationEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMonStationEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMonStationEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMonStationEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonStationEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMonStationEntity(struct soap *soap, Bsdrtmservice1__RtmMonStationEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMonStationEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMonStationEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMonStationEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonStationEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmMonStationEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmMonStationEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmMonStationEntity);
			((Bsdrtmservice1__vRtmMonStationEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmMonStationEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmMonStationEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmMonStationEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmMonStationEntity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonStationEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMonStationEntity);
		((Bsdrtmservice1__RtmMonStationEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonStationEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMonStationEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMonStationEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMonStationEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMonStationEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMonStationEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMonStationEntity*)p = *(Bsdrtmservice1__RtmMonStationEntity*)q;
}

void Bsdrtmservice1__vRtmMonStationEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmMonStationEntity::Mongridid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationname);
	soap_default_time(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Createtime);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Address);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Longi);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Lati);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monrange);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::State);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Type);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Linkman);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monorgno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassip);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassport);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Opttype);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Nettype);
	/* transient soap skipped */
}

void Bsdrtmservice1__vRtmMonStationEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__vRtmMonStationEntity::Mongridid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Address, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Address);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Longi);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Lati);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monrange);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::State, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::State);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Type, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Type);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Linkman, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Linkman);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monorgno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monorgno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Gpsport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassip, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassip);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Compassport);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Opttype);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Nettype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonStationEntity::Nettype);
	/* transient soap skipped */
}

int Bsdrtmservice1__vRtmMonStationEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__vRtmMonStationEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__vRtmMonStationEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__vRtmMonStationEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity), "Bsdrtmservice1:vRtmMonStationEntity"))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationno", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationname", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationname), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdrtmservice1:Createtime", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Createtime), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Address", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Address), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Longi", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Longi), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Lati", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Lati), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Monrange", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monrange), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:State", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::State), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Type", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Type), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Linkman", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Linkman), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monorgno", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monorgno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monstationdesc", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Gpsip", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Gpsport", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Compassip", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Compassip), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Compassport", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Compassport), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Opttype), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Nettype", -1, &(a->Bsdrtmservice1__RtmMonStationEntity::Nettype), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Mongridid", -1, &(a->Bsdrtmservice1__vRtmMonStationEntity::Mongridid), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__vRtmMonStationEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__vRtmMonStationEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmMonStationEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__vRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmMonStationEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__vRtmMonStationEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity, sizeof(Bsdrtmservice1__vRtmMonStationEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__vRtmMonStationEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Monstationno2 = 1;
	size_t soap_flag_Monstationname2 = 1;
	size_t soap_flag_Createtime2 = 1;
	size_t soap_flag_Address2 = 1;
	size_t soap_flag_Longi2 = 1;
	size_t soap_flag_Lati2 = 1;
	size_t soap_flag_Monrange2 = 1;
	size_t soap_flag_State2 = 1;
	size_t soap_flag_Type2 = 1;
	size_t soap_flag_Linkman2 = 1;
	size_t soap_flag_Monorgno2 = 1;
	size_t soap_flag_Monstationdesc2 = 1;
	size_t soap_flag_Gpsip2 = 1;
	size_t soap_flag_Gpsport2 = 1;
	size_t soap_flag_Compassip2 = 1;
	size_t soap_flag_Compassport2 = 1;
	size_t soap_flag_Opttype2 = 1;
	size_t soap_flag_Nettype2 = 1;
	size_t soap_flag_Mongridid1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Monstationno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationno", &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationno), "xsd:string"))
				{	soap_flag_Monstationno2--;
					continue;
				}
			if (soap_flag_Monstationname2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationname", &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationname), "xsd:string"))
				{	soap_flag_Monstationname2--;
					continue;
				}
			if (soap_flag_Createtime2 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdrtmservice1:Createtime", &(a->Bsdrtmservice1__RtmMonStationEntity::Createtime), "xsd:dateTime"))
				{	soap_flag_Createtime2--;
					continue;
				}
			if (soap_flag_Address2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Address", &(a->Bsdrtmservice1__RtmMonStationEntity::Address), "xsd:string"))
				{	soap_flag_Address2--;
					continue;
				}
			if (soap_flag_Longi2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Longi", &(a->Bsdrtmservice1__RtmMonStationEntity::Longi), "xsd:decimal"))
				{	soap_flag_Longi2--;
					continue;
				}
			if (soap_flag_Lati2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Lati", &(a->Bsdrtmservice1__RtmMonStationEntity::Lati), "xsd:decimal"))
				{	soap_flag_Lati2--;
					continue;
				}
			if (soap_flag_Monrange2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Monrange", &(a->Bsdrtmservice1__RtmMonStationEntity::Monrange), "xsd:decimal"))
				{	soap_flag_Monrange2--;
					continue;
				}
			if (soap_flag_State2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:State", &(a->Bsdrtmservice1__RtmMonStationEntity::State), "xsd:string"))
				{	soap_flag_State2--;
					continue;
				}
			if (soap_flag_Type2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Type", &(a->Bsdrtmservice1__RtmMonStationEntity::Type), "xsd:string"))
				{	soap_flag_Type2--;
					continue;
				}
			if (soap_flag_Linkman2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Linkman", &(a->Bsdrtmservice1__RtmMonStationEntity::Linkman), "xsd:string"))
				{	soap_flag_Linkman2--;
					continue;
				}
			if (soap_flag_Monorgno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monorgno", &(a->Bsdrtmservice1__RtmMonStationEntity::Monorgno), "xsd:string"))
				{	soap_flag_Monorgno2--;
					continue;
				}
			if (soap_flag_Monstationdesc2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monstationdesc", &(a->Bsdrtmservice1__RtmMonStationEntity::Monstationdesc), "xsd:string"))
				{	soap_flag_Monstationdesc2--;
					continue;
				}
			if (soap_flag_Gpsip2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Gpsip", &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsip), "xsd:string"))
				{	soap_flag_Gpsip2--;
					continue;
				}
			if (soap_flag_Gpsport2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Gpsport", &(a->Bsdrtmservice1__RtmMonStationEntity::Gpsport), "xsd:decimal"))
				{	soap_flag_Gpsport2--;
					continue;
				}
			if (soap_flag_Compassip2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Compassip", &(a->Bsdrtmservice1__RtmMonStationEntity::Compassip), "xsd:string"))
				{	soap_flag_Compassip2--;
					continue;
				}
			if (soap_flag_Compassport2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Compassport", &(a->Bsdrtmservice1__RtmMonStationEntity::Compassport), "xsd:decimal"))
				{	soap_flag_Compassport2--;
					continue;
				}
			if (soap_flag_Opttype2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmMonStationEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype2--;
					continue;
				}
			if (soap_flag_Nettype2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Nettype", &(a->Bsdrtmservice1__RtmMonStationEntity::Nettype), "xsd:string"))
				{	soap_flag_Nettype2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Mongridid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Mongridid", &(a->Bsdrtmservice1__vRtmMonStationEntity::Mongridid), "xsd:decimal"))
				{	soap_flag_Mongridid1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmMonStationEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity, 0, sizeof(Bsdrtmservice1__vRtmMonStationEntity), 0, soap_copy_Bsdrtmservice1__vRtmMonStationEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Createtime2 > 0 || soap_flag_Longi2 > 0 || soap_flag_Lati2 > 0 || soap_flag_Monrange2 > 0 || soap_flag_Gpsport2 > 0 || soap_flag_Compassport2 > 0 || soap_flag_Mongridid1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__vRtmMonStationEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:vRtmMonStationEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__vRtmMonStationEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__vRtmMonStationEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmMonStationEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__vRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__vRtmMonStationEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__vRtmMonStationEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__vRtmMonStationEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmMonStationEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__vRtmMonStationEntity);
		((Bsdrtmservice1__vRtmMonStationEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmMonStationEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__vRtmMonStationEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__vRtmMonStationEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__vRtmMonStationEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__vRtmMonStationEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__vRtmMonStationEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__vRtmMonStationEntity*)p = *(Bsdrtmservice1__vRtmMonStationEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmMonStationEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::__sizevRtmMonStationEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmMonStationEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::__sizevRtmMonStationEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmMonStationEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmMonStationEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::__sizevRtmMonStationEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, "Bsdrtmservice1:vRtmMonStationEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmMonStationEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonStationEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmMonStationEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmMonStationEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmMonStationEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmMonStationEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_vRtmMonStationEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:vRtmMonStationEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity == NULL)
				{	if (soap_blist_vRtmMonStationEntity1 == NULL)
						soap_blist_vRtmMonStationEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity = (Bsdrtmservice1__vRtmMonStationEntity **)soap_push_block(soap, soap_blist_vRtmMonStationEntity1, sizeof(Bsdrtmservice1__vRtmMonStationEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, "Bsdrtmservice1:vRtmMonStationEntity", a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity, "Bsdrtmservice1:vRtmMonStationEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::__sizevRtmMonStationEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity)
			soap_pop_block(soap, soap_blist_vRtmMonStationEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::__sizevRtmMonStationEntity)
			a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity = (Bsdrtmservice1__vRtmMonStationEntity **)soap_save_block(soap, soap_blist_vRtmMonStationEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmMonStationEntity::vRtmMonStationEntity = NULL;
			if (soap_blist_vRtmMonStationEntity1)
				soap_end_block(soap, soap_blist_vRtmMonStationEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmMonStationEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmMonStationEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmMonStationEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmMonStationEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmMonStationEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmMonStationEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonStationEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonStationEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmMonStationEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmMonStationEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmMonStationEntity);
		((Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmMonStationEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmMonStationEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmMonStationEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmMonStationEntity*)q;
}

void Bsdrtmservice1__OptResultOfvRtmMonStationEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Msg);
	this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfvRtmMonStationEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfvRtmMonStationEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfvRtmMonStationEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfvRtmMonStationEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmMonStationEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmMonStationEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfvRtmMonStationEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmMonStationEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfvRtmMonStationEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::Data), "Bsdrtmservice1:ArrayOfVRtmMonStationEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfvRtmMonStationEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfvRtmMonStationEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity, 0, sizeof(Bsdrtmservice1__OptResultOfvRtmMonStationEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfvRtmMonStationEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfvRtmMonStationEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmMonStationEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfvRtmMonStationEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmMonStationEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmMonStationEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfvRtmMonStationEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmMonStationEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfvRtmMonStationEntity);
		((Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmMonStationEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfvRtmMonStationEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfvRtmMonStationEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)p = *(Bsdrtmservice1__OptResultOfvRtmMonStationEntity*)q;
}

void Bsdrtmservice1__RtmControlCenterEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::ControlerUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Controlername);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Address);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Longi);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Lati);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Note);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::AreaCode);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmControlCenterEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::ControlerUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Controlername, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Controlername);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Address, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Address);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Longi);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Lati);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Note, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::Note);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::AreaCode, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmControlCenterEntity::AreaCode);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmControlCenterEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmControlCenterEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmControlCenterEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmControlCenterEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:ControlerUID", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::ControlerUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Controlername", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::Controlername), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Address", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::Address), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Longi", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::Longi), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Lati", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::Lati), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Note", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::Note), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:AreaCode", -1, &(a->Bsdrtmservice1__RtmControlCenterEntity::AreaCode), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmControlCenterEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmControlCenterEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmControlCenterEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmControlCenterEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmControlCenterEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity, sizeof(Bsdrtmservice1__RtmControlCenterEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmControlCenterEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_ControlerUID1 = 1;
	size_t soap_flag_Controlername1 = 1;
	size_t soap_flag_Address1 = 1;
	size_t soap_flag_Longi1 = 1;
	size_t soap_flag_Lati1 = 1;
	size_t soap_flag_Note1 = 1;
	size_t soap_flag_AreaCode1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ControlerUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:ControlerUID", &(a->Bsdrtmservice1__RtmControlCenterEntity::ControlerUID), "xsd:decimal"))
				{	soap_flag_ControlerUID1--;
					continue;
				}
			if (soap_flag_Controlername1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Controlername", &(a->Bsdrtmservice1__RtmControlCenterEntity::Controlername), "xsd:string"))
				{	soap_flag_Controlername1--;
					continue;
				}
			if (soap_flag_Address1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Address", &(a->Bsdrtmservice1__RtmControlCenterEntity::Address), "xsd:string"))
				{	soap_flag_Address1--;
					continue;
				}
			if (soap_flag_Longi1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Longi", &(a->Bsdrtmservice1__RtmControlCenterEntity::Longi), "xsd:decimal"))
				{	soap_flag_Longi1--;
					continue;
				}
			if (soap_flag_Lati1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Lati", &(a->Bsdrtmservice1__RtmControlCenterEntity::Lati), "xsd:decimal"))
				{	soap_flag_Lati1--;
					continue;
				}
			if (soap_flag_Note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Note", &(a->Bsdrtmservice1__RtmControlCenterEntity::Note), "xsd:string"))
				{	soap_flag_Note1--;
					continue;
				}
			if (soap_flag_AreaCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:AreaCode", &(a->Bsdrtmservice1__RtmControlCenterEntity::AreaCode), "xsd:string"))
				{	soap_flag_AreaCode1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmControlCenterEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity, 0, sizeof(Bsdrtmservice1__RtmControlCenterEntity), 0, soap_copy_Bsdrtmservice1__RtmControlCenterEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ControlerUID1 > 0 || soap_flag_Longi1 > 0 || soap_flag_Lati1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmControlCenterEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmControlCenterEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmControlCenterEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmControlCenterEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmControlCenterEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmControlCenterEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmControlCenterEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmControlCenterEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmControlCenterEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmControlCenterEntity);
		((Bsdrtmservice1__RtmControlCenterEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmControlCenterEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmControlCenterEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmControlCenterEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmControlCenterEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmControlCenterEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmControlCenterEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmControlCenterEntity*)p = *(Bsdrtmservice1__RtmControlCenterEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmControlCenterEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::__sizeRtmControlCenterEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmControlCenterEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::__sizeRtmControlCenterEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, this->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmControlCenterEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmControlCenterEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::__sizeRtmControlCenterEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, "Bsdrtmservice1:RtmControlCenterEntity", -1, a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmControlCenterEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmControlCenterEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmControlCenterEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmControlCenterEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity, sizeof(Bsdrtmservice1__ArrayOfRtmControlCenterEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmControlCenterEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmControlCenterEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmControlCenterEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity == NULL)
				{	if (soap_blist_RtmControlCenterEntity1 == NULL)
						soap_blist_RtmControlCenterEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity = (Bsdrtmservice1__RtmControlCenterEntity **)soap_push_block(soap, soap_blist_RtmControlCenterEntity1, sizeof(Bsdrtmservice1__RtmControlCenterEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, "Bsdrtmservice1:RtmControlCenterEntity", a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity, "Bsdrtmservice1:RtmControlCenterEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::__sizeRtmControlCenterEntity++;
					a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity)
			soap_pop_block(soap, soap_blist_RtmControlCenterEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::__sizeRtmControlCenterEntity)
			a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity = (Bsdrtmservice1__RtmControlCenterEntity **)soap_save_block(soap, soap_blist_RtmControlCenterEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmControlCenterEntity::RtmControlCenterEntity = NULL;
			if (soap_blist_RtmControlCenterEntity1)
				soap_end_block(soap, soap_blist_RtmControlCenterEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmControlCenterEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmControlCenterEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmControlCenterEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmControlCenterEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmControlCenterEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmControlCenterEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmControlCenterEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmControlCenterEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmControlCenterEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmControlCenterEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmControlCenterEntity);
		((Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmControlCenterEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmControlCenterEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmControlCenterEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)p = *(Bsdrtmservice1__ArrayOfRtmControlCenterEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmControlCenterEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmControlCenterEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmControlCenterEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmControlCenterEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmControlCenterEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmControlCenterEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmControlCenterEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmControlCenterEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity, sizeof(Bsdrtmservice1__OptResultOfRtmControlCenterEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmControlCenterEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::Data), "Bsdrtmservice1:ArrayOfRtmControlCenterEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmControlCenterEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmControlCenterEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmControlCenterEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmControlCenterEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmControlCenterEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmControlCenterEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmControlCenterEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmControlCenterEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmControlCenterEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmControlCenterEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmControlCenterEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmControlCenterEntity);
		((Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmControlCenterEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmControlCenterEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmControlCenterEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)p = *(Bsdrtmservice1__OptResultOfRtmControlCenterEntity*)q;
}

void Bsdrtmservice1__RtmMonOrgEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Monorgno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Monorgname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Address);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Post);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Responperson);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Linkman);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Fixstationnum);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Movestationnum);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Porstationnum);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Smallstationnum);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Brief);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Note);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmMonOrgEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Monorgno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Monorgno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Monorgname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Monorgname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Address, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Address);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Post, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Post);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Responperson, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Responperson);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Linkman, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Linkman);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Fixstationnum);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Movestationnum);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Porstationnum);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Smallstationnum);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Brief, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Brief);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Note, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Note);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmMonOrgEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmMonOrgEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmMonOrgEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmMonOrgEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmMonOrgEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monorgno", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Monorgno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Monorgname", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Monorgname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Address", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Address), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Post", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Post), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Responperson", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Responperson), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Linkman", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Linkman), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Fixstationnum", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Fixstationnum), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Movestationnum", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Movestationnum), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Porstationnum", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Porstationnum), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:Smallstationnum", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Smallstationnum), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Brief", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Brief), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Note", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Note), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmMonOrgEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmMonOrgEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmMonOrgEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonOrgEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonOrgEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmMonOrgEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity, sizeof(Bsdrtmservice1__RtmMonOrgEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmMonOrgEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Monorgno1 = 1;
	size_t soap_flag_Monorgname1 = 1;
	size_t soap_flag_Address1 = 1;
	size_t soap_flag_Post1 = 1;
	size_t soap_flag_Responperson1 = 1;
	size_t soap_flag_Linkman1 = 1;
	size_t soap_flag_Fixstationnum1 = 1;
	size_t soap_flag_Movestationnum1 = 1;
	size_t soap_flag_Porstationnum1 = 1;
	size_t soap_flag_Smallstationnum1 = 1;
	size_t soap_flag_Brief1 = 1;
	size_t soap_flag_Note1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Monorgno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monorgno", &(a->Bsdrtmservice1__RtmMonOrgEntity::Monorgno), "xsd:string"))
				{	soap_flag_Monorgno1--;
					continue;
				}
			if (soap_flag_Monorgname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Monorgname", &(a->Bsdrtmservice1__RtmMonOrgEntity::Monorgname), "xsd:string"))
				{	soap_flag_Monorgname1--;
					continue;
				}
			if (soap_flag_Address1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Address", &(a->Bsdrtmservice1__RtmMonOrgEntity::Address), "xsd:string"))
				{	soap_flag_Address1--;
					continue;
				}
			if (soap_flag_Post1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Post", &(a->Bsdrtmservice1__RtmMonOrgEntity::Post), "xsd:string"))
				{	soap_flag_Post1--;
					continue;
				}
			if (soap_flag_Responperson1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Responperson", &(a->Bsdrtmservice1__RtmMonOrgEntity::Responperson), "xsd:string"))
				{	soap_flag_Responperson1--;
					continue;
				}
			if (soap_flag_Linkman1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Linkman", &(a->Bsdrtmservice1__RtmMonOrgEntity::Linkman), "xsd:string"))
				{	soap_flag_Linkman1--;
					continue;
				}
			if (soap_flag_Fixstationnum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Fixstationnum", &(a->Bsdrtmservice1__RtmMonOrgEntity::Fixstationnum), "xsd:decimal"))
				{	soap_flag_Fixstationnum1--;
					continue;
				}
			if (soap_flag_Movestationnum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Movestationnum", &(a->Bsdrtmservice1__RtmMonOrgEntity::Movestationnum), "xsd:decimal"))
				{	soap_flag_Movestationnum1--;
					continue;
				}
			if (soap_flag_Porstationnum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Porstationnum", &(a->Bsdrtmservice1__RtmMonOrgEntity::Porstationnum), "xsd:decimal"))
				{	soap_flag_Porstationnum1--;
					continue;
				}
			if (soap_flag_Smallstationnum1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:Smallstationnum", &(a->Bsdrtmservice1__RtmMonOrgEntity::Smallstationnum), "xsd:decimal"))
				{	soap_flag_Smallstationnum1--;
					continue;
				}
			if (soap_flag_Brief1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Brief", &(a->Bsdrtmservice1__RtmMonOrgEntity::Brief), "xsd:string"))
				{	soap_flag_Brief1--;
					continue;
				}
			if (soap_flag_Note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Note", &(a->Bsdrtmservice1__RtmMonOrgEntity::Note), "xsd:string"))
				{	soap_flag_Note1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmMonOrgEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonOrgEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity, 0, sizeof(Bsdrtmservice1__RtmMonOrgEntity), 0, soap_copy_Bsdrtmservice1__RtmMonOrgEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Fixstationnum1 > 0 || soap_flag_Movestationnum1 > 0 || soap_flag_Porstationnum1 > 0 || soap_flag_Smallstationnum1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmMonOrgEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmMonOrgEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmMonOrgEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmMonOrgEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonOrgEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmMonOrgEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmMonOrgEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmMonOrgEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonOrgEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmMonOrgEntity);
		((Bsdrtmservice1__RtmMonOrgEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmMonOrgEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmMonOrgEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmMonOrgEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmMonOrgEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmMonOrgEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmMonOrgEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmMonOrgEntity*)p = *(Bsdrtmservice1__RtmMonOrgEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmMonOrgEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::__sizeRtmMonOrgEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmMonOrgEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::__sizeRtmMonOrgEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, this->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmMonOrgEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmMonOrgEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::__sizeRtmMonOrgEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, "Bsdrtmservice1:RtmMonOrgEntity", -1, a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmMonOrgEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonOrgEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMonOrgEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmMonOrgEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMonOrgEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmMonOrgEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmMonOrgEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmMonOrgEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity == NULL)
				{	if (soap_blist_RtmMonOrgEntity1 == NULL)
						soap_blist_RtmMonOrgEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity = (Bsdrtmservice1__RtmMonOrgEntity **)soap_push_block(soap, soap_blist_RtmMonOrgEntity1, sizeof(Bsdrtmservice1__RtmMonOrgEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, "Bsdrtmservice1:RtmMonOrgEntity", a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity, "Bsdrtmservice1:RtmMonOrgEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::__sizeRtmMonOrgEntity++;
					a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity)
			soap_pop_block(soap, soap_blist_RtmMonOrgEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::__sizeRtmMonOrgEntity)
			a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity = (Bsdrtmservice1__RtmMonOrgEntity **)soap_save_block(soap, soap_blist_RtmMonOrgEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmMonOrgEntity::RtmMonOrgEntity = NULL;
			if (soap_blist_RtmMonOrgEntity1)
				soap_end_block(soap, soap_blist_RtmMonOrgEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmMonOrgEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmMonOrgEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmMonOrgEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmMonOrgEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMonOrgEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmMonOrgEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonOrgEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonOrgEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmMonOrgEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMonOrgEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmMonOrgEntity);
		((Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmMonOrgEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmMonOrgEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmMonOrgEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)p = *(Bsdrtmservice1__ArrayOfRtmMonOrgEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmMonOrgEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmMonOrgEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmMonOrgEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmMonOrgEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmMonOrgEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonOrgEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMonOrgEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmMonOrgEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMonOrgEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmMonOrgEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::Data), "Bsdrtmservice1:ArrayOfRtmMonOrgEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmMonOrgEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmMonOrgEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmMonOrgEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmMonOrgEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmMonOrgEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMonOrgEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmMonOrgEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonOrgEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonOrgEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmMonOrgEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMonOrgEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmMonOrgEntity);
		((Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmMonOrgEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmMonOrgEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmMonOrgEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)p = *(Bsdrtmservice1__OptResultOfRtmMonOrgEntity*)q;
}

void Bsdrtmservice1__RtmDevModelFunParamEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmDevModelFunParamEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmDevModelFunParamEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmDevModelFunParamEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DEVModelUID", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devparam", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funno", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmDevModelFunParamEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelFunParamEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevModelFunParamEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmDevModelFunParamEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__RtmDevModelFunParamEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmDevModelFunParamEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DEVModelUID1 = 1;
	size_t soap_flag_Devparam1 = 1;
	size_t soap_flag_Funno1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DEVModelUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DEVModelUID", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID), "xsd:decimal"))
				{	soap_flag_DEVModelUID1--;
					continue;
				}
			if (soap_flag_Devparam1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devparam", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam), "xsd:string"))
				{	soap_flag_Devparam1--;
					continue;
				}
			if (soap_flag_Funno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funno", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno), "xsd:string"))
				{	soap_flag_Funno1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDevModelFunParamEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity, 0, sizeof(Bsdrtmservice1__RtmDevModelFunParamEntity), 0, soap_copy_Bsdrtmservice1__RtmDevModelFunParamEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DEVModelUID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmDevModelFunParamEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmDevModelFunParamEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmDevModelFunParamEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelFunParamEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelFunParamEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmDevModelFunParamEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmDevModelFunParamEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmDevModelFunParamEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelFunParamEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "Bsdrtmservice1:vRtmDevModelFunParamEntity"))
	{	cp->type = SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevModelFunParamEntity);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity);
			((Bsdrtmservice1__vRtmDevModelFunParamEntity*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevModelFunParamEntity[n]);
			if (size)
				*size = n * sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity);
			for (int i = 0; i < n; i++)
				((Bsdrtmservice1__vRtmDevModelFunParamEntity*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (Bsdrtmservice1__vRtmDevModelFunParamEntity*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevModelFunParamEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmDevModelFunParamEntity);
		((Bsdrtmservice1__RtmDevModelFunParamEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevModelFunParamEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmDevModelFunParamEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmDevModelFunParamEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmDevModelFunParamEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmDevModelFunParamEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmDevModelFunParamEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmDevModelFunParamEntity*)p = *(Bsdrtmservice1__RtmDevModelFunParamEntity*)q;
}

void Bsdrtmservice1__vRtmDevModelFunParamEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__vRtmDevModelFunParamEntity::Devmodelname);
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__vRtmDevModelFunParamEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__vRtmDevModelFunParamEntity::Devmodelname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__vRtmDevModelFunParamEntity::Devmodelname);
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__vRtmDevModelFunParamEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__vRtmDevModelFunParamEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity), "Bsdrtmservice1:vRtmDevModelFunParamEntity"))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DEVModelUID", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devparam", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Funno", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_std__string(soap, "Bsdrtmservice1:Devmodelname", -1, &(a->Bsdrtmservice1__vRtmDevModelFunParamEntity::Devmodelname), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__vRtmDevModelFunParamEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevModelFunParamEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmDevModelFunParamEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__vRtmDevModelFunParamEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__vRtmDevModelFunParamEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DEVModelUID2 = 1;
	size_t soap_flag_Devparam2 = 1;
	size_t soap_flag_Funno2 = 1;
	size_t soap_flag_Opttype2 = 1;
	size_t soap_flag_Devmodelname1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DEVModelUID2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DEVModelUID", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::DEVModelUID), "xsd:decimal"))
				{	soap_flag_DEVModelUID2--;
					continue;
				}
			if (soap_flag_Devparam2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devparam", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Devparam), "xsd:string"))
				{	soap_flag_Devparam2--;
					continue;
				}
			if (soap_flag_Funno2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Funno", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Funno), "xsd:string"))
				{	soap_flag_Funno2--;
					continue;
				}
			if (soap_flag_Opttype2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDevModelFunParamEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype2--;
					continue;
				}
			/* transient soap skipped */
			if (soap_flag_Devmodelname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Devmodelname", &(a->Bsdrtmservice1__vRtmDevModelFunParamEntity::Devmodelname), "xsd:string"))
				{	soap_flag_Devmodelname1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmDevModelFunParamEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity, 0, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity), 0, soap_copy_Bsdrtmservice1__vRtmDevModelFunParamEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DEVModelUID2 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__vRtmDevModelFunParamEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:vRtmDevModelFunParamEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__vRtmDevModelFunParamEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevModelFunParamEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__vRtmDevModelFunParamEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__vRtmDevModelFunParamEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevModelFunParamEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity);
		((Bsdrtmservice1__vRtmDevModelFunParamEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__vRtmDevModelFunParamEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__vRtmDevModelFunParamEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__vRtmDevModelFunParamEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__vRtmDevModelFunParamEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__vRtmDevModelFunParamEntity*)p = *(Bsdrtmservice1__vRtmDevModelFunParamEntity*)q;
}

void Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::__sizevRtmDevModelFunParamEntity = 0;
	this->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::__sizevRtmDevModelFunParamEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, this->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::__sizevRtmDevModelFunParamEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:vRtmDevModelFunParamEntity", -1, a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_vRtmDevModelFunParamEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:vRtmDevModelFunParamEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity == NULL)
				{	if (soap_blist_vRtmDevModelFunParamEntity1 == NULL)
						soap_blist_vRtmDevModelFunParamEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity = (Bsdrtmservice1__vRtmDevModelFunParamEntity **)soap_push_block(soap, soap_blist_vRtmDevModelFunParamEntity1, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity *));
					if (a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:vRtmDevModelFunParamEntity", a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity, "Bsdrtmservice1:vRtmDevModelFunParamEntity"))
				{	a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::__sizevRtmDevModelFunParamEntity++;
					a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity)
			soap_pop_block(soap, soap_blist_vRtmDevModelFunParamEntity1);
		if (a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::__sizevRtmDevModelFunParamEntity)
			a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity = (Bsdrtmservice1__vRtmDevModelFunParamEntity **)soap_save_block(soap, soap_blist_vRtmDevModelFunParamEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::vRtmDevModelFunParamEntity = NULL;
			if (soap_blist_vRtmDevModelFunParamEntity1)
				soap_end_block(soap, soap_blist_vRtmDevModelFunParamEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity, 0, sizeof(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
		((Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)p = *(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity*)q;
}

void Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Msg);
	this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::Data), "Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity, 0, sizeof(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
		((Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)p = *(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity*)q;
}

void Bsdrtmservice1__RtmDevModelEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevModelEntity::DEVModelUID);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelEntity::DEVModelNAME);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmDevModelEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmDevModelEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->Bsdrtmservice1__RtmDevModelEntity::DEVModelUID);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelEntity::DEVModelNAME, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelEntity::DEVModelNAME);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmDevModelEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmDevModelEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmDevModelEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmDevModelEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmDevModelEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmDevModelEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity), type))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdrtmservice1:DEVModelUID", -1, &(a->Bsdrtmservice1__RtmDevModelEntity::DEVModelUID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:DEVModelNAME", -1, &(a->Bsdrtmservice1__RtmDevModelEntity::DEVModelNAME), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmDevModelEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmDevModelEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmDevModelEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevModelEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmDevModelEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity, sizeof(Bsdrtmservice1__RtmDevModelEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmDevModelEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DEVModelUID1 = 1;
	size_t soap_flag_DEVModelNAME1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DEVModelUID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdrtmservice1:DEVModelUID", &(a->Bsdrtmservice1__RtmDevModelEntity::DEVModelUID), "xsd:decimal"))
				{	soap_flag_DEVModelUID1--;
					continue;
				}
			if (soap_flag_DEVModelNAME1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:DEVModelNAME", &(a->Bsdrtmservice1__RtmDevModelEntity::DEVModelNAME), "xsd:string"))
				{	soap_flag_DEVModelNAME1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmDevModelEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDevModelEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity, 0, sizeof(Bsdrtmservice1__RtmDevModelEntity), 0, soap_copy_Bsdrtmservice1__RtmDevModelEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_DEVModelUID1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmDevModelEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmDevModelEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmDevModelEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmDevModelEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmDevModelEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmDevModelEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmDevModelEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevModelEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmDevModelEntity);
		((Bsdrtmservice1__RtmDevModelEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmDevModelEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmDevModelEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmDevModelEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmDevModelEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmDevModelEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmDevModelEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmDevModelEntity*)p = *(Bsdrtmservice1__RtmDevModelEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmDevModelEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmDevModelEntity::__sizeRtmDevModelEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmDevModelEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmDevModelEntity::__sizeRtmDevModelEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmDevModelEntity(soap, this->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmDevModelEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmDevModelEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::__sizeRtmDevModelEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmDevModelEntity(soap, "Bsdrtmservice1:RtmDevModelEntity", -1, a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmDevModelEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDevModelEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmDevModelEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmDevModelEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity, sizeof(Bsdrtmservice1__ArrayOfRtmDevModelEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmDevModelEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmDevModelEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmDevModelEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity == NULL)
				{	if (soap_blist_RtmDevModelEntity1 == NULL)
						soap_blist_RtmDevModelEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity = (Bsdrtmservice1__RtmDevModelEntity **)soap_push_block(soap, soap_blist_RtmDevModelEntity1, sizeof(Bsdrtmservice1__RtmDevModelEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmDevModelEntity(soap, "Bsdrtmservice1:RtmDevModelEntity", a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity, "Bsdrtmservice1:RtmDevModelEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::__sizeRtmDevModelEntity++;
					a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity)
			soap_pop_block(soap, soap_blist_RtmDevModelEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::__sizeRtmDevModelEntity)
			a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity = (Bsdrtmservice1__RtmDevModelEntity **)soap_save_block(soap, soap_blist_RtmDevModelEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmDevModelEntity::RtmDevModelEntity = NULL;
			if (soap_blist_RtmDevModelEntity1)
				soap_end_block(soap, soap_blist_RtmDevModelEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmDevModelEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmDevModelEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmDevModelEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmDevModelEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmDevModelEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmDevModelEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDevModelEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDevModelEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmDevModelEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmDevModelEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmDevModelEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmDevModelEntity);
		((Bsdrtmservice1__ArrayOfRtmDevModelEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmDevModelEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmDevModelEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmDevModelEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmDevModelEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmDevModelEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmDevModelEntity*)p = *(Bsdrtmservice1__ArrayOfRtmDevModelEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmDevModelEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmDevModelEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmDevModelEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmDevModelEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmDevModelEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmDevModelEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDevModelEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmDevModelEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmDevModelEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity, sizeof(Bsdrtmservice1__OptResultOfRtmDevModelEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmDevModelEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::Data), "Bsdrtmservice1:ArrayOfRtmDevModelEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmDevModelEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmDevModelEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmDevModelEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmDevModelEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmDevModelEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmDevModelEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmDevModelEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDevModelEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDevModelEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmDevModelEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmDevModelEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmDevModelEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmDevModelEntity);
		((Bsdrtmservice1__OptResultOfRtmDevModelEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmDevModelEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmDevModelEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmDevModelEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmDevModelEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmDevModelEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmDevModelEntity*)p = *(Bsdrtmservice1__OptResultOfRtmDevModelEntity*)q;
}

void Bsdrtmservice1__RtmTypeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Itemid);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Itemname);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Desc);
	soap_default_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Opttype);
	/* transient soap skipped */
}

void Bsdrtmservice1__RtmTypeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__RtmTypeEntity::Itemid, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Itemid);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmTypeEntity::Itemname, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Itemname);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmTypeEntity::Desc, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Desc);
	soap_embedded(soap, &this->Bsdrtmservice1__RtmTypeEntity::Opttype, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__RtmTypeEntity::Opttype);
	/* transient soap skipped */
}

int Bsdrtmservice1__RtmTypeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__RtmTypeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__RtmTypeEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__RtmTypeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Itemid", -1, &(a->Bsdrtmservice1__RtmTypeEntity::Itemid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Itemname", -1, &(a->Bsdrtmservice1__RtmTypeEntity::Itemname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Desc", -1, &(a->Bsdrtmservice1__RtmTypeEntity::Desc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Opttype", -1, &(a->Bsdrtmservice1__RtmTypeEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__RtmTypeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__RtmTypeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmTypeEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__RtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmTypeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__RtmTypeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity, sizeof(Bsdrtmservice1__RtmTypeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__RtmTypeEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Itemid1 = 1;
	size_t soap_flag_Itemname1 = 1;
	size_t soap_flag_Desc1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Itemid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Itemid", &(a->Bsdrtmservice1__RtmTypeEntity::Itemid), "xsd:string"))
				{	soap_flag_Itemid1--;
					continue;
				}
			if (soap_flag_Itemname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Itemname", &(a->Bsdrtmservice1__RtmTypeEntity::Itemname), "xsd:string"))
				{	soap_flag_Itemname1--;
					continue;
				}
			if (soap_flag_Desc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Desc", &(a->Bsdrtmservice1__RtmTypeEntity::Desc), "xsd:string"))
				{	soap_flag_Desc1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Opttype", &(a->Bsdrtmservice1__RtmTypeEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmTypeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity, 0, sizeof(Bsdrtmservice1__RtmTypeEntity), 0, soap_copy_Bsdrtmservice1__RtmTypeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__RtmTypeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:RtmTypeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__RtmTypeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__RtmTypeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmTypeEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__RtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__RtmTypeEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__RtmTypeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__RtmTypeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmTypeEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__RtmTypeEntity);
		((Bsdrtmservice1__RtmTypeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__RtmTypeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__RtmTypeEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__RtmTypeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__RtmTypeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__RtmTypeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__RtmTypeEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__RtmTypeEntity*)p = *(Bsdrtmservice1__RtmTypeEntity*)q;
}

void Bsdrtmservice1__ArrayOfRtmTypeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity = 0;
	this->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfRtmTypeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity; i++)
		{
			soap_serialize_PointerToBsdrtmservice1__RtmTypeEntity(soap, this->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfRtmTypeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfRtmTypeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity; i++)
			if (soap_out_PointerToBsdrtmservice1__RtmTypeEntity(soap, "Bsdrtmservice1:RtmTypeEntity", -1, a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfRtmTypeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmTypeEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmTypeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfRtmTypeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity, sizeof(Bsdrtmservice1__ArrayOfRtmTypeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfRtmTypeEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmTypeEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:RtmTypeEntity", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity == NULL)
				{	if (soap_blist_RtmTypeEntity1 == NULL)
						soap_blist_RtmTypeEntity1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity = (Bsdrtmservice1__RtmTypeEntity **)soap_push_block(soap, soap_blist_RtmTypeEntity1, sizeof(Bsdrtmservice1__RtmTypeEntity *));
					if (a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity == NULL)
						return NULL;
					*a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdrtmservice1__RtmTypeEntity(soap, "Bsdrtmservice1:RtmTypeEntity", a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity, "Bsdrtmservice1:RtmTypeEntity"))
				{	a->Bsdrtmservice1__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity++;
					a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity)
			soap_pop_block(soap, soap_blist_RtmTypeEntity1);
		if (a->Bsdrtmservice1__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity)
			a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity = (Bsdrtmservice1__RtmTypeEntity **)soap_save_block(soap, soap_blist_RtmTypeEntity1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
			if (soap_blist_RtmTypeEntity1)
				soap_end_block(soap, soap_blist_RtmTypeEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfRtmTypeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity, 0, sizeof(Bsdrtmservice1__ArrayOfRtmTypeEntity), 0, soap_copy_Bsdrtmservice1__ArrayOfRtmTypeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfRtmTypeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmTypeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfRtmTypeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmTypeEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmTypeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfRtmTypeEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfRtmTypeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmTypeEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfRtmTypeEntity);
		((Bsdrtmservice1__ArrayOfRtmTypeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfRtmTypeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfRtmTypeEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfRtmTypeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfRtmTypeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfRtmTypeEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfRtmTypeEntity*)p = *(Bsdrtmservice1__ArrayOfRtmTypeEntity*)q;
}

void Bsdrtmservice1__OptResultOfRtmTypeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Msg);
	this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfRtmTypeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfRtmTypeEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfRtmTypeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfRtmTypeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfRtmTypeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmTypeEntity * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmTypeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfRtmTypeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity, sizeof(Bsdrtmservice1__OptResultOfRtmTypeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfRtmTypeEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::Data), "Bsdrtmservice1:ArrayOfRtmTypeEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfRtmTypeEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfRtmTypeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity, 0, sizeof(Bsdrtmservice1__OptResultOfRtmTypeEntity), 0, soap_copy_Bsdrtmservice1__OptResultOfRtmTypeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfRtmTypeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmTypeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfRtmTypeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmTypeEntity * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmTypeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfRtmTypeEntity * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfRtmTypeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmTypeEntity);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfRtmTypeEntity);
		((Bsdrtmservice1__OptResultOfRtmTypeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfRtmTypeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfRtmTypeEntity);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfRtmTypeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfRtmTypeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfRtmTypeEntity %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfRtmTypeEntity*)p = *(Bsdrtmservice1__OptResultOfRtmTypeEntity*)q;
}

void Bsdrtmservice1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdrtmservice1__ArrayOfString::__sizestring = 0;
	this->Bsdrtmservice1__ArrayOfString::string = NULL;
	/* transient soap skipped */
}

void Bsdrtmservice1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdrtmservice1__ArrayOfString::string)
	{	int i;
		for (i = 0; i < this->Bsdrtmservice1__ArrayOfString::__sizestring; i++)
		{
			soap_embedded(soap, this->Bsdrtmservice1__ArrayOfString::string + i, SOAP_TYPE_Bsdrtmservice_std__string);
			soap_serialize_std__string(soap, this->Bsdrtmservice1__ArrayOfString::string + i);
		}
	}
	/* transient soap skipped */
}

int Bsdrtmservice1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__ArrayOfString(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString), type))
		return soap->error;
	if (a->Bsdrtmservice1__ArrayOfString::string)
	{	int i;
		for (i = 0; i < a->Bsdrtmservice1__ArrayOfString::__sizestring; i++)
			if (soap_out_std__string(soap, "Bsdrtmservice1:string", -1, a->Bsdrtmservice1__ArrayOfString::string + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfString * SOAP_FMAC4 soap_in_Bsdrtmservice1__ArrayOfString(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString, sizeof(Bsdrtmservice1__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_string1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdrtmservice1:string", 1, NULL))
			{	if (a->Bsdrtmservice1__ArrayOfString::string == NULL)
				{	if (soap_blist_string1 == NULL)
						soap_blist_string1 = soap_new_block(soap);
					a->Bsdrtmservice1__ArrayOfString::string = (std::string *)soap_push_block(soap, soap_blist_string1, sizeof(std::string));
					if (a->Bsdrtmservice1__ArrayOfString::string == NULL)
						return NULL;
					std::string p;
					memcpy(a->Bsdrtmservice1__ArrayOfString::string, &p, sizeof(std::string)); // a bit rough but portable
					soap_default_std__string(soap, a->Bsdrtmservice1__ArrayOfString::string);
				}
				soap_revert(soap);
				if (soap_in_std__string(soap, "Bsdrtmservice1:string", a->Bsdrtmservice1__ArrayOfString::string, "xsd:string"))
				{	a->Bsdrtmservice1__ArrayOfString::__sizestring++;
					a->Bsdrtmservice1__ArrayOfString::string = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdrtmservice1__ArrayOfString::string)
			soap_pop_block(soap, soap_blist_string1);
		if (a->Bsdrtmservice1__ArrayOfString::__sizestring)
			a->Bsdrtmservice1__ArrayOfString::string = (std::string *)soap_save_block(soap, soap_blist_string1, NULL, 1);
		else
		{	a->Bsdrtmservice1__ArrayOfString::string = NULL;
			if (soap_blist_string1)
				soap_end_block(soap, soap_blist_string1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString, 0, sizeof(Bsdrtmservice1__ArrayOfString), 0, soap_copy_Bsdrtmservice1__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:ArrayOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfString * SOAP_FMAC4 soap_get_Bsdrtmservice1__ArrayOfString(struct soap *soap, Bsdrtmservice1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__ArrayOfString * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfString);
		if (size)
			*size = sizeof(Bsdrtmservice1__ArrayOfString);
		((Bsdrtmservice1__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__ArrayOfString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__ArrayOfString);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__ArrayOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__ArrayOfString %p -> %p\n", q, p));
	*(Bsdrtmservice1__ArrayOfString*)p = *(Bsdrtmservice1__ArrayOfString*)q;
}

void Bsdrtmservice1__OptResultOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfString::Result);
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfString::Msg);
	this->Bsdrtmservice1__OptResultOfString::Data = NULL;
	soap_default_std__string(soap, &this->Bsdrtmservice1__OptResultOfString::UpdateDate);
	/* transient soap skipped */
}

void Bsdrtmservice1__OptResultOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfString::Result, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfString::Result);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfString::Msg, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfString::Msg);
	soap_serialize_PointerToBsdrtmservice1__ArrayOfString(soap, &this->Bsdrtmservice1__OptResultOfString::Data);
	soap_embedded(soap, &this->Bsdrtmservice1__OptResultOfString::UpdateDate, SOAP_TYPE_Bsdrtmservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdrtmservice1__OptResultOfString::UpdateDate);
	/* transient soap skipped */
}

int Bsdrtmservice1__OptResultOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdrtmservice1__OptResultOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdrtmservice1__OptResultOfString(struct soap *soap, const char *tag, int id, const Bsdrtmservice1__OptResultOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Result", -1, &(a->Bsdrtmservice1__OptResultOfString::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:Msg", -1, &(a->Bsdrtmservice1__OptResultOfString::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:Data", -1, &(a->Bsdrtmservice1__OptResultOfString::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdrtmservice1:UpdateDate", -1, &(a->Bsdrtmservice1__OptResultOfString::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdrtmservice1__OptResultOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdrtmservice1__OptResultOfString(soap, tag, this, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfString * SOAP_FMAC4 soap_in_Bsdrtmservice1__OptResultOfString(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdrtmservice1__OptResultOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString, sizeof(Bsdrtmservice1__OptResultOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdrtmservice1__OptResultOfString *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Result", &(a->Bsdrtmservice1__OptResultOfString::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:Msg", &(a->Bsdrtmservice1__OptResultOfString::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdrtmservice1__ArrayOfString(soap, "Bsdrtmservice1:Data", &(a->Bsdrtmservice1__OptResultOfString::Data), "Bsdrtmservice1:ArrayOfString"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdrtmservice1:UpdateDate", &(a->Bsdrtmservice1__OptResultOfString::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__OptResultOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString, 0, sizeof(Bsdrtmservice1__OptResultOfString), 0, soap_copy_Bsdrtmservice1__OptResultOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdrtmservice1__OptResultOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString);
	if (this->soap_out(soap, tag?tag:"Bsdrtmservice1:OptResultOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdrtmservice1__OptResultOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdrtmservice1__OptResultOfString(soap, this, tag, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfString * SOAP_FMAC4 soap_get_Bsdrtmservice1__OptResultOfString(struct soap *soap, Bsdrtmservice1__OptResultOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdrtmservice1__OptResultOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdrtmservice1__OptResultOfString * SOAP_FMAC2 soap_instantiate_Bsdrtmservice1__OptResultOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdrtmservice1__OptResultOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfString);
		if (size)
			*size = sizeof(Bsdrtmservice1__OptResultOfString);
		((Bsdrtmservice1__OptResultOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdrtmservice1__OptResultOfString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdrtmservice1__OptResultOfString);
		for (int i = 0; i < n; i++)
			((Bsdrtmservice1__OptResultOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdrtmservice1__OptResultOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdrtmservice1__OptResultOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdrtmservice1__OptResultOfString %p -> %p\n", q, p));
	*(Bsdrtmservice1__OptResultOfString*)p = *(Bsdrtmservice1__OptResultOfString*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_Bsdrtmservice_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdrtmservice_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdrtmservice_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_Bsdrtmservice_xsd__decimal, 0, sizeof(std::string), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_Bsdrtmservice_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdrtmservice_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdrtmservice_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_Bsdrtmservice_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_std__string, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"SOAP-ENC:Array", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Fault, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Header, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, struct __Bsdrtmservice1__GetIEMSExDevs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetIEMSExDevs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const struct __Bsdrtmservice1__GetIEMSExDevs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, &a->Bsdrtmservice1__GetIEMSExDevs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetIEMSExDevs *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, "Bsdrtmservice1:GetIEMSExDevs", -1, &a->Bsdrtmservice1__GetIEMSExDevs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetIEMSExDevs * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetIEMSExDevs *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetIEMSExDevs = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetIEMSExDevs *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIEMSExDevs, sizeof(struct __Bsdrtmservice1__GetIEMSExDevs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetIEMSExDevs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetIEMSExDevs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, "Bsdrtmservice1:GetIEMSExDevs", &a->Bsdrtmservice1__GetIEMSExDevs, ""))
				{	soap_flag_Bsdrtmservice1__GetIEMSExDevs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const struct __Bsdrtmservice1__GetIEMSExDevs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetIEMSExDevs(soap, tag?tag:"-Bsdrtmservice1:GetIEMSExDevs", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetIEMSExDevs * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, struct __Bsdrtmservice1__GetIEMSExDevs *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetIEMSExDevs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetIEMSExDevs * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetIEMSExDevs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIEMSExDevs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetIEMSExDevs);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetIEMSExDevs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetIEMSExDevs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetIEMSExDevs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetIEMSExDevs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetIEMSExDevs %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetIEMSExDevs*)p = *(struct __Bsdrtmservice1__GetIEMSExDevs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetExtendDevicesByDataTypes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, &a->Bsdrtmservice1__GetExtendDevicesByDataTypes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypes", -1, &a->Bsdrtmservice1__GetExtendDevicesByDataTypes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetExtendDevicesByDataTypes * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetExtendDevicesByDataTypes = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevicesByDataTypes, sizeof(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetExtendDevicesByDataTypes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, "Bsdrtmservice1:GetExtendDevicesByDataTypes", &a->Bsdrtmservice1__GetExtendDevicesByDataTypes, ""))
				{	soap_flag_Bsdrtmservice1__GetExtendDevicesByDataTypes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag?tag:"-Bsdrtmservice1:GetExtendDevicesByDataTypes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetExtendDevicesByDataTypes * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, struct __Bsdrtmservice1__GetExtendDevicesByDataTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetExtendDevicesByDataTypes * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetExtendDevicesByDataTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevicesByDataTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetExtendDevicesByDataTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetExtendDevicesByDataTypes %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes*)p = *(struct __Bsdrtmservice1__GetExtendDevicesByDataTypes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetExtendDevices(struct soap *soap, struct __Bsdrtmservice1__GetExtendDevices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetExtendDevices = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetExtendDevices(struct soap *soap, const struct __Bsdrtmservice1__GetExtendDevices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, &a->Bsdrtmservice1__GetExtendDevices);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetExtendDevices(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetExtendDevices *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, "Bsdrtmservice1:GetExtendDevices", -1, &a->Bsdrtmservice1__GetExtendDevices, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetExtendDevices * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetExtendDevices(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetExtendDevices *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetExtendDevices = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetExtendDevices *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevices, sizeof(struct __Bsdrtmservice1__GetExtendDevices), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetExtendDevices(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetExtendDevices && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, "Bsdrtmservice1:GetExtendDevices", &a->Bsdrtmservice1__GetExtendDevices, ""))
				{	soap_flag_Bsdrtmservice1__GetExtendDevices--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetExtendDevices(struct soap *soap, const struct __Bsdrtmservice1__GetExtendDevices *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetExtendDevices(soap, tag?tag:"-Bsdrtmservice1:GetExtendDevices", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetExtendDevices * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetExtendDevices(struct soap *soap, struct __Bsdrtmservice1__GetExtendDevices *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetExtendDevices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetExtendDevices * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetExtendDevices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetExtendDevices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevices, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetExtendDevices);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetExtendDevices);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetExtendDevices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetExtendDevices);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetExtendDevices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetExtendDevices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetExtendDevices %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetExtendDevices*)p = *(struct __Bsdrtmservice1__GetExtendDevices*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetExtendDevice(struct soap *soap, struct __Bsdrtmservice1__GetExtendDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetExtendDevice = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetExtendDevice(struct soap *soap, const struct __Bsdrtmservice1__GetExtendDevice *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, &a->Bsdrtmservice1__GetExtendDevice);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetExtendDevice(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetExtendDevice *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, "Bsdrtmservice1:GetExtendDevice", -1, &a->Bsdrtmservice1__GetExtendDevice, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetExtendDevice * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetExtendDevice(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetExtendDevice *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetExtendDevice = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetExtendDevice *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevice, sizeof(struct __Bsdrtmservice1__GetExtendDevice), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetExtendDevice(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetExtendDevice && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, "Bsdrtmservice1:GetExtendDevice", &a->Bsdrtmservice1__GetExtendDevice, ""))
				{	soap_flag_Bsdrtmservice1__GetExtendDevice--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetExtendDevice(struct soap *soap, const struct __Bsdrtmservice1__GetExtendDevice *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetExtendDevice(soap, tag?tag:"-Bsdrtmservice1:GetExtendDevice", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetExtendDevice * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetExtendDevice(struct soap *soap, struct __Bsdrtmservice1__GetExtendDevice *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetExtendDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetExtendDevice * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetExtendDevice(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetExtendDevice(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetExtendDevice, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetExtendDevice);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetExtendDevice);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetExtendDevice[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetExtendDevice);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetExtendDevice*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetExtendDevice(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetExtendDevice %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetExtendDevice*)p = *(struct __Bsdrtmservice1__GetExtendDevice*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, struct __Bsdrtmservice1__SetInetllTaskState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__SetInetllTaskState = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const struct __Bsdrtmservice1__SetInetllTaskState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, &a->Bsdrtmservice1__SetInetllTaskState);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__SetInetllTaskState *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, "Bsdrtmservice1:SetInetllTaskState", -1, &a->Bsdrtmservice1__SetInetllTaskState, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetInetllTaskState * SOAP_FMAC4 soap_in___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const char *tag, struct __Bsdrtmservice1__SetInetllTaskState *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__SetInetllTaskState = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__SetInetllTaskState *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetInetllTaskState, sizeof(struct __Bsdrtmservice1__SetInetllTaskState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__SetInetllTaskState(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__SetInetllTaskState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, "Bsdrtmservice1:SetInetllTaskState", &a->Bsdrtmservice1__SetInetllTaskState, ""))
				{	soap_flag_Bsdrtmservice1__SetInetllTaskState--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const struct __Bsdrtmservice1__SetInetllTaskState *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__SetInetllTaskState(soap, tag?tag:"-Bsdrtmservice1:SetInetllTaskState", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetInetllTaskState * SOAP_FMAC4 soap_get___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, struct __Bsdrtmservice1__SetInetllTaskState *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__SetInetllTaskState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__SetInetllTaskState * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__SetInetllTaskState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetInetllTaskState, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetInetllTaskState);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__SetInetllTaskState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetInetllTaskState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__SetInetllTaskState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__SetInetllTaskState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__SetInetllTaskState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__SetInetllTaskState %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__SetInetllTaskState*)p = *(struct __Bsdrtmservice1__SetInetllTaskState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, struct __Bsdrtmservice1__AddInetllTaskLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddInetllTaskLog = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const struct __Bsdrtmservice1__AddInetllTaskLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, &a->Bsdrtmservice1__AddInetllTaskLog);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddInetllTaskLog *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, "Bsdrtmservice1:AddInetllTaskLog", -1, &a->Bsdrtmservice1__AddInetllTaskLog, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddInetllTaskLog * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddInetllTaskLog *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddInetllTaskLog = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddInetllTaskLog *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddInetllTaskLog, sizeof(struct __Bsdrtmservice1__AddInetllTaskLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddInetllTaskLog(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddInetllTaskLog && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, "Bsdrtmservice1:AddInetllTaskLog", &a->Bsdrtmservice1__AddInetllTaskLog, ""))
				{	soap_flag_Bsdrtmservice1__AddInetllTaskLog--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const struct __Bsdrtmservice1__AddInetllTaskLog *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddInetllTaskLog(soap, tag?tag:"-Bsdrtmservice1:AddInetllTaskLog", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddInetllTaskLog * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, struct __Bsdrtmservice1__AddInetllTaskLog *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddInetllTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddInetllTaskLog * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddInetllTaskLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddInetllTaskLog, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddInetllTaskLog);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddInetllTaskLog);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddInetllTaskLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddInetllTaskLog);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddInetllTaskLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddInetllTaskLog %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddInetllTaskLog*)p = *(struct __Bsdrtmservice1__AddInetllTaskLog*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetIntellTask(struct soap *soap, struct __Bsdrtmservice1__GetIntellTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetIntellTask = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetIntellTask(struct soap *soap, const struct __Bsdrtmservice1__GetIntellTask *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetIntellTask(soap, &a->Bsdrtmservice1__GetIntellTask);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetIntellTask(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetIntellTask *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetIntellTask(soap, "Bsdrtmservice1:GetIntellTask", -1, &a->Bsdrtmservice1__GetIntellTask, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetIntellTask * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetIntellTask(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetIntellTask *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetIntellTask = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetIntellTask *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIntellTask, sizeof(struct __Bsdrtmservice1__GetIntellTask), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetIntellTask(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetIntellTask && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetIntellTask(soap, "Bsdrtmservice1:GetIntellTask", &a->Bsdrtmservice1__GetIntellTask, ""))
				{	soap_flag_Bsdrtmservice1__GetIntellTask--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetIntellTask(struct soap *soap, const struct __Bsdrtmservice1__GetIntellTask *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetIntellTask(soap, tag?tag:"-Bsdrtmservice1:GetIntellTask", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetIntellTask * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetIntellTask(struct soap *soap, struct __Bsdrtmservice1__GetIntellTask *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetIntellTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetIntellTask * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetIntellTask(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetIntellTask(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetIntellTask, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetIntellTask);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetIntellTask);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetIntellTask[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetIntellTask);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetIntellTask*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetIntellTask(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetIntellTask %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetIntellTask*)p = *(struct __Bsdrtmservice1__GetIntellTask*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, struct __Bsdrtmservice1__GetRuningIntellTaskIds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetRuningIntellTaskIds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const struct __Bsdrtmservice1__GetRuningIntellTaskIds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, &a->Bsdrtmservice1__GetRuningIntellTaskIds);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetRuningIntellTaskIds *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, "Bsdrtmservice1:GetRuningIntellTaskIds", -1, &a->Bsdrtmservice1__GetRuningIntellTaskIds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRuningIntellTaskIds * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetRuningIntellTaskIds *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetRuningIntellTaskIds = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetRuningIntellTaskIds *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningIntellTaskIds, sizeof(struct __Bsdrtmservice1__GetRuningIntellTaskIds), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetRuningIntellTaskIds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetRuningIntellTaskIds && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, "Bsdrtmservice1:GetRuningIntellTaskIds", &a->Bsdrtmservice1__GetRuningIntellTaskIds, ""))
				{	soap_flag_Bsdrtmservice1__GetRuningIntellTaskIds--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const struct __Bsdrtmservice1__GetRuningIntellTaskIds *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag?tag:"-Bsdrtmservice1:GetRuningIntellTaskIds", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRuningIntellTaskIds * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, struct __Bsdrtmservice1__GetRuningIntellTaskIds *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetRuningIntellTaskIds * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetRuningIntellTaskIds(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningIntellTaskIds, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRuningIntellTaskIds);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetRuningIntellTaskIds);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRuningIntellTaskIds[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetRuningIntellTaskIds);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetRuningIntellTaskIds*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetRuningIntellTaskIds %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetRuningIntellTaskIds*)p = *(struct __Bsdrtmservice1__GetRuningIntellTaskIds*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, struct __Bsdrtmservice1__GetMonStationsByVideo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStationsByVideo = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationsByVideo *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, &a->Bsdrtmservice1__GetMonStationsByVideo);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStationsByVideo *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, "Bsdrtmservice1:GetMonStationsByVideo", -1, &a->Bsdrtmservice1__GetMonStationsByVideo, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationsByVideo * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStationsByVideo *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStationsByVideo = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStationsByVideo *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByVideo, sizeof(struct __Bsdrtmservice1__GetMonStationsByVideo), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStationsByVideo(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStationsByVideo && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, "Bsdrtmservice1:GetMonStationsByVideo", &a->Bsdrtmservice1__GetMonStationsByVideo, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStationsByVideo--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationsByVideo *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStationsByVideo(soap, tag?tag:"-Bsdrtmservice1:GetMonStationsByVideo", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationsByVideo * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, struct __Bsdrtmservice1__GetMonStationsByVideo *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStationsByVideo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStationsByVideo * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStationsByVideo(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByVideo, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationsByVideo);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStationsByVideo);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationsByVideo[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStationsByVideo);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStationsByVideo*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStationsByVideo %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStationsByVideo*)p = *(struct __Bsdrtmservice1__GetMonStationsByVideo*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__SetConfirmedState(struct soap *soap, struct __Bsdrtmservice1__SetConfirmedState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__SetConfirmedState = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__SetConfirmedState(struct soap *soap, const struct __Bsdrtmservice1__SetConfirmedState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, &a->Bsdrtmservice1__SetConfirmedState);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__SetConfirmedState(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__SetConfirmedState *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, "Bsdrtmservice1:SetConfirmedState", -1, &a->Bsdrtmservice1__SetConfirmedState, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetConfirmedState * SOAP_FMAC4 soap_in___Bsdrtmservice1__SetConfirmedState(struct soap *soap, const char *tag, struct __Bsdrtmservice1__SetConfirmedState *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__SetConfirmedState = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__SetConfirmedState *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetConfirmedState, sizeof(struct __Bsdrtmservice1__SetConfirmedState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__SetConfirmedState(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__SetConfirmedState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, "Bsdrtmservice1:SetConfirmedState", &a->Bsdrtmservice1__SetConfirmedState, ""))
				{	soap_flag_Bsdrtmservice1__SetConfirmedState--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__SetConfirmedState(struct soap *soap, const struct __Bsdrtmservice1__SetConfirmedState *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__SetConfirmedState(soap, tag?tag:"-Bsdrtmservice1:SetConfirmedState", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetConfirmedState * SOAP_FMAC4 soap_get___Bsdrtmservice1__SetConfirmedState(struct soap *soap, struct __Bsdrtmservice1__SetConfirmedState *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__SetConfirmedState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__SetConfirmedState * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__SetConfirmedState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__SetConfirmedState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetConfirmedState, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetConfirmedState);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__SetConfirmedState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetConfirmedState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__SetConfirmedState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__SetConfirmedState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__SetConfirmedState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__SetConfirmedState %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__SetConfirmedState*)p = *(struct __Bsdrtmservice1__SetConfirmedState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMalfunctionAlertOfMonstationno = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, &a->Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationno", -1, &a->Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, sizeof(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, "Bsdrtmservice1:GetMalfunctionAlertOfMonstationno", &a->Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, ""))
				{	soap_flag_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag?tag:"-Bsdrtmservice1:GetMalfunctionAlertOfMonstationno", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)p = *(struct __Bsdrtmservice1__GetMalfunctionAlertOfMonstationno*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, struct __Bsdrtmservice1__GetPageMalfunctionAlerts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetPageMalfunctionAlerts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const struct __Bsdrtmservice1__GetPageMalfunctionAlerts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, &a->Bsdrtmservice1__GetPageMalfunctionAlerts);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetPageMalfunctionAlerts *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, "Bsdrtmservice1:GetPageMalfunctionAlerts", -1, &a->Bsdrtmservice1__GetPageMalfunctionAlerts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetPageMalfunctionAlerts * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetPageMalfunctionAlerts *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetPageMalfunctionAlerts = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetPageMalfunctionAlerts *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPageMalfunctionAlerts, sizeof(struct __Bsdrtmservice1__GetPageMalfunctionAlerts), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetPageMalfunctionAlerts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetPageMalfunctionAlerts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, "Bsdrtmservice1:GetPageMalfunctionAlerts", &a->Bsdrtmservice1__GetPageMalfunctionAlerts, ""))
				{	soap_flag_Bsdrtmservice1__GetPageMalfunctionAlerts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const struct __Bsdrtmservice1__GetPageMalfunctionAlerts *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag?tag:"-Bsdrtmservice1:GetPageMalfunctionAlerts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetPageMalfunctionAlerts * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, struct __Bsdrtmservice1__GetPageMalfunctionAlerts *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetPageMalfunctionAlerts * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetPageMalfunctionAlerts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPageMalfunctionAlerts, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetPageMalfunctionAlerts);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetPageMalfunctionAlerts);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetPageMalfunctionAlerts[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetPageMalfunctionAlerts);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetPageMalfunctionAlerts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetPageMalfunctionAlerts %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetPageMalfunctionAlerts*)p = *(struct __Bsdrtmservice1__GetPageMalfunctionAlerts*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetAllMalfunctionAlertCount = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, &a->Bsdrtmservice1__GetAllMalfunctionAlertCount);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCount", -1, &a->Bsdrtmservice1__GetAllMalfunctionAlertCount, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllMalfunctionAlertCount * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetAllMalfunctionAlertCount = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllMalfunctionAlertCount, sizeof(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetAllMalfunctionAlertCount && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, "Bsdrtmservice1:GetAllMalfunctionAlertCount", &a->Bsdrtmservice1__GetAllMalfunctionAlertCount, ""))
				{	soap_flag_Bsdrtmservice1__GetAllMalfunctionAlertCount--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag?tag:"-Bsdrtmservice1:GetAllMalfunctionAlertCount", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllMalfunctionAlertCount * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, struct __Bsdrtmservice1__GetAllMalfunctionAlertCount *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetAllMalfunctionAlertCount * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetAllMalfunctionAlertCount(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllMalfunctionAlertCount, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetAllMalfunctionAlertCount*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetAllMalfunctionAlertCount %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount*)p = *(struct __Bsdrtmservice1__GetAllMalfunctionAlertCount*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, struct __Bsdrtmservice1__GetMalfunctionCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMalfunctionCode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const struct __Bsdrtmservice1__GetMalfunctionCode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, &a->Bsdrtmservice1__GetMalfunctionCode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMalfunctionCode *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, "Bsdrtmservice1:GetMalfunctionCode", -1, &a->Bsdrtmservice1__GetMalfunctionCode, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMalfunctionCode * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMalfunctionCode *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMalfunctionCode = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMalfunctionCode *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionCode, sizeof(struct __Bsdrtmservice1__GetMalfunctionCode), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMalfunctionCode(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMalfunctionCode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, "Bsdrtmservice1:GetMalfunctionCode", &a->Bsdrtmservice1__GetMalfunctionCode, ""))
				{	soap_flag_Bsdrtmservice1__GetMalfunctionCode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const struct __Bsdrtmservice1__GetMalfunctionCode *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMalfunctionCode(soap, tag?tag:"-Bsdrtmservice1:GetMalfunctionCode", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMalfunctionCode * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, struct __Bsdrtmservice1__GetMalfunctionCode *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMalfunctionCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMalfunctionCode * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMalfunctionCode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMalfunctionCode, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMalfunctionCode);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMalfunctionCode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMalfunctionCode[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMalfunctionCode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMalfunctionCode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMalfunctionCode %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMalfunctionCode*)p = *(struct __Bsdrtmservice1__GetMalfunctionCode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, struct __Bsdrtmservice1__AddMalfunctionAlert *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddMalfunctionAlert = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const struct __Bsdrtmservice1__AddMalfunctionAlert *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, &a->Bsdrtmservice1__AddMalfunctionAlert);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddMalfunctionAlert *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, "Bsdrtmservice1:AddMalfunctionAlert", -1, &a->Bsdrtmservice1__AddMalfunctionAlert, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMalfunctionAlert * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddMalfunctionAlert *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddMalfunctionAlert = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddMalfunctionAlert *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMalfunctionAlert, sizeof(struct __Bsdrtmservice1__AddMalfunctionAlert), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddMalfunctionAlert(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddMalfunctionAlert && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, "Bsdrtmservice1:AddMalfunctionAlert", &a->Bsdrtmservice1__AddMalfunctionAlert, ""))
				{	soap_flag_Bsdrtmservice1__AddMalfunctionAlert--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const struct __Bsdrtmservice1__AddMalfunctionAlert *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddMalfunctionAlert(soap, tag?tag:"-Bsdrtmservice1:AddMalfunctionAlert", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMalfunctionAlert * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, struct __Bsdrtmservice1__AddMalfunctionAlert *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddMalfunctionAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddMalfunctionAlert * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddMalfunctionAlert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMalfunctionAlert, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMalfunctionAlert);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddMalfunctionAlert);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMalfunctionAlert[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddMalfunctionAlert);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddMalfunctionAlert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddMalfunctionAlert %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddMalfunctionAlert*)p = *(struct __Bsdrtmservice1__AddMalfunctionAlert*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, struct __Bsdrtmservice1__DelMonReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__DelMonReportAttachment = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const struct __Bsdrtmservice1__DelMonReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, &a->Bsdrtmservice1__DelMonReportAttachment);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__DelMonReportAttachment *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, "Bsdrtmservice1:DelMonReportAttachment", -1, &a->Bsdrtmservice1__DelMonReportAttachment, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__DelMonReportAttachment * SOAP_FMAC4 soap_in___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const char *tag, struct __Bsdrtmservice1__DelMonReportAttachment *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__DelMonReportAttachment = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__DelMonReportAttachment *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReportAttachment, sizeof(struct __Bsdrtmservice1__DelMonReportAttachment), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__DelMonReportAttachment(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__DelMonReportAttachment && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, "Bsdrtmservice1:DelMonReportAttachment", &a->Bsdrtmservice1__DelMonReportAttachment, ""))
				{	soap_flag_Bsdrtmservice1__DelMonReportAttachment--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const struct __Bsdrtmservice1__DelMonReportAttachment *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__DelMonReportAttachment(soap, tag?tag:"-Bsdrtmservice1:DelMonReportAttachment", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__DelMonReportAttachment * SOAP_FMAC4 soap_get___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, struct __Bsdrtmservice1__DelMonReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__DelMonReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__DelMonReportAttachment * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__DelMonReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReportAttachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__DelMonReportAttachment);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__DelMonReportAttachment);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__DelMonReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__DelMonReportAttachment);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__DelMonReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__DelMonReportAttachment %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__DelMonReportAttachment*)p = *(struct __Bsdrtmservice1__DelMonReportAttachment*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, struct __Bsdrtmservice1__AddMonReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddMonReportAttachment = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const struct __Bsdrtmservice1__AddMonReportAttachment *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, &a->Bsdrtmservice1__AddMonReportAttachment);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddMonReportAttachment *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, "Bsdrtmservice1:AddMonReportAttachment", -1, &a->Bsdrtmservice1__AddMonReportAttachment, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMonReportAttachment * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddMonReportAttachment *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddMonReportAttachment = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddMonReportAttachment *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReportAttachment, sizeof(struct __Bsdrtmservice1__AddMonReportAttachment), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddMonReportAttachment(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddMonReportAttachment && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, "Bsdrtmservice1:AddMonReportAttachment", &a->Bsdrtmservice1__AddMonReportAttachment, ""))
				{	soap_flag_Bsdrtmservice1__AddMonReportAttachment--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const struct __Bsdrtmservice1__AddMonReportAttachment *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddMonReportAttachment(soap, tag?tag:"-Bsdrtmservice1:AddMonReportAttachment", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMonReportAttachment * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, struct __Bsdrtmservice1__AddMonReportAttachment *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddMonReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddMonReportAttachment * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddMonReportAttachment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReportAttachment, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMonReportAttachment);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddMonReportAttachment);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMonReportAttachment[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddMonReportAttachment);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddMonReportAttachment*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddMonReportAttachment %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddMonReportAttachment*)p = *(struct __Bsdrtmservice1__AddMonReportAttachment*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, struct __Bsdrtmservice1__GetMonReportAttachmentContent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonReportAttachmentContent = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportAttachmentContent *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, &a->Bsdrtmservice1__GetMonReportAttachmentContent);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonReportAttachmentContent *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, "Bsdrtmservice1:GetMonReportAttachmentContent", -1, &a->Bsdrtmservice1__GetMonReportAttachmentContent, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportAttachmentContent * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonReportAttachmentContent *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonReportAttachmentContent = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonReportAttachmentContent *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachmentContent, sizeof(struct __Bsdrtmservice1__GetMonReportAttachmentContent), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonReportAttachmentContent(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonReportAttachmentContent && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, "Bsdrtmservice1:GetMonReportAttachmentContent", &a->Bsdrtmservice1__GetMonReportAttachmentContent, ""))
				{	soap_flag_Bsdrtmservice1__GetMonReportAttachmentContent--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportAttachmentContent *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag?tag:"-Bsdrtmservice1:GetMonReportAttachmentContent", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportAttachmentContent * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, struct __Bsdrtmservice1__GetMonReportAttachmentContent *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonReportAttachmentContent * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonReportAttachmentContent(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachmentContent, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportAttachmentContent);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonReportAttachmentContent);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportAttachmentContent[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonReportAttachmentContent);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonReportAttachmentContent*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonReportAttachmentContent %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonReportAttachmentContent*)p = *(struct __Bsdrtmservice1__GetMonReportAttachmentContent*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, struct __Bsdrtmservice1__GetMonReportAttachments *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonReportAttachments = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportAttachments *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, &a->Bsdrtmservice1__GetMonReportAttachments);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonReportAttachments *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, "Bsdrtmservice1:GetMonReportAttachments", -1, &a->Bsdrtmservice1__GetMonReportAttachments, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportAttachments * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonReportAttachments *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonReportAttachments = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonReportAttachments *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachments, sizeof(struct __Bsdrtmservice1__GetMonReportAttachments), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonReportAttachments(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonReportAttachments && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, "Bsdrtmservice1:GetMonReportAttachments", &a->Bsdrtmservice1__GetMonReportAttachments, ""))
				{	soap_flag_Bsdrtmservice1__GetMonReportAttachments--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportAttachments *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonReportAttachments(soap, tag?tag:"-Bsdrtmservice1:GetMonReportAttachments", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportAttachments * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, struct __Bsdrtmservice1__GetMonReportAttachments *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonReportAttachments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonReportAttachments * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonReportAttachments(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportAttachments, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportAttachments);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonReportAttachments);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportAttachments[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonReportAttachments);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonReportAttachments*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonReportAttachments %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonReportAttachments*)p = *(struct __Bsdrtmservice1__GetMonReportAttachments*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, struct __Bsdrtmservice1__ExistMonReportofFreq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__ExistMonReportofFreq = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const struct __Bsdrtmservice1__ExistMonReportofFreq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, &a->Bsdrtmservice1__ExistMonReportofFreq);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__ExistMonReportofFreq *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, "Bsdrtmservice1:ExistMonReportofFreq", -1, &a->Bsdrtmservice1__ExistMonReportofFreq, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__ExistMonReportofFreq * SOAP_FMAC4 soap_in___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const char *tag, struct __Bsdrtmservice1__ExistMonReportofFreq *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__ExistMonReportofFreq = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__ExistMonReportofFreq *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__ExistMonReportofFreq, sizeof(struct __Bsdrtmservice1__ExistMonReportofFreq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__ExistMonReportofFreq(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__ExistMonReportofFreq && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, "Bsdrtmservice1:ExistMonReportofFreq", &a->Bsdrtmservice1__ExistMonReportofFreq, ""))
				{	soap_flag_Bsdrtmservice1__ExistMonReportofFreq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const struct __Bsdrtmservice1__ExistMonReportofFreq *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__ExistMonReportofFreq(soap, tag?tag:"-Bsdrtmservice1:ExistMonReportofFreq", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__ExistMonReportofFreq * SOAP_FMAC4 soap_get___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, struct __Bsdrtmservice1__ExistMonReportofFreq *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__ExistMonReportofFreq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__ExistMonReportofFreq * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__ExistMonReportofFreq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__ExistMonReportofFreq, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__ExistMonReportofFreq);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__ExistMonReportofFreq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__ExistMonReportofFreq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__ExistMonReportofFreq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__ExistMonReportofFreq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__ExistMonReportofFreq %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__ExistMonReportofFreq*)p = *(struct __Bsdrtmservice1__ExistMonReportofFreq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, struct __Bsdrtmservice1__GetMonReportFreqTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonReportFreqTypes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportFreqTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, &a->Bsdrtmservice1__GetMonReportFreqTypes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonReportFreqTypes *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, "Bsdrtmservice1:GetMonReportFreqTypes", -1, &a->Bsdrtmservice1__GetMonReportFreqTypes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportFreqTypes * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonReportFreqTypes *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonReportFreqTypes = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonReportFreqTypes *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportFreqTypes, sizeof(struct __Bsdrtmservice1__GetMonReportFreqTypes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonReportFreqTypes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonReportFreqTypes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, "Bsdrtmservice1:GetMonReportFreqTypes", &a->Bsdrtmservice1__GetMonReportFreqTypes, ""))
				{	soap_flag_Bsdrtmservice1__GetMonReportFreqTypes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportFreqTypes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonReportFreqTypes(soap, tag?tag:"-Bsdrtmservice1:GetMonReportFreqTypes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportFreqTypes * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, struct __Bsdrtmservice1__GetMonReportFreqTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonReportFreqTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonReportFreqTypes * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonReportFreqTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportFreqTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportFreqTypes);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonReportFreqTypes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportFreqTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonReportFreqTypes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonReportFreqTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonReportFreqTypes %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonReportFreqTypes*)p = *(struct __Bsdrtmservice1__GetMonReportFreqTypes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, struct __Bsdrtmservice1__GetMonReportsOfFreqs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonReportsOfFreqs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportsOfFreqs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, &a->Bsdrtmservice1__GetMonReportsOfFreqs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonReportsOfFreqs *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, "Bsdrtmservice1:GetMonReportsOfFreqs", -1, &a->Bsdrtmservice1__GetMonReportsOfFreqs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportsOfFreqs * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonReportsOfFreqs *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonReportsOfFreqs = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonReportsOfFreqs *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportsOfFreqs, sizeof(struct __Bsdrtmservice1__GetMonReportsOfFreqs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonReportsOfFreqs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonReportsOfFreqs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, "Bsdrtmservice1:GetMonReportsOfFreqs", &a->Bsdrtmservice1__GetMonReportsOfFreqs, ""))
				{	soap_flag_Bsdrtmservice1__GetMonReportsOfFreqs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportsOfFreqs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag?tag:"-Bsdrtmservice1:GetMonReportsOfFreqs", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportsOfFreqs * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, struct __Bsdrtmservice1__GetMonReportsOfFreqs *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonReportsOfFreqs * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonReportsOfFreqs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportsOfFreqs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportsOfFreqs);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonReportsOfFreqs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportsOfFreqs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonReportsOfFreqs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonReportsOfFreqs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonReportsOfFreqs %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonReportsOfFreqs*)p = *(struct __Bsdrtmservice1__GetMonReportsOfFreqs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, struct __Bsdrtmservice1__GetMonReportOfFreq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonReportOfFreq = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportOfFreq *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, &a->Bsdrtmservice1__GetMonReportOfFreq);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonReportOfFreq *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, "Bsdrtmservice1:GetMonReportOfFreq", -1, &a->Bsdrtmservice1__GetMonReportOfFreq, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportOfFreq * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonReportOfFreq *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonReportOfFreq = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonReportOfFreq *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportOfFreq, sizeof(struct __Bsdrtmservice1__GetMonReportOfFreq), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonReportOfFreq(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonReportOfFreq && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, "Bsdrtmservice1:GetMonReportOfFreq", &a->Bsdrtmservice1__GetMonReportOfFreq, ""))
				{	soap_flag_Bsdrtmservice1__GetMonReportOfFreq--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const struct __Bsdrtmservice1__GetMonReportOfFreq *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonReportOfFreq(soap, tag?tag:"-Bsdrtmservice1:GetMonReportOfFreq", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonReportOfFreq * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, struct __Bsdrtmservice1__GetMonReportOfFreq *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonReportOfFreq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonReportOfFreq * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonReportOfFreq(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonReportOfFreq, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportOfFreq);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonReportOfFreq);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonReportOfFreq[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonReportOfFreq);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonReportOfFreq*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonReportOfFreq %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonReportOfFreq*)p = *(struct __Bsdrtmservice1__GetMonReportOfFreq*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__DelMonReport(struct soap *soap, struct __Bsdrtmservice1__DelMonReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__DelMonReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__DelMonReport(struct soap *soap, const struct __Bsdrtmservice1__DelMonReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__DelMonReport(soap, &a->Bsdrtmservice1__DelMonReport);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__DelMonReport(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__DelMonReport *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__DelMonReport(soap, "Bsdrtmservice1:DelMonReport", -1, &a->Bsdrtmservice1__DelMonReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__DelMonReport * SOAP_FMAC4 soap_in___Bsdrtmservice1__DelMonReport(struct soap *soap, const char *tag, struct __Bsdrtmservice1__DelMonReport *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__DelMonReport = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__DelMonReport *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReport, sizeof(struct __Bsdrtmservice1__DelMonReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__DelMonReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__DelMonReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__DelMonReport(soap, "Bsdrtmservice1:DelMonReport", &a->Bsdrtmservice1__DelMonReport, ""))
				{	soap_flag_Bsdrtmservice1__DelMonReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__DelMonReport(struct soap *soap, const struct __Bsdrtmservice1__DelMonReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__DelMonReport(soap, tag?tag:"-Bsdrtmservice1:DelMonReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__DelMonReport * SOAP_FMAC4 soap_get___Bsdrtmservice1__DelMonReport(struct soap *soap, struct __Bsdrtmservice1__DelMonReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__DelMonReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__DelMonReport * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__DelMonReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__DelMonReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__DelMonReport, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__DelMonReport);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__DelMonReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__DelMonReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__DelMonReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__DelMonReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__DelMonReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__DelMonReport %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__DelMonReport*)p = *(struct __Bsdrtmservice1__DelMonReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddMonReport(struct soap *soap, struct __Bsdrtmservice1__AddMonReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddMonReport = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddMonReport(struct soap *soap, const struct __Bsdrtmservice1__AddMonReport *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddMonReport(soap, &a->Bsdrtmservice1__AddMonReport);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddMonReport(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddMonReport *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonReport(soap, "Bsdrtmservice1:AddMonReport", -1, &a->Bsdrtmservice1__AddMonReport, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMonReport * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddMonReport(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddMonReport *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddMonReport = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddMonReport *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReport, sizeof(struct __Bsdrtmservice1__AddMonReport), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddMonReport(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddMonReport && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddMonReport(soap, "Bsdrtmservice1:AddMonReport", &a->Bsdrtmservice1__AddMonReport, ""))
				{	soap_flag_Bsdrtmservice1__AddMonReport--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddMonReport(struct soap *soap, const struct __Bsdrtmservice1__AddMonReport *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddMonReport(soap, tag?tag:"-Bsdrtmservice1:AddMonReport", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMonReport * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddMonReport(struct soap *soap, struct __Bsdrtmservice1__AddMonReport *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddMonReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddMonReport * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddMonReport(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddMonReport(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonReport, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMonReport);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddMonReport);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMonReport[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddMonReport);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddMonReport*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddMonReport(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddMonReport %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddMonReport*)p = *(struct __Bsdrtmservice1__AddMonReport*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, struct __Bsdrtmservice1__GetPreDefinedMonitors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetPreDefinedMonitors = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const struct __Bsdrtmservice1__GetPreDefinedMonitors *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, &a->Bsdrtmservice1__GetPreDefinedMonitors);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetPreDefinedMonitors *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, "Bsdrtmservice1:GetPreDefinedMonitors", -1, &a->Bsdrtmservice1__GetPreDefinedMonitors, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetPreDefinedMonitors * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetPreDefinedMonitors *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetPreDefinedMonitors = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetPreDefinedMonitors *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPreDefinedMonitors, sizeof(struct __Bsdrtmservice1__GetPreDefinedMonitors), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetPreDefinedMonitors(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetPreDefinedMonitors && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, "Bsdrtmservice1:GetPreDefinedMonitors", &a->Bsdrtmservice1__GetPreDefinedMonitors, ""))
				{	soap_flag_Bsdrtmservice1__GetPreDefinedMonitors--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const struct __Bsdrtmservice1__GetPreDefinedMonitors *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetPreDefinedMonitors(soap, tag?tag:"-Bsdrtmservice1:GetPreDefinedMonitors", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetPreDefinedMonitors * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, struct __Bsdrtmservice1__GetPreDefinedMonitors *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetPreDefinedMonitors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetPreDefinedMonitors * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetPreDefinedMonitors(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetPreDefinedMonitors, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetPreDefinedMonitors);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetPreDefinedMonitors);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetPreDefinedMonitors[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetPreDefinedMonitors);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetPreDefinedMonitors*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetPreDefinedMonitors %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetPreDefinedMonitors*)p = *(struct __Bsdrtmservice1__GetPreDefinedMonitors*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, struct __Bsdrtmservice1__GetMonAlertOfDay *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonAlertOfDay = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const struct __Bsdrtmservice1__GetMonAlertOfDay *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, &a->Bsdrtmservice1__GetMonAlertOfDay);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonAlertOfDay *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, "Bsdrtmservice1:GetMonAlertOfDay", -1, &a->Bsdrtmservice1__GetMonAlertOfDay, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonAlertOfDay * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonAlertOfDay *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonAlertOfDay = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonAlertOfDay *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfDay, sizeof(struct __Bsdrtmservice1__GetMonAlertOfDay), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonAlertOfDay(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonAlertOfDay && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, "Bsdrtmservice1:GetMonAlertOfDay", &a->Bsdrtmservice1__GetMonAlertOfDay, ""))
				{	soap_flag_Bsdrtmservice1__GetMonAlertOfDay--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const struct __Bsdrtmservice1__GetMonAlertOfDay *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonAlertOfDay(soap, tag?tag:"-Bsdrtmservice1:GetMonAlertOfDay", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonAlertOfDay * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, struct __Bsdrtmservice1__GetMonAlertOfDay *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonAlertOfDay(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonAlertOfDay * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonAlertOfDay(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfDay, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonAlertOfDay);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonAlertOfDay);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonAlertOfDay[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonAlertOfDay);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonAlertOfDay*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonAlertOfDay %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonAlertOfDay*)p = *(struct __Bsdrtmservice1__GetMonAlertOfDay*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, struct __Bsdrtmservice1__GetMonAlertOfMonth *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonAlertOfMonth = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const struct __Bsdrtmservice1__GetMonAlertOfMonth *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, &a->Bsdrtmservice1__GetMonAlertOfMonth);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonAlertOfMonth *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, "Bsdrtmservice1:GetMonAlertOfMonth", -1, &a->Bsdrtmservice1__GetMonAlertOfMonth, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonAlertOfMonth * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonAlertOfMonth *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonAlertOfMonth = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonAlertOfMonth *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfMonth, sizeof(struct __Bsdrtmservice1__GetMonAlertOfMonth), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonAlertOfMonth(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonAlertOfMonth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, "Bsdrtmservice1:GetMonAlertOfMonth", &a->Bsdrtmservice1__GetMonAlertOfMonth, ""))
				{	soap_flag_Bsdrtmservice1__GetMonAlertOfMonth--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const struct __Bsdrtmservice1__GetMonAlertOfMonth *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonAlertOfMonth(soap, tag?tag:"-Bsdrtmservice1:GetMonAlertOfMonth", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonAlertOfMonth * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, struct __Bsdrtmservice1__GetMonAlertOfMonth *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonAlertOfMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonAlertOfMonth * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonAlertOfMonth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonAlertOfMonth, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonAlertOfMonth);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonAlertOfMonth);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonAlertOfMonth[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonAlertOfMonth);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonAlertOfMonth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonAlertOfMonth %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonAlertOfMonth*)p = *(struct __Bsdrtmservice1__GetMonAlertOfMonth*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddMonAlert(struct soap *soap, struct __Bsdrtmservice1__AddMonAlert *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddMonAlert = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddMonAlert(struct soap *soap, const struct __Bsdrtmservice1__AddMonAlert *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddMonAlert(soap, &a->Bsdrtmservice1__AddMonAlert);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddMonAlert(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddMonAlert *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonAlert(soap, "Bsdrtmservice1:AddMonAlert", -1, &a->Bsdrtmservice1__AddMonAlert, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMonAlert * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddMonAlert(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddMonAlert *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddMonAlert = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddMonAlert *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonAlert, sizeof(struct __Bsdrtmservice1__AddMonAlert), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddMonAlert(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddMonAlert && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddMonAlert(soap, "Bsdrtmservice1:AddMonAlert", &a->Bsdrtmservice1__AddMonAlert, ""))
				{	soap_flag_Bsdrtmservice1__AddMonAlert--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddMonAlert(struct soap *soap, const struct __Bsdrtmservice1__AddMonAlert *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddMonAlert(soap, tag?tag:"-Bsdrtmservice1:AddMonAlert", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddMonAlert * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddMonAlert(struct soap *soap, struct __Bsdrtmservice1__AddMonAlert *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddMonAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddMonAlert * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddMonAlert(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddMonAlert(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddMonAlert, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMonAlert);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddMonAlert);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddMonAlert[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddMonAlert);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddMonAlert*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddMonAlert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddMonAlert %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddMonAlert*)p = *(struct __Bsdrtmservice1__AddMonAlert*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__SetTaskState(struct soap *soap, struct __Bsdrtmservice1__SetTaskState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__SetTaskState = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__SetTaskState(struct soap *soap, const struct __Bsdrtmservice1__SetTaskState *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__SetTaskState(soap, &a->Bsdrtmservice1__SetTaskState);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__SetTaskState(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__SetTaskState *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__SetTaskState(soap, "Bsdrtmservice1:SetTaskState", -1, &a->Bsdrtmservice1__SetTaskState, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetTaskState * SOAP_FMAC4 soap_in___Bsdrtmservice1__SetTaskState(struct soap *soap, const char *tag, struct __Bsdrtmservice1__SetTaskState *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__SetTaskState = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__SetTaskState *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetTaskState, sizeof(struct __Bsdrtmservice1__SetTaskState), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__SetTaskState(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__SetTaskState && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__SetTaskState(soap, "Bsdrtmservice1:SetTaskState", &a->Bsdrtmservice1__SetTaskState, ""))
				{	soap_flag_Bsdrtmservice1__SetTaskState--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__SetTaskState(struct soap *soap, const struct __Bsdrtmservice1__SetTaskState *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__SetTaskState(soap, tag?tag:"-Bsdrtmservice1:SetTaskState", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetTaskState * SOAP_FMAC4 soap_get___Bsdrtmservice1__SetTaskState(struct soap *soap, struct __Bsdrtmservice1__SetTaskState *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__SetTaskState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__SetTaskState * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__SetTaskState(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__SetTaskState(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetTaskState, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetTaskState);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__SetTaskState);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetTaskState[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__SetTaskState);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__SetTaskState*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__SetTaskState(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__SetTaskState %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__SetTaskState*)p = *(struct __Bsdrtmservice1__SetTaskState*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddTaskLog(struct soap *soap, struct __Bsdrtmservice1__AddTaskLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddTaskLog = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddTaskLog(struct soap *soap, const struct __Bsdrtmservice1__AddTaskLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddTaskLog(soap, &a->Bsdrtmservice1__AddTaskLog);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddTaskLog(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddTaskLog *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddTaskLog(soap, "Bsdrtmservice1:AddTaskLog", -1, &a->Bsdrtmservice1__AddTaskLog, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddTaskLog * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddTaskLog(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddTaskLog *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddTaskLog = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddTaskLog *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddTaskLog, sizeof(struct __Bsdrtmservice1__AddTaskLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddTaskLog(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddTaskLog && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddTaskLog(soap, "Bsdrtmservice1:AddTaskLog", &a->Bsdrtmservice1__AddTaskLog, ""))
				{	soap_flag_Bsdrtmservice1__AddTaskLog--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddTaskLog(struct soap *soap, const struct __Bsdrtmservice1__AddTaskLog *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddTaskLog(soap, tag?tag:"-Bsdrtmservice1:AddTaskLog", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddTaskLog * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddTaskLog(struct soap *soap, struct __Bsdrtmservice1__AddTaskLog *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddTaskLog * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddTaskLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddTaskLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddTaskLog, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddTaskLog);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddTaskLog);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddTaskLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddTaskLog);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddTaskLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddTaskLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddTaskLog %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddTaskLog*)p = *(struct __Bsdrtmservice1__AddTaskLog*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, struct __Bsdrtmservice1__GetRuningTaskById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetRuningTaskById = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const struct __Bsdrtmservice1__GetRuningTaskById *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, &a->Bsdrtmservice1__GetRuningTaskById);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetRuningTaskById *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, "Bsdrtmservice1:GetRuningTaskById", -1, &a->Bsdrtmservice1__GetRuningTaskById, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRuningTaskById * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetRuningTaskById *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetRuningTaskById = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetRuningTaskById *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskById, sizeof(struct __Bsdrtmservice1__GetRuningTaskById), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetRuningTaskById(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetRuningTaskById && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, "Bsdrtmservice1:GetRuningTaskById", &a->Bsdrtmservice1__GetRuningTaskById, ""))
				{	soap_flag_Bsdrtmservice1__GetRuningTaskById--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const struct __Bsdrtmservice1__GetRuningTaskById *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetRuningTaskById(soap, tag?tag:"-Bsdrtmservice1:GetRuningTaskById", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRuningTaskById * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, struct __Bsdrtmservice1__GetRuningTaskById *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetRuningTaskById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetRuningTaskById * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetRuningTaskById(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskById, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRuningTaskById);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetRuningTaskById);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRuningTaskById[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetRuningTaskById);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetRuningTaskById*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetRuningTaskById(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetRuningTaskById %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetRuningTaskById*)p = *(struct __Bsdrtmservice1__GetRuningTaskById*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, struct __Bsdrtmservice1__GetRuningTaskIds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetRuningTaskIds = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const struct __Bsdrtmservice1__GetRuningTaskIds *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, &a->Bsdrtmservice1__GetRuningTaskIds);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetRuningTaskIds *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, "Bsdrtmservice1:GetRuningTaskIds", -1, &a->Bsdrtmservice1__GetRuningTaskIds, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRuningTaskIds * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetRuningTaskIds *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetRuningTaskIds = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetRuningTaskIds *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskIds, sizeof(struct __Bsdrtmservice1__GetRuningTaskIds), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetRuningTaskIds(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetRuningTaskIds && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, "Bsdrtmservice1:GetRuningTaskIds", &a->Bsdrtmservice1__GetRuningTaskIds, ""))
				{	soap_flag_Bsdrtmservice1__GetRuningTaskIds--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const struct __Bsdrtmservice1__GetRuningTaskIds *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetRuningTaskIds(soap, tag?tag:"-Bsdrtmservice1:GetRuningTaskIds", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRuningTaskIds * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, struct __Bsdrtmservice1__GetRuningTaskIds *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetRuningTaskIds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetRuningTaskIds * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetRuningTaskIds(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRuningTaskIds, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRuningTaskIds);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetRuningTaskIds);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRuningTaskIds[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetRuningTaskIds);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetRuningTaskIds*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetRuningTaskIds %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetRuningTaskIds*)p = *(struct __Bsdrtmservice1__GetRuningTaskIds*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, struct __Bsdrtmservice1__GetMonstationUseTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonstationUseTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const struct __Bsdrtmservice1__GetMonstationUseTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, &a->Bsdrtmservice1__GetMonstationUseTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonstationUseTime *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, "Bsdrtmservice1:GetMonstationUseTime", -1, &a->Bsdrtmservice1__GetMonstationUseTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonstationUseTime * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonstationUseTime *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonstationUseTime = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonstationUseTime *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTime, sizeof(struct __Bsdrtmservice1__GetMonstationUseTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonstationUseTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonstationUseTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, "Bsdrtmservice1:GetMonstationUseTime", &a->Bsdrtmservice1__GetMonstationUseTime, ""))
				{	soap_flag_Bsdrtmservice1__GetMonstationUseTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const struct __Bsdrtmservice1__GetMonstationUseTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonstationUseTime(soap, tag?tag:"-Bsdrtmservice1:GetMonstationUseTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonstationUseTime * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, struct __Bsdrtmservice1__GetMonstationUseTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonstationUseTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonstationUseTime * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonstationUseTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTime, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonstationUseTime);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonstationUseTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonstationUseTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonstationUseTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonstationUseTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonstationUseTime %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonstationUseTime*)p = *(struct __Bsdrtmservice1__GetMonstationUseTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonstationUseTimeOfMonth = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, &a->Bsdrtmservice1__GetMonstationUseTimeOfMonth);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonth", -1, &a->Bsdrtmservice1__GetMonstationUseTimeOfMonth, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonstationUseTimeOfMonth = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTimeOfMonth, sizeof(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonstationUseTimeOfMonth && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, "Bsdrtmservice1:GetMonstationUseTimeOfMonth", &a->Bsdrtmservice1__GetMonstationUseTimeOfMonth, ""))
				{	soap_flag_Bsdrtmservice1__GetMonstationUseTimeOfMonth--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag?tag:"-Bsdrtmservice1:GetMonstationUseTimeOfMonth", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonstationUseTimeOfMonth(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonstationUseTimeOfMonth, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth*)p = *(struct __Bsdrtmservice1__GetMonstationUseTimeOfMonth*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__AddDevUseLog(struct soap *soap, struct __Bsdrtmservice1__AddDevUseLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__AddDevUseLog = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__AddDevUseLog(struct soap *soap, const struct __Bsdrtmservice1__AddDevUseLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, &a->Bsdrtmservice1__AddDevUseLog);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__AddDevUseLog(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__AddDevUseLog *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, "Bsdrtmservice1:AddDevUseLog", -1, &a->Bsdrtmservice1__AddDevUseLog, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddDevUseLog * SOAP_FMAC4 soap_in___Bsdrtmservice1__AddDevUseLog(struct soap *soap, const char *tag, struct __Bsdrtmservice1__AddDevUseLog *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__AddDevUseLog = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__AddDevUseLog *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddDevUseLog, sizeof(struct __Bsdrtmservice1__AddDevUseLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__AddDevUseLog(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__AddDevUseLog && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, "Bsdrtmservice1:AddDevUseLog", &a->Bsdrtmservice1__AddDevUseLog, ""))
				{	soap_flag_Bsdrtmservice1__AddDevUseLog--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__AddDevUseLog(struct soap *soap, const struct __Bsdrtmservice1__AddDevUseLog *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__AddDevUseLog(soap, tag?tag:"-Bsdrtmservice1:AddDevUseLog", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__AddDevUseLog * SOAP_FMAC4 soap_get___Bsdrtmservice1__AddDevUseLog(struct soap *soap, struct __Bsdrtmservice1__AddDevUseLog *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__AddDevUseLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__AddDevUseLog * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__AddDevUseLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__AddDevUseLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__AddDevUseLog, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddDevUseLog);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__AddDevUseLog);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__AddDevUseLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__AddDevUseLog);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__AddDevUseLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__AddDevUseLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__AddDevUseLog %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__AddDevUseLog*)p = *(struct __Bsdrtmservice1__AddDevUseLog*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetAllAnts(struct soap *soap, struct __Bsdrtmservice1__GetAllAnts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetAllAnts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetAllAnts(struct soap *soap, const struct __Bsdrtmservice1__GetAllAnts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetAllAnts(soap, &a->Bsdrtmservice1__GetAllAnts);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetAllAnts(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetAllAnts *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllAnts(soap, "Bsdrtmservice1:GetAllAnts", -1, &a->Bsdrtmservice1__GetAllAnts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllAnts * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetAllAnts(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetAllAnts *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetAllAnts = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetAllAnts *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllAnts, sizeof(struct __Bsdrtmservice1__GetAllAnts), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetAllAnts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetAllAnts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetAllAnts(soap, "Bsdrtmservice1:GetAllAnts", &a->Bsdrtmservice1__GetAllAnts, ""))
				{	soap_flag_Bsdrtmservice1__GetAllAnts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetAllAnts(struct soap *soap, const struct __Bsdrtmservice1__GetAllAnts *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetAllAnts(soap, tag?tag:"-Bsdrtmservice1:GetAllAnts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllAnts * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetAllAnts(struct soap *soap, struct __Bsdrtmservice1__GetAllAnts *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetAllAnts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetAllAnts * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetAllAnts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetAllAnts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllAnts, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllAnts);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetAllAnts);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllAnts[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetAllAnts);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetAllAnts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetAllAnts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetAllAnts %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetAllAnts*)p = *(struct __Bsdrtmservice1__GetAllAnts*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetAnts3(struct soap *soap, struct __Bsdrtmservice1__GetAnts3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetAnts3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetAnts3(struct soap *soap, const struct __Bsdrtmservice1__GetAnts3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetAnts3(soap, &a->Bsdrtmservice1__GetAnts3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetAnts3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetAnts3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetAnts3(soap, "Bsdrtmservice1:GetAnts3", -1, &a->Bsdrtmservice1__GetAnts3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAnts3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetAnts3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetAnts3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetAnts3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetAnts3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAnts3, sizeof(struct __Bsdrtmservice1__GetAnts3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetAnts3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetAnts3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetAnts3(soap, "Bsdrtmservice1:GetAnts3", &a->Bsdrtmservice1__GetAnts3, ""))
				{	soap_flag_Bsdrtmservice1__GetAnts3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetAnts3(struct soap *soap, const struct __Bsdrtmservice1__GetAnts3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetAnts3(soap, tag?tag:"-Bsdrtmservice1:GetAnts3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAnts3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetAnts3(struct soap *soap, struct __Bsdrtmservice1__GetAnts3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetAnts3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetAnts3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetAnts3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetAnts3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAnts3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAnts3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetAnts3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAnts3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetAnts3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetAnts3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetAnts3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetAnts3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetAnts3*)p = *(struct __Bsdrtmservice1__GetAnts3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, struct __Bsdrtmservice1__GetDevFunAnts3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevFunAnts3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const struct __Bsdrtmservice1__GetDevFunAnts3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, &a->Bsdrtmservice1__GetDevFunAnts3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevFunAnts3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, "Bsdrtmservice1:GetDevFunAnts3", -1, &a->Bsdrtmservice1__GetDevFunAnts3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFunAnts3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevFunAnts3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevFunAnts3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevFunAnts3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts3, sizeof(struct __Bsdrtmservice1__GetDevFunAnts3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevFunAnts3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevFunAnts3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, "Bsdrtmservice1:GetDevFunAnts3", &a->Bsdrtmservice1__GetDevFunAnts3, ""))
				{	soap_flag_Bsdrtmservice1__GetDevFunAnts3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const struct __Bsdrtmservice1__GetDevFunAnts3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevFunAnts3(soap, tag?tag:"-Bsdrtmservice1:GetDevFunAnts3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFunAnts3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, struct __Bsdrtmservice1__GetDevFunAnts3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevFunAnts3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevFunAnts3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevFunAnts3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFunAnts3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevFunAnts3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFunAnts3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevFunAnts3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevFunAnts3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevFunAnts3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevFunAnts3*)p = *(struct __Bsdrtmservice1__GetDevFunAnts3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, struct __Bsdrtmservice1__GetDevFunAnts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevFunAnts = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const struct __Bsdrtmservice1__GetDevFunAnts *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, &a->Bsdrtmservice1__GetDevFunAnts);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevFunAnts *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, "Bsdrtmservice1:GetDevFunAnts", -1, &a->Bsdrtmservice1__GetDevFunAnts, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFunAnts * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevFunAnts *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevFunAnts = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevFunAnts *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts, sizeof(struct __Bsdrtmservice1__GetDevFunAnts), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevFunAnts(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevFunAnts && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, "Bsdrtmservice1:GetDevFunAnts", &a->Bsdrtmservice1__GetDevFunAnts, ""))
				{	soap_flag_Bsdrtmservice1__GetDevFunAnts--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const struct __Bsdrtmservice1__GetDevFunAnts *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevFunAnts(soap, tag?tag:"-Bsdrtmservice1:GetDevFunAnts", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFunAnts * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, struct __Bsdrtmservice1__GetDevFunAnts *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevFunAnts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevFunAnts * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevFunAnts(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFunAnts, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFunAnts);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevFunAnts);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFunAnts[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevFunAnts);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevFunAnts*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevFunAnts(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevFunAnts %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevFunAnts*)p = *(struct __Bsdrtmservice1__GetDevFunAnts*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevFuns3(struct soap *soap, struct __Bsdrtmservice1__GetDevFuns3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevFuns3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevFuns3(struct soap *soap, const struct __Bsdrtmservice1__GetDevFuns3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, &a->Bsdrtmservice1__GetDevFuns3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevFuns3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevFuns3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, "Bsdrtmservice1:GetDevFuns3", -1, &a->Bsdrtmservice1__GetDevFuns3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFuns3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevFuns3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevFuns3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevFuns3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevFuns3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns3, sizeof(struct __Bsdrtmservice1__GetDevFuns3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevFuns3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevFuns3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, "Bsdrtmservice1:GetDevFuns3", &a->Bsdrtmservice1__GetDevFuns3, ""))
				{	soap_flag_Bsdrtmservice1__GetDevFuns3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevFuns3(struct soap *soap, const struct __Bsdrtmservice1__GetDevFuns3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevFuns3(soap, tag?tag:"-Bsdrtmservice1:GetDevFuns3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFuns3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevFuns3(struct soap *soap, struct __Bsdrtmservice1__GetDevFuns3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevFuns3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevFuns3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevFuns3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevFuns3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFuns3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevFuns3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFuns3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevFuns3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevFuns3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevFuns3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevFuns3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevFuns3*)p = *(struct __Bsdrtmservice1__GetDevFuns3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevFuns(struct soap *soap, struct __Bsdrtmservice1__GetDevFuns *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevFuns = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevFuns(struct soap *soap, const struct __Bsdrtmservice1__GetDevFuns *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns(soap, &a->Bsdrtmservice1__GetDevFuns);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevFuns(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevFuns *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFuns(soap, "Bsdrtmservice1:GetDevFuns", -1, &a->Bsdrtmservice1__GetDevFuns, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFuns * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevFuns(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevFuns *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevFuns = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevFuns *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns, sizeof(struct __Bsdrtmservice1__GetDevFuns), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevFuns(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevFuns && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevFuns(soap, "Bsdrtmservice1:GetDevFuns", &a->Bsdrtmservice1__GetDevFuns, ""))
				{	soap_flag_Bsdrtmservice1__GetDevFuns--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevFuns(struct soap *soap, const struct __Bsdrtmservice1__GetDevFuns *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevFuns(soap, tag?tag:"-Bsdrtmservice1:GetDevFuns", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevFuns * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevFuns(struct soap *soap, struct __Bsdrtmservice1__GetDevFuns *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevFuns(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevFuns * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevFuns(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevFuns(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevFuns, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFuns);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevFuns);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevFuns[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevFuns);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevFuns*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevFuns(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevFuns %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevFuns*)p = *(struct __Bsdrtmservice1__GetDevFuns*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevices3(struct soap *soap, struct __Bsdrtmservice1__GetDevices3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevices3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevices3(struct soap *soap, const struct __Bsdrtmservice1__GetDevices3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevices3(soap, &a->Bsdrtmservice1__GetDevices3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevices3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevices3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevices3(soap, "Bsdrtmservice1:GetDevices3", -1, &a->Bsdrtmservice1__GetDevices3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevices3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevices3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevices3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevices3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevices3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices3, sizeof(struct __Bsdrtmservice1__GetDevices3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevices3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevices3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevices3(soap, "Bsdrtmservice1:GetDevices3", &a->Bsdrtmservice1__GetDevices3, ""))
				{	soap_flag_Bsdrtmservice1__GetDevices3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevices3(struct soap *soap, const struct __Bsdrtmservice1__GetDevices3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevices3(soap, tag?tag:"-Bsdrtmservice1:GetDevices3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevices3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevices3(struct soap *soap, struct __Bsdrtmservice1__GetDevices3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevices3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevices3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevices3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevices3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevices3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevices3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevices3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevices3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevices3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevices3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevices3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevices3*)p = *(struct __Bsdrtmservice1__GetDevices3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevices(struct soap *soap, struct __Bsdrtmservice1__GetDevices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevices = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevices(struct soap *soap, const struct __Bsdrtmservice1__GetDevices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevices(soap, &a->Bsdrtmservice1__GetDevices);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevices(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevices *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevices(soap, "Bsdrtmservice1:GetDevices", -1, &a->Bsdrtmservice1__GetDevices, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevices * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevices(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevices *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevices = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevices *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices, sizeof(struct __Bsdrtmservice1__GetDevices), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevices(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevices && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevices(soap, "Bsdrtmservice1:GetDevices", &a->Bsdrtmservice1__GetDevices, ""))
				{	soap_flag_Bsdrtmservice1__GetDevices--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevices(struct soap *soap, const struct __Bsdrtmservice1__GetDevices *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevices(soap, tag?tag:"-Bsdrtmservice1:GetDevices", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevices * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevices(struct soap *soap, struct __Bsdrtmservice1__GetDevices *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevices * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevices(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevices, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevices);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevices);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevices[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevices);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevices*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevices(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevices %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevices*)p = *(struct __Bsdrtmservice1__GetDevices*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__SetRNCPassword(struct soap *soap, struct __Bsdrtmservice1__SetRNCPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__SetRNCPassword = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__SetRNCPassword(struct soap *soap, const struct __Bsdrtmservice1__SetRNCPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, &a->Bsdrtmservice1__SetRNCPassword);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__SetRNCPassword(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__SetRNCPassword *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, "Bsdrtmservice1:SetRNCPassword", -1, &a->Bsdrtmservice1__SetRNCPassword, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetRNCPassword * SOAP_FMAC4 soap_in___Bsdrtmservice1__SetRNCPassword(struct soap *soap, const char *tag, struct __Bsdrtmservice1__SetRNCPassword *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__SetRNCPassword = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__SetRNCPassword *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetRNCPassword, sizeof(struct __Bsdrtmservice1__SetRNCPassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__SetRNCPassword(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__SetRNCPassword && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, "Bsdrtmservice1:SetRNCPassword", &a->Bsdrtmservice1__SetRNCPassword, ""))
				{	soap_flag_Bsdrtmservice1__SetRNCPassword--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__SetRNCPassword(struct soap *soap, const struct __Bsdrtmservice1__SetRNCPassword *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__SetRNCPassword(soap, tag?tag:"-Bsdrtmservice1:SetRNCPassword", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__SetRNCPassword * SOAP_FMAC4 soap_get___Bsdrtmservice1__SetRNCPassword(struct soap *soap, struct __Bsdrtmservice1__SetRNCPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__SetRNCPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__SetRNCPassword * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__SetRNCPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__SetRNCPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__SetRNCPassword, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetRNCPassword);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__SetRNCPassword);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__SetRNCPassword[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__SetRNCPassword);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__SetRNCPassword*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__SetRNCPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__SetRNCPassword %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__SetRNCPassword*)p = *(struct __Bsdrtmservice1__SetRNCPassword*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, struct __Bsdrtmservice1__GetAllRNCs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetAllRNCs3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const struct __Bsdrtmservice1__GetAllRNCs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, &a->Bsdrtmservice1__GetAllRNCs3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetAllRNCs3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, "Bsdrtmservice1:GetAllRNCs3", -1, &a->Bsdrtmservice1__GetAllRNCs3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllRNCs3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetAllRNCs3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetAllRNCs3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetAllRNCs3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs3, sizeof(struct __Bsdrtmservice1__GetAllRNCs3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetAllRNCs3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetAllRNCs3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, "Bsdrtmservice1:GetAllRNCs3", &a->Bsdrtmservice1__GetAllRNCs3, ""))
				{	soap_flag_Bsdrtmservice1__GetAllRNCs3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const struct __Bsdrtmservice1__GetAllRNCs3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetAllRNCs3(soap, tag?tag:"-Bsdrtmservice1:GetAllRNCs3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllRNCs3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, struct __Bsdrtmservice1__GetAllRNCs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetAllRNCs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetAllRNCs3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetAllRNCs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllRNCs3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetAllRNCs3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllRNCs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetAllRNCs3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetAllRNCs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetAllRNCs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetAllRNCs3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetAllRNCs3*)p = *(struct __Bsdrtmservice1__GetAllRNCs3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetAllRNCs(struct soap *soap, struct __Bsdrtmservice1__GetAllRNCs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetAllRNCs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetAllRNCs(struct soap *soap, const struct __Bsdrtmservice1__GetAllRNCs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, &a->Bsdrtmservice1__GetAllRNCs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetAllRNCs(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetAllRNCs *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, "Bsdrtmservice1:GetAllRNCs", -1, &a->Bsdrtmservice1__GetAllRNCs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllRNCs * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetAllRNCs(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetAllRNCs *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetAllRNCs = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetAllRNCs *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs, sizeof(struct __Bsdrtmservice1__GetAllRNCs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetAllRNCs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetAllRNCs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, "Bsdrtmservice1:GetAllRNCs", &a->Bsdrtmservice1__GetAllRNCs, ""))
				{	soap_flag_Bsdrtmservice1__GetAllRNCs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetAllRNCs(struct soap *soap, const struct __Bsdrtmservice1__GetAllRNCs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetAllRNCs(soap, tag?tag:"-Bsdrtmservice1:GetAllRNCs", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetAllRNCs * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetAllRNCs(struct soap *soap, struct __Bsdrtmservice1__GetAllRNCs *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetAllRNCs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetAllRNCs * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetAllRNCs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetAllRNCs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetAllRNCs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllRNCs);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetAllRNCs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetAllRNCs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetAllRNCs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetAllRNCs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetAllRNCs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetAllRNCs %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetAllRNCs*)p = *(struct __Bsdrtmservice1__GetAllRNCs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetRNCs3(struct soap *soap, struct __Bsdrtmservice1__GetRNCs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetRNCs3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetRNCs3(struct soap *soap, const struct __Bsdrtmservice1__GetRNCs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs3(soap, &a->Bsdrtmservice1__GetRNCs3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetRNCs3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetRNCs3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetRNCs3(soap, "Bsdrtmservice1:GetRNCs3", -1, &a->Bsdrtmservice1__GetRNCs3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRNCs3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetRNCs3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetRNCs3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetRNCs3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetRNCs3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs3, sizeof(struct __Bsdrtmservice1__GetRNCs3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetRNCs3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetRNCs3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetRNCs3(soap, "Bsdrtmservice1:GetRNCs3", &a->Bsdrtmservice1__GetRNCs3, ""))
				{	soap_flag_Bsdrtmservice1__GetRNCs3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetRNCs3(struct soap *soap, const struct __Bsdrtmservice1__GetRNCs3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetRNCs3(soap, tag?tag:"-Bsdrtmservice1:GetRNCs3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRNCs3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetRNCs3(struct soap *soap, struct __Bsdrtmservice1__GetRNCs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetRNCs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetRNCs3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetRNCs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetRNCs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRNCs3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetRNCs3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRNCs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetRNCs3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetRNCs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetRNCs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetRNCs3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetRNCs3*)p = *(struct __Bsdrtmservice1__GetRNCs3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetRNCs(struct soap *soap, struct __Bsdrtmservice1__GetRNCs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetRNCs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetRNCs(struct soap *soap, const struct __Bsdrtmservice1__GetRNCs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs(soap, &a->Bsdrtmservice1__GetRNCs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetRNCs(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetRNCs *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetRNCs(soap, "Bsdrtmservice1:GetRNCs", -1, &a->Bsdrtmservice1__GetRNCs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRNCs * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetRNCs(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetRNCs *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetRNCs = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetRNCs *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs, sizeof(struct __Bsdrtmservice1__GetRNCs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetRNCs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetRNCs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetRNCs(soap, "Bsdrtmservice1:GetRNCs", &a->Bsdrtmservice1__GetRNCs, ""))
				{	soap_flag_Bsdrtmservice1__GetRNCs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetRNCs(struct soap *soap, const struct __Bsdrtmservice1__GetRNCs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetRNCs(soap, tag?tag:"-Bsdrtmservice1:GetRNCs", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetRNCs * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetRNCs(struct soap *soap, struct __Bsdrtmservice1__GetRNCs *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetRNCs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetRNCs * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetRNCs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetRNCs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetRNCs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRNCs);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetRNCs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetRNCs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetRNCs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetRNCs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetRNCs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetRNCs %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetRNCs*)p = *(struct __Bsdrtmservice1__GetRNCs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStations3(struct soap *soap, struct __Bsdrtmservice1__GetMonStations3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStations3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStations3(struct soap *soap, const struct __Bsdrtmservice1__GetMonStations3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations3(soap, &a->Bsdrtmservice1__GetMonStations3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStations3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStations3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStations3(soap, "Bsdrtmservice1:GetMonStations3", -1, &a->Bsdrtmservice1__GetMonStations3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStations3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStations3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStations3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStations3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStations3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations3, sizeof(struct __Bsdrtmservice1__GetMonStations3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStations3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStations3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStations3(soap, "Bsdrtmservice1:GetMonStations3", &a->Bsdrtmservice1__GetMonStations3, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStations3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStations3(struct soap *soap, const struct __Bsdrtmservice1__GetMonStations3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStations3(soap, tag?tag:"-Bsdrtmservice1:GetMonStations3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStations3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStations3(struct soap *soap, struct __Bsdrtmservice1__GetMonStations3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStations3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStations3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStations3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStations3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStations3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStations3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStations3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStations3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStations3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStations3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStations3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStations3*)p = *(struct __Bsdrtmservice1__GetMonStations3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStations(struct soap *soap, struct __Bsdrtmservice1__GetMonStations *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStations = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStations(struct soap *soap, const struct __Bsdrtmservice1__GetMonStations *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations(soap, &a->Bsdrtmservice1__GetMonStations);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStations(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStations *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStations(soap, "Bsdrtmservice1:GetMonStations", -1, &a->Bsdrtmservice1__GetMonStations, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStations * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStations(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStations *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStations = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStations *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations, sizeof(struct __Bsdrtmservice1__GetMonStations), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStations(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStations && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStations(soap, "Bsdrtmservice1:GetMonStations", &a->Bsdrtmservice1__GetMonStations, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStations--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStations(struct soap *soap, const struct __Bsdrtmservice1__GetMonStations *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStations(soap, tag?tag:"-Bsdrtmservice1:GetMonStations", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStations * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStations(struct soap *soap, struct __Bsdrtmservice1__GetMonStations *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStations * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStations(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStations(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStations, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStations);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStations);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStations[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStations);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStations*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStations(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStations %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStations*)p = *(struct __Bsdrtmservice1__GetMonStations*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, struct __Bsdrtmservice1__GetMonControlCenters3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonControlCenters3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const struct __Bsdrtmservice1__GetMonControlCenters3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, &a->Bsdrtmservice1__GetMonControlCenters3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonControlCenters3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, "Bsdrtmservice1:GetMonControlCenters3", -1, &a->Bsdrtmservice1__GetMonControlCenters3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonControlCenters3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonControlCenters3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonControlCenters3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonControlCenters3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters3, sizeof(struct __Bsdrtmservice1__GetMonControlCenters3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonControlCenters3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonControlCenters3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, "Bsdrtmservice1:GetMonControlCenters3", &a->Bsdrtmservice1__GetMonControlCenters3, ""))
				{	soap_flag_Bsdrtmservice1__GetMonControlCenters3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const struct __Bsdrtmservice1__GetMonControlCenters3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonControlCenters3(soap, tag?tag:"-Bsdrtmservice1:GetMonControlCenters3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonControlCenters3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, struct __Bsdrtmservice1__GetMonControlCenters3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonControlCenters3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonControlCenters3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonControlCenters3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonControlCenters3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonControlCenters3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonControlCenters3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonControlCenters3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonControlCenters3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonControlCenters3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonControlCenters3*)p = *(struct __Bsdrtmservice1__GetMonControlCenters3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, struct __Bsdrtmservice1__GetMonControlCenters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonControlCenters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const struct __Bsdrtmservice1__GetMonControlCenters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, &a->Bsdrtmservice1__GetMonControlCenters);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonControlCenters *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, "Bsdrtmservice1:GetMonControlCenters", -1, &a->Bsdrtmservice1__GetMonControlCenters, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonControlCenters * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonControlCenters *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonControlCenters = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonControlCenters *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters, sizeof(struct __Bsdrtmservice1__GetMonControlCenters), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonControlCenters(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonControlCenters && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, "Bsdrtmservice1:GetMonControlCenters", &a->Bsdrtmservice1__GetMonControlCenters, ""))
				{	soap_flag_Bsdrtmservice1__GetMonControlCenters--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const struct __Bsdrtmservice1__GetMonControlCenters *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonControlCenters(soap, tag?tag:"-Bsdrtmservice1:GetMonControlCenters", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonControlCenters * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, struct __Bsdrtmservice1__GetMonControlCenters *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonControlCenters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonControlCenters * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonControlCenters(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonControlCenters, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonControlCenters);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonControlCenters);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonControlCenters[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonControlCenters);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonControlCenters*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonControlCenters(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonControlCenters %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonControlCenters*)p = *(struct __Bsdrtmservice1__GetMonControlCenters*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, struct __Bsdrtmservice1__GetMonOrgs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonOrgs3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const struct __Bsdrtmservice1__GetMonOrgs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, &a->Bsdrtmservice1__GetMonOrgs3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonOrgs3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, "Bsdrtmservice1:GetMonOrgs3", -1, &a->Bsdrtmservice1__GetMonOrgs3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonOrgs3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonOrgs3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonOrgs3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonOrgs3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs3, sizeof(struct __Bsdrtmservice1__GetMonOrgs3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonOrgs3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonOrgs3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, "Bsdrtmservice1:GetMonOrgs3", &a->Bsdrtmservice1__GetMonOrgs3, ""))
				{	soap_flag_Bsdrtmservice1__GetMonOrgs3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const struct __Bsdrtmservice1__GetMonOrgs3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonOrgs3(soap, tag?tag:"-Bsdrtmservice1:GetMonOrgs3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonOrgs3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, struct __Bsdrtmservice1__GetMonOrgs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonOrgs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonOrgs3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonOrgs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonOrgs3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonOrgs3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonOrgs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonOrgs3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonOrgs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonOrgs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonOrgs3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonOrgs3*)p = *(struct __Bsdrtmservice1__GetMonOrgs3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonOrgs(struct soap *soap, struct __Bsdrtmservice1__GetMonOrgs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonOrgs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonOrgs(struct soap *soap, const struct __Bsdrtmservice1__GetMonOrgs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, &a->Bsdrtmservice1__GetMonOrgs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonOrgs(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonOrgs *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, "Bsdrtmservice1:GetMonOrgs", -1, &a->Bsdrtmservice1__GetMonOrgs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonOrgs * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonOrgs(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonOrgs *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonOrgs = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonOrgs *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs, sizeof(struct __Bsdrtmservice1__GetMonOrgs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonOrgs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonOrgs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, "Bsdrtmservice1:GetMonOrgs", &a->Bsdrtmservice1__GetMonOrgs, ""))
				{	soap_flag_Bsdrtmservice1__GetMonOrgs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonOrgs(struct soap *soap, const struct __Bsdrtmservice1__GetMonOrgs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonOrgs(soap, tag?tag:"-Bsdrtmservice1:GetMonOrgs", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonOrgs * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonOrgs(struct soap *soap, struct __Bsdrtmservice1__GetMonOrgs *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonOrgs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonOrgs * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonOrgs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonOrgs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonOrgs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonOrgs);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonOrgs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonOrgs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonOrgs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonOrgs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonOrgs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonOrgs %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonOrgs*)p = *(struct __Bsdrtmservice1__GetMonOrgs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, struct __Bsdrtmservice1__GetDevModelFuncParam *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevModelFuncParam = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const struct __Bsdrtmservice1__GetDevModelFuncParam *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, &a->Bsdrtmservice1__GetDevModelFuncParam);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevModelFuncParam *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, "Bsdrtmservice1:GetDevModelFuncParam", -1, &a->Bsdrtmservice1__GetDevModelFuncParam, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModelFuncParam * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevModelFuncParam *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevModelFuncParam = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevModelFuncParam *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParam, sizeof(struct __Bsdrtmservice1__GetDevModelFuncParam), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevModelFuncParam(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevModelFuncParam && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, "Bsdrtmservice1:GetDevModelFuncParam", &a->Bsdrtmservice1__GetDevModelFuncParam, ""))
				{	soap_flag_Bsdrtmservice1__GetDevModelFuncParam--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const struct __Bsdrtmservice1__GetDevModelFuncParam *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevModelFuncParam(soap, tag?tag:"-Bsdrtmservice1:GetDevModelFuncParam", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModelFuncParam * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, struct __Bsdrtmservice1__GetDevModelFuncParam *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevModelFuncParam * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevModelFuncParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParam, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModelFuncParam);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevModelFuncParam);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModelFuncParam[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevModelFuncParam);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevModelFuncParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevModelFuncParam %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevModelFuncParam*)p = *(struct __Bsdrtmservice1__GetDevModelFuncParam*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, struct __Bsdrtmservice1__GetDevModelFuncParams3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevModelFuncParams3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const struct __Bsdrtmservice1__GetDevModelFuncParams3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, &a->Bsdrtmservice1__GetDevModelFuncParams3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevModelFuncParams3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, "Bsdrtmservice1:GetDevModelFuncParams3", -1, &a->Bsdrtmservice1__GetDevModelFuncParams3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModelFuncParams3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevModelFuncParams3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevModelFuncParams3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevModelFuncParams3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams3, sizeof(struct __Bsdrtmservice1__GetDevModelFuncParams3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevModelFuncParams3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevModelFuncParams3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, "Bsdrtmservice1:GetDevModelFuncParams3", &a->Bsdrtmservice1__GetDevModelFuncParams3, ""))
				{	soap_flag_Bsdrtmservice1__GetDevModelFuncParams3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const struct __Bsdrtmservice1__GetDevModelFuncParams3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevModelFuncParams3(soap, tag?tag:"-Bsdrtmservice1:GetDevModelFuncParams3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModelFuncParams3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, struct __Bsdrtmservice1__GetDevModelFuncParams3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevModelFuncParams3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevModelFuncParams3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevModelFuncParams3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModelFuncParams3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevModelFuncParams3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModelFuncParams3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevModelFuncParams3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevModelFuncParams3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevModelFuncParams3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevModelFuncParams3*)p = *(struct __Bsdrtmservice1__GetDevModelFuncParams3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, struct __Bsdrtmservice1__GetDevModelFuncParams *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevModelFuncParams = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const struct __Bsdrtmservice1__GetDevModelFuncParams *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, &a->Bsdrtmservice1__GetDevModelFuncParams);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevModelFuncParams *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, "Bsdrtmservice1:GetDevModelFuncParams", -1, &a->Bsdrtmservice1__GetDevModelFuncParams, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModelFuncParams * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevModelFuncParams *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevModelFuncParams = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevModelFuncParams *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams, sizeof(struct __Bsdrtmservice1__GetDevModelFuncParams), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevModelFuncParams(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevModelFuncParams && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, "Bsdrtmservice1:GetDevModelFuncParams", &a->Bsdrtmservice1__GetDevModelFuncParams, ""))
				{	soap_flag_Bsdrtmservice1__GetDevModelFuncParams--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const struct __Bsdrtmservice1__GetDevModelFuncParams *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevModelFuncParams(soap, tag?tag:"-Bsdrtmservice1:GetDevModelFuncParams", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModelFuncParams * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, struct __Bsdrtmservice1__GetDevModelFuncParams *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevModelFuncParams(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevModelFuncParams * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevModelFuncParams(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModelFuncParams, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModelFuncParams);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevModelFuncParams);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModelFuncParams[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevModelFuncParams);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevModelFuncParams*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevModelFuncParams %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevModelFuncParams*)p = *(struct __Bsdrtmservice1__GetDevModelFuncParams*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevModels3(struct soap *soap, struct __Bsdrtmservice1__GetDevModels3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevModels3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevModels3(struct soap *soap, const struct __Bsdrtmservice1__GetDevModels3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels3(soap, &a->Bsdrtmservice1__GetDevModels3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevModels3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevModels3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModels3(soap, "Bsdrtmservice1:GetDevModels3", -1, &a->Bsdrtmservice1__GetDevModels3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModels3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevModels3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevModels3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevModels3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevModels3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels3, sizeof(struct __Bsdrtmservice1__GetDevModels3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevModels3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevModels3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevModels3(soap, "Bsdrtmservice1:GetDevModels3", &a->Bsdrtmservice1__GetDevModels3, ""))
				{	soap_flag_Bsdrtmservice1__GetDevModels3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevModels3(struct soap *soap, const struct __Bsdrtmservice1__GetDevModels3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevModels3(soap, tag?tag:"-Bsdrtmservice1:GetDevModels3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModels3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevModels3(struct soap *soap, struct __Bsdrtmservice1__GetDevModels3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevModels3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevModels3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevModels3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevModels3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModels3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevModels3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModels3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevModels3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevModels3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevModels3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevModels3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevModels3*)p = *(struct __Bsdrtmservice1__GetDevModels3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevModels(struct soap *soap, struct __Bsdrtmservice1__GetDevModels *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevModels = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevModels(struct soap *soap, const struct __Bsdrtmservice1__GetDevModels *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels(soap, &a->Bsdrtmservice1__GetDevModels);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevModels(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevModels *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModels(soap, "Bsdrtmservice1:GetDevModels", -1, &a->Bsdrtmservice1__GetDevModels, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModels * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevModels(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevModels *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevModels = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevModels *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels, sizeof(struct __Bsdrtmservice1__GetDevModels), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevModels(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevModels && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevModels(soap, "Bsdrtmservice1:GetDevModels", &a->Bsdrtmservice1__GetDevModels, ""))
				{	soap_flag_Bsdrtmservice1__GetDevModels--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevModels(struct soap *soap, const struct __Bsdrtmservice1__GetDevModels *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevModels(soap, tag?tag:"-Bsdrtmservice1:GetDevModels", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevModels * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevModels(struct soap *soap, struct __Bsdrtmservice1__GetDevModels *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevModels(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevModels * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevModels(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevModels(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevModels, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModels);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevModels);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevModels[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevModels);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevModels*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevModels(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevModels %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevModels*)p = *(struct __Bsdrtmservice1__GetDevModels*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetFuncs3(struct soap *soap, struct __Bsdrtmservice1__GetFuncs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetFuncs3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetFuncs3(struct soap *soap, const struct __Bsdrtmservice1__GetFuncs3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs3(soap, &a->Bsdrtmservice1__GetFuncs3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetFuncs3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetFuncs3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetFuncs3(soap, "Bsdrtmservice1:GetFuncs3", -1, &a->Bsdrtmservice1__GetFuncs3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetFuncs3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetFuncs3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetFuncs3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetFuncs3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetFuncs3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs3, sizeof(struct __Bsdrtmservice1__GetFuncs3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetFuncs3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetFuncs3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetFuncs3(soap, "Bsdrtmservice1:GetFuncs3", &a->Bsdrtmservice1__GetFuncs3, ""))
				{	soap_flag_Bsdrtmservice1__GetFuncs3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetFuncs3(struct soap *soap, const struct __Bsdrtmservice1__GetFuncs3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetFuncs3(soap, tag?tag:"-Bsdrtmservice1:GetFuncs3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetFuncs3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetFuncs3(struct soap *soap, struct __Bsdrtmservice1__GetFuncs3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetFuncs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetFuncs3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetFuncs3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetFuncs3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetFuncs3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetFuncs3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetFuncs3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetFuncs3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetFuncs3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetFuncs3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetFuncs3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetFuncs3*)p = *(struct __Bsdrtmservice1__GetFuncs3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetFuncs(struct soap *soap, struct __Bsdrtmservice1__GetFuncs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetFuncs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetFuncs(struct soap *soap, const struct __Bsdrtmservice1__GetFuncs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs(soap, &a->Bsdrtmservice1__GetFuncs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetFuncs(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetFuncs *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetFuncs(soap, "Bsdrtmservice1:GetFuncs", -1, &a->Bsdrtmservice1__GetFuncs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetFuncs * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetFuncs(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetFuncs *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetFuncs = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetFuncs *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs, sizeof(struct __Bsdrtmservice1__GetFuncs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetFuncs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetFuncs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetFuncs(soap, "Bsdrtmservice1:GetFuncs", &a->Bsdrtmservice1__GetFuncs, ""))
				{	soap_flag_Bsdrtmservice1__GetFuncs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetFuncs(struct soap *soap, const struct __Bsdrtmservice1__GetFuncs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetFuncs(soap, tag?tag:"-Bsdrtmservice1:GetFuncs", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetFuncs * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetFuncs(struct soap *soap, struct __Bsdrtmservice1__GetFuncs *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetFuncs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetFuncs * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetFuncs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetFuncs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetFuncs, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetFuncs);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetFuncs);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetFuncs[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetFuncs);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetFuncs*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetFuncs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetFuncs %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetFuncs*)p = *(struct __Bsdrtmservice1__GetFuncs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, struct __Bsdrtmservice1__GetDevProtocols3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevProtocols3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const struct __Bsdrtmservice1__GetDevProtocols3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, &a->Bsdrtmservice1__GetDevProtocols3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevProtocols3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, "Bsdrtmservice1:GetDevProtocols3", -1, &a->Bsdrtmservice1__GetDevProtocols3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevProtocols3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevProtocols3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevProtocols3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevProtocols3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols3, sizeof(struct __Bsdrtmservice1__GetDevProtocols3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevProtocols3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevProtocols3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, "Bsdrtmservice1:GetDevProtocols3", &a->Bsdrtmservice1__GetDevProtocols3, ""))
				{	soap_flag_Bsdrtmservice1__GetDevProtocols3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const struct __Bsdrtmservice1__GetDevProtocols3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevProtocols3(soap, tag?tag:"-Bsdrtmservice1:GetDevProtocols3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevProtocols3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, struct __Bsdrtmservice1__GetDevProtocols3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevProtocols3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevProtocols3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevProtocols3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevProtocols3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevProtocols3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevProtocols3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevProtocols3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevProtocols3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevProtocols3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevProtocols3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevProtocols3*)p = *(struct __Bsdrtmservice1__GetDevProtocols3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDevProtocols(struct soap *soap, struct __Bsdrtmservice1__GetDevProtocols *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDevProtocols = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDevProtocols(struct soap *soap, const struct __Bsdrtmservice1__GetDevProtocols *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, &a->Bsdrtmservice1__GetDevProtocols);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDevProtocols(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDevProtocols *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, "Bsdrtmservice1:GetDevProtocols", -1, &a->Bsdrtmservice1__GetDevProtocols, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevProtocols * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDevProtocols(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDevProtocols *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDevProtocols = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDevProtocols *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols, sizeof(struct __Bsdrtmservice1__GetDevProtocols), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDevProtocols(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDevProtocols && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, "Bsdrtmservice1:GetDevProtocols", &a->Bsdrtmservice1__GetDevProtocols, ""))
				{	soap_flag_Bsdrtmservice1__GetDevProtocols--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDevProtocols(struct soap *soap, const struct __Bsdrtmservice1__GetDevProtocols *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDevProtocols(soap, tag?tag:"-Bsdrtmservice1:GetDevProtocols", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDevProtocols * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDevProtocols(struct soap *soap, struct __Bsdrtmservice1__GetDevProtocols *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDevProtocols(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDevProtocols * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDevProtocols(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDevProtocols(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDevProtocols, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevProtocols);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDevProtocols);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDevProtocols[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDevProtocols);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDevProtocols*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDevProtocols(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDevProtocols %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDevProtocols*)p = *(struct __Bsdrtmservice1__GetDevProtocols*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, struct __Bsdrtmservice1__GetDeviceTypes3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDeviceTypes3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const struct __Bsdrtmservice1__GetDeviceTypes3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, &a->Bsdrtmservice1__GetDeviceTypes3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDeviceTypes3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, "Bsdrtmservice1:GetDeviceTypes3", -1, &a->Bsdrtmservice1__GetDeviceTypes3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDeviceTypes3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDeviceTypes3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDeviceTypes3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDeviceTypes3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes3, sizeof(struct __Bsdrtmservice1__GetDeviceTypes3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDeviceTypes3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDeviceTypes3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, "Bsdrtmservice1:GetDeviceTypes3", &a->Bsdrtmservice1__GetDeviceTypes3, ""))
				{	soap_flag_Bsdrtmservice1__GetDeviceTypes3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const struct __Bsdrtmservice1__GetDeviceTypes3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDeviceTypes3(soap, tag?tag:"-Bsdrtmservice1:GetDeviceTypes3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDeviceTypes3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, struct __Bsdrtmservice1__GetDeviceTypes3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDeviceTypes3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDeviceTypes3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDeviceTypes3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDeviceTypes3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDeviceTypes3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDeviceTypes3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDeviceTypes3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDeviceTypes3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDeviceTypes3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDeviceTypes3*)p = *(struct __Bsdrtmservice1__GetDeviceTypes3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, struct __Bsdrtmservice1__GetDeviceTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetDeviceTypes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const struct __Bsdrtmservice1__GetDeviceTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, &a->Bsdrtmservice1__GetDeviceTypes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetDeviceTypes *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, "Bsdrtmservice1:GetDeviceTypes", -1, &a->Bsdrtmservice1__GetDeviceTypes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDeviceTypes * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetDeviceTypes *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetDeviceTypes = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetDeviceTypes *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes, sizeof(struct __Bsdrtmservice1__GetDeviceTypes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetDeviceTypes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetDeviceTypes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, "Bsdrtmservice1:GetDeviceTypes", &a->Bsdrtmservice1__GetDeviceTypes, ""))
				{	soap_flag_Bsdrtmservice1__GetDeviceTypes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const struct __Bsdrtmservice1__GetDeviceTypes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetDeviceTypes(soap, tag?tag:"-Bsdrtmservice1:GetDeviceTypes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetDeviceTypes * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, struct __Bsdrtmservice1__GetDeviceTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetDeviceTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetDeviceTypes * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetDeviceTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetDeviceTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDeviceTypes);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetDeviceTypes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetDeviceTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetDeviceTypes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetDeviceTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetDeviceTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetDeviceTypes %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetDeviceTypes*)p = *(struct __Bsdrtmservice1__GetDeviceTypes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, struct __Bsdrtmservice1__GetMonStationTypes3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStationTypes3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationTypes3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, &a->Bsdrtmservice1__GetMonStationTypes3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStationTypes3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, "Bsdrtmservice1:GetMonStationTypes3", -1, &a->Bsdrtmservice1__GetMonStationTypes3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationTypes3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStationTypes3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStationTypes3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStationTypes3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes3, sizeof(struct __Bsdrtmservice1__GetMonStationTypes3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStationTypes3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStationTypes3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, "Bsdrtmservice1:GetMonStationTypes3", &a->Bsdrtmservice1__GetMonStationTypes3, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStationTypes3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationTypes3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStationTypes3(soap, tag?tag:"-Bsdrtmservice1:GetMonStationTypes3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationTypes3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, struct __Bsdrtmservice1__GetMonStationTypes3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStationTypes3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStationTypes3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStationTypes3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationTypes3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStationTypes3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationTypes3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStationTypes3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStationTypes3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStationTypes3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStationTypes3*)p = *(struct __Bsdrtmservice1__GetMonStationTypes3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, struct __Bsdrtmservice1__GetMonStationTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStationTypes = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationTypes *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, &a->Bsdrtmservice1__GetMonStationTypes);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStationTypes *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, "Bsdrtmservice1:GetMonStationTypes", -1, &a->Bsdrtmservice1__GetMonStationTypes, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationTypes * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStationTypes *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStationTypes = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStationTypes *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes, sizeof(struct __Bsdrtmservice1__GetMonStationTypes), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStationTypes(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStationTypes && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, "Bsdrtmservice1:GetMonStationTypes", &a->Bsdrtmservice1__GetMonStationTypes, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStationTypes--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationTypes *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStationTypes(soap, tag?tag:"-Bsdrtmservice1:GetMonStationTypes", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationTypes * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, struct __Bsdrtmservice1__GetMonStationTypes *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStationTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStationTypes * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStationTypes(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationTypes, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationTypes);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStationTypes);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationTypes[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStationTypes);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStationTypes*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStationTypes(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStationTypes %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStationTypes*)p = *(struct __Bsdrtmservice1__GetMonStationTypes*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, struct __Bsdrtmservice1__GetMonStationsByUserID3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStationsByUserID3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationsByUserID3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, &a->Bsdrtmservice1__GetMonStationsByUserID3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStationsByUserID3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, "Bsdrtmservice1:GetMonStationsByUserID3", -1, &a->Bsdrtmservice1__GetMonStationsByUserID3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationsByUserID3 * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStationsByUserID3 *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStationsByUserID3 = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStationsByUserID3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID3, sizeof(struct __Bsdrtmservice1__GetMonStationsByUserID3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStationsByUserID3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStationsByUserID3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, "Bsdrtmservice1:GetMonStationsByUserID3", &a->Bsdrtmservice1__GetMonStationsByUserID3, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStationsByUserID3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationsByUserID3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStationsByUserID3(soap, tag?tag:"-Bsdrtmservice1:GetMonStationsByUserID3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationsByUserID3 * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, struct __Bsdrtmservice1__GetMonStationsByUserID3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStationsByUserID3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStationsByUserID3 * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStationsByUserID3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID3, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationsByUserID3);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStationsByUserID3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationsByUserID3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStationsByUserID3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStationsByUserID3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStationsByUserID3 %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStationsByUserID3*)p = *(struct __Bsdrtmservice1__GetMonStationsByUserID3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, struct __Bsdrtmservice1__GetMonStationsByUserID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdrtmservice1__GetMonStationsByUserID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationsByUserID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, &a->Bsdrtmservice1__GetMonStationsByUserID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const char *tag, int id, const struct __Bsdrtmservice1__GetMonStationsByUserID *a, const char *type)
{
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, "Bsdrtmservice1:GetMonStationsByUserID", -1, &a->Bsdrtmservice1__GetMonStationsByUserID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationsByUserID * SOAP_FMAC4 soap_in___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const char *tag, struct __Bsdrtmservice1__GetMonStationsByUserID *a, const char *type)
{
	size_t soap_flag_Bsdrtmservice1__GetMonStationsByUserID = 1;
	short soap_flag;
	a = (struct __Bsdrtmservice1__GetMonStationsByUserID *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID, sizeof(struct __Bsdrtmservice1__GetMonStationsByUserID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdrtmservice1__GetMonStationsByUserID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdrtmservice1__GetMonStationsByUserID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, "Bsdrtmservice1:GetMonStationsByUserID", &a->Bsdrtmservice1__GetMonStationsByUserID, ""))
				{	soap_flag_Bsdrtmservice1__GetMonStationsByUserID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const struct __Bsdrtmservice1__GetMonStationsByUserID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdrtmservice1__GetMonStationsByUserID(soap, tag?tag:"-Bsdrtmservice1:GetMonStationsByUserID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdrtmservice1__GetMonStationsByUserID * SOAP_FMAC4 soap_get___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, struct __Bsdrtmservice1__GetMonStationsByUserID *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdrtmservice1__GetMonStationsByUserID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdrtmservice1__GetMonStationsByUserID * SOAP_FMAC2 soap_instantiate___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdrtmservice1__GetMonStationsByUserID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdrtmservice___Bsdrtmservice1__GetMonStationsByUserID, n, Bsdrtmservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationsByUserID);
		if (size)
			*size = sizeof(struct __Bsdrtmservice1__GetMonStationsByUserID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdrtmservice1__GetMonStationsByUserID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdrtmservice1__GetMonStationsByUserID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdrtmservice1__GetMonStationsByUserID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdrtmservice1__GetMonStationsByUserID %p -> %p\n", q, p));
	*(struct __Bsdrtmservice1__GetMonStationsByUserID*)p = *(struct __Bsdrtmservice1__GetMonStationsByUserID*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetIEMSExDevsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIEMSExDevsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetIEMSExDevsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetIEMSExDevsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetIEMSExDevsResponse *)soap_instantiate__Bsdrtmservice1__GetIEMSExDevsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetIEMSExDevsResponse ** p = (_Bsdrtmservice1__GetIEMSExDevsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevsResponse, sizeof(_Bsdrtmservice1__GetIEMSExDevsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(soap, tag?tag:"Bsdrtmservice1:GetIEMSExDevsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetIEMSExDevs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevs ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIEMSExDevs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetIEMSExDevs **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetIEMSExDevs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetIEMSExDevs *)soap_instantiate__Bsdrtmservice1__GetIEMSExDevs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetIEMSExDevs ** p = (_Bsdrtmservice1__GetIEMSExDevs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIEMSExDevs, sizeof(_Bsdrtmservice1__GetIEMSExDevs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIEMSExDevs);
	if (soap_out_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, tag?tag:"Bsdrtmservice1:GetIEMSExDevs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIEMSExDevs ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetIEMSExDevs(struct soap *soap, _Bsdrtmservice1__GetIEMSExDevs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetIEMSExDevs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *)soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse ** p = (_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypesResponse, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, tag?tag:"Bsdrtmservice1:GetExtendDevicesByDataTypesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypes *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetExtendDevicesByDataTypes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypes ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevicesByDataTypes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetExtendDevicesByDataTypes **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetExtendDevicesByDataTypes *)soap_instantiate__Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetExtendDevicesByDataTypes ** p = (_Bsdrtmservice1__GetExtendDevicesByDataTypes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesByDataTypes, sizeof(_Bsdrtmservice1__GetExtendDevicesByDataTypes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes);
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag?tag:"Bsdrtmservice1:GetExtendDevicesByDataTypes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesByDataTypes ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesByDataTypes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesByDataTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetExtendDevicesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevicesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetExtendDevicesResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetExtendDevicesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetExtendDevicesResponse *)soap_instantiate__Bsdrtmservice1__GetExtendDevicesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetExtendDevicesResponse ** p = (_Bsdrtmservice1__GetExtendDevicesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevicesResponse, sizeof(_Bsdrtmservice1__GetExtendDevicesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(soap, tag?tag:"Bsdrtmservice1:GetExtendDevicesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevicesResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDevicesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetExtendDevicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevices(struct soap *soap, _Bsdrtmservice1__GetExtendDevices *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetExtendDevices(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetExtendDevices *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevices ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetExtendDevices(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevices **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetExtendDevices **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetExtendDevices *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetExtendDevices *)soap_instantiate__Bsdrtmservice1__GetExtendDevices(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetExtendDevices ** p = (_Bsdrtmservice1__GetExtendDevices **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevices, sizeof(_Bsdrtmservice1__GetExtendDevices), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetExtendDevices(struct soap *soap, _Bsdrtmservice1__GetExtendDevices *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevices);
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, tag?tag:"Bsdrtmservice1:GetExtendDevices", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevices ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetExtendDevices(struct soap *soap, _Bsdrtmservice1__GetExtendDevices **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetExtendDevices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDeviceResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetExtendDeviceResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDeviceResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDeviceResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetExtendDeviceResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetExtendDeviceResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetExtendDeviceResponse *)soap_instantiate__Bsdrtmservice1__GetExtendDeviceResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetExtendDeviceResponse ** p = (_Bsdrtmservice1__GetExtendDeviceResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDeviceResponse, sizeof(_Bsdrtmservice1__GetExtendDeviceResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDeviceResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(soap, tag?tag:"Bsdrtmservice1:GetExtendDeviceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDeviceResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(struct soap *soap, _Bsdrtmservice1__GetExtendDeviceResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetExtendDeviceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetExtendDevice(struct soap *soap, _Bsdrtmservice1__GetExtendDevice *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetExtendDevice(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetExtendDevice *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevice ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetExtendDevice(struct soap *soap, const char *tag, _Bsdrtmservice1__GetExtendDevice **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetExtendDevice **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetExtendDevice *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetExtendDevice *)soap_instantiate__Bsdrtmservice1__GetExtendDevice(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetExtendDevice ** p = (_Bsdrtmservice1__GetExtendDevice **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetExtendDevice, sizeof(_Bsdrtmservice1__GetExtendDevice), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetExtendDevice(struct soap *soap, _Bsdrtmservice1__GetExtendDevice *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetExtendDevice);
	if (soap_out_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, tag?tag:"Bsdrtmservice1:GetExtendDevice", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetExtendDevice ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetExtendDevice(struct soap *soap, _Bsdrtmservice1__GetExtendDevice **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetExtendDevice(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetInetllTaskStateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetInetllTaskStateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskStateResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetInetllTaskStateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetInetllTaskStateResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetInetllTaskStateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetInetllTaskStateResponse *)soap_instantiate__Bsdrtmservice1__SetInetllTaskStateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetInetllTaskStateResponse ** p = (_Bsdrtmservice1__SetInetllTaskStateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskStateResponse, sizeof(_Bsdrtmservice1__SetInetllTaskStateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetInetllTaskStateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(soap, tag?tag:"Bsdrtmservice1:SetInetllTaskStateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskStateResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetInetllTaskStateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetInetllTaskState(struct soap *soap, _Bsdrtmservice1__SetInetllTaskState *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetInetllTaskState *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskState ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskState(struct soap *soap, const char *tag, _Bsdrtmservice1__SetInetllTaskState **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetInetllTaskState **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetInetllTaskState *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetInetllTaskState *)soap_instantiate__Bsdrtmservice1__SetInetllTaskState(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetInetllTaskState ** p = (_Bsdrtmservice1__SetInetllTaskState **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetInetllTaskState, sizeof(_Bsdrtmservice1__SetInetllTaskState), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetInetllTaskState(struct soap *soap, _Bsdrtmservice1__SetInetllTaskState *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetInetllTaskState);
	if (soap_out_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, tag?tag:"Bsdrtmservice1:SetInetllTaskState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetInetllTaskState ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetInetllTaskState(struct soap *soap, _Bsdrtmservice1__SetInetllTaskState **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetInetllTaskState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLogResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddInetllTaskLogResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLogResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddInetllTaskLogResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddInetllTaskLogResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddInetllTaskLogResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddInetllTaskLogResponse *)soap_instantiate__Bsdrtmservice1__AddInetllTaskLogResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddInetllTaskLogResponse ** p = (_Bsdrtmservice1__AddInetllTaskLogResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLogResponse, sizeof(_Bsdrtmservice1__AddInetllTaskLogResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLogResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(soap, tag?tag:"Bsdrtmservice1:AddInetllTaskLogResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLogResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLogResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddInetllTaskLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLog ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, const char *tag, _Bsdrtmservice1__AddInetllTaskLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddInetllTaskLog **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddInetllTaskLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddInetllTaskLog *)soap_instantiate__Bsdrtmservice1__AddInetllTaskLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddInetllTaskLog ** p = (_Bsdrtmservice1__AddInetllTaskLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddInetllTaskLog, sizeof(_Bsdrtmservice1__AddInetllTaskLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddInetllTaskLog);
	if (soap_out_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, tag?tag:"Bsdrtmservice1:AddInetllTaskLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddInetllTaskLog ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddInetllTaskLog(struct soap *soap, _Bsdrtmservice1__AddInetllTaskLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddInetllTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, _Bsdrtmservice1__GetIntellTaskResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetIntellTaskResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTaskResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIntellTaskResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetIntellTaskResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetIntellTaskResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetIntellTaskResponse *)soap_instantiate__Bsdrtmservice1__GetIntellTaskResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetIntellTaskResponse ** p = (_Bsdrtmservice1__GetIntellTaskResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTaskResponse, sizeof(_Bsdrtmservice1__GetIntellTaskResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, _Bsdrtmservice1__GetIntellTaskResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTaskResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(soap, tag?tag:"Bsdrtmservice1:GetIntellTaskResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTaskResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(struct soap *soap, _Bsdrtmservice1__GetIntellTaskResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetIntellTaskResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetIntellTask(struct soap *soap, _Bsdrtmservice1__GetIntellTask *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetIntellTask(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetIntellTask *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTask ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetIntellTask(struct soap *soap, const char *tag, _Bsdrtmservice1__GetIntellTask **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetIntellTask **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetIntellTask *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetIntellTask *)soap_instantiate__Bsdrtmservice1__GetIntellTask(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetIntellTask ** p = (_Bsdrtmservice1__GetIntellTask **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetIntellTask, sizeof(_Bsdrtmservice1__GetIntellTask), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetIntellTask(struct soap *soap, _Bsdrtmservice1__GetIntellTask *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetIntellTask);
	if (soap_out_PointerTo_Bsdrtmservice1__GetIntellTask(soap, tag?tag:"Bsdrtmservice1:GetIntellTask", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetIntellTask ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetIntellTask(struct soap *soap, _Bsdrtmservice1__GetIntellTask **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetIntellTask(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIdsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse *)soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRuningIntellTaskIdsResponse ** p = (_Bsdrtmservice1__GetRuningIntellTaskIdsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIdsResponse, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIdsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, tag?tag:"Bsdrtmservice1:GetRuningIntellTaskIdsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIdsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIdsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIdsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIds *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRuningIntellTaskIds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIds ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningIntellTaskIds **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRuningIntellTaskIds **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRuningIntellTaskIds *)soap_instantiate__Bsdrtmservice1__GetRuningIntellTaskIds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRuningIntellTaskIds ** p = (_Bsdrtmservice1__GetRuningIntellTaskIds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningIntellTaskIds, sizeof(_Bsdrtmservice1__GetRuningIntellTaskIds), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIds *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag?tag:"Bsdrtmservice1:GetRuningIntellTaskIds", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningIntellTaskIds ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningIntellTaskIds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRuningIntellTaskIds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsByVideoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideoResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByVideoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsByVideoResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsByVideoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsByVideoResponse *)soap_instantiate__Bsdrtmservice1__GetMonStationsByVideoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsByVideoResponse ** p = (_Bsdrtmservice1__GetMonStationsByVideoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideoResponse, sizeof(_Bsdrtmservice1__GetMonStationsByVideoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByVideoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideoResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideo *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsByVideo *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideo ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByVideo **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsByVideo **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsByVideo *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsByVideo *)soap_instantiate__Bsdrtmservice1__GetMonStationsByVideo(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsByVideo ** p = (_Bsdrtmservice1__GetMonStationsByVideo **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByVideo, sizeof(_Bsdrtmservice1__GetMonStationsByVideo), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideo *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByVideo);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByVideo", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByVideo ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(struct soap *soap, _Bsdrtmservice1__GetMonStationsByVideo **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByVideo(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, _Bsdrtmservice1__SetConfirmedStateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetConfirmedStateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedStateResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetConfirmedStateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetConfirmedStateResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetConfirmedStateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetConfirmedStateResponse *)soap_instantiate__Bsdrtmservice1__SetConfirmedStateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetConfirmedStateResponse ** p = (_Bsdrtmservice1__SetConfirmedStateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedStateResponse, sizeof(_Bsdrtmservice1__SetConfirmedStateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, _Bsdrtmservice1__SetConfirmedStateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(soap, tag?tag:"Bsdrtmservice1:SetConfirmedStateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedStateResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(struct soap *soap, _Bsdrtmservice1__SetConfirmedStateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetConfirmedStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetConfirmedState(struct soap *soap, _Bsdrtmservice1__SetConfirmedState *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetConfirmedState(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetConfirmedState *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedState ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetConfirmedState(struct soap *soap, const char *tag, _Bsdrtmservice1__SetConfirmedState **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetConfirmedState **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetConfirmedState *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetConfirmedState *)soap_instantiate__Bsdrtmservice1__SetConfirmedState(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetConfirmedState ** p = (_Bsdrtmservice1__SetConfirmedState **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetConfirmedState, sizeof(_Bsdrtmservice1__SetConfirmedState), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetConfirmedState(struct soap *soap, _Bsdrtmservice1__SetConfirmedState *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetConfirmedState);
	if (soap_out_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, tag?tag:"Bsdrtmservice1:SetConfirmedState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetConfirmedState ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetConfirmedState(struct soap *soap, _Bsdrtmservice1__SetConfirmedState **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetConfirmedState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *)soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse ** p = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionAlertOfMonstationnoResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationnoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *)soap_instantiate__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno ** p = (_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionAlertOfMonstationno, sizeof(_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionAlertOfMonstationno", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(struct soap *soap, _Bsdrtmservice1__GetMalfunctionAlertOfMonstationno **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionAlertOfMonstationno(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlertsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse *)soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetPageMalfunctionAlertsResponse ** p = (_Bsdrtmservice1__GetPageMalfunctionAlertsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlertsResponse, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlertsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, tag?tag:"Bsdrtmservice1:GetPageMalfunctionAlertsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlertsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlertsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlertsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlerts *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetPageMalfunctionAlerts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlerts ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPageMalfunctionAlerts **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetPageMalfunctionAlerts **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlerts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetPageMalfunctionAlerts *)soap_instantiate__Bsdrtmservice1__GetPageMalfunctionAlerts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetPageMalfunctionAlerts ** p = (_Bsdrtmservice1__GetPageMalfunctionAlerts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPageMalfunctionAlerts, sizeof(_Bsdrtmservice1__GetPageMalfunctionAlerts), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlerts *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts);
	if (soap_out_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag?tag:"Bsdrtmservice1:GetPageMalfunctionAlerts", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPageMalfunctionAlerts ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(struct soap *soap, _Bsdrtmservice1__GetPageMalfunctionAlerts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetPageMalfunctionAlerts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *)soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse ** p = (_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCountResponse, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, tag?tag:"Bsdrtmservice1:GetAllMalfunctionAlertCountResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCountResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCountResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCount *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllMalfunctionAlertCount *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCount ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllMalfunctionAlertCount **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllMalfunctionAlertCount **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCount *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllMalfunctionAlertCount *)soap_instantiate__Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllMalfunctionAlertCount ** p = (_Bsdrtmservice1__GetAllMalfunctionAlertCount **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllMalfunctionAlertCount, sizeof(_Bsdrtmservice1__GetAllMalfunctionAlertCount), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCount *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag?tag:"Bsdrtmservice1:GetAllMalfunctionAlertCount", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllMalfunctionAlertCount ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(struct soap *soap, _Bsdrtmservice1__GetAllMalfunctionAlertCount **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllMalfunctionAlertCount(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCodeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMalfunctionCodeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCodeResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionCodeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMalfunctionCodeResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMalfunctionCodeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMalfunctionCodeResponse *)soap_instantiate__Bsdrtmservice1__GetMalfunctionCodeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMalfunctionCodeResponse ** p = (_Bsdrtmservice1__GetMalfunctionCodeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCodeResponse, sizeof(_Bsdrtmservice1__GetMalfunctionCodeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCodeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionCodeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCodeResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCodeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCodeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCode *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMalfunctionCode *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCode ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMalfunctionCode **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMalfunctionCode **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMalfunctionCode *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMalfunctionCode *)soap_instantiate__Bsdrtmservice1__GetMalfunctionCode(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMalfunctionCode ** p = (_Bsdrtmservice1__GetMalfunctionCode **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMalfunctionCode, sizeof(_Bsdrtmservice1__GetMalfunctionCode), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCode *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMalfunctionCode);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, tag?tag:"Bsdrtmservice1:GetMalfunctionCode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMalfunctionCode ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMalfunctionCode(struct soap *soap, _Bsdrtmservice1__GetMalfunctionCode **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMalfunctionCode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlertResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMalfunctionAlertResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlertResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMalfunctionAlertResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMalfunctionAlertResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMalfunctionAlertResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMalfunctionAlertResponse *)soap_instantiate__Bsdrtmservice1__AddMalfunctionAlertResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMalfunctionAlertResponse ** p = (_Bsdrtmservice1__AddMalfunctionAlertResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlertResponse, sizeof(_Bsdrtmservice1__AddMalfunctionAlertResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlertResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(soap, tag?tag:"Bsdrtmservice1:AddMalfunctionAlertResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlertResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlertResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlertResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlert *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMalfunctionAlert *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlert ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMalfunctionAlert **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMalfunctionAlert **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMalfunctionAlert *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMalfunctionAlert *)soap_instantiate__Bsdrtmservice1__AddMalfunctionAlert(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMalfunctionAlert ** p = (_Bsdrtmservice1__AddMalfunctionAlert **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMalfunctionAlert, sizeof(_Bsdrtmservice1__AddMalfunctionAlert), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlert *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMalfunctionAlert);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, tag?tag:"Bsdrtmservice1:AddMalfunctionAlert", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMalfunctionAlert ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(struct soap *soap, _Bsdrtmservice1__AddMalfunctionAlert **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMalfunctionAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachmentResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__DelMonReportAttachmentResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachmentResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReportAttachmentResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__DelMonReportAttachmentResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__DelMonReportAttachmentResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__DelMonReportAttachmentResponse *)soap_instantiate__Bsdrtmservice1__DelMonReportAttachmentResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__DelMonReportAttachmentResponse ** p = (_Bsdrtmservice1__DelMonReportAttachmentResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachmentResponse, sizeof(_Bsdrtmservice1__DelMonReportAttachmentResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachmentResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(soap, tag?tag:"Bsdrtmservice1:DelMonReportAttachmentResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachmentResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachmentResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__DelMonReportAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachment ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReportAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__DelMonReportAttachment **)soap_malloc(soap, sizeof(_Bsdrtmservice1__DelMonReportAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__DelMonReportAttachment *)soap_instantiate__Bsdrtmservice1__DelMonReportAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__DelMonReportAttachment ** p = (_Bsdrtmservice1__DelMonReportAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportAttachment, sizeof(_Bsdrtmservice1__DelMonReportAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportAttachment);
	if (soap_out_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, tag?tag:"Bsdrtmservice1:DelMonReportAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportAttachment ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__DelMonReportAttachment(struct soap *soap, _Bsdrtmservice1__DelMonReportAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__DelMonReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachmentResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMonReportAttachmentResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachmentResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReportAttachmentResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMonReportAttachmentResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMonReportAttachmentResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMonReportAttachmentResponse *)soap_instantiate__Bsdrtmservice1__AddMonReportAttachmentResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMonReportAttachmentResponse ** p = (_Bsdrtmservice1__AddMonReportAttachmentResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachmentResponse, sizeof(_Bsdrtmservice1__AddMonReportAttachmentResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachmentResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(soap, tag?tag:"Bsdrtmservice1:AddMonReportAttachmentResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachmentResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachmentResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachmentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMonReportAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachment ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReportAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMonReportAttachment **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMonReportAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMonReportAttachment *)soap_instantiate__Bsdrtmservice1__AddMonReportAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMonReportAttachment ** p = (_Bsdrtmservice1__AddMonReportAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportAttachment, sizeof(_Bsdrtmservice1__AddMonReportAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportAttachment);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, tag?tag:"Bsdrtmservice1:AddMonReportAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportAttachment ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMonReportAttachment(struct soap *soap, _Bsdrtmservice1__AddMonReportAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMonReportAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContentResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportAttachmentContentResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContentResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachmentContentResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportAttachmentContentResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContentResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportAttachmentContentResponse *)soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportAttachmentContentResponse ** p = (_Bsdrtmservice1__GetMonReportAttachmentContentResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContentResponse, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContentResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContentResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachmentContentResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContentResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContentResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContentResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContent *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportAttachmentContent *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContent ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachmentContent **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportAttachmentContent **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContent *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportAttachmentContent *)soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentContent(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportAttachmentContent ** p = (_Bsdrtmservice1__GetMonReportAttachmentContent **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentContent, sizeof(_Bsdrtmservice1__GetMonReportAttachmentContent), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContent *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachmentContent", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentContent ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentContent **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentContent(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportAttachmentsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachmentsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportAttachmentsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportAttachmentsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportAttachmentsResponse *)soap_instantiate__Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportAttachmentsResponse ** p = (_Bsdrtmservice1__GetMonReportAttachmentsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachmentsResponse, sizeof(_Bsdrtmservice1__GetMonReportAttachmentsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachmentsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachmentsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachmentsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachmentsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachments *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportAttachments *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachments ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportAttachments **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportAttachments **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportAttachments *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportAttachments *)soap_instantiate__Bsdrtmservice1__GetMonReportAttachments(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportAttachments ** p = (_Bsdrtmservice1__GetMonReportAttachments **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportAttachments, sizeof(_Bsdrtmservice1__GetMonReportAttachments), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachments *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportAttachments);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, tag?tag:"Bsdrtmservice1:GetMonReportAttachments", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportAttachments ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportAttachments(struct soap *soap, _Bsdrtmservice1__GetMonReportAttachments **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportAttachments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreqResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__ExistMonReportofFreqResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreqResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__ExistMonReportofFreqResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__ExistMonReportofFreqResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__ExistMonReportofFreqResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__ExistMonReportofFreqResponse *)soap_instantiate__Bsdrtmservice1__ExistMonReportofFreqResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__ExistMonReportofFreqResponse ** p = (_Bsdrtmservice1__ExistMonReportofFreqResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreqResponse, sizeof(_Bsdrtmservice1__ExistMonReportofFreqResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreqResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(soap, tag?tag:"Bsdrtmservice1:ExistMonReportofFreqResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreqResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreqResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreqResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreq *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__ExistMonReportofFreq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreq ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, const char *tag, _Bsdrtmservice1__ExistMonReportofFreq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__ExistMonReportofFreq **)soap_malloc(soap, sizeof(_Bsdrtmservice1__ExistMonReportofFreq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__ExistMonReportofFreq *)soap_instantiate__Bsdrtmservice1__ExistMonReportofFreq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__ExistMonReportofFreq ** p = (_Bsdrtmservice1__ExistMonReportofFreq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__ExistMonReportofFreq, sizeof(_Bsdrtmservice1__ExistMonReportofFreq), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__ExistMonReportofFreq);
	if (soap_out_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, tag?tag:"Bsdrtmservice1:ExistMonReportofFreq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__ExistMonReportofFreq ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(struct soap *soap, _Bsdrtmservice1__ExistMonReportofFreq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__ExistMonReportofFreq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportFreqTypesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypesResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportFreqTypesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportFreqTypesResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportFreqTypesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportFreqTypesResponse *)soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportFreqTypesResponse ** p = (_Bsdrtmservice1__GetMonReportFreqTypesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypesResponse, sizeof(_Bsdrtmservice1__GetMonReportFreqTypesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, tag?tag:"Bsdrtmservice1:GetMonReportFreqTypesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypesResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypes *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportFreqTypes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypes ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportFreqTypes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportFreqTypes **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportFreqTypes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportFreqTypes *)soap_instantiate__Bsdrtmservice1__GetMonReportFreqTypes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportFreqTypes ** p = (_Bsdrtmservice1__GetMonReportFreqTypes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportFreqTypes, sizeof(_Bsdrtmservice1__GetMonReportFreqTypes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, tag?tag:"Bsdrtmservice1:GetMonReportFreqTypes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportFreqTypes ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(struct soap *soap, _Bsdrtmservice1__GetMonReportFreqTypes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportFreqTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportsOfFreqsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportsOfFreqsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportsOfFreqsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportsOfFreqsResponse *)soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportsOfFreqsResponse ** p = (_Bsdrtmservice1__GetMonReportsOfFreqsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqsResponse, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, tag?tag:"Bsdrtmservice1:GetMonReportsOfFreqsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportsOfFreqs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqs ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportsOfFreqs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportsOfFreqs **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportsOfFreqs *)soap_instantiate__Bsdrtmservice1__GetMonReportsOfFreqs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportsOfFreqs ** p = (_Bsdrtmservice1__GetMonReportsOfFreqs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportsOfFreqs, sizeof(_Bsdrtmservice1__GetMonReportsOfFreqs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag?tag:"Bsdrtmservice1:GetMonReportsOfFreqs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportsOfFreqs ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(struct soap *soap, _Bsdrtmservice1__GetMonReportsOfFreqs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportsOfFreqs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreqResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportOfFreqResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreqResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportOfFreqResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportOfFreqResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportOfFreqResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportOfFreqResponse *)soap_instantiate__Bsdrtmservice1__GetMonReportOfFreqResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportOfFreqResponse ** p = (_Bsdrtmservice1__GetMonReportOfFreqResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreqResponse, sizeof(_Bsdrtmservice1__GetMonReportOfFreqResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreqResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(soap, tag?tag:"Bsdrtmservice1:GetMonReportOfFreqResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreqResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreqResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreqResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreq *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonReportOfFreq *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreq ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonReportOfFreq **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonReportOfFreq **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonReportOfFreq *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonReportOfFreq *)soap_instantiate__Bsdrtmservice1__GetMonReportOfFreq(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonReportOfFreq ** p = (_Bsdrtmservice1__GetMonReportOfFreq **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonReportOfFreq, sizeof(_Bsdrtmservice1__GetMonReportOfFreq), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreq *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonReportOfFreq);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, tag?tag:"Bsdrtmservice1:GetMonReportOfFreq", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonReportOfFreq ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(struct soap *soap, _Bsdrtmservice1__GetMonReportOfFreq **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonReportOfFreq(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__DelMonReportResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__DelMonReportResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__DelMonReportResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__DelMonReportResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReportResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__DelMonReportResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__DelMonReportResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__DelMonReportResponse *)soap_instantiate__Bsdrtmservice1__DelMonReportResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__DelMonReportResponse ** p = (_Bsdrtmservice1__DelMonReportResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReportResponse, sizeof(_Bsdrtmservice1__DelMonReportResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__DelMonReportResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReportResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__DelMonReportResponse(soap, tag?tag:"Bsdrtmservice1:DelMonReportResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReportResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__DelMonReportResponse(struct soap *soap, _Bsdrtmservice1__DelMonReportResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__DelMonReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__DelMonReport(struct soap *soap, _Bsdrtmservice1__DelMonReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__DelMonReport(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__DelMonReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReport ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__DelMonReport(struct soap *soap, const char *tag, _Bsdrtmservice1__DelMonReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__DelMonReport **)soap_malloc(soap, sizeof(_Bsdrtmservice1__DelMonReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__DelMonReport *)soap_instantiate__Bsdrtmservice1__DelMonReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__DelMonReport ** p = (_Bsdrtmservice1__DelMonReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__DelMonReport, sizeof(_Bsdrtmservice1__DelMonReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__DelMonReport(struct soap *soap, _Bsdrtmservice1__DelMonReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__DelMonReport);
	if (soap_out_PointerTo_Bsdrtmservice1__DelMonReport(soap, tag?tag:"Bsdrtmservice1:DelMonReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__DelMonReport ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__DelMonReport(struct soap *soap, _Bsdrtmservice1__DelMonReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__DelMonReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMonReportResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMonReportResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMonReportResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMonReportResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReportResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMonReportResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMonReportResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMonReportResponse *)soap_instantiate__Bsdrtmservice1__AddMonReportResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMonReportResponse ** p = (_Bsdrtmservice1__AddMonReportResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReportResponse, sizeof(_Bsdrtmservice1__AddMonReportResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMonReportResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReportResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonReportResponse(soap, tag?tag:"Bsdrtmservice1:AddMonReportResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReportResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMonReportResponse(struct soap *soap, _Bsdrtmservice1__AddMonReportResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMonReportResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMonReport(struct soap *soap, _Bsdrtmservice1__AddMonReport *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMonReport(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMonReport *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReport ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMonReport(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonReport **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMonReport **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMonReport *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMonReport *)soap_instantiate__Bsdrtmservice1__AddMonReport(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMonReport ** p = (_Bsdrtmservice1__AddMonReport **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonReport, sizeof(_Bsdrtmservice1__AddMonReport), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMonReport(struct soap *soap, _Bsdrtmservice1__AddMonReport *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonReport);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonReport(soap, tag?tag:"Bsdrtmservice1:AddMonReport", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonReport ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMonReport(struct soap *soap, _Bsdrtmservice1__AddMonReport **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMonReport(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitorsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetPreDefinedMonitorsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitorsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPreDefinedMonitorsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetPreDefinedMonitorsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetPreDefinedMonitorsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetPreDefinedMonitorsResponse *)soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetPreDefinedMonitorsResponse ** p = (_Bsdrtmservice1__GetPreDefinedMonitorsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitorsResponse, sizeof(_Bsdrtmservice1__GetPreDefinedMonitorsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitorsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, tag?tag:"Bsdrtmservice1:GetPreDefinedMonitorsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitorsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitorsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitorsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitors *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetPreDefinedMonitors *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitors ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, const char *tag, _Bsdrtmservice1__GetPreDefinedMonitors **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetPreDefinedMonitors **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetPreDefinedMonitors *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetPreDefinedMonitors *)soap_instantiate__Bsdrtmservice1__GetPreDefinedMonitors(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetPreDefinedMonitors ** p = (_Bsdrtmservice1__GetPreDefinedMonitors **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetPreDefinedMonitors, sizeof(_Bsdrtmservice1__GetPreDefinedMonitors), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitors *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors);
	if (soap_out_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, tag?tag:"Bsdrtmservice1:GetPreDefinedMonitors", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetPreDefinedMonitors ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(struct soap *soap, _Bsdrtmservice1__GetPreDefinedMonitors **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetPreDefinedMonitors(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonAlertOfDayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDayResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfDayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonAlertOfDayResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonAlertOfDayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonAlertOfDayResponse *)soap_instantiate__Bsdrtmservice1__GetMonAlertOfDayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonAlertOfDayResponse ** p = (_Bsdrtmservice1__GetMonAlertOfDayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDayResponse, sizeof(_Bsdrtmservice1__GetMonAlertOfDayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfDayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDayResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDay *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonAlertOfDay *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDay ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfDay **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonAlertOfDay **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonAlertOfDay *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonAlertOfDay *)soap_instantiate__Bsdrtmservice1__GetMonAlertOfDay(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonAlertOfDay ** p = (_Bsdrtmservice1__GetMonAlertOfDay **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfDay, sizeof(_Bsdrtmservice1__GetMonAlertOfDay), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDay *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfDay);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfDay", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfDay ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfDay **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfDay(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonthResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonAlertOfMonthResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonthResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfMonthResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonAlertOfMonthResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonAlertOfMonthResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonAlertOfMonthResponse *)soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonAlertOfMonthResponse ** p = (_Bsdrtmservice1__GetMonAlertOfMonthResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonthResponse, sizeof(_Bsdrtmservice1__GetMonAlertOfMonthResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonthResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfMonthResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonthResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonthResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonthResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonth *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonAlertOfMonth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonth ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonAlertOfMonth **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonAlertOfMonth **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonAlertOfMonth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonAlertOfMonth *)soap_instantiate__Bsdrtmservice1__GetMonAlertOfMonth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonAlertOfMonth ** p = (_Bsdrtmservice1__GetMonAlertOfMonth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonAlertOfMonth, sizeof(_Bsdrtmservice1__GetMonAlertOfMonth), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonth *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, tag?tag:"Bsdrtmservice1:GetMonAlertOfMonth", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonAlertOfMonth ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonAlertOfMonth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonAlertOfMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMonAlertResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMonAlertResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlertResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonAlertResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMonAlertResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMonAlertResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMonAlertResponse *)soap_instantiate__Bsdrtmservice1__AddMonAlertResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMonAlertResponse ** p = (_Bsdrtmservice1__AddMonAlertResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlertResponse, sizeof(_Bsdrtmservice1__AddMonAlertResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMonAlertResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlertResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonAlertResponse(soap, tag?tag:"Bsdrtmservice1:AddMonAlertResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlertResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMonAlertResponse(struct soap *soap, _Bsdrtmservice1__AddMonAlertResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMonAlertResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddMonAlert(struct soap *soap, _Bsdrtmservice1__AddMonAlert *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddMonAlert(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddMonAlert *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlert ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddMonAlert(struct soap *soap, const char *tag, _Bsdrtmservice1__AddMonAlert **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddMonAlert **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddMonAlert *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddMonAlert *)soap_instantiate__Bsdrtmservice1__AddMonAlert(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddMonAlert ** p = (_Bsdrtmservice1__AddMonAlert **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddMonAlert, sizeof(_Bsdrtmservice1__AddMonAlert), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddMonAlert(struct soap *soap, _Bsdrtmservice1__AddMonAlert *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddMonAlert);
	if (soap_out_PointerTo_Bsdrtmservice1__AddMonAlert(soap, tag?tag:"Bsdrtmservice1:AddMonAlert", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddMonAlert ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddMonAlert(struct soap *soap, _Bsdrtmservice1__AddMonAlert **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddMonAlert(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetTaskStateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetTaskStateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskStateResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetTaskStateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetTaskStateResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetTaskStateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetTaskStateResponse *)soap_instantiate__Bsdrtmservice1__SetTaskStateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetTaskStateResponse ** p = (_Bsdrtmservice1__SetTaskStateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskStateResponse, sizeof(_Bsdrtmservice1__SetTaskStateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetTaskStateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskStateResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__SetTaskStateResponse(soap, tag?tag:"Bsdrtmservice1:SetTaskStateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskStateResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetTaskStateResponse(struct soap *soap, _Bsdrtmservice1__SetTaskStateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetTaskStateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetTaskState(struct soap *soap, _Bsdrtmservice1__SetTaskState *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetTaskState(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetTaskState *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskState ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetTaskState(struct soap *soap, const char *tag, _Bsdrtmservice1__SetTaskState **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetTaskState **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetTaskState *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetTaskState *)soap_instantiate__Bsdrtmservice1__SetTaskState(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetTaskState ** p = (_Bsdrtmservice1__SetTaskState **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetTaskState, sizeof(_Bsdrtmservice1__SetTaskState), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetTaskState(struct soap *soap, _Bsdrtmservice1__SetTaskState *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetTaskState);
	if (soap_out_PointerTo_Bsdrtmservice1__SetTaskState(soap, tag?tag:"Bsdrtmservice1:SetTaskState", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetTaskState ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetTaskState(struct soap *soap, _Bsdrtmservice1__SetTaskState **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetTaskState(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddTaskLogResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddTaskLogResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLogResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddTaskLogResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddTaskLogResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddTaskLogResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddTaskLogResponse *)soap_instantiate__Bsdrtmservice1__AddTaskLogResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddTaskLogResponse ** p = (_Bsdrtmservice1__AddTaskLogResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLogResponse, sizeof(_Bsdrtmservice1__AddTaskLogResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddTaskLogResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLogResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddTaskLogResponse(soap, tag?tag:"Bsdrtmservice1:AddTaskLogResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLogResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddTaskLogResponse(struct soap *soap, _Bsdrtmservice1__AddTaskLogResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddTaskLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddTaskLog(struct soap *soap, _Bsdrtmservice1__AddTaskLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddTaskLog(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddTaskLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLog ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddTaskLog(struct soap *soap, const char *tag, _Bsdrtmservice1__AddTaskLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddTaskLog **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddTaskLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddTaskLog *)soap_instantiate__Bsdrtmservice1__AddTaskLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddTaskLog ** p = (_Bsdrtmservice1__AddTaskLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddTaskLog, sizeof(_Bsdrtmservice1__AddTaskLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddTaskLog(struct soap *soap, _Bsdrtmservice1__AddTaskLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddTaskLog);
	if (soap_out_PointerTo_Bsdrtmservice1__AddTaskLog(soap, tag?tag:"Bsdrtmservice1:AddTaskLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddTaskLog ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddTaskLog(struct soap *soap, _Bsdrtmservice1__AddTaskLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddTaskLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskByIdResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRuningTaskByIdResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskByIdResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskByIdResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRuningTaskByIdResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRuningTaskByIdResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRuningTaskByIdResponse *)soap_instantiate__Bsdrtmservice1__GetRuningTaskByIdResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRuningTaskByIdResponse ** p = (_Bsdrtmservice1__GetRuningTaskByIdResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskByIdResponse, sizeof(_Bsdrtmservice1__GetRuningTaskByIdResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskByIdResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskByIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskByIdResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskByIdResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskByIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskById(struct soap *soap, _Bsdrtmservice1__GetRuningTaskById *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRuningTaskById *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskById ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskById(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskById **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRuningTaskById **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRuningTaskById *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRuningTaskById *)soap_instantiate__Bsdrtmservice1__GetRuningTaskById(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRuningTaskById ** p = (_Bsdrtmservice1__GetRuningTaskById **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskById, sizeof(_Bsdrtmservice1__GetRuningTaskById), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRuningTaskById(struct soap *soap, _Bsdrtmservice1__GetRuningTaskById *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskById);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskById", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskById ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRuningTaskById(struct soap *soap, _Bsdrtmservice1__GetRuningTaskById **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskById(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIdsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRuningTaskIdsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIdsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskIdsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRuningTaskIdsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRuningTaskIdsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRuningTaskIdsResponse *)soap_instantiate__Bsdrtmservice1__GetRuningTaskIdsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRuningTaskIdsResponse ** p = (_Bsdrtmservice1__GetRuningTaskIdsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIdsResponse, sizeof(_Bsdrtmservice1__GetRuningTaskIdsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIdsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskIdsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIdsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIdsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIdsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIds *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRuningTaskIds *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIds ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRuningTaskIds **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRuningTaskIds **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRuningTaskIds *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRuningTaskIds *)soap_instantiate__Bsdrtmservice1__GetRuningTaskIds(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRuningTaskIds ** p = (_Bsdrtmservice1__GetRuningTaskIds **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRuningTaskIds, sizeof(_Bsdrtmservice1__GetRuningTaskIds), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIds *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRuningTaskIds);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, tag?tag:"Bsdrtmservice1:GetRuningTaskIds", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRuningTaskIds ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRuningTaskIds(struct soap *soap, _Bsdrtmservice1__GetRuningTaskIds **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRuningTaskIds(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonstationUseTimeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTimeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonstationUseTimeResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonstationUseTimeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonstationUseTimeResponse *)soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonstationUseTimeResponse ** p = (_Bsdrtmservice1__GetMonstationUseTimeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeResponse, sizeof(_Bsdrtmservice1__GetMonstationUseTimeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTimeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonstationUseTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTime ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonstationUseTime **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonstationUseTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonstationUseTime *)soap_instantiate__Bsdrtmservice1__GetMonstationUseTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonstationUseTime ** p = (_Bsdrtmservice1__GetMonstationUseTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTime, sizeof(_Bsdrtmservice1__GetMonstationUseTime), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTime);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTime ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonstationUseTime(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *)soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse ** p = (_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTimeOfMonthResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonthResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonth *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonstationUseTimeOfMonth *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonth ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonstationUseTimeOfMonth **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonth **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonth *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonstationUseTimeOfMonth *)soap_instantiate__Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonstationUseTimeOfMonth ** p = (_Bsdrtmservice1__GetMonstationUseTimeOfMonth **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonstationUseTimeOfMonth, sizeof(_Bsdrtmservice1__GetMonstationUseTimeOfMonth), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonth *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag?tag:"Bsdrtmservice1:GetMonstationUseTimeOfMonth", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonstationUseTimeOfMonth ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(struct soap *soap, _Bsdrtmservice1__GetMonstationUseTimeOfMonth **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonstationUseTimeOfMonth(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, _Bsdrtmservice1__AddDevUseLogResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddDevUseLogResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLogResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__AddDevUseLogResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddDevUseLogResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddDevUseLogResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddDevUseLogResponse *)soap_instantiate__Bsdrtmservice1__AddDevUseLogResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddDevUseLogResponse ** p = (_Bsdrtmservice1__AddDevUseLogResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLogResponse, sizeof(_Bsdrtmservice1__AddDevUseLogResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, _Bsdrtmservice1__AddDevUseLogResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLogResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(soap, tag?tag:"Bsdrtmservice1:AddDevUseLogResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLogResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(struct soap *soap, _Bsdrtmservice1__AddDevUseLogResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddDevUseLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__AddDevUseLog(struct soap *soap, _Bsdrtmservice1__AddDevUseLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__AddDevUseLog(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__AddDevUseLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLog ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__AddDevUseLog(struct soap *soap, const char *tag, _Bsdrtmservice1__AddDevUseLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__AddDevUseLog **)soap_malloc(soap, sizeof(_Bsdrtmservice1__AddDevUseLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__AddDevUseLog *)soap_instantiate__Bsdrtmservice1__AddDevUseLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__AddDevUseLog ** p = (_Bsdrtmservice1__AddDevUseLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__AddDevUseLog, sizeof(_Bsdrtmservice1__AddDevUseLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__AddDevUseLog(struct soap *soap, _Bsdrtmservice1__AddDevUseLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__AddDevUseLog);
	if (soap_out_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, tag?tag:"Bsdrtmservice1:AddDevUseLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__AddDevUseLog ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__AddDevUseLog(struct soap *soap, _Bsdrtmservice1__AddDevUseLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__AddDevUseLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, _Bsdrtmservice1__GetAllAntsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllAntsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAntsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllAntsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllAntsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllAntsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllAntsResponse *)soap_instantiate__Bsdrtmservice1__GetAllAntsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllAntsResponse ** p = (_Bsdrtmservice1__GetAllAntsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAntsResponse, sizeof(_Bsdrtmservice1__GetAllAntsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, _Bsdrtmservice1__GetAllAntsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAntsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllAntsResponse(soap, tag?tag:"Bsdrtmservice1:GetAllAntsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAntsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllAntsResponse(struct soap *soap, _Bsdrtmservice1__GetAllAntsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllAntsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllAnts(struct soap *soap, _Bsdrtmservice1__GetAllAnts *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllAnts(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllAnts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAnts ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllAnts(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllAnts **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllAnts **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllAnts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllAnts *)soap_instantiate__Bsdrtmservice1__GetAllAnts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllAnts ** p = (_Bsdrtmservice1__GetAllAnts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllAnts, sizeof(_Bsdrtmservice1__GetAllAnts), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllAnts(struct soap *soap, _Bsdrtmservice1__GetAllAnts *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllAnts);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllAnts(soap, tag?tag:"Bsdrtmservice1:GetAllAnts", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllAnts ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllAnts(struct soap *soap, _Bsdrtmservice1__GetAllAnts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllAnts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAnts3Response(struct soap *soap, _Bsdrtmservice1__GetAnts3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAnts3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAnts3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAnts3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAnts3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAnts3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAnts3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAnts3Response *)soap_instantiate__Bsdrtmservice1__GetAnts3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAnts3Response ** p = (_Bsdrtmservice1__GetAnts3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3Response, sizeof(_Bsdrtmservice1__GetAnts3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAnts3Response(struct soap *soap, _Bsdrtmservice1__GetAnts3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAnts3Response(soap, tag?tag:"Bsdrtmservice1:GetAnts3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAnts3Response(struct soap *soap, _Bsdrtmservice1__GetAnts3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAnts3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAnts3(struct soap *soap, _Bsdrtmservice1__GetAnts3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAnts3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAnts3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAnts3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAnts3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAnts3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAnts3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAnts3 *)soap_instantiate__Bsdrtmservice1__GetAnts3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAnts3 ** p = (_Bsdrtmservice1__GetAnts3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAnts3, sizeof(_Bsdrtmservice1__GetAnts3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAnts3(struct soap *soap, _Bsdrtmservice1__GetAnts3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAnts3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAnts3(soap, tag?tag:"Bsdrtmservice1:GetAnts3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAnts3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAnts3(struct soap *soap, _Bsdrtmservice1__GetAnts3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAnts3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFunAnts3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAnts3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFunAnts3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFunAnts3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFunAnts3Response *)soap_instantiate__Bsdrtmservice1__GetDevFunAnts3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFunAnts3Response ** p = (_Bsdrtmservice1__GetDevFunAnts3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3Response, sizeof(_Bsdrtmservice1__GetDevFunAnts3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(soap, tag?tag:"Bsdrtmservice1:GetDevFunAnts3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFunAnts3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAnts3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFunAnts3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFunAnts3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFunAnts3 *)soap_instantiate__Bsdrtmservice1__GetDevFunAnts3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFunAnts3 ** p = (_Bsdrtmservice1__GetDevFunAnts3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts3, sizeof(_Bsdrtmservice1__GetDevFunAnts3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, tag?tag:"Bsdrtmservice1:GetDevFunAnts3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFunAnts3(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunAntsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFunAntsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAntsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAntsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFunAntsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFunAntsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFunAntsResponse *)soap_instantiate__Bsdrtmservice1__GetDevFunAntsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFunAntsResponse ** p = (_Bsdrtmservice1__GetDevFunAntsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAntsResponse, sizeof(_Bsdrtmservice1__GetDevFunAntsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunAntsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(soap, tag?tag:"Bsdrtmservice1:GetDevFunAntsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAntsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunAntsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFunAntsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunAnts(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFunAnts *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunAnts **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFunAnts **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFunAnts *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFunAnts *)soap_instantiate__Bsdrtmservice1__GetDevFunAnts(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFunAnts ** p = (_Bsdrtmservice1__GetDevFunAnts **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunAnts, sizeof(_Bsdrtmservice1__GetDevFunAnts), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFunAnts(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunAnts);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, tag?tag:"Bsdrtmservice1:GetDevFunAnts", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunAnts ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFunAnts(struct soap *soap, _Bsdrtmservice1__GetDevFunAnts **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFunAnts(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, _Bsdrtmservice1__GetDevFuns3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFuns3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFuns3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFuns3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFuns3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFuns3Response *)soap_instantiate__Bsdrtmservice1__GetDevFuns3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFuns3Response ** p = (_Bsdrtmservice1__GetDevFuns3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3Response, sizeof(_Bsdrtmservice1__GetDevFuns3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, _Bsdrtmservice1__GetDevFuns3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3Response(soap, tag?tag:"Bsdrtmservice1:GetDevFuns3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFuns3Response(struct soap *soap, _Bsdrtmservice1__GetDevFuns3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns3(struct soap *soap, _Bsdrtmservice1__GetDevFuns3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFuns3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFuns3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFuns3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFuns3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFuns3 *)soap_instantiate__Bsdrtmservice1__GetDevFuns3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFuns3 ** p = (_Bsdrtmservice1__GetDevFuns3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns3, sizeof(_Bsdrtmservice1__GetDevFuns3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFuns3(struct soap *soap, _Bsdrtmservice1__GetDevFuns3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, tag?tag:"Bsdrtmservice1:GetDevFuns3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFuns3(struct soap *soap, _Bsdrtmservice1__GetDevFuns3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFuns3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFunsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFunsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFunsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFunsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFunsResponse *)soap_instantiate__Bsdrtmservice1__GetDevFunsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFunsResponse ** p = (_Bsdrtmservice1__GetDevFunsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFunsResponse, sizeof(_Bsdrtmservice1__GetDevFunsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFunsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFunsResponse(soap, tag?tag:"Bsdrtmservice1:GetDevFunsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFunsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFunsResponse(struct soap *soap, _Bsdrtmservice1__GetDevFunsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFunsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevFuns(struct soap *soap, _Bsdrtmservice1__GetDevFuns *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevFuns(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevFuns *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevFuns(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevFuns **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevFuns **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevFuns *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevFuns *)soap_instantiate__Bsdrtmservice1__GetDevFuns(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevFuns ** p = (_Bsdrtmservice1__GetDevFuns **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevFuns, sizeof(_Bsdrtmservice1__GetDevFuns), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevFuns(struct soap *soap, _Bsdrtmservice1__GetDevFuns *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevFuns);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevFuns(soap, tag?tag:"Bsdrtmservice1:GetDevFuns", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevFuns ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevFuns(struct soap *soap, _Bsdrtmservice1__GetDevFuns **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevFuns(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevices3Response(struct soap *soap, _Bsdrtmservice1__GetDevices3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevices3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevices3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevices3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevices3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevices3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevices3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevices3Response *)soap_instantiate__Bsdrtmservice1__GetDevices3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevices3Response ** p = (_Bsdrtmservice1__GetDevices3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3Response, sizeof(_Bsdrtmservice1__GetDevices3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevices3Response(struct soap *soap, _Bsdrtmservice1__GetDevices3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevices3Response(soap, tag?tag:"Bsdrtmservice1:GetDevices3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevices3Response(struct soap *soap, _Bsdrtmservice1__GetDevices3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevices3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevices3(struct soap *soap, _Bsdrtmservice1__GetDevices3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevices3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevices3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevices3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevices3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevices3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevices3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevices3 *)soap_instantiate__Bsdrtmservice1__GetDevices3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevices3 ** p = (_Bsdrtmservice1__GetDevices3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices3, sizeof(_Bsdrtmservice1__GetDevices3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevices3(struct soap *soap, _Bsdrtmservice1__GetDevices3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevices3(soap, tag?tag:"Bsdrtmservice1:GetDevices3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevices3(struct soap *soap, _Bsdrtmservice1__GetDevices3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevices3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetDevicesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevicesResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevicesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevicesResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevicesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevicesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevicesResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevicesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevicesResponse *)soap_instantiate__Bsdrtmservice1__GetDevicesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevicesResponse ** p = (_Bsdrtmservice1__GetDevicesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevicesResponse, sizeof(_Bsdrtmservice1__GetDevicesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetDevicesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevicesResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevicesResponse(soap, tag?tag:"Bsdrtmservice1:GetDevicesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevicesResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevicesResponse(struct soap *soap, _Bsdrtmservice1__GetDevicesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevices(struct soap *soap, _Bsdrtmservice1__GetDevices *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevices(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevices *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevices(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevices **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevices **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevices *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevices *)soap_instantiate__Bsdrtmservice1__GetDevices(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevices ** p = (_Bsdrtmservice1__GetDevices **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevices, sizeof(_Bsdrtmservice1__GetDevices), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevices(struct soap *soap, _Bsdrtmservice1__GetDevices *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevices);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevices(soap, tag?tag:"Bsdrtmservice1:GetDevices", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevices ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevices(struct soap *soap, _Bsdrtmservice1__GetDevices **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, _Bsdrtmservice1__SetRNCPasswordResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetRNCPasswordResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPasswordResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__SetRNCPasswordResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetRNCPasswordResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetRNCPasswordResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetRNCPasswordResponse *)soap_instantiate__Bsdrtmservice1__SetRNCPasswordResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetRNCPasswordResponse ** p = (_Bsdrtmservice1__SetRNCPasswordResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPasswordResponse, sizeof(_Bsdrtmservice1__SetRNCPasswordResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, _Bsdrtmservice1__SetRNCPasswordResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(soap, tag?tag:"Bsdrtmservice1:SetRNCPasswordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPasswordResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(struct soap *soap, _Bsdrtmservice1__SetRNCPasswordResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetRNCPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__SetRNCPassword(struct soap *soap, _Bsdrtmservice1__SetRNCPassword *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__SetRNCPassword(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__SetRNCPassword *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPassword ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__SetRNCPassword(struct soap *soap, const char *tag, _Bsdrtmservice1__SetRNCPassword **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__SetRNCPassword **)soap_malloc(soap, sizeof(_Bsdrtmservice1__SetRNCPassword *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__SetRNCPassword *)soap_instantiate__Bsdrtmservice1__SetRNCPassword(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__SetRNCPassword ** p = (_Bsdrtmservice1__SetRNCPassword **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__SetRNCPassword, sizeof(_Bsdrtmservice1__SetRNCPassword), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__SetRNCPassword(struct soap *soap, _Bsdrtmservice1__SetRNCPassword *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__SetRNCPassword);
	if (soap_out_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, tag?tag:"Bsdrtmservice1:SetRNCPassword", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__SetRNCPassword ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__SetRNCPassword(struct soap *soap, _Bsdrtmservice1__SetRNCPassword **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__SetRNCPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllRNCs3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCs3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllRNCs3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllRNCs3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllRNCs3Response *)soap_instantiate__Bsdrtmservice1__GetAllRNCs3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllRNCs3Response ** p = (_Bsdrtmservice1__GetAllRNCs3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3Response, sizeof(_Bsdrtmservice1__GetAllRNCs3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(soap, tag?tag:"Bsdrtmservice1:GetAllRNCs3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs3(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllRNCs3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCs3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllRNCs3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllRNCs3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllRNCs3 *)soap_instantiate__Bsdrtmservice1__GetAllRNCs3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllRNCs3 ** p = (_Bsdrtmservice1__GetAllRNCs3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs3, sizeof(_Bsdrtmservice1__GetAllRNCs3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllRNCs3(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, tag?tag:"Bsdrtmservice1:GetAllRNCs3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllRNCs3(struct soap *soap, _Bsdrtmservice1__GetAllRNCs3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetAllRNCsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllRNCsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllRNCsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllRNCsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllRNCsResponse *)soap_instantiate__Bsdrtmservice1__GetAllRNCsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllRNCsResponse ** p = (_Bsdrtmservice1__GetAllRNCsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCsResponse, sizeof(_Bsdrtmservice1__GetAllRNCsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetAllRNCsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(soap, tag?tag:"Bsdrtmservice1:GetAllRNCsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetAllRNCsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllRNCsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetAllRNCs(struct soap *soap, _Bsdrtmservice1__GetAllRNCs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetAllRNCs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetAllRNCs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetAllRNCs **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetAllRNCs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetAllRNCs *)soap_instantiate__Bsdrtmservice1__GetAllRNCs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetAllRNCs ** p = (_Bsdrtmservice1__GetAllRNCs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetAllRNCs, sizeof(_Bsdrtmservice1__GetAllRNCs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetAllRNCs(struct soap *soap, _Bsdrtmservice1__GetAllRNCs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetAllRNCs);
	if (soap_out_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, tag?tag:"Bsdrtmservice1:GetAllRNCs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetAllRNCs ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetAllRNCs(struct soap *soap, _Bsdrtmservice1__GetAllRNCs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetAllRNCs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetRNCs3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRNCs3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRNCs3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRNCs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCs3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRNCs3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRNCs3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRNCs3Response *)soap_instantiate__Bsdrtmservice1__GetRNCs3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRNCs3Response ** p = (_Bsdrtmservice1__GetRNCs3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3Response, sizeof(_Bsdrtmservice1__GetRNCs3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetRNCs3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRNCs3Response(soap, tag?tag:"Bsdrtmservice1:GetRNCs3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRNCs3Response(struct soap *soap, _Bsdrtmservice1__GetRNCs3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRNCs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs3(struct soap *soap, _Bsdrtmservice1__GetRNCs3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRNCs3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRNCs3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRNCs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCs3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRNCs3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRNCs3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRNCs3 *)soap_instantiate__Bsdrtmservice1__GetRNCs3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRNCs3 ** p = (_Bsdrtmservice1__GetRNCs3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs3, sizeof(_Bsdrtmservice1__GetRNCs3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRNCs3(struct soap *soap, _Bsdrtmservice1__GetRNCs3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRNCs3(soap, tag?tag:"Bsdrtmservice1:GetRNCs3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRNCs3(struct soap *soap, _Bsdrtmservice1__GetRNCs3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRNCs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetRNCsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRNCsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRNCsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRNCsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRNCsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRNCsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRNCsResponse *)soap_instantiate__Bsdrtmservice1__GetRNCsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRNCsResponse ** p = (_Bsdrtmservice1__GetRNCsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCsResponse, sizeof(_Bsdrtmservice1__GetRNCsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetRNCsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRNCsResponse(soap, tag?tag:"Bsdrtmservice1:GetRNCsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRNCsResponse(struct soap *soap, _Bsdrtmservice1__GetRNCsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRNCsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetRNCs(struct soap *soap, _Bsdrtmservice1__GetRNCs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetRNCs(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetRNCs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetRNCs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetRNCs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetRNCs **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetRNCs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetRNCs *)soap_instantiate__Bsdrtmservice1__GetRNCs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetRNCs ** p = (_Bsdrtmservice1__GetRNCs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetRNCs, sizeof(_Bsdrtmservice1__GetRNCs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetRNCs(struct soap *soap, _Bsdrtmservice1__GetRNCs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetRNCs);
	if (soap_out_PointerTo_Bsdrtmservice1__GetRNCs(soap, tag?tag:"Bsdrtmservice1:GetRNCs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetRNCs ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetRNCs(struct soap *soap, _Bsdrtmservice1__GetRNCs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetRNCs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations3Response(struct soap *soap, _Bsdrtmservice1__GetMonStations3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStations3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStations3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStations3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStations3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStations3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStations3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStations3Response *)soap_instantiate__Bsdrtmservice1__GetMonStations3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStations3Response ** p = (_Bsdrtmservice1__GetMonStations3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3Response, sizeof(_Bsdrtmservice1__GetMonStations3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStations3Response(struct soap *soap, _Bsdrtmservice1__GetMonStations3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStations3Response(soap, tag?tag:"Bsdrtmservice1:GetMonStations3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStations3Response(struct soap *soap, _Bsdrtmservice1__GetMonStations3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStations3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations3(struct soap *soap, _Bsdrtmservice1__GetMonStations3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStations3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStations3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStations3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStations3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStations3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStations3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStations3 *)soap_instantiate__Bsdrtmservice1__GetMonStations3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStations3 ** p = (_Bsdrtmservice1__GetMonStations3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations3, sizeof(_Bsdrtmservice1__GetMonStations3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStations3(struct soap *soap, _Bsdrtmservice1__GetMonStations3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStations3(soap, tag?tag:"Bsdrtmservice1:GetMonStations3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStations3(struct soap *soap, _Bsdrtmservice1__GetMonStations3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStations3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsResponse *)soap_instantiate__Bsdrtmservice1__GetMonStationsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsResponse ** p = (_Bsdrtmservice1__GetMonStationsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsResponse, sizeof(_Bsdrtmservice1__GetMonStationsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsResponse(soap, tag?tag:"Bsdrtmservice1:GetMonStationsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStations(struct soap *soap, _Bsdrtmservice1__GetMonStations *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStations(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStations *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStations(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStations **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStations **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStations *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStations *)soap_instantiate__Bsdrtmservice1__GetMonStations(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStations ** p = (_Bsdrtmservice1__GetMonStations **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStations, sizeof(_Bsdrtmservice1__GetMonStations), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStations(struct soap *soap, _Bsdrtmservice1__GetMonStations *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStations);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStations(soap, tag?tag:"Bsdrtmservice1:GetMonStations", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStations ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStations(struct soap *soap, _Bsdrtmservice1__GetMonStations **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonControlCenters3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCenters3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonControlCenters3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonControlCenters3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonControlCenters3Response *)soap_instantiate__Bsdrtmservice1__GetMonControlCenters3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonControlCenters3Response ** p = (_Bsdrtmservice1__GetMonControlCenters3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3Response, sizeof(_Bsdrtmservice1__GetMonControlCenters3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(soap, tag?tag:"Bsdrtmservice1:GetMonControlCenters3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonControlCenters3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCenters3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonControlCenters3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonControlCenters3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonControlCenters3 *)soap_instantiate__Bsdrtmservice1__GetMonControlCenters3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonControlCenters3 ** p = (_Bsdrtmservice1__GetMonControlCenters3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters3, sizeof(_Bsdrtmservice1__GetMonControlCenters3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, tag?tag:"Bsdrtmservice1:GetMonControlCenters3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonControlCenters3(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, _Bsdrtmservice1__GetMonControlCentersResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonControlCentersResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCentersResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCentersResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonControlCentersResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonControlCentersResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonControlCentersResponse *)soap_instantiate__Bsdrtmservice1__GetMonControlCentersResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonControlCentersResponse ** p = (_Bsdrtmservice1__GetMonControlCentersResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCentersResponse, sizeof(_Bsdrtmservice1__GetMonControlCentersResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, _Bsdrtmservice1__GetMonControlCentersResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(soap, tag?tag:"Bsdrtmservice1:GetMonControlCentersResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCentersResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(struct soap *soap, _Bsdrtmservice1__GetMonControlCentersResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonControlCentersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonControlCenters(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonControlCenters *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonControlCenters **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonControlCenters **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonControlCenters *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonControlCenters *)soap_instantiate__Bsdrtmservice1__GetMonControlCenters(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonControlCenters ** p = (_Bsdrtmservice1__GetMonControlCenters **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonControlCenters, sizeof(_Bsdrtmservice1__GetMonControlCenters), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonControlCenters(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonControlCenters);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, tag?tag:"Bsdrtmservice1:GetMonControlCenters", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonControlCenters ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonControlCenters(struct soap *soap, _Bsdrtmservice1__GetMonControlCenters **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonControlCenters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonOrgs3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgs3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonOrgs3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonOrgs3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonOrgs3Response *)soap_instantiate__Bsdrtmservice1__GetMonOrgs3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonOrgs3Response ** p = (_Bsdrtmservice1__GetMonOrgs3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3Response, sizeof(_Bsdrtmservice1__GetMonOrgs3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(soap, tag?tag:"Bsdrtmservice1:GetMonOrgs3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs3(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonOrgs3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgs3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonOrgs3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonOrgs3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonOrgs3 *)soap_instantiate__Bsdrtmservice1__GetMonOrgs3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonOrgs3 ** p = (_Bsdrtmservice1__GetMonOrgs3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs3, sizeof(_Bsdrtmservice1__GetMonOrgs3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonOrgs3(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, tag?tag:"Bsdrtmservice1:GetMonOrgs3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonOrgs3(struct soap *soap, _Bsdrtmservice1__GetMonOrgs3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, _Bsdrtmservice1__GetMonOrgsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonOrgsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonOrgsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonOrgsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonOrgsResponse *)soap_instantiate__Bsdrtmservice1__GetMonOrgsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonOrgsResponse ** p = (_Bsdrtmservice1__GetMonOrgsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgsResponse, sizeof(_Bsdrtmservice1__GetMonOrgsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, _Bsdrtmservice1__GetMonOrgsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(soap, tag?tag:"Bsdrtmservice1:GetMonOrgsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(struct soap *soap, _Bsdrtmservice1__GetMonOrgsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonOrgsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonOrgs(struct soap *soap, _Bsdrtmservice1__GetMonOrgs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonOrgs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonOrgs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonOrgs **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonOrgs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonOrgs *)soap_instantiate__Bsdrtmservice1__GetMonOrgs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonOrgs ** p = (_Bsdrtmservice1__GetMonOrgs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonOrgs, sizeof(_Bsdrtmservice1__GetMonOrgs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonOrgs(struct soap *soap, _Bsdrtmservice1__GetMonOrgs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonOrgs);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, tag?tag:"Bsdrtmservice1:GetMonOrgs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonOrgs ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonOrgs(struct soap *soap, _Bsdrtmservice1__GetMonOrgs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonOrgs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelFuncParamResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParamResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelFuncParamResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelFuncParamResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelFuncParamResponse *)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelFuncParamResponse ** p = (_Bsdrtmservice1__GetDevModelFuncParamResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamResponse, sizeof(_Bsdrtmservice1__GetDevModelFuncParamResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParamResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParamResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParam *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelFuncParam *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParam ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParam **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelFuncParam **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelFuncParam *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelFuncParam *)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParam(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelFuncParam ** p = (_Bsdrtmservice1__GetDevModelFuncParam **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParam, sizeof(_Bsdrtmservice1__GetDevModelFuncParam), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParam *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParam);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParam", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParam ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParam **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelFuncParams3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParams3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelFuncParams3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelFuncParams3Response *)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelFuncParams3Response ** p = (_Bsdrtmservice1__GetDevModelFuncParams3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3Response, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParams3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelFuncParams3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParams3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelFuncParams3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelFuncParams3 *)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelFuncParams3 ** p = (_Bsdrtmservice1__GetDevModelFuncParams3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams3, sizeof(_Bsdrtmservice1__GetDevModelFuncParams3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParams3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelFuncParamsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParamsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelFuncParamsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelFuncParamsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelFuncParamsResponse *)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelFuncParamsResponse ** p = (_Bsdrtmservice1__GetDevModelFuncParamsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParamsResponse, sizeof(_Bsdrtmservice1__GetDevModelFuncParamsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParamsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParamsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParamsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParamsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelFuncParams *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelFuncParams **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelFuncParams **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelFuncParams *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelFuncParams *)soap_instantiate__Bsdrtmservice1__GetDevModelFuncParams(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelFuncParams ** p = (_Bsdrtmservice1__GetDevModelFuncParams **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelFuncParams, sizeof(_Bsdrtmservice1__GetDevModelFuncParams), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelFuncParams);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, tag?tag:"Bsdrtmservice1:GetDevModelFuncParams", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelFuncParams ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(struct soap *soap, _Bsdrtmservice1__GetDevModelFuncParams **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelFuncParams(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels3Response(struct soap *soap, _Bsdrtmservice1__GetDevModels3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModels3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModels3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModels3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModels3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModels3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModels3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModels3Response *)soap_instantiate__Bsdrtmservice1__GetDevModels3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModels3Response ** p = (_Bsdrtmservice1__GetDevModels3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3Response, sizeof(_Bsdrtmservice1__GetDevModels3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModels3Response(struct soap *soap, _Bsdrtmservice1__GetDevModels3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModels3Response(soap, tag?tag:"Bsdrtmservice1:GetDevModels3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModels3Response(struct soap *soap, _Bsdrtmservice1__GetDevModels3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModels3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels3(struct soap *soap, _Bsdrtmservice1__GetDevModels3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModels3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModels3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModels3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModels3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModels3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModels3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModels3 *)soap_instantiate__Bsdrtmservice1__GetDevModels3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModels3 ** p = (_Bsdrtmservice1__GetDevModels3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels3, sizeof(_Bsdrtmservice1__GetDevModels3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModels3(struct soap *soap, _Bsdrtmservice1__GetDevModels3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModels3(soap, tag?tag:"Bsdrtmservice1:GetDevModels3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModels3(struct soap *soap, _Bsdrtmservice1__GetDevModels3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModels3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModelsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModelsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModelsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModelsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModelsResponse *)soap_instantiate__Bsdrtmservice1__GetDevModelsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModelsResponse ** p = (_Bsdrtmservice1__GetDevModelsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModelsResponse, sizeof(_Bsdrtmservice1__GetDevModelsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModelsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModelsResponse(soap, tag?tag:"Bsdrtmservice1:GetDevModelsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModelsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModelsResponse(struct soap *soap, _Bsdrtmservice1__GetDevModelsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModelsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevModels(struct soap *soap, _Bsdrtmservice1__GetDevModels *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevModels(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevModels *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevModels(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevModels **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevModels **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevModels *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevModels *)soap_instantiate__Bsdrtmservice1__GetDevModels(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevModels ** p = (_Bsdrtmservice1__GetDevModels **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevModels, sizeof(_Bsdrtmservice1__GetDevModels), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevModels(struct soap *soap, _Bsdrtmservice1__GetDevModels *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevModels);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevModels(soap, tag?tag:"Bsdrtmservice1:GetDevModels", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevModels ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevModels(struct soap *soap, _Bsdrtmservice1__GetDevModels **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevModels(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs3Response(struct soap *soap, _Bsdrtmservice1__GetFuncs3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetFuncs3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetFuncs3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetFuncs3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncs3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetFuncs3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetFuncs3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetFuncs3Response *)soap_instantiate__Bsdrtmservice1__GetFuncs3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetFuncs3Response ** p = (_Bsdrtmservice1__GetFuncs3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3Response, sizeof(_Bsdrtmservice1__GetFuncs3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetFuncs3Response(struct soap *soap, _Bsdrtmservice1__GetFuncs3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetFuncs3Response(soap, tag?tag:"Bsdrtmservice1:GetFuncs3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetFuncs3Response(struct soap *soap, _Bsdrtmservice1__GetFuncs3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetFuncs3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs3(struct soap *soap, _Bsdrtmservice1__GetFuncs3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetFuncs3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetFuncs3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetFuncs3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncs3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetFuncs3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetFuncs3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetFuncs3 *)soap_instantiate__Bsdrtmservice1__GetFuncs3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetFuncs3 ** p = (_Bsdrtmservice1__GetFuncs3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs3, sizeof(_Bsdrtmservice1__GetFuncs3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetFuncs3(struct soap *soap, _Bsdrtmservice1__GetFuncs3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetFuncs3(soap, tag?tag:"Bsdrtmservice1:GetFuncs3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetFuncs3(struct soap *soap, _Bsdrtmservice1__GetFuncs3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetFuncs3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetFuncsResponse(struct soap *soap, _Bsdrtmservice1__GetFuncsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetFuncsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetFuncsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetFuncsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetFuncsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetFuncsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetFuncsResponse *)soap_instantiate__Bsdrtmservice1__GetFuncsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetFuncsResponse ** p = (_Bsdrtmservice1__GetFuncsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncsResponse, sizeof(_Bsdrtmservice1__GetFuncsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetFuncsResponse(struct soap *soap, _Bsdrtmservice1__GetFuncsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetFuncsResponse(soap, tag?tag:"Bsdrtmservice1:GetFuncsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetFuncsResponse(struct soap *soap, _Bsdrtmservice1__GetFuncsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetFuncsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetFuncs(struct soap *soap, _Bsdrtmservice1__GetFuncs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetFuncs(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetFuncs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetFuncs(struct soap *soap, const char *tag, _Bsdrtmservice1__GetFuncs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetFuncs **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetFuncs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetFuncs *)soap_instantiate__Bsdrtmservice1__GetFuncs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetFuncs ** p = (_Bsdrtmservice1__GetFuncs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetFuncs, sizeof(_Bsdrtmservice1__GetFuncs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetFuncs(struct soap *soap, _Bsdrtmservice1__GetFuncs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetFuncs);
	if (soap_out_PointerTo_Bsdrtmservice1__GetFuncs(soap, tag?tag:"Bsdrtmservice1:GetFuncs", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetFuncs ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetFuncs(struct soap *soap, _Bsdrtmservice1__GetFuncs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetFuncs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevProtocols3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocols3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevProtocols3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevProtocols3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevProtocols3Response *)soap_instantiate__Bsdrtmservice1__GetDevProtocols3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevProtocols3Response ** p = (_Bsdrtmservice1__GetDevProtocols3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3Response, sizeof(_Bsdrtmservice1__GetDevProtocols3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(soap, tag?tag:"Bsdrtmservice1:GetDevProtocols3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols3(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevProtocols3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocols3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevProtocols3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevProtocols3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevProtocols3 *)soap_instantiate__Bsdrtmservice1__GetDevProtocols3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevProtocols3 ** p = (_Bsdrtmservice1__GetDevProtocols3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols3, sizeof(_Bsdrtmservice1__GetDevProtocols3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevProtocols3(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, tag?tag:"Bsdrtmservice1:GetDevProtocols3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevProtocols3(struct soap *soap, _Bsdrtmservice1__GetDevProtocols3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, _Bsdrtmservice1__GetDevProtocolsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevProtocolsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocolsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocolsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevProtocolsResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevProtocolsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevProtocolsResponse *)soap_instantiate__Bsdrtmservice1__GetDevProtocolsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevProtocolsResponse ** p = (_Bsdrtmservice1__GetDevProtocolsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocolsResponse, sizeof(_Bsdrtmservice1__GetDevProtocolsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, _Bsdrtmservice1__GetDevProtocolsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(soap, tag?tag:"Bsdrtmservice1:GetDevProtocolsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocolsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(struct soap *soap, _Bsdrtmservice1__GetDevProtocolsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevProtocolsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDevProtocols(struct soap *soap, _Bsdrtmservice1__GetDevProtocols *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDevProtocols *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDevProtocols **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDevProtocols **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDevProtocols *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDevProtocols *)soap_instantiate__Bsdrtmservice1__GetDevProtocols(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDevProtocols ** p = (_Bsdrtmservice1__GetDevProtocols **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDevProtocols, sizeof(_Bsdrtmservice1__GetDevProtocols), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDevProtocols(struct soap *soap, _Bsdrtmservice1__GetDevProtocols *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDevProtocols);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, tag?tag:"Bsdrtmservice1:GetDevProtocols", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDevProtocols ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDevProtocols(struct soap *soap, _Bsdrtmservice1__GetDevProtocols **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDevProtocols(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDeviceTypes3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypes3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDeviceTypes3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDeviceTypes3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDeviceTypes3Response *)soap_instantiate__Bsdrtmservice1__GetDeviceTypes3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDeviceTypes3Response ** p = (_Bsdrtmservice1__GetDeviceTypes3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3Response, sizeof(_Bsdrtmservice1__GetDeviceTypes3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypes3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDeviceTypes3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypes3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDeviceTypes3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDeviceTypes3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDeviceTypes3 *)soap_instantiate__Bsdrtmservice1__GetDeviceTypes3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDeviceTypes3 ** p = (_Bsdrtmservice1__GetDeviceTypes3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes3, sizeof(_Bsdrtmservice1__GetDeviceTypes3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypes3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDeviceTypes3(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, _Bsdrtmservice1__GetDeviceTypesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDeviceTypesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypesResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDeviceTypesResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDeviceTypesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDeviceTypesResponse *)soap_instantiate__Bsdrtmservice1__GetDeviceTypesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDeviceTypesResponse ** p = (_Bsdrtmservice1__GetDeviceTypesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypesResponse, sizeof(_Bsdrtmservice1__GetDeviceTypesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, _Bsdrtmservice1__GetDeviceTypesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypesResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(struct soap *soap, _Bsdrtmservice1__GetDeviceTypesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetDeviceTypes(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetDeviceTypes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetDeviceTypes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetDeviceTypes **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetDeviceTypes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetDeviceTypes *)soap_instantiate__Bsdrtmservice1__GetDeviceTypes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetDeviceTypes ** p = (_Bsdrtmservice1__GetDeviceTypes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetDeviceTypes, sizeof(_Bsdrtmservice1__GetDeviceTypes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetDeviceTypes(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetDeviceTypes);
	if (soap_out_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, tag?tag:"Bsdrtmservice1:GetDeviceTypes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetDeviceTypes ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetDeviceTypes(struct soap *soap, _Bsdrtmservice1__GetDeviceTypes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetDeviceTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationTypes3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypes3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationTypes3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationTypes3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationTypes3Response *)soap_instantiate__Bsdrtmservice1__GetMonStationTypes3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationTypes3Response ** p = (_Bsdrtmservice1__GetMonStationTypes3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3Response, sizeof(_Bsdrtmservice1__GetMonStationTypes3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypes3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationTypes3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypes3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationTypes3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationTypes3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationTypes3 *)soap_instantiate__Bsdrtmservice1__GetMonStationTypes3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationTypes3 ** p = (_Bsdrtmservice1__GetMonStationTypes3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes3, sizeof(_Bsdrtmservice1__GetMonStationTypes3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypes3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationTypes3(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationTypesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationTypesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypesResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationTypesResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationTypesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationTypesResponse *)soap_instantiate__Bsdrtmservice1__GetMonStationTypesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationTypesResponse ** p = (_Bsdrtmservice1__GetMonStationTypesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypesResponse, sizeof(_Bsdrtmservice1__GetMonStationTypesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationTypesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypesResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationTypesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationTypes(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationTypes *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationTypes **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationTypes **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationTypes *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationTypes *)soap_instantiate__Bsdrtmservice1__GetMonStationTypes(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationTypes ** p = (_Bsdrtmservice1__GetMonStationTypes **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationTypes, sizeof(_Bsdrtmservice1__GetMonStationTypes), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationTypes(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationTypes);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, tag?tag:"Bsdrtmservice1:GetMonStationTypes", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationTypes ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationTypes(struct soap *soap, _Bsdrtmservice1__GetMonStationTypes **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationTypes(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsByUserID3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserID3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsByUserID3Response **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsByUserID3Response *)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsByUserID3Response ** p = (_Bsdrtmservice1__GetMonStationsByUserID3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3Response, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserID3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsByUserID3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserID3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsByUserID3 **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsByUserID3 *)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsByUserID3 ** p = (_Bsdrtmservice1__GetMonStationsByUserID3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID3, sizeof(_Bsdrtmservice1__GetMonStationsByUserID3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserID3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsByUserIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserIDResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsByUserIDResponse **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsByUserIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsByUserIDResponse *)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsByUserIDResponse ** p = (_Bsdrtmservice1__GetMonStationsByUserIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserIDResponse, sizeof(_Bsdrtmservice1__GetMonStationsByUserIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserIDResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserIDResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const char *tag, int id, _Bsdrtmservice1__GetMonStationsByUserID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID ** SOAP_FMAC4 soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, const char *tag, _Bsdrtmservice1__GetMonStationsByUserID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdrtmservice1__GetMonStationsByUserID **)soap_malloc(soap, sizeof(_Bsdrtmservice1__GetMonStationsByUserID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdrtmservice1__GetMonStationsByUserID *)soap_instantiate__Bsdrtmservice1__GetMonStationsByUserID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdrtmservice1__GetMonStationsByUserID ** p = (_Bsdrtmservice1__GetMonStationsByUserID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice__Bsdrtmservice1__GetMonStationsByUserID, sizeof(_Bsdrtmservice1__GetMonStationsByUserID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTo_Bsdrtmservice1__GetMonStationsByUserID);
	if (soap_out_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, tag?tag:"Bsdrtmservice1:GetMonStationsByUserID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdrtmservice1__GetMonStationsByUserID ** SOAP_FMAC4 soap_get_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(struct soap *soap, _Bsdrtmservice1__GetMonStationsByUserID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdrtmservice1__GetMonStationsByUserID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity ** p = (Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtm_mon_ems_devEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity ** p = (Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmIntellMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfvRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity ** p = (Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMalfunctionAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfInt64(struct soap *soap, Bsdrtmservice1__OptResultOfInt64 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfInt64(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfInt64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfInt64 ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfInt64(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfInt64 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfInt64 **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfInt64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfInt64 *)soap_instantiate_Bsdrtmservice1__OptResultOfInt64(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfInt64 ** p = (Bsdrtmservice1__OptResultOfInt64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfInt64, sizeof(Bsdrtmservice1__OptResultOfInt64), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfInt64(struct soap *soap, Bsdrtmservice1__OptResultOfInt64 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfInt64);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfInt64(soap, tag?tag:"Bsdrtmservice1:OptResultOfInt64", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfInt64 ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfInt64(struct soap *soap, Bsdrtmservice1__OptResultOfInt64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfInt64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfInt(struct soap *soap, Bsdrtmservice1__ArrayOfInt *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfInt(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfInt(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfInt **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfInt *)soap_instantiate_Bsdrtmservice1__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfInt ** p = (Bsdrtmservice1__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfInt, sizeof(Bsdrtmservice1__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfInt(struct soap *soap, Bsdrtmservice1__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfInt);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfInt(soap, tag?tag:"Bsdrtmservice1:ArrayOfInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfInt(struct soap *soap, Bsdrtmservice1__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, Bsdrtmservice1__OptResultOfArrayOfByte *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfArrayOfByte *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfArrayOfByte ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfArrayOfByte **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfArrayOfByte **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfArrayOfByte *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfArrayOfByte *)soap_instantiate_Bsdrtmservice1__OptResultOfArrayOfByte(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfArrayOfByte ** p = (Bsdrtmservice1__OptResultOfArrayOfByte **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfArrayOfByte, sizeof(Bsdrtmservice1__OptResultOfArrayOfByte), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, Bsdrtmservice1__OptResultOfArrayOfByte *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfArrayOfByte);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, tag?tag:"Bsdrtmservice1:OptResultOfArrayOfByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfArrayOfByte ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfArrayOfByte(struct soap *soap, Bsdrtmservice1__OptResultOfArrayOfByte **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfArrayOfByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfAttachment(struct soap *soap, Bsdrtmservice1__OptResultOfAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfAttachment(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfAttachment ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfAttachment(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfAttachment **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfAttachment *)soap_instantiate_Bsdrtmservice1__OptResultOfAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfAttachment ** p = (Bsdrtmservice1__OptResultOfAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfAttachment, sizeof(Bsdrtmservice1__OptResultOfAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfAttachment(struct soap *soap, Bsdrtmservice1__OptResultOfAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfAttachment);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfAttachment(soap, tag?tag:"Bsdrtmservice1:OptResultOfAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfAttachment ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfAttachment(struct soap *soap, Bsdrtmservice1__OptResultOfAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfBoolean(struct soap *soap, Bsdrtmservice1__OptResultOfBoolean *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfBoolean(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfBoolean *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfBoolean ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfBoolean(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfBoolean **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfBoolean **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfBoolean *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfBoolean *)soap_instantiate_Bsdrtmservice1__OptResultOfBoolean(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfBoolean ** p = (Bsdrtmservice1__OptResultOfBoolean **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfBoolean, sizeof(Bsdrtmservice1__OptResultOfBoolean), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfBoolean(struct soap *soap, Bsdrtmservice1__OptResultOfBoolean *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfBoolean);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfBoolean(soap, tag?tag:"Bsdrtmservice1:OptResultOfBoolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfBoolean ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfBoolean(struct soap *soap, Bsdrtmservice1__OptResultOfBoolean **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonReportEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmMonReportEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonReportEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMonReportEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmMonReportEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmMonReportEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmMonReportEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonReportEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmMonReportEntity ** p = (Bsdrtmservice1__OptResultOfRtmMonReportEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonReportEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMonReportEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonReportEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMonReportEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonReportEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonReportEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity ** p = (Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmPredefinedMonitorEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmMonAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMonAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmMonAlertEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmMonAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmMonAlertEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmMonAlertEntity ** p = (Bsdrtmservice1__OptResultOfRtmMonAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonAlertEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMonAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMonAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, Bsdrtmservice1__RtmMonTaskLogEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonTaskLogEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonTaskLogEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonTaskLogEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonTaskLogEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonTaskLogEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmMonTaskLogEntity *)soap_instantiate_Bsdrtmservice1__RtmMonTaskLogEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmMonTaskLogEntity ** p = (Bsdrtmservice1__RtmMonTaskLogEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonTaskLogEntity, sizeof(Bsdrtmservice1__RtmMonTaskLogEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, Bsdrtmservice1__RtmMonTaskLogEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonTaskLogEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonTaskLogEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonTaskLogEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmMonTaskLogEntity(struct soap *soap, Bsdrtmservice1__RtmMonTaskLogEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmMonTaskLogEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmMonTaskEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfVRtmMonTaskEntity ** p = (Bsdrtmservice1__OptResultOfVRtmMonTaskEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmMonTaskEntity, sizeof(Bsdrtmservice1__OptResultOfVRtmMonTaskEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfVRtmMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmMonTaskEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmMonTaskEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfVRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, Bsdrtmservice1__OptResultOfTimeSpan *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfTimeSpan *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfTimeSpan ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfTimeSpan **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfTimeSpan **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfTimeSpan *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfTimeSpan *)soap_instantiate_Bsdrtmservice1__OptResultOfTimeSpan(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfTimeSpan ** p = (Bsdrtmservice1__OptResultOfTimeSpan **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfTimeSpan, sizeof(Bsdrtmservice1__OptResultOfTimeSpan), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, Bsdrtmservice1__OptResultOfTimeSpan *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfTimeSpan);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, tag?tag:"Bsdrtmservice1:OptResultOfTimeSpan", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfTimeSpan ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfTimeSpan(struct soap *soap, Bsdrtmservice1__OptResultOfTimeSpan **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfTimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, Bsdrtmservice1__RtmDevUseLogEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmDevUseLogEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevUseLogEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevUseLogEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmDevUseLogEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmDevUseLogEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmDevUseLogEntity *)soap_instantiate_Bsdrtmservice1__RtmDevUseLogEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmDevUseLogEntity ** p = (Bsdrtmservice1__RtmDevUseLogEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevUseLogEntity, sizeof(Bsdrtmservice1__RtmDevUseLogEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, Bsdrtmservice1__RtmDevUseLogEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevUseLogEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, tag?tag:"Bsdrtmservice1:RtmDevUseLogEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevUseLogEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmDevUseLogEntity(struct soap *soap, Bsdrtmservice1__RtmDevUseLogEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmDevUseLogEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmAntEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmAntEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmAntEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmAntEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmAntEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmAntEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmAntEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmAntEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmAntEntity ** p = (Bsdrtmservice1__OptResultOfRtmAntEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmAntEntity, sizeof(Bsdrtmservice1__OptResultOfRtmAntEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmAntEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmAntEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmAntEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmAntEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevAntEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfvRtmDevAntEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevAntEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmDevAntEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfvRtmDevAntEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfvRtmDevAntEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfvRtmDevAntEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfvRtmDevAntEntity ** p = (Bsdrtmservice1__OptResultOfvRtmDevAntEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevAntEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmDevAntEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevAntEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmDevAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevAntEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevAntEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmDevFunEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfVRtmDevFunEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmDevFunEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfVRtmDevFunEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfVRtmDevFunEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfVRtmDevFunEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfVRtmDevFunEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfVRtmDevFunEntity ** p = (Bsdrtmservice1__OptResultOfVRtmDevFunEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfVRtmDevFunEntity, sizeof(Bsdrtmservice1__OptResultOfVRtmDevFunEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmDevFunEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfVRtmDevFunEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfVRtmDevFunEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__OptResultOfVRtmDevFunEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfVRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDeviceEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmDeviceEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDeviceEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmDeviceEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmDeviceEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmDeviceEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmDeviceEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmDeviceEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmDeviceEntity ** p = (Bsdrtmservice1__OptResultOfRtmDeviceEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDeviceEntity, sizeof(Bsdrtmservice1__OptResultOfRtmDeviceEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDeviceEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmDeviceEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDeviceEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDeviceEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPort2Entity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfvRtmRncPort2Entity ** p = (Bsdrtmservice1__OptResultOfvRtmRncPort2Entity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPort2Entity, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPort2Entity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmRncPort2Entity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPort2Entity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPort2Entity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPORTEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfvRtmRncPORTEntity ** p = (Bsdrtmservice1__OptResultOfvRtmRncPORTEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmRncPORTEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmRncPORTEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmRncPORTEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmRncPORTEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmRncPORTEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfvRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmMonStationEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfvRtmMonStationEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmMonStationEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmMonStationEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfvRtmMonStationEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfvRtmMonStationEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfvRtmMonStationEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfvRtmMonStationEntity ** p = (Bsdrtmservice1__OptResultOfvRtmMonStationEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmMonStationEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmMonStationEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmMonStationEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmMonStationEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmMonStationEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmMonStationEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfvRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmControlCenterEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmControlCenterEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmControlCenterEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmControlCenterEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmControlCenterEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmControlCenterEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmControlCenterEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmControlCenterEntity ** p = (Bsdrtmservice1__OptResultOfRtmControlCenterEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmControlCenterEntity, sizeof(Bsdrtmservice1__OptResultOfRtmControlCenterEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmControlCenterEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmControlCenterEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmControlCenterEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmControlCenterEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonOrgEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmMonOrgEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonOrgEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmMonOrgEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmMonOrgEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmMonOrgEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmMonOrgEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmMonOrgEntity ** p = (Bsdrtmservice1__OptResultOfRtmMonOrgEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmMonOrgEntity, sizeof(Bsdrtmservice1__OptResultOfRtmMonOrgEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonOrgEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmMonOrgEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmMonOrgEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmMonOrgEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity ** p = (Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfvRtmDevModelFunParamEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfvRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDevModelEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmDevModelEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDevModelEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmDevModelEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmDevModelEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmDevModelEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmDevModelEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmDevModelEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmDevModelEntity ** p = (Bsdrtmservice1__OptResultOfRtmDevModelEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmDevModelEntity, sizeof(Bsdrtmservice1__OptResultOfRtmDevModelEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDevModelEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmDevModelEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmDevModelEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmDevModelEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmTypeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfRtmTypeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmTypeEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfRtmTypeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfRtmTypeEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfRtmTypeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfRtmTypeEntity *)soap_instantiate_Bsdrtmservice1__OptResultOfRtmTypeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfRtmTypeEntity ** p = (Bsdrtmservice1__OptResultOfRtmTypeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfRtmTypeEntity, sizeof(Bsdrtmservice1__OptResultOfRtmTypeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmTypeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, tag?tag:"Bsdrtmservice1:OptResultOfRtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfRtmTypeEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__OptResultOfRtmTypeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__OptResultOfString(struct soap *soap, Bsdrtmservice1__OptResultOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__OptResultOfString(struct soap *soap, const char *tag, int id, Bsdrtmservice1__OptResultOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfString ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__OptResultOfString(struct soap *soap, const char *tag, Bsdrtmservice1__OptResultOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__OptResultOfString **)soap_malloc(soap, sizeof(Bsdrtmservice1__OptResultOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__OptResultOfString *)soap_instantiate_Bsdrtmservice1__OptResultOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__OptResultOfString ** p = (Bsdrtmservice1__OptResultOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__OptResultOfString, sizeof(Bsdrtmservice1__OptResultOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__OptResultOfString(struct soap *soap, Bsdrtmservice1__OptResultOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__OptResultOfString);
	if (soap_out_PointerToBsdrtmservice1__OptResultOfString(soap, tag?tag:"Bsdrtmservice1:OptResultOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__OptResultOfString ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__OptResultOfString(struct soap *soap, Bsdrtmservice1__OptResultOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__OptResultOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity))
		soap_serialize_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag?tag:"Bsdrtmservice1:Rtm_mon_ems_devEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_instantiate_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ** p = (Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (soap_out_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag?tag:"Bsdrtmservice1:Rtm_mon_ems_devEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__Rtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity ** p = (Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity, sizeof(Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtm_mon_ems_devEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtm_USCOREmon_USCOREems_USCOREdevEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity))
		soap_serialize_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmIntellMonTaskEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmIntellMonTaskEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmIntellMonTaskEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmIntellMonTaskEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmIntellMonTaskEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:vRtmIntellMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmIntellMonTaskEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmIntellMonTaskEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmIntellMonTaskEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmIntellMonTaskEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmIntellMonTaskEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__vRtmIntellMonTaskEntity *)soap_instantiate_Bsdrtmservice1__vRtmIntellMonTaskEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__vRtmIntellMonTaskEntity ** p = (Bsdrtmservice1__vRtmIntellMonTaskEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__vRtmIntellMonTaskEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity);
	if (soap_out_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:vRtmIntellMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmIntellMonTaskEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__vRtmIntellMonTaskEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__vRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity ** p = (Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmIntellMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmIntellMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMalfunctionAlertEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMalfunctionAlertEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMalfunctionAlertEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMalfunctionAlertEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMalfunctionAlertEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag?tag:"Bsdrtmservice1:RtmMalfunctionAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMalfunctionAlertEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMalfunctionAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMalfunctionAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMalfunctionAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMalfunctionAlertEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmMalfunctionAlertEntity *)soap_instantiate_Bsdrtmservice1__RtmMalfunctionAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmMalfunctionAlertEntity ** p = (Bsdrtmservice1__RtmMalfunctionAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__RtmMalfunctionAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag?tag:"Bsdrtmservice1:RtmMalfunctionAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMalfunctionAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMalfunctionAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity ** p = (Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMalfunctionAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmMalfunctionAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfLong(struct soap *soap, Bsdrtmservice1__ArrayOfLong *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfLong(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfLong *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfLong ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfLong(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfLong **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfLong **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfLong *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfLong *)soap_instantiate_Bsdrtmservice1__ArrayOfLong(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfLong ** p = (Bsdrtmservice1__ArrayOfLong **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfLong, sizeof(Bsdrtmservice1__ArrayOfLong), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfLong(struct soap *soap, Bsdrtmservice1__ArrayOfLong *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfLong);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfLong(soap, tag?tag:"Bsdrtmservice1:ArrayOfLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfLong ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfLong(struct soap *soap, Bsdrtmservice1__ArrayOfLong **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag?tag:"SOAP-ENC:Array", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, Bsdrtmservice1__ArrayOfBase64Binary *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfBase64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBase64Binary ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfBase64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfBase64Binary **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfBase64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfBase64Binary *)soap_instantiate_Bsdrtmservice1__ArrayOfBase64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfBase64Binary ** p = (Bsdrtmservice1__ArrayOfBase64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBase64Binary, sizeof(Bsdrtmservice1__ArrayOfBase64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, Bsdrtmservice1__ArrayOfBase64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBase64Binary);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, tag?tag:"Bsdrtmservice1:ArrayOfBase64Binary", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBase64Binary ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfBase64Binary(struct soap *soap, Bsdrtmservice1__ArrayOfBase64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfBase64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment))
		soap_serialize_PointerToBsdrtmservice1__Attachment(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__Attachment(struct soap *soap, const char *tag, int id, Bsdrtmservice1__Attachment **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__Attachment(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__Attachment *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__Attachment(struct soap *soap, const char *tag, Bsdrtmservice1__Attachment ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__Attachment ***)soap_malloc(soap, sizeof(Bsdrtmservice1__Attachment **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__Attachment(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__Attachment ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment, sizeof(Bsdrtmservice1__Attachment *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__Attachment);
	if (soap_out_PointerToPointerToBsdrtmservice1__Attachment(soap, tag?tag:"Bsdrtmservice1:Attachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__Attachment *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__Attachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__Attachment(struct soap *soap, const char *tag, int id, Bsdrtmservice1__Attachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__Attachment ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__Attachment(struct soap *soap, const char *tag, Bsdrtmservice1__Attachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__Attachment **)soap_malloc(soap, sizeof(Bsdrtmservice1__Attachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__Attachment *)soap_instantiate_Bsdrtmservice1__Attachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__Attachment ** p = (Bsdrtmservice1__Attachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__Attachment, sizeof(Bsdrtmservice1__Attachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__Attachment);
	if (soap_out_PointerToBsdrtmservice1__Attachment(soap, tag?tag:"Bsdrtmservice1:Attachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__Attachment ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__Attachment(struct soap *soap, Bsdrtmservice1__Attachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__Attachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfAttachment(struct soap *soap, Bsdrtmservice1__ArrayOfAttachment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfAttachment(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfAttachment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfAttachment ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfAttachment(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfAttachment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfAttachment **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfAttachment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfAttachment *)soap_instantiate_Bsdrtmservice1__ArrayOfAttachment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfAttachment ** p = (Bsdrtmservice1__ArrayOfAttachment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfAttachment, sizeof(Bsdrtmservice1__ArrayOfAttachment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfAttachment(struct soap *soap, Bsdrtmservice1__ArrayOfAttachment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfAttachment);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfAttachment(soap, tag?tag:"Bsdrtmservice1:ArrayOfAttachment", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfAttachment ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfAttachment(struct soap *soap, Bsdrtmservice1__ArrayOfAttachment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfAttachment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfBoolean(struct soap *soap, Bsdrtmservice1__ArrayOfBoolean *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfBoolean(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfBoolean *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBoolean ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfBoolean(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfBoolean **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfBoolean **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfBoolean *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfBoolean *)soap_instantiate_Bsdrtmservice1__ArrayOfBoolean(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfBoolean ** p = (Bsdrtmservice1__ArrayOfBoolean **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfBoolean, sizeof(Bsdrtmservice1__ArrayOfBoolean), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfBoolean(struct soap *soap, Bsdrtmservice1__ArrayOfBoolean *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfBoolean);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfBoolean(soap, tag?tag:"Bsdrtmservice1:ArrayOfBoolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfBoolean ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfBoolean(struct soap *soap, Bsdrtmservice1__ArrayOfBoolean **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToLONG64(struct soap *soap, LONG64 *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_LONG64);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToLONG64(struct soap *soap, const char *tag, int id, LONG64 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_LONG64);
	if (id < 0)
		return soap->error;
	return soap_out_LONG64(soap, tag, id, *a, type);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_in_PointerToLONG64(struct soap *soap, const char *tag, LONG64 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (LONG64 **)soap_malloc(soap, sizeof(LONG64 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_LONG64(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (LONG64 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_LONG64, sizeof(LONG64), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToLONG64(struct soap *soap, LONG64 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToLONG64);
	if (soap_out_PointerToLONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 ** SOAP_FMAC4 soap_get_PointerToLONG64(struct soap *soap, LONG64 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmMonReportEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonReportEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmMonReportEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonReportEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonReportEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonReportEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonReportEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmMonReportEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonReportEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity, sizeof(Bsdrtmservice1__RtmMonReportEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonReportEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonReportEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonReportEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonReportEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonReportEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonReportEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonReportEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonReportEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmMonReportEntity *)soap_instantiate_Bsdrtmservice1__RtmMonReportEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmMonReportEntity ** p = (Bsdrtmservice1__RtmMonReportEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonReportEntity, sizeof(Bsdrtmservice1__RtmMonReportEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonReportEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmMonReportEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonReportEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonReportEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmMonReportEntity(struct soap *soap, Bsdrtmservice1__RtmMonReportEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonReportEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmMonReportEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonReportEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMonReportEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmMonReportEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmMonReportEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmMonReportEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonReportEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmMonReportEntity ** p = (Bsdrtmservice1__ArrayOfRtmMonReportEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonReportEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMonReportEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonReportEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMonReportEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonReportEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonReportEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonReportEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmPredefinedMonitorEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmPredefinedMonitorEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmPredefinedMonitorEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmPredefinedMonitorEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmPredefinedMonitorEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag?tag:"Bsdrtmservice1:RtmPredefinedMonitorEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmPredefinedMonitorEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmPredefinedMonitorEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmPredefinedMonitorEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmPredefinedMonitorEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmPredefinedMonitorEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmPredefinedMonitorEntity *)soap_instantiate_Bsdrtmservice1__RtmPredefinedMonitorEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmPredefinedMonitorEntity ** p = (Bsdrtmservice1__RtmPredefinedMonitorEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__RtmPredefinedMonitorEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag?tag:"Bsdrtmservice1:RtmPredefinedMonitorEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmPredefinedMonitorEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__RtmPredefinedMonitorEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity ** p = (Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity, sizeof(Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmPredefinedMonitorEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmPredefinedMonitorEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonAlertEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonAlertEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonAlertEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonAlertEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonAlertEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonAlertEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity, sizeof(Bsdrtmservice1__RtmMonAlertEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonAlertEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonAlertEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmMonAlertEntity *)soap_instantiate_Bsdrtmservice1__RtmMonAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmMonAlertEntity ** p = (Bsdrtmservice1__RtmMonAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonAlertEntity, sizeof(Bsdrtmservice1__RtmMonAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonAlertEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__RtmMonAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmMonAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMonAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmMonAlertEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmMonAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmMonAlertEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmMonAlertEntity ** p = (Bsdrtmservice1__ArrayOfRtmMonAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonAlertEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMonAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMonAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity))
		soap_serialize_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__VRtmMonTaskEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmMonTaskEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__VRtmMonTaskEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__VRtmMonTaskEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__VRtmMonTaskEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__VRtmMonTaskEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity, sizeof(Bsdrtmservice1__VRtmMonTaskEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:VRtmMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmMonTaskEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__VRtmMonTaskEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmMonTaskEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__VRtmMonTaskEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__VRtmMonTaskEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__VRtmMonTaskEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__VRtmMonTaskEntity *)soap_instantiate_Bsdrtmservice1__VRtmMonTaskEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__VRtmMonTaskEntity ** p = (Bsdrtmservice1__VRtmMonTaskEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmMonTaskEntity, sizeof(Bsdrtmservice1__VRtmMonTaskEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmMonTaskEntity);
	if (soap_out_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:VRtmMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmMonTaskEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__VRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__VRtmMonTaskEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__VRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonTaskEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmMonTaskEntity ** p = (Bsdrtmservice1__ArrayOfVRtmMonTaskEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonTaskEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmMonTaskEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmMonTaskEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonTaskEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonTaskEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonTaskEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan))
		soap_serialize_PointerToBsdrtmservice1__TimeSpan(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__TimeSpan(struct soap *soap, const char *tag, int id, Bsdrtmservice1__TimeSpan **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__TimeSpan(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__TimeSpan *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__TimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__TimeSpan ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__TimeSpan ***)soap_malloc(soap, sizeof(Bsdrtmservice1__TimeSpan **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__TimeSpan(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__TimeSpan ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan, sizeof(Bsdrtmservice1__TimeSpan *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__TimeSpan);
	if (soap_out_PointerToPointerToBsdrtmservice1__TimeSpan(soap, tag?tag:"Bsdrtmservice1:TimeSpan", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__TimeSpan *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__TimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__TimeSpan(struct soap *soap, const char *tag, int id, Bsdrtmservice1__TimeSpan *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__TimeSpan ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__TimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__TimeSpan **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__TimeSpan **)soap_malloc(soap, sizeof(Bsdrtmservice1__TimeSpan *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__TimeSpan *)soap_instantiate_Bsdrtmservice1__TimeSpan(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__TimeSpan ** p = (Bsdrtmservice1__TimeSpan **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__TimeSpan, sizeof(Bsdrtmservice1__TimeSpan), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__TimeSpan);
	if (soap_out_PointerToBsdrtmservice1__TimeSpan(soap, tag?tag:"Bsdrtmservice1:TimeSpan", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__TimeSpan ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__TimeSpan(struct soap *soap, Bsdrtmservice1__TimeSpan **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__TimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, Bsdrtmservice1__ArrayOfTimeSpan *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfTimeSpan *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfTimeSpan ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfTimeSpan **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfTimeSpan **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfTimeSpan *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfTimeSpan *)soap_instantiate_Bsdrtmservice1__ArrayOfTimeSpan(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfTimeSpan ** p = (Bsdrtmservice1__ArrayOfTimeSpan **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfTimeSpan, sizeof(Bsdrtmservice1__ArrayOfTimeSpan), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, Bsdrtmservice1__ArrayOfTimeSpan *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfTimeSpan);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, tag?tag:"Bsdrtmservice1:ArrayOfTimeSpan", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfTimeSpan ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfTimeSpan(struct soap *soap, Bsdrtmservice1__ArrayOfTimeSpan **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfTimeSpan(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmAntEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmAntEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmAntEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmAntEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmAntEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmAntEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmAntEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmAntEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmAntEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity, sizeof(Bsdrtmservice1__RtmAntEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmAntEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmAntEntity(soap, tag?tag:"Bsdrtmservice1:RtmAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmAntEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmAntEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmAntEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmAntEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmAntEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmAntEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmAntEntity *)soap_instantiate_Bsdrtmservice1__RtmAntEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmAntEntity ** p = (Bsdrtmservice1__RtmAntEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmAntEntity, sizeof(Bsdrtmservice1__RtmAntEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmAntEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmAntEntity(soap, tag?tag:"Bsdrtmservice1:RtmAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmAntEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmAntEntity(struct soap *soap, Bsdrtmservice1__RtmAntEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmAntEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmAntEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmAntEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmAntEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmAntEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmAntEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmAntEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmAntEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmAntEntity ** p = (Bsdrtmservice1__ArrayOfRtmAntEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmAntEntity, sizeof(Bsdrtmservice1__ArrayOfRtmAntEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmAntEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmAntEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmAntEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmAntEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity))
		soap_serialize_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmDevAntEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevAntEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmDevAntEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmDevAntEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmDevAntEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmDevAntEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity, sizeof(Bsdrtmservice1__vRtmDevAntEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag?tag:"Bsdrtmservice1:vRtmDevAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevAntEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmDevAntEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevAntEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmDevAntEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmDevAntEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmDevAntEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__vRtmDevAntEntity *)soap_instantiate_Bsdrtmservice1__vRtmDevAntEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__vRtmDevAntEntity ** p = (Bsdrtmservice1__vRtmDevAntEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevAntEntity, sizeof(Bsdrtmservice1__vRtmDevAntEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevAntEntity);
	if (soap_out_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag?tag:"Bsdrtmservice1:vRtmDevAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevAntEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__vRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__vRtmDevAntEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__vRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevAntEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmDevAntEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevAntEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmDevAntEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmDevAntEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmDevAntEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmDevAntEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmDevAntEntity ** p = (Bsdrtmservice1__ArrayOfVRtmDevAntEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevAntEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmDevAntEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevAntEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmDevAntEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevAntEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevAntEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevAntEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity))
		soap_serialize_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__VRtmDevFunEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmDevFunEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__VRtmDevFunEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__VRtmDevFunEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__VRtmDevFunEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__VRtmDevFunEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity, sizeof(Bsdrtmservice1__VRtmDevFunEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag?tag:"Bsdrtmservice1:VRtmDevFunEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmDevFunEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__VRtmDevFunEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmDevFunEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__VRtmDevFunEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__VRtmDevFunEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__VRtmDevFunEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__VRtmDevFunEntity *)soap_instantiate_Bsdrtmservice1__VRtmDevFunEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__VRtmDevFunEntity ** p = (Bsdrtmservice1__VRtmDevFunEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__VRtmDevFunEntity, sizeof(Bsdrtmservice1__VRtmDevFunEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__VRtmDevFunEntity);
	if (soap_out_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag?tag:"Bsdrtmservice1:VRtmDevFunEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__VRtmDevFunEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__VRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__VRtmDevFunEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__VRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevFunEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmDevFunEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevFunEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmDevFunEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmDevFunEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmDevFunEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmDevFunEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmDevFunEntity ** p = (Bsdrtmservice1__ArrayOfVRtmDevFunEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevFunEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmDevFunEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevFunEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmDevFunEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevFunEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevFunEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevFunEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmDeviceEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmDeviceEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmDeviceEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDeviceEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDeviceEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmDeviceEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmDeviceEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmDeviceEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDeviceEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity, sizeof(Bsdrtmservice1__RtmDeviceEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDeviceEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(soap, tag?tag:"Bsdrtmservice1:RtmDeviceEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDeviceEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmDeviceEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDeviceEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDeviceEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmDeviceEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmDeviceEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmDeviceEntity *)soap_instantiate_Bsdrtmservice1__RtmDeviceEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmDeviceEntity ** p = (Bsdrtmservice1__RtmDeviceEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDeviceEntity, sizeof(Bsdrtmservice1__RtmDeviceEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDeviceEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmDeviceEntity(soap, tag?tag:"Bsdrtmservice1:RtmDeviceEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDeviceEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmDeviceEntity(struct soap *soap, Bsdrtmservice1__RtmDeviceEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDeviceEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmDeviceEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDeviceEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmDeviceEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmDeviceEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmDeviceEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmDeviceEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmDeviceEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmDeviceEntity ** p = (Bsdrtmservice1__ArrayOfRtmDeviceEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDeviceEntity, sizeof(Bsdrtmservice1__ArrayOfRtmDeviceEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDeviceEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmDeviceEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDeviceEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDeviceEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmDeviceEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity))
		soap_serialize_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmRncPort2Entity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPort2Entity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmRncPort2Entity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmRncPort2Entity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmRncPort2Entity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmRncPort2Entity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity, sizeof(Bsdrtmservice1__vRtmRncPort2Entity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity);
	if (soap_out_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag?tag:"Bsdrtmservice1:vRtmRncPort2Entity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPort2Entity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmRncPort2Entity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPort2Entity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmRncPort2Entity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmRncPort2Entity **)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmRncPort2Entity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__vRtmRncPort2Entity *)soap_instantiate_Bsdrtmservice1__vRtmRncPort2Entity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__vRtmRncPort2Entity ** p = (Bsdrtmservice1__vRtmRncPort2Entity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity, sizeof(Bsdrtmservice1__vRtmRncPort2Entity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPort2Entity);
	if (soap_out_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag?tag:"Bsdrtmservice1:vRtmRncPort2Entity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPort2Entity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__vRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__vRtmRncPort2Entity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__vRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPort2Entity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmRncPort2Entity ** p = (Bsdrtmservice1__ArrayOfVRtmRncPort2Entity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPort2Entity, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPort2Entity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmRncPort2Entity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPort2Entity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPort2Entity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPort2Entity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity))
		soap_serialize_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmRncPORTEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPORTEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmRncPORTEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmRncPORTEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmRncPORTEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmRncPORTEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity, sizeof(Bsdrtmservice1__vRtmRncPORTEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag?tag:"Bsdrtmservice1:vRtmRncPORTEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPORTEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmRncPORTEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPORTEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmRncPORTEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmRncPORTEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmRncPORTEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__vRtmRncPORTEntity *)soap_instantiate_Bsdrtmservice1__vRtmRncPORTEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__vRtmRncPORTEntity ** p = (Bsdrtmservice1__vRtmRncPORTEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPORTEntity, sizeof(Bsdrtmservice1__vRtmRncPORTEntity), 0);
		if (!p && soap->error == SOAP_HREF)
		{	soap->error = SOAP_OK;
			p = (Bsdrtmservice1__vRtmRncPORTEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmRncPort2Entity, sizeof(Bsdrtmservice1__vRtmRncPort2Entity), 0);
		}
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmRncPORTEntity);
	if (soap_out_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag?tag:"Bsdrtmservice1:vRtmRncPORTEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmRncPORTEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__vRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__vRtmRncPORTEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__vRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPORTEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmRncPORTEntity ** p = (Bsdrtmservice1__ArrayOfVRtmRncPORTEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmRncPORTEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmRncPORTEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmRncPORTEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmRncPORTEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmRncPORTEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmRncPORTEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity))
		soap_serialize_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmMonStationEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmMonStationEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmMonStationEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmMonStationEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmMonStationEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmMonStationEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity, sizeof(Bsdrtmservice1__vRtmMonStationEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag?tag:"Bsdrtmservice1:vRtmMonStationEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmMonStationEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmMonStationEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmMonStationEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmMonStationEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmMonStationEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmMonStationEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__vRtmMonStationEntity *)soap_instantiate_Bsdrtmservice1__vRtmMonStationEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__vRtmMonStationEntity ** p = (Bsdrtmservice1__vRtmMonStationEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmMonStationEntity, sizeof(Bsdrtmservice1__vRtmMonStationEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmMonStationEntity);
	if (soap_out_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag?tag:"Bsdrtmservice1:vRtmMonStationEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmMonStationEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__vRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__vRtmMonStationEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__vRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonStationEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmMonStationEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonStationEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmMonStationEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmMonStationEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmMonStationEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmMonStationEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmMonStationEntity ** p = (Bsdrtmservice1__ArrayOfVRtmMonStationEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmMonStationEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmMonStationEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonStationEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmMonStationEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmMonStationEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmMonStationEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmMonStationEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmControlCenterEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmControlCenterEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmControlCenterEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmControlCenterEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmControlCenterEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmControlCenterEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity, sizeof(Bsdrtmservice1__RtmControlCenterEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag?tag:"Bsdrtmservice1:RtmControlCenterEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmControlCenterEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmControlCenterEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmControlCenterEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmControlCenterEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmControlCenterEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmControlCenterEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmControlCenterEntity *)soap_instantiate_Bsdrtmservice1__RtmControlCenterEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmControlCenterEntity ** p = (Bsdrtmservice1__RtmControlCenterEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmControlCenterEntity, sizeof(Bsdrtmservice1__RtmControlCenterEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmControlCenterEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag?tag:"Bsdrtmservice1:RtmControlCenterEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmControlCenterEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__RtmControlCenterEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmControlCenterEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmControlCenterEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmControlCenterEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmControlCenterEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmControlCenterEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmControlCenterEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmControlCenterEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmControlCenterEntity ** p = (Bsdrtmservice1__ArrayOfRtmControlCenterEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmControlCenterEntity, sizeof(Bsdrtmservice1__ArrayOfRtmControlCenterEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmControlCenterEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmControlCenterEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmControlCenterEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmControlCenterEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmControlCenterEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonOrgEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonOrgEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonOrgEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonOrgEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonOrgEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmMonOrgEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity, sizeof(Bsdrtmservice1__RtmMonOrgEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonOrgEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonOrgEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmMonOrgEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonOrgEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmMonOrgEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmMonOrgEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmMonOrgEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmMonOrgEntity *)soap_instantiate_Bsdrtmservice1__RtmMonOrgEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmMonOrgEntity ** p = (Bsdrtmservice1__RtmMonOrgEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmMonOrgEntity, sizeof(Bsdrtmservice1__RtmMonOrgEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmMonOrgEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag?tag:"Bsdrtmservice1:RtmMonOrgEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmMonOrgEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__RtmMonOrgEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonOrgEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmMonOrgEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonOrgEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmMonOrgEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmMonOrgEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmMonOrgEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmMonOrgEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmMonOrgEntity ** p = (Bsdrtmservice1__ArrayOfRtmMonOrgEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmMonOrgEntity, sizeof(Bsdrtmservice1__ArrayOfRtmMonOrgEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonOrgEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmMonOrgEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmMonOrgEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmMonOrgEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmMonOrgEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity))
		soap_serialize_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmDevModelFunParamEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevModelFunParamEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmDevModelFunParamEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmDevModelFunParamEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__vRtmDevModelFunParamEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag?tag:"Bsdrtmservice1:vRtmDevModelFunParamEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevModelFunParamEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__vRtmDevModelFunParamEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevModelFunParamEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__vRtmDevModelFunParamEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__vRtmDevModelFunParamEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__vRtmDevModelFunParamEntity *)soap_instantiate_Bsdrtmservice1__vRtmDevModelFunParamEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__vRtmDevModelFunParamEntity ** p = (Bsdrtmservice1__vRtmDevModelFunParamEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__vRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__vRtmDevModelFunParamEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity);
	if (soap_out_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag?tag:"Bsdrtmservice1:vRtmDevModelFunParamEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__vRtmDevModelFunParamEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__vRtmDevModelFunParamEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__vRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity ** p = (Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity, sizeof(Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfVRtmDevModelFunParamEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(struct soap *soap, Bsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfVRtmDevModelFunParamEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmDevModelEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmDevModelEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmDevModelEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevModelEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmDevModelEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmDevModelEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmDevModelEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmDevModelEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity, sizeof(Bsdrtmservice1__RtmDevModelEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmDevModelEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(soap, tag?tag:"Bsdrtmservice1:RtmDevModelEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmDevModelEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmDevModelEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmDevModelEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmDevModelEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmDevModelEntity *)soap_instantiate_Bsdrtmservice1__RtmDevModelEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmDevModelEntity ** p = (Bsdrtmservice1__RtmDevModelEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmDevModelEntity, sizeof(Bsdrtmservice1__RtmDevModelEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmDevModelEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmDevModelEntity(soap, tag?tag:"Bsdrtmservice1:RtmDevModelEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmDevModelEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmDevModelEntity(struct soap *soap, Bsdrtmservice1__RtmDevModelEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDevModelEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmDevModelEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDevModelEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmDevModelEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmDevModelEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmDevModelEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmDevModelEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmDevModelEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmDevModelEntity ** p = (Bsdrtmservice1__ArrayOfRtmDevModelEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmDevModelEntity, sizeof(Bsdrtmservice1__ArrayOfRtmDevModelEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDevModelEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmDevModelEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmDevModelEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmDevModelEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmDevModelEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity))
		soap_serialize_PointerToBsdrtmservice1__RtmTypeEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmTypeEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdrtmservice1__RtmTypeEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmTypeEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmTypeEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmTypeEntity ***)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmTypeEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdrtmservice1__RtmTypeEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdrtmservice1__RtmTypeEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity, sizeof(Bsdrtmservice1__RtmTypeEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToPointerToBsdrtmservice1__RtmTypeEntity);
	if (soap_out_PointerToPointerToBsdrtmservice1__RtmTypeEntity(soap, tag?tag:"Bsdrtmservice1:RtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmTypeEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdrtmservice1__RtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__RtmTypeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__RtmTypeEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__RtmTypeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__RtmTypeEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__RtmTypeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__RtmTypeEntity *)soap_instantiate_Bsdrtmservice1__RtmTypeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__RtmTypeEntity ** p = (Bsdrtmservice1__RtmTypeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__RtmTypeEntity, sizeof(Bsdrtmservice1__RtmTypeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__RtmTypeEntity);
	if (soap_out_PointerToBsdrtmservice1__RtmTypeEntity(soap, tag?tag:"Bsdrtmservice1:RtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__RtmTypeEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__RtmTypeEntity(struct soap *soap, Bsdrtmservice1__RtmTypeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__RtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmTypeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfRtmTypeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmTypeEntity ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfRtmTypeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfRtmTypeEntity **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfRtmTypeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfRtmTypeEntity *)soap_instantiate_Bsdrtmservice1__ArrayOfRtmTypeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfRtmTypeEntity ** p = (Bsdrtmservice1__ArrayOfRtmTypeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfRtmTypeEntity, sizeof(Bsdrtmservice1__ArrayOfRtmTypeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmTypeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, tag?tag:"Bsdrtmservice1:ArrayOfRtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfRtmTypeEntity ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(struct soap *soap, Bsdrtmservice1__ArrayOfRtmTypeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdrtmservice1__ArrayOfString(struct soap *soap, Bsdrtmservice1__ArrayOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdrtmservice1__ArrayOfString(struct soap *soap, const char *tag, int id, Bsdrtmservice1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerToBsdrtmservice1__ArrayOfString(struct soap *soap, const char *tag, Bsdrtmservice1__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdrtmservice1__ArrayOfString **)soap_malloc(soap, sizeof(Bsdrtmservice1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdrtmservice1__ArrayOfString *)soap_instantiate_Bsdrtmservice1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdrtmservice1__ArrayOfString ** p = (Bsdrtmservice1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_Bsdrtmservice1__ArrayOfString, sizeof(Bsdrtmservice1__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdrtmservice1__ArrayOfString(struct soap *soap, Bsdrtmservice1__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerToBsdrtmservice1__ArrayOfString);
	if (soap_out_PointerToBsdrtmservice1__ArrayOfString(soap, tag?tag:"Bsdrtmservice1:ArrayOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdrtmservice1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerToBsdrtmservice1__ArrayOfString(struct soap *soap, Bsdrtmservice1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdrtmservice1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdrtmservice_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdrtmservice_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdrtmservice_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_Bsdrtmservice_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_Bsdrtmservice_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdrtmservice_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

} // namespace Bsdrtmservice


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of BsdrtmserviceC.cpp */
