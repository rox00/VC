/* BsdsysserviceC.cpp
   Generated by gSOAP 2.8.2 from Bsdsysservice.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "BsdsysserviceH.h"

namespace Bsdsysservice {

SOAP_SOURCE_STAMP("@(#) BsdsysserviceC.cpp ver 2.8.2 2015-06-12 07:43:14 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_Bsdsysservice_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_Bsdsysservice_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_Bsdsysservice_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_Bsdsysservice_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType:
		return soap_in_Bsdsysservice__LogType(soap, NULL, NULL, "Bsdsysservice:LogType");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType:
		return soap_in_Bsdsysservice__SourceType(soap, NULL, NULL, "Bsdsysservice:SourceType");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity:
		return soap_in_Bsdsysservice__Comm_USCOREemployeeEntity(soap, NULL, NULL, "Bsdsysservice:Comm_employeeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity:
		return soap_in_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:Comm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		return soap_in_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		return soap_in_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return soap_in_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:V_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		return soap_in_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		return soap_in_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity:
		return soap_in_Bsdsysservice__RtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:RtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity:
		return soap_in_Bsdsysservice__ArrayOfRtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity:
		return soap_in_Bsdsysservice__OptResultOfRtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity:
		return soap_in_Bsdsysservice__AlertEntity(soap, NULL, NULL, "Bsdsysservice:AlertEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity:
		return soap_in_Bsdsysservice__ArrayOfAlertEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity:
		return soap_in_Bsdsysservice__OptResultOfAlertEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString:
		return soap_in_Bsdsysservice__ArrayOfString(soap, NULL, NULL, "Bsdsysservice:ArrayOfString");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString:
		return soap_in_Bsdsysservice__OptResultOfString(soap, NULL, NULL, "Bsdsysservice:OptResultOfString");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean:
		return soap_in_Bsdsysservice__ArrayOfBoolean(soap, NULL, NULL, "Bsdsysservice:ArrayOfBoolean");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean:
		return soap_in_Bsdsysservice__OptResultOfBoolean(soap, NULL, NULL, "Bsdsysservice:OptResultOfBoolean");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity:
		return soap_in_Bsdsysservice__UserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:UserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity:
		return soap_in_Bsdsysservice__ArrayOfUserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity:
		return soap_in_Bsdsysservice__OptResultOfUserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity:
		return soap_in_Bsdsysservice__Comm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:Comm_userEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity:
		return soap_in_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity:
		return soap_in_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_Bsdsysservice_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserListResponse:
		return soap_in_PointerTo_Bsdsysservice__GetUserListResponse(soap, NULL, NULL, "Bsdsysservice:GetUserListResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList:
		return soap_in_PointerTo_Bsdsysservice__GetUserList(soap, NULL, NULL, "Bsdsysservice:GetUserList");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserIDResponse:
		return soap_in_PointerTo_Bsdsysservice__GetAllUserIDResponse(soap, NULL, NULL, "Bsdsysservice:GetAllUserIDResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserID:
		return soap_in_PointerTo_Bsdsysservice__GetAllUserID(soap, NULL, NULL, "Bsdsysservice:GetAllUserID");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3Response:
		return soap_in_PointerTo_Bsdsysservice__GetDepartmentList3Response(soap, NULL, NULL, "Bsdsysservice:GetDepartmentList3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3:
		return soap_in_PointerTo_Bsdsysservice__GetDepartmentList3(soap, NULL, NULL, "Bsdsysservice:GetDepartmentList3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3Response:
		return soap_in_PointerTo_Bsdsysservice__GetUserList3Response(soap, NULL, NULL, "Bsdsysservice:GetUserList3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3:
		return soap_in_PointerTo_Bsdsysservice__GetUserList3(soap, NULL, NULL, "Bsdsysservice:GetUserList3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3Response:
		return soap_in_PointerTo_Bsdsysservice__GetRegions3Response(soap, NULL, NULL, "Bsdsysservice:GetRegions3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3:
		return soap_in_PointerTo_Bsdsysservice__GetRegions3(soap, NULL, NULL, "Bsdsysservice:GetRegions3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegionsResponse:
		return soap_in_PointerTo_Bsdsysservice__GetRegionsResponse(soap, NULL, NULL, "Bsdsysservice:GetRegionsResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions:
		return soap_in_PointerTo_Bsdsysservice__GetRegions(soap, NULL, NULL, "Bsdsysservice:GetRegions");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3Response:
		return soap_in_PointerTo_Bsdsysservice__GetFunctions3Response(soap, NULL, NULL, "Bsdsysservice:GetFunctions3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3:
		return soap_in_PointerTo_Bsdsysservice__GetFunctions3(soap, NULL, NULL, "Bsdsysservice:GetFunctions3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse:
		return soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(soap, NULL, NULL, "Bsdsysservice:GetFunctionsByUserIdResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserId:
		return soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, NULL, NULL, "Bsdsysservice:GetFunctionsByUserId");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserIdResponse:
		return soap_in_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(soap, NULL, NULL, "Bsdsysservice:GetMobileByUserIdResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserId:
		return soap_in_PointerTo_Bsdsysservice__GetMobileByUserId(soap, NULL, NULL, "Bsdsysservice:GetMobileByUserId");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLogResponse:
		return soap_in_PointerTo_Bsdsysservice__WriteLogResponse(soap, NULL, NULL, "Bsdsysservice:WriteLogResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLog:
		return soap_in_PointerTo_Bsdsysservice__WriteLog(soap, NULL, NULL, "Bsdsysservice:WriteLog");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsgResponse:
		return soap_in_PointerTo_Bsdsysservice__GetUnSendMsgResponse(soap, NULL, NULL, "Bsdsysservice:GetUnSendMsgResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsg:
		return soap_in_PointerTo_Bsdsysservice__GetUnSendMsg(soap, NULL, NULL, "Bsdsysservice:GetUnSendMsg");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirectResponse:
		return soap_in_PointerTo_Bsdsysservice__AlertMsgDirectResponse(soap, NULL, NULL, "Bsdsysservice:AlertMsgDirectResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirect:
		return soap_in_PointerTo_Bsdsysservice__AlertMsgDirect(soap, NULL, NULL, "Bsdsysservice:AlertMsgDirect");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnStringResponse:
		return soap_in_PointerTo_Bsdsysservice__GetConnStringResponse(soap, NULL, NULL, "Bsdsysservice:GetConnStringResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnString:
		return soap_in_PointerTo_Bsdsysservice__GetConnString(soap, NULL, NULL, "Bsdsysservice:GetConnString");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSettingResponse:
		return soap_in_PointerTo_Bsdsysservice__GetAppSettingResponse(soap, NULL, NULL, "Bsdsysservice:GetAppSettingResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSetting:
		return soap_in_PointerTo_Bsdsysservice__GetAppSetting(soap, NULL, NULL, "Bsdsysservice:GetAppSetting");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTimeResponse:
		return soap_in_PointerTo_Bsdsysservice__GetServerTimeResponse(soap, NULL, NULL, "Bsdsysservice:GetServerTimeResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTime:
		return soap_in_PointerTo_Bsdsysservice__GetServerTime(soap, NULL, NULL, "Bsdsysservice:GetServerTime");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunctionResponse:
		return soap_in_PointerTo_Bsdsysservice__VerifyFunctionResponse(soap, NULL, NULL, "Bsdsysservice:VerifyFunctionResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunction:
		return soap_in_PointerTo_Bsdsysservice__VerifyFunction(soap, NULL, NULL, "Bsdsysservice:VerifyFunction");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForAppleResponse:
		return soap_in_PointerTo_Bsdsysservice__GetUsersForAppleResponse(soap, NULL, NULL, "Bsdsysservice:GetUsersForAppleResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForApple:
		return soap_in_PointerTo_Bsdsysservice__GetUsersForApple(soap, NULL, NULL, "Bsdsysservice:GetUsersForApple");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUserResponse:
		return soap_in_PointerTo_Bsdsysservice__VerifyUserResponse(soap, NULL, NULL, "Bsdsysservice:VerifyUserResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUser:
		return soap_in_PointerTo_Bsdsysservice__VerifyUser(soap, NULL, NULL, "Bsdsysservice:VerifyUser");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		return soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		return soap_in_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfRtmTypeEntity:
		return soap_in_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfAlertEntity:
		return soap_in_PointerToBsdsysservice__OptResultOfAlertEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfString:
		return soap_in_PointerToBsdsysservice__OptResultOfString(soap, NULL, NULL, "Bsdsysservice:OptResultOfString");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfBoolean:
		return soap_in_PointerToBsdsysservice__OptResultOfBoolean(soap, NULL, NULL, "Bsdsysservice:OptResultOfBoolean");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfUserForAppleEntity:
		return soap_in_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity:
		return soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:OptResultOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREemployeeEntity:
		return soap_in_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, NULL, NULL, "Bsdsysservice:Comm_employeeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity:
		return soap_in_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:Comm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity:
		return soap_in_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:Comm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		return soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return soap_in_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:V_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return soap_in_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:V_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		return soap_in_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__RtmTypeEntity:
		return soap_in_PointerToPointerToBsdsysservice__RtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:RtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity:
		return soap_in_PointerToBsdsysservice__RtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:RtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfRtmTypeEntity:
		return soap_in_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__AlertEntity:
		return soap_in_PointerToPointerToBsdsysservice__AlertEntity(soap, NULL, NULL, "Bsdsysservice:AlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity:
		return soap_in_PointerToBsdsysservice__AlertEntity(soap, NULL, NULL, "Bsdsysservice:AlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfAlertEntity:
		return soap_in_PointerToBsdsysservice__ArrayOfAlertEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfString:
		return soap_in_PointerToBsdsysservice__ArrayOfString(soap, NULL, NULL, "Bsdsysservice:ArrayOfString");
	case SOAP_TYPE_Bsdsysservice_PointerTobool:
		return soap_in_PointerTobool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfBoolean:
		return soap_in_PointerToBsdsysservice__ArrayOfBoolean(soap, NULL, NULL, "Bsdsysservice:ArrayOfBoolean");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__UserForAppleEntity:
		return soap_in_PointerToPointerToBsdsysservice__UserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:UserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity:
		return soap_in_PointerToBsdsysservice__UserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:UserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfUserForAppleEntity:
		return soap_in_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity:
		return soap_in_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:Comm_userEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity:
		return soap_in_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:Comm_userEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity:
		return soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, NULL, NULL, "Bsdsysservice:ArrayOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_Bsdsysservice_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "Bsdsysservice:Comm_employeeEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity;
			return soap_in_Bsdsysservice__Comm_USCOREemployeeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:Comm_departmentEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity;
			return soap_in_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfComm_departmentEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity;
			return soap_in_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfComm_departmentEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity;
			return soap_in_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:V_Comm_UserListEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity;
			return soap_in_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfV_Comm_UserListEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity;
			return soap_in_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfV_Comm_UserListEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity;
			return soap_in_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:RtmTypeEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity;
			return soap_in_Bsdsysservice__RtmTypeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfRtmTypeEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity;
			return soap_in_Bsdsysservice__ArrayOfRtmTypeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfRtmTypeEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity;
			return soap_in_Bsdsysservice__OptResultOfRtmTypeEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:AlertEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity;
			return soap_in_Bsdsysservice__AlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfAlertEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity;
			return soap_in_Bsdsysservice__ArrayOfAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfAlertEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity;
			return soap_in_Bsdsysservice__OptResultOfAlertEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfString"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString;
			return soap_in_Bsdsysservice__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfString"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString;
			return soap_in_Bsdsysservice__OptResultOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfBoolean"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean;
			return soap_in_Bsdsysservice__ArrayOfBoolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfBoolean"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean;
			return soap_in_Bsdsysservice__OptResultOfBoolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:UserForAppleEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity;
			return soap_in_Bsdsysservice__UserForAppleEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfUserForAppleEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity;
			return soap_in_Bsdsysservice__ArrayOfUserForAppleEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfUserForAppleEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity;
			return soap_in_Bsdsysservice__OptResultOfUserForAppleEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:Comm_userEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity;
			return soap_in_Bsdsysservice__Comm_USCOREuserEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:ArrayOfComm_userEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity;
			return soap_in_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:OptResultOfComm_userEntity"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity;
			return soap_in_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_Bsdsysservice_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_Bsdsysservice_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_Bsdsysservice_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_Bsdsysservice_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_Bsdsysservice_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_Bsdsysservice_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:LogType"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType;
			return soap_in_Bsdsysservice__LogType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:SourceType"))
		{	*type = SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType;
			return soap_in_Bsdsysservice__SourceType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_Bsdsysservice__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_Bsdsysservice_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUserListResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse;
			return soap_in__Bsdsysservice__GetUserListResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUserList"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList;
			return soap_in__Bsdsysservice__GetUserList(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetAllUserIDResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse;
			return soap_in__Bsdsysservice__GetAllUserIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetAllUserID"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID;
			return soap_in__Bsdsysservice__GetAllUserID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetDepartmentList3Response"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response;
			return soap_in__Bsdsysservice__GetDepartmentList3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetDepartmentList3"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3;
			return soap_in__Bsdsysservice__GetDepartmentList3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUserList3Response"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response;
			return soap_in__Bsdsysservice__GetUserList3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUserList3"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3;
			return soap_in__Bsdsysservice__GetUserList3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetRegions3Response"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response;
			return soap_in__Bsdsysservice__GetRegions3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetRegions3"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3;
			return soap_in__Bsdsysservice__GetRegions3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetRegionsResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse;
			return soap_in__Bsdsysservice__GetRegionsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetRegions"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions;
			return soap_in__Bsdsysservice__GetRegions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetFunctions3Response"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response;
			return soap_in__Bsdsysservice__GetFunctions3Response(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetFunctions3"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3;
			return soap_in__Bsdsysservice__GetFunctions3(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetFunctionsByUserIdResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse;
			return soap_in__Bsdsysservice__GetFunctionsByUserIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetFunctionsByUserId"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId;
			return soap_in__Bsdsysservice__GetFunctionsByUserId(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetMobileByUserIdResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse;
			return soap_in__Bsdsysservice__GetMobileByUserIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetMobileByUserId"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId;
			return soap_in__Bsdsysservice__GetMobileByUserId(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:WriteLogResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse;
			return soap_in__Bsdsysservice__WriteLogResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:WriteLog"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog;
			return soap_in__Bsdsysservice__WriteLog(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUnSendMsgResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse;
			return soap_in__Bsdsysservice__GetUnSendMsgResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUnSendMsg"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg;
			return soap_in__Bsdsysservice__GetUnSendMsg(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:AlertMsgDirectResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse;
			return soap_in__Bsdsysservice__AlertMsgDirectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:AlertMsgDirect"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect;
			return soap_in__Bsdsysservice__AlertMsgDirect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetConnStringResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse;
			return soap_in__Bsdsysservice__GetConnStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetConnString"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString;
			return soap_in__Bsdsysservice__GetConnString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetAppSettingResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse;
			return soap_in__Bsdsysservice__GetAppSettingResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetAppSetting"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting;
			return soap_in__Bsdsysservice__GetAppSetting(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetServerTimeResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse;
			return soap_in__Bsdsysservice__GetServerTimeResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetServerTime"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime;
			return soap_in__Bsdsysservice__GetServerTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:VerifyFunctionResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse;
			return soap_in__Bsdsysservice__VerifyFunctionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:VerifyFunction"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction;
			return soap_in__Bsdsysservice__VerifyFunction(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUsersForAppleResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse;
			return soap_in__Bsdsysservice__GetUsersForAppleResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:GetUsersForApple"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple;
			return soap_in__Bsdsysservice__GetUsersForApple(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:VerifyUserResponse"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse;
			return soap_in__Bsdsysservice__VerifyUserResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "Bsdsysservice:VerifyUser"))
		{	*type = SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser;
			return soap_in__Bsdsysservice__VerifyUser(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_Bsdsysservice_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_Bsdsysservice_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_Bsdsysservice_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_Bsdsysservice_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType:
		return soap_out_Bsdsysservice__LogType(soap, tag, id, (const enum Bsdsysservice__LogType *)ptr, "Bsdsysservice:LogType");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType:
		return soap_out_Bsdsysservice__SourceType(soap, tag, id, (const enum Bsdsysservice__SourceType *)ptr, "Bsdsysservice:SourceType");
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse:
		return ((_Bsdsysservice__GetUserListResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetUserListResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList:
		return ((_Bsdsysservice__GetUserList *)ptr)->soap_out(soap, "Bsdsysservice:GetUserList", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse:
		return ((_Bsdsysservice__GetAllUserIDResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetAllUserIDResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID:
		return ((_Bsdsysservice__GetAllUserID *)ptr)->soap_out(soap, "Bsdsysservice:GetAllUserID", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response:
		return ((_Bsdsysservice__GetDepartmentList3Response *)ptr)->soap_out(soap, "Bsdsysservice:GetDepartmentList3Response", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3:
		return ((_Bsdsysservice__GetDepartmentList3 *)ptr)->soap_out(soap, "Bsdsysservice:GetDepartmentList3", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response:
		return ((_Bsdsysservice__GetUserList3Response *)ptr)->soap_out(soap, "Bsdsysservice:GetUserList3Response", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3:
		return ((_Bsdsysservice__GetUserList3 *)ptr)->soap_out(soap, "Bsdsysservice:GetUserList3", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response:
		return ((_Bsdsysservice__GetRegions3Response *)ptr)->soap_out(soap, "Bsdsysservice:GetRegions3Response", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3:
		return ((_Bsdsysservice__GetRegions3 *)ptr)->soap_out(soap, "Bsdsysservice:GetRegions3", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse:
		return ((_Bsdsysservice__GetRegionsResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetRegionsResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions:
		return ((_Bsdsysservice__GetRegions *)ptr)->soap_out(soap, "Bsdsysservice:GetRegions", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response:
		return ((_Bsdsysservice__GetFunctions3Response *)ptr)->soap_out(soap, "Bsdsysservice:GetFunctions3Response", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3:
		return ((_Bsdsysservice__GetFunctions3 *)ptr)->soap_out(soap, "Bsdsysservice:GetFunctions3", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse:
		return ((_Bsdsysservice__GetFunctionsByUserIdResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetFunctionsByUserIdResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId:
		return ((_Bsdsysservice__GetFunctionsByUserId *)ptr)->soap_out(soap, "Bsdsysservice:GetFunctionsByUserId", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse:
		return ((_Bsdsysservice__GetMobileByUserIdResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetMobileByUserIdResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId:
		return ((_Bsdsysservice__GetMobileByUserId *)ptr)->soap_out(soap, "Bsdsysservice:GetMobileByUserId", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse:
		return ((_Bsdsysservice__WriteLogResponse *)ptr)->soap_out(soap, "Bsdsysservice:WriteLogResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog:
		return ((_Bsdsysservice__WriteLog *)ptr)->soap_out(soap, "Bsdsysservice:WriteLog", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse:
		return ((_Bsdsysservice__GetUnSendMsgResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetUnSendMsgResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg:
		return ((_Bsdsysservice__GetUnSendMsg *)ptr)->soap_out(soap, "Bsdsysservice:GetUnSendMsg", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse:
		return ((_Bsdsysservice__AlertMsgDirectResponse *)ptr)->soap_out(soap, "Bsdsysservice:AlertMsgDirectResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect:
		return ((_Bsdsysservice__AlertMsgDirect *)ptr)->soap_out(soap, "Bsdsysservice:AlertMsgDirect", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse:
		return ((_Bsdsysservice__GetConnStringResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetConnStringResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString:
		return ((_Bsdsysservice__GetConnString *)ptr)->soap_out(soap, "Bsdsysservice:GetConnString", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse:
		return ((_Bsdsysservice__GetAppSettingResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetAppSettingResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting:
		return ((_Bsdsysservice__GetAppSetting *)ptr)->soap_out(soap, "Bsdsysservice:GetAppSetting", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse:
		return ((_Bsdsysservice__GetServerTimeResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetServerTimeResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime:
		return ((_Bsdsysservice__GetServerTime *)ptr)->soap_out(soap, "Bsdsysservice:GetServerTime", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse:
		return ((_Bsdsysservice__VerifyFunctionResponse *)ptr)->soap_out(soap, "Bsdsysservice:VerifyFunctionResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction:
		return ((_Bsdsysservice__VerifyFunction *)ptr)->soap_out(soap, "Bsdsysservice:VerifyFunction", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse:
		return ((_Bsdsysservice__GetUsersForAppleResponse *)ptr)->soap_out(soap, "Bsdsysservice:GetUsersForAppleResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple:
		return ((_Bsdsysservice__GetUsersForApple *)ptr)->soap_out(soap, "Bsdsysservice:GetUsersForApple", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse:
		return ((_Bsdsysservice__VerifyUserResponse *)ptr)->soap_out(soap, "Bsdsysservice:VerifyUserResponse", id, NULL);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser:
		return ((_Bsdsysservice__VerifyUser *)ptr)->soap_out(soap, "Bsdsysservice:VerifyUser", id, NULL);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity:
		return ((Bsdsysservice__Comm_USCOREemployeeEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:Comm_employeeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity:
		return ((Bsdsysservice__Comm_USCOREdepartmentEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:Comm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		return ((Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		return ((Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return ((Bsdsysservice__V_USCOREComm_USCOREUserListEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:V_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		return ((Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		return ((Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity:
		return ((Bsdsysservice__RtmTypeEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:RtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity:
		return ((Bsdsysservice__ArrayOfRtmTypeEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity:
		return ((Bsdsysservice__OptResultOfRtmTypeEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity:
		return ((Bsdsysservice__AlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:AlertEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity:
		return ((Bsdsysservice__ArrayOfAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity:
		return ((Bsdsysservice__OptResultOfAlertEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString:
		return ((Bsdsysservice__ArrayOfString *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfString");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString:
		return ((Bsdsysservice__OptResultOfString *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfString");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean:
		return ((Bsdsysservice__ArrayOfBoolean *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfBoolean");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean:
		return ((Bsdsysservice__OptResultOfBoolean *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfBoolean");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity:
		return ((Bsdsysservice__UserForAppleEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:UserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity:
		return ((Bsdsysservice__ArrayOfUserForAppleEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity:
		return ((Bsdsysservice__OptResultOfUserForAppleEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity:
		return ((Bsdsysservice__Comm_USCOREuserEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:Comm_userEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity:
		return ((Bsdsysservice__ArrayOfComm_USCOREuserEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:ArrayOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity:
		return ((Bsdsysservice__OptResultOfComm_USCOREuserEntity *)ptr)->soap_out(soap, tag, id, "Bsdsysservice:OptResultOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_Bsdsysservice_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserListResponse:
		return soap_out_PointerTo_Bsdsysservice__GetUserListResponse(soap, tag, id, (_Bsdsysservice__GetUserListResponse *const*)ptr, "Bsdsysservice:GetUserListResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList:
		return soap_out_PointerTo_Bsdsysservice__GetUserList(soap, tag, id, (_Bsdsysservice__GetUserList *const*)ptr, "Bsdsysservice:GetUserList");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserIDResponse:
		return soap_out_PointerTo_Bsdsysservice__GetAllUserIDResponse(soap, tag, id, (_Bsdsysservice__GetAllUserIDResponse *const*)ptr, "Bsdsysservice:GetAllUserIDResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserID:
		return soap_out_PointerTo_Bsdsysservice__GetAllUserID(soap, tag, id, (_Bsdsysservice__GetAllUserID *const*)ptr, "Bsdsysservice:GetAllUserID");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3Response:
		return soap_out_PointerTo_Bsdsysservice__GetDepartmentList3Response(soap, tag, id, (_Bsdsysservice__GetDepartmentList3Response *const*)ptr, "Bsdsysservice:GetDepartmentList3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3:
		return soap_out_PointerTo_Bsdsysservice__GetDepartmentList3(soap, tag, id, (_Bsdsysservice__GetDepartmentList3 *const*)ptr, "Bsdsysservice:GetDepartmentList3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3Response:
		return soap_out_PointerTo_Bsdsysservice__GetUserList3Response(soap, tag, id, (_Bsdsysservice__GetUserList3Response *const*)ptr, "Bsdsysservice:GetUserList3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3:
		return soap_out_PointerTo_Bsdsysservice__GetUserList3(soap, tag, id, (_Bsdsysservice__GetUserList3 *const*)ptr, "Bsdsysservice:GetUserList3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3Response:
		return soap_out_PointerTo_Bsdsysservice__GetRegions3Response(soap, tag, id, (_Bsdsysservice__GetRegions3Response *const*)ptr, "Bsdsysservice:GetRegions3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3:
		return soap_out_PointerTo_Bsdsysservice__GetRegions3(soap, tag, id, (_Bsdsysservice__GetRegions3 *const*)ptr, "Bsdsysservice:GetRegions3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegionsResponse:
		return soap_out_PointerTo_Bsdsysservice__GetRegionsResponse(soap, tag, id, (_Bsdsysservice__GetRegionsResponse *const*)ptr, "Bsdsysservice:GetRegionsResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions:
		return soap_out_PointerTo_Bsdsysservice__GetRegions(soap, tag, id, (_Bsdsysservice__GetRegions *const*)ptr, "Bsdsysservice:GetRegions");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3Response:
		return soap_out_PointerTo_Bsdsysservice__GetFunctions3Response(soap, tag, id, (_Bsdsysservice__GetFunctions3Response *const*)ptr, "Bsdsysservice:GetFunctions3Response");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3:
		return soap_out_PointerTo_Bsdsysservice__GetFunctions3(soap, tag, id, (_Bsdsysservice__GetFunctions3 *const*)ptr, "Bsdsysservice:GetFunctions3");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse:
		return soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(soap, tag, id, (_Bsdsysservice__GetFunctionsByUserIdResponse *const*)ptr, "Bsdsysservice:GetFunctionsByUserIdResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserId:
		return soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, tag, id, (_Bsdsysservice__GetFunctionsByUserId *const*)ptr, "Bsdsysservice:GetFunctionsByUserId");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserIdResponse:
		return soap_out_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(soap, tag, id, (_Bsdsysservice__GetMobileByUserIdResponse *const*)ptr, "Bsdsysservice:GetMobileByUserIdResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserId:
		return soap_out_PointerTo_Bsdsysservice__GetMobileByUserId(soap, tag, id, (_Bsdsysservice__GetMobileByUserId *const*)ptr, "Bsdsysservice:GetMobileByUserId");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLogResponse:
		return soap_out_PointerTo_Bsdsysservice__WriteLogResponse(soap, tag, id, (_Bsdsysservice__WriteLogResponse *const*)ptr, "Bsdsysservice:WriteLogResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLog:
		return soap_out_PointerTo_Bsdsysservice__WriteLog(soap, tag, id, (_Bsdsysservice__WriteLog *const*)ptr, "Bsdsysservice:WriteLog");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsgResponse:
		return soap_out_PointerTo_Bsdsysservice__GetUnSendMsgResponse(soap, tag, id, (_Bsdsysservice__GetUnSendMsgResponse *const*)ptr, "Bsdsysservice:GetUnSendMsgResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsg:
		return soap_out_PointerTo_Bsdsysservice__GetUnSendMsg(soap, tag, id, (_Bsdsysservice__GetUnSendMsg *const*)ptr, "Bsdsysservice:GetUnSendMsg");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirectResponse:
		return soap_out_PointerTo_Bsdsysservice__AlertMsgDirectResponse(soap, tag, id, (_Bsdsysservice__AlertMsgDirectResponse *const*)ptr, "Bsdsysservice:AlertMsgDirectResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirect:
		return soap_out_PointerTo_Bsdsysservice__AlertMsgDirect(soap, tag, id, (_Bsdsysservice__AlertMsgDirect *const*)ptr, "Bsdsysservice:AlertMsgDirect");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnStringResponse:
		return soap_out_PointerTo_Bsdsysservice__GetConnStringResponse(soap, tag, id, (_Bsdsysservice__GetConnStringResponse *const*)ptr, "Bsdsysservice:GetConnStringResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnString:
		return soap_out_PointerTo_Bsdsysservice__GetConnString(soap, tag, id, (_Bsdsysservice__GetConnString *const*)ptr, "Bsdsysservice:GetConnString");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSettingResponse:
		return soap_out_PointerTo_Bsdsysservice__GetAppSettingResponse(soap, tag, id, (_Bsdsysservice__GetAppSettingResponse *const*)ptr, "Bsdsysservice:GetAppSettingResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSetting:
		return soap_out_PointerTo_Bsdsysservice__GetAppSetting(soap, tag, id, (_Bsdsysservice__GetAppSetting *const*)ptr, "Bsdsysservice:GetAppSetting");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTimeResponse:
		return soap_out_PointerTo_Bsdsysservice__GetServerTimeResponse(soap, tag, id, (_Bsdsysservice__GetServerTimeResponse *const*)ptr, "Bsdsysservice:GetServerTimeResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTime:
		return soap_out_PointerTo_Bsdsysservice__GetServerTime(soap, tag, id, (_Bsdsysservice__GetServerTime *const*)ptr, "Bsdsysservice:GetServerTime");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunctionResponse:
		return soap_out_PointerTo_Bsdsysservice__VerifyFunctionResponse(soap, tag, id, (_Bsdsysservice__VerifyFunctionResponse *const*)ptr, "Bsdsysservice:VerifyFunctionResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunction:
		return soap_out_PointerTo_Bsdsysservice__VerifyFunction(soap, tag, id, (_Bsdsysservice__VerifyFunction *const*)ptr, "Bsdsysservice:VerifyFunction");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForAppleResponse:
		return soap_out_PointerTo_Bsdsysservice__GetUsersForAppleResponse(soap, tag, id, (_Bsdsysservice__GetUsersForAppleResponse *const*)ptr, "Bsdsysservice:GetUsersForAppleResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForApple:
		return soap_out_PointerTo_Bsdsysservice__GetUsersForApple(soap, tag, id, (_Bsdsysservice__GetUsersForApple *const*)ptr, "Bsdsysservice:GetUsersForApple");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUserResponse:
		return soap_out_PointerTo_Bsdsysservice__VerifyUserResponse(soap, tag, id, (_Bsdsysservice__VerifyUserResponse *const*)ptr, "Bsdsysservice:VerifyUserResponse");
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUser:
		return soap_out_PointerTo_Bsdsysservice__VerifyUser(soap, tag, id, (_Bsdsysservice__VerifyUser *const*)ptr, "Bsdsysservice:VerifyUser");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		return soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, tag, id, (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *const*)ptr, "Bsdsysservice:OptResultOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		return soap_out_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, tag, id, (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *const*)ptr, "Bsdsysservice:OptResultOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfRtmTypeEntity:
		return soap_out_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, tag, id, (Bsdsysservice__OptResultOfRtmTypeEntity *const*)ptr, "Bsdsysservice:OptResultOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfAlertEntity:
		return soap_out_PointerToBsdsysservice__OptResultOfAlertEntity(soap, tag, id, (Bsdsysservice__OptResultOfAlertEntity *const*)ptr, "Bsdsysservice:OptResultOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfString:
		return soap_out_PointerToBsdsysservice__OptResultOfString(soap, tag, id, (Bsdsysservice__OptResultOfString *const*)ptr, "Bsdsysservice:OptResultOfString");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfBoolean:
		return soap_out_PointerToBsdsysservice__OptResultOfBoolean(soap, tag, id, (Bsdsysservice__OptResultOfBoolean *const*)ptr, "Bsdsysservice:OptResultOfBoolean");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfUserForAppleEntity:
		return soap_out_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, tag, id, (Bsdsysservice__OptResultOfUserForAppleEntity *const*)ptr, "Bsdsysservice:OptResultOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity:
		return soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, tag, id, (Bsdsysservice__OptResultOfComm_USCOREuserEntity *const*)ptr, "Bsdsysservice:OptResultOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREemployeeEntity:
		return soap_out_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, tag, id, (Bsdsysservice__Comm_USCOREemployeeEntity *const*)ptr, "Bsdsysservice:Comm_employeeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity:
		return soap_out_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, id, (Bsdsysservice__Comm_USCOREdepartmentEntity **const*)ptr, "Bsdsysservice:Comm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity:
		return soap_out_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, id, (Bsdsysservice__Comm_USCOREdepartmentEntity *const*)ptr, "Bsdsysservice:Comm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		return soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, tag, id, (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *const*)ptr, "Bsdsysservice:ArrayOfComm_departmentEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return soap_out_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, id, (Bsdsysservice__V_USCOREComm_USCOREUserListEntity **const*)ptr, "Bsdsysservice:V_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return soap_out_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, id, (Bsdsysservice__V_USCOREComm_USCOREUserListEntity *const*)ptr, "Bsdsysservice:V_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		return soap_out_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, tag, id, (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *const*)ptr, "Bsdsysservice:ArrayOfV_Comm_UserListEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__RtmTypeEntity:
		return soap_out_PointerToPointerToBsdsysservice__RtmTypeEntity(soap, tag, id, (Bsdsysservice__RtmTypeEntity **const*)ptr, "Bsdsysservice:RtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity:
		return soap_out_PointerToBsdsysservice__RtmTypeEntity(soap, tag, id, (Bsdsysservice__RtmTypeEntity *const*)ptr, "Bsdsysservice:RtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfRtmTypeEntity:
		return soap_out_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, tag, id, (Bsdsysservice__ArrayOfRtmTypeEntity *const*)ptr, "Bsdsysservice:ArrayOfRtmTypeEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__AlertEntity:
		return soap_out_PointerToPointerToBsdsysservice__AlertEntity(soap, tag, id, (Bsdsysservice__AlertEntity **const*)ptr, "Bsdsysservice:AlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity:
		return soap_out_PointerToBsdsysservice__AlertEntity(soap, tag, id, (Bsdsysservice__AlertEntity *const*)ptr, "Bsdsysservice:AlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfAlertEntity:
		return soap_out_PointerToBsdsysservice__ArrayOfAlertEntity(soap, tag, id, (Bsdsysservice__ArrayOfAlertEntity *const*)ptr, "Bsdsysservice:ArrayOfAlertEntity");
	case SOAP_TYPE_Bsdsysservice_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfString:
		return soap_out_PointerToBsdsysservice__ArrayOfString(soap, tag, id, (Bsdsysservice__ArrayOfString *const*)ptr, "Bsdsysservice:ArrayOfString");
	case SOAP_TYPE_Bsdsysservice_PointerTobool:
		return soap_out_PointerTobool(soap, tag, id, (bool *const*)ptr, "xsd:boolean");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfBoolean:
		return soap_out_PointerToBsdsysservice__ArrayOfBoolean(soap, tag, id, (Bsdsysservice__ArrayOfBoolean *const*)ptr, "Bsdsysservice:ArrayOfBoolean");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__UserForAppleEntity:
		return soap_out_PointerToPointerToBsdsysservice__UserForAppleEntity(soap, tag, id, (Bsdsysservice__UserForAppleEntity **const*)ptr, "Bsdsysservice:UserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity:
		return soap_out_PointerToBsdsysservice__UserForAppleEntity(soap, tag, id, (Bsdsysservice__UserForAppleEntity *const*)ptr, "Bsdsysservice:UserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfUserForAppleEntity:
		return soap_out_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, tag, id, (Bsdsysservice__ArrayOfUserForAppleEntity *const*)ptr, "Bsdsysservice:ArrayOfUserForAppleEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity:
		return soap_out_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag, id, (Bsdsysservice__Comm_USCOREuserEntity **const*)ptr, "Bsdsysservice:Comm_userEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity:
		return soap_out_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag, id, (Bsdsysservice__Comm_USCOREuserEntity *const*)ptr, "Bsdsysservice:Comm_userEntity");
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity:
		return soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, tag, id, (Bsdsysservice__ArrayOfComm_USCOREuserEntity *const*)ptr, "Bsdsysservice:ArrayOfComm_userEntity");
	case SOAP_TYPE_Bsdsysservice__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_Bsdsysservice_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse:
		((_Bsdsysservice__GetUserListResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList:
		((_Bsdsysservice__GetUserList *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse:
		((_Bsdsysservice__GetAllUserIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID:
		((_Bsdsysservice__GetAllUserID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response:
		((_Bsdsysservice__GetDepartmentList3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3:
		((_Bsdsysservice__GetDepartmentList3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response:
		((_Bsdsysservice__GetUserList3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3:
		((_Bsdsysservice__GetUserList3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response:
		((_Bsdsysservice__GetRegions3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3:
		((_Bsdsysservice__GetRegions3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse:
		((_Bsdsysservice__GetRegionsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions:
		((_Bsdsysservice__GetRegions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response:
		((_Bsdsysservice__GetFunctions3Response *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3:
		((_Bsdsysservice__GetFunctions3 *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse:
		((_Bsdsysservice__GetFunctionsByUserIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId:
		((_Bsdsysservice__GetFunctionsByUserId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse:
		((_Bsdsysservice__GetMobileByUserIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId:
		((_Bsdsysservice__GetMobileByUserId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse:
		((_Bsdsysservice__WriteLogResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog:
		((_Bsdsysservice__WriteLog *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse:
		((_Bsdsysservice__GetUnSendMsgResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg:
		((_Bsdsysservice__GetUnSendMsg *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse:
		((_Bsdsysservice__AlertMsgDirectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect:
		((_Bsdsysservice__AlertMsgDirect *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse:
		((_Bsdsysservice__GetConnStringResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString:
		((_Bsdsysservice__GetConnString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse:
		((_Bsdsysservice__GetAppSettingResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting:
		((_Bsdsysservice__GetAppSetting *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse:
		((_Bsdsysservice__GetServerTimeResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime:
		((_Bsdsysservice__GetServerTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse:
		((_Bsdsysservice__VerifyFunctionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction:
		((_Bsdsysservice__VerifyFunction *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse:
		((_Bsdsysservice__GetUsersForAppleResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple:
		((_Bsdsysservice__GetUsersForApple *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse:
		((_Bsdsysservice__VerifyUserResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser:
		((_Bsdsysservice__VerifyUser *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity:
		((Bsdsysservice__Comm_USCOREemployeeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity:
		((Bsdsysservice__Comm_USCOREdepartmentEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		((Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		((Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity:
		((Bsdsysservice__V_USCOREComm_USCOREUserListEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		((Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		((Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity:
		((Bsdsysservice__RtmTypeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity:
		((Bsdsysservice__ArrayOfRtmTypeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity:
		((Bsdsysservice__OptResultOfRtmTypeEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity:
		((Bsdsysservice__AlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity:
		((Bsdsysservice__ArrayOfAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity:
		((Bsdsysservice__OptResultOfAlertEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString:
		((Bsdsysservice__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString:
		((Bsdsysservice__OptResultOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean:
		((Bsdsysservice__ArrayOfBoolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean:
		((Bsdsysservice__OptResultOfBoolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity:
		((Bsdsysservice__UserForAppleEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity:
		((Bsdsysservice__ArrayOfUserForAppleEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity:
		((Bsdsysservice__OptResultOfUserForAppleEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity:
		((Bsdsysservice__Comm_USCOREuserEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity:
		((Bsdsysservice__ArrayOfComm_USCOREuserEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity:
		((Bsdsysservice__OptResultOfComm_USCOREuserEntity *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_Bsdsysservice_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList:
		soap_serialize___Bsdsysservice__GetUserList(soap, (const struct __Bsdsysservice__GetUserList *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAllUserID:
		soap_serialize___Bsdsysservice__GetAllUserID(soap, (const struct __Bsdsysservice__GetAllUserID *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetDepartmentList3:
		soap_serialize___Bsdsysservice__GetDepartmentList3(soap, (const struct __Bsdsysservice__GetDepartmentList3 *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList3:
		soap_serialize___Bsdsysservice__GetUserList3(soap, (const struct __Bsdsysservice__GetUserList3 *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions3:
		soap_serialize___Bsdsysservice__GetRegions3(soap, (const struct __Bsdsysservice__GetRegions3 *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions:
		soap_serialize___Bsdsysservice__GetRegions(soap, (const struct __Bsdsysservice__GetRegions *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctions3:
		soap_serialize___Bsdsysservice__GetFunctions3(soap, (const struct __Bsdsysservice__GetFunctions3 *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctionsByUserId:
		soap_serialize___Bsdsysservice__GetFunctionsByUserId(soap, (const struct __Bsdsysservice__GetFunctionsByUserId *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetMobileByUserId:
		soap_serialize___Bsdsysservice__GetMobileByUserId(soap, (const struct __Bsdsysservice__GetMobileByUserId *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__WriteLog:
		soap_serialize___Bsdsysservice__WriteLog(soap, (const struct __Bsdsysservice__WriteLog *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUnSendMsg:
		soap_serialize___Bsdsysservice__GetUnSendMsg(soap, (const struct __Bsdsysservice__GetUnSendMsg *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__AlertMsgDirect:
		soap_serialize___Bsdsysservice__AlertMsgDirect(soap, (const struct __Bsdsysservice__AlertMsgDirect *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetConnString:
		soap_serialize___Bsdsysservice__GetConnString(soap, (const struct __Bsdsysservice__GetConnString *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAppSetting:
		soap_serialize___Bsdsysservice__GetAppSetting(soap, (const struct __Bsdsysservice__GetAppSetting *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetServerTime:
		soap_serialize___Bsdsysservice__GetServerTime(soap, (const struct __Bsdsysservice__GetServerTime *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyFunction:
		soap_serialize___Bsdsysservice__VerifyFunction(soap, (const struct __Bsdsysservice__VerifyFunction *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUsersForApple:
		soap_serialize___Bsdsysservice__GetUsersForApple(soap, (const struct __Bsdsysservice__GetUsersForApple *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyUser:
		soap_serialize___Bsdsysservice__VerifyUser(soap, (const struct __Bsdsysservice__VerifyUser *)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserListResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetUserListResponse(soap, (_Bsdsysservice__GetUserListResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList:
		soap_serialize_PointerTo_Bsdsysservice__GetUserList(soap, (_Bsdsysservice__GetUserList *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserIDResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetAllUserIDResponse(soap, (_Bsdsysservice__GetAllUserIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserID:
		soap_serialize_PointerTo_Bsdsysservice__GetAllUserID(soap, (_Bsdsysservice__GetAllUserID *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3Response:
		soap_serialize_PointerTo_Bsdsysservice__GetDepartmentList3Response(soap, (_Bsdsysservice__GetDepartmentList3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3:
		soap_serialize_PointerTo_Bsdsysservice__GetDepartmentList3(soap, (_Bsdsysservice__GetDepartmentList3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3Response:
		soap_serialize_PointerTo_Bsdsysservice__GetUserList3Response(soap, (_Bsdsysservice__GetUserList3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3:
		soap_serialize_PointerTo_Bsdsysservice__GetUserList3(soap, (_Bsdsysservice__GetUserList3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3Response:
		soap_serialize_PointerTo_Bsdsysservice__GetRegions3Response(soap, (_Bsdsysservice__GetRegions3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3:
		soap_serialize_PointerTo_Bsdsysservice__GetRegions3(soap, (_Bsdsysservice__GetRegions3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegionsResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetRegionsResponse(soap, (_Bsdsysservice__GetRegionsResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions:
		soap_serialize_PointerTo_Bsdsysservice__GetRegions(soap, (_Bsdsysservice__GetRegions *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3Response:
		soap_serialize_PointerTo_Bsdsysservice__GetFunctions3Response(soap, (_Bsdsysservice__GetFunctions3Response *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3:
		soap_serialize_PointerTo_Bsdsysservice__GetFunctions3(soap, (_Bsdsysservice__GetFunctions3 *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(soap, (_Bsdsysservice__GetFunctionsByUserIdResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserId:
		soap_serialize_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, (_Bsdsysservice__GetFunctionsByUserId *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserIdResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(soap, (_Bsdsysservice__GetMobileByUserIdResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserId:
		soap_serialize_PointerTo_Bsdsysservice__GetMobileByUserId(soap, (_Bsdsysservice__GetMobileByUserId *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLogResponse:
		soap_serialize_PointerTo_Bsdsysservice__WriteLogResponse(soap, (_Bsdsysservice__WriteLogResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLog:
		soap_serialize_PointerTo_Bsdsysservice__WriteLog(soap, (_Bsdsysservice__WriteLog *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsgResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetUnSendMsgResponse(soap, (_Bsdsysservice__GetUnSendMsgResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsg:
		soap_serialize_PointerTo_Bsdsysservice__GetUnSendMsg(soap, (_Bsdsysservice__GetUnSendMsg *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirectResponse:
		soap_serialize_PointerTo_Bsdsysservice__AlertMsgDirectResponse(soap, (_Bsdsysservice__AlertMsgDirectResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirect:
		soap_serialize_PointerTo_Bsdsysservice__AlertMsgDirect(soap, (_Bsdsysservice__AlertMsgDirect *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnStringResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetConnStringResponse(soap, (_Bsdsysservice__GetConnStringResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnString:
		soap_serialize_PointerTo_Bsdsysservice__GetConnString(soap, (_Bsdsysservice__GetConnString *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSettingResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetAppSettingResponse(soap, (_Bsdsysservice__GetAppSettingResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSetting:
		soap_serialize_PointerTo_Bsdsysservice__GetAppSetting(soap, (_Bsdsysservice__GetAppSetting *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTimeResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetServerTimeResponse(soap, (_Bsdsysservice__GetServerTimeResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTime:
		soap_serialize_PointerTo_Bsdsysservice__GetServerTime(soap, (_Bsdsysservice__GetServerTime *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunctionResponse:
		soap_serialize_PointerTo_Bsdsysservice__VerifyFunctionResponse(soap, (_Bsdsysservice__VerifyFunctionResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunction:
		soap_serialize_PointerTo_Bsdsysservice__VerifyFunction(soap, (_Bsdsysservice__VerifyFunction *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForAppleResponse:
		soap_serialize_PointerTo_Bsdsysservice__GetUsersForAppleResponse(soap, (_Bsdsysservice__GetUsersForAppleResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForApple:
		soap_serialize_PointerTo_Bsdsysservice__GetUsersForApple(soap, (_Bsdsysservice__GetUsersForApple *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUserResponse:
		soap_serialize_PointerTo_Bsdsysservice__VerifyUserResponse(soap, (_Bsdsysservice__VerifyUserResponse *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUser:
		soap_serialize_PointerTo_Bsdsysservice__VerifyUser(soap, (_Bsdsysservice__VerifyUser *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		soap_serialize_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		soap_serialize_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfRtmTypeEntity:
		soap_serialize_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, (Bsdsysservice__OptResultOfRtmTypeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfAlertEntity:
		soap_serialize_PointerToBsdsysservice__OptResultOfAlertEntity(soap, (Bsdsysservice__OptResultOfAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfString:
		soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, (Bsdsysservice__OptResultOfString *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfBoolean:
		soap_serialize_PointerToBsdsysservice__OptResultOfBoolean(soap, (Bsdsysservice__OptResultOfBoolean *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfUserForAppleEntity:
		soap_serialize_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, (Bsdsysservice__OptResultOfUserForAppleEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity:
		soap_serialize_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, (Bsdsysservice__OptResultOfComm_USCOREuserEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREemployeeEntity:
		soap_serialize_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, (Bsdsysservice__Comm_USCOREemployeeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity:
		soap_serialize_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, (Bsdsysservice__Comm_USCOREdepartmentEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity:
		soap_serialize_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, (Bsdsysservice__Comm_USCOREdepartmentEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		soap_serialize_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity:
		soap_serialize_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, (Bsdsysservice__V_USCOREComm_USCOREUserListEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity:
		soap_serialize_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, (Bsdsysservice__V_USCOREComm_USCOREUserListEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		soap_serialize_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__RtmTypeEntity:
		soap_serialize_PointerToPointerToBsdsysservice__RtmTypeEntity(soap, (Bsdsysservice__RtmTypeEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity:
		soap_serialize_PointerToBsdsysservice__RtmTypeEntity(soap, (Bsdsysservice__RtmTypeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfRtmTypeEntity:
		soap_serialize_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, (Bsdsysservice__ArrayOfRtmTypeEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__AlertEntity:
		soap_serialize_PointerToPointerToBsdsysservice__AlertEntity(soap, (Bsdsysservice__AlertEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity:
		soap_serialize_PointerToBsdsysservice__AlertEntity(soap, (Bsdsysservice__AlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfAlertEntity:
		soap_serialize_PointerToBsdsysservice__ArrayOfAlertEntity(soap, (Bsdsysservice__ArrayOfAlertEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfString:
		soap_serialize_PointerToBsdsysservice__ArrayOfString(soap, (Bsdsysservice__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerTobool:
		soap_serialize_PointerTobool(soap, (bool *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfBoolean:
		soap_serialize_PointerToBsdsysservice__ArrayOfBoolean(soap, (Bsdsysservice__ArrayOfBoolean *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__UserForAppleEntity:
		soap_serialize_PointerToPointerToBsdsysservice__UserForAppleEntity(soap, (Bsdsysservice__UserForAppleEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity:
		soap_serialize_PointerToBsdsysservice__UserForAppleEntity(soap, (Bsdsysservice__UserForAppleEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfUserForAppleEntity:
		soap_serialize_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, (Bsdsysservice__ArrayOfUserForAppleEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity:
		soap_serialize_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(soap, (Bsdsysservice__Comm_USCOREuserEntity **const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity:
		soap_serialize_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, (Bsdsysservice__Comm_USCOREuserEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity:
		soap_serialize_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, (Bsdsysservice__ArrayOfComm_USCOREuserEntity *const*)ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 Bsdsysservice_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_Bsdsysservice_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity:
		return (void*)soap_instantiate_Bsdsysservice__Comm_USCOREuserEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfUserForAppleEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfUserForAppleEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity:
		return (void*)soap_instantiate_Bsdsysservice__UserForAppleEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfBoolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfBoolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfAlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity:
		return (void*)soap_instantiate_Bsdsysservice__AlertEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfRtmTypeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfRtmTypeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity:
		return (void*)soap_instantiate_Bsdsysservice__RtmTypeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity:
		return (void*)soap_instantiate_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		return (void*)soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		return (void*)soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity:
		return (void*)soap_instantiate_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity:
		return (void*)soap_instantiate_Bsdsysservice__Comm_USCOREemployeeEntity(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser:
		return (void*)soap_instantiate__Bsdsysservice__VerifyUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse:
		return (void*)soap_instantiate__Bsdsysservice__VerifyUserResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple:
		return (void*)soap_instantiate__Bsdsysservice__GetUsersForApple(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetUsersForAppleResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction:
		return (void*)soap_instantiate__Bsdsysservice__VerifyFunction(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse:
		return (void*)soap_instantiate__Bsdsysservice__VerifyFunctionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime:
		return (void*)soap_instantiate__Bsdsysservice__GetServerTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetServerTimeResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting:
		return (void*)soap_instantiate__Bsdsysservice__GetAppSetting(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetAppSettingResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString:
		return (void*)soap_instantiate__Bsdsysservice__GetConnString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetConnStringResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect:
		return (void*)soap_instantiate__Bsdsysservice__AlertMsgDirect(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse:
		return (void*)soap_instantiate__Bsdsysservice__AlertMsgDirectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg:
		return (void*)soap_instantiate__Bsdsysservice__GetUnSendMsg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetUnSendMsgResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog:
		return (void*)soap_instantiate__Bsdsysservice__WriteLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse:
		return (void*)soap_instantiate__Bsdsysservice__WriteLogResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId:
		return (void*)soap_instantiate__Bsdsysservice__GetMobileByUserId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetMobileByUserIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId:
		return (void*)soap_instantiate__Bsdsysservice__GetFunctionsByUserId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetFunctionsByUserIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3:
		return (void*)soap_instantiate__Bsdsysservice__GetFunctions3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response:
		return (void*)soap_instantiate__Bsdsysservice__GetFunctions3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions:
		return (void*)soap_instantiate__Bsdsysservice__GetRegions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetRegionsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3:
		return (void*)soap_instantiate__Bsdsysservice__GetRegions3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response:
		return (void*)soap_instantiate__Bsdsysservice__GetRegions3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3:
		return (void*)soap_instantiate__Bsdsysservice__GetUserList3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response:
		return (void*)soap_instantiate__Bsdsysservice__GetUserList3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3:
		return (void*)soap_instantiate__Bsdsysservice__GetDepartmentList3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response:
		return (void*)soap_instantiate__Bsdsysservice__GetDepartmentList3Response(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID:
		return (void*)soap_instantiate__Bsdsysservice__GetAllUserID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetAllUserIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList:
		return (void*)soap_instantiate__Bsdsysservice__GetUserList(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse:
		return (void*)soap_instantiate__Bsdsysservice__GetUserListResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyUser:
		return (void*)soap_instantiate___Bsdsysservice__VerifyUser(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUsersForApple:
		return (void*)soap_instantiate___Bsdsysservice__GetUsersForApple(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyFunction:
		return (void*)soap_instantiate___Bsdsysservice__VerifyFunction(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetServerTime:
		return (void*)soap_instantiate___Bsdsysservice__GetServerTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAppSetting:
		return (void*)soap_instantiate___Bsdsysservice__GetAppSetting(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetConnString:
		return (void*)soap_instantiate___Bsdsysservice__GetConnString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__AlertMsgDirect:
		return (void*)soap_instantiate___Bsdsysservice__AlertMsgDirect(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUnSendMsg:
		return (void*)soap_instantiate___Bsdsysservice__GetUnSendMsg(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__WriteLog:
		return (void*)soap_instantiate___Bsdsysservice__WriteLog(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetMobileByUserId:
		return (void*)soap_instantiate___Bsdsysservice__GetMobileByUserId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctionsByUserId:
		return (void*)soap_instantiate___Bsdsysservice__GetFunctionsByUserId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctions3:
		return (void*)soap_instantiate___Bsdsysservice__GetFunctions3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions:
		return (void*)soap_instantiate___Bsdsysservice__GetRegions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions3:
		return (void*)soap_instantiate___Bsdsysservice__GetRegions3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList3:
		return (void*)soap_instantiate___Bsdsysservice__GetUserList3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetDepartmentList3:
		return (void*)soap_instantiate___Bsdsysservice__GetDepartmentList3(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAllUserID:
		return (void*)soap_instantiate___Bsdsysservice__GetAllUserID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList:
		return (void*)soap_instantiate___Bsdsysservice__GetUserList(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_Bsdsysservice_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 Bsdsysservice_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_Bsdsysservice_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfComm_USCOREuserEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfComm_USCOREuserEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfComm_USCOREuserEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfComm_USCOREuserEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__Comm_USCOREuserEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__Comm_USCOREuserEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfUserForAppleEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfUserForAppleEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfUserForAppleEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfUserForAppleEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__UserForAppleEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__UserForAppleEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfBoolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfBoolean*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfBoolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfBoolean*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfString*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfString*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfAlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfAlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__AlertEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__AlertEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfRtmTypeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfRtmTypeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfRtmTypeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfRtmTypeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__RtmTypeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__RtmTypeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__Comm_USCOREdepartmentEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__Comm_USCOREdepartmentEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity:
		if (p->size < 0)
			SOAP_DELETE((Bsdsysservice__Comm_USCOREemployeeEntity*)p->ptr);
		else
			SOAP_DELETE_ARRAY((Bsdsysservice__Comm_USCOREemployeeEntity*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__VerifyUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__VerifyUser*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__VerifyUserResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__VerifyUserResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUsersForApple*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUsersForApple*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUsersForAppleResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUsersForAppleResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__VerifyFunction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__VerifyFunction*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__VerifyFunctionResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__VerifyFunctionResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetServerTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetServerTime*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetServerTimeResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetServerTimeResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetAppSetting*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetAppSetting*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetAppSettingResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetAppSettingResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetConnString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetConnString*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetConnStringResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetConnStringResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__AlertMsgDirect*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__AlertMsgDirect*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__AlertMsgDirectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__AlertMsgDirectResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUnSendMsg*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUnSendMsg*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUnSendMsgResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUnSendMsgResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__WriteLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__WriteLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__WriteLogResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__WriteLogResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetMobileByUserId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetMobileByUserId*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetMobileByUserIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetMobileByUserIdResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetFunctionsByUserId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetFunctionsByUserId*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetFunctionsByUserIdResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetFunctionsByUserIdResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetFunctions3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetFunctions3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetFunctions3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetFunctions3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetRegions*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetRegions*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetRegionsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetRegionsResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetRegions3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetRegions3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetRegions3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetRegions3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUserList3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUserList3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUserList3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUserList3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetDepartmentList3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetDepartmentList3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetDepartmentList3Response*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetDepartmentList3Response*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetAllUserID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetAllUserID*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetAllUserIDResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetAllUserIDResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUserList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUserList*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse:
		if (p->size < 0)
			SOAP_DELETE((_Bsdsysservice__GetUserListResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_Bsdsysservice__GetUserListResponse*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyUser:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__VerifyUser*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__VerifyUser*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUsersForApple:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetUsersForApple*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetUsersForApple*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyFunction:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__VerifyFunction*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__VerifyFunction*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetServerTime:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetServerTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetServerTime*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAppSetting:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetAppSetting*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetAppSetting*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetConnString:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetConnString*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetConnString*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__AlertMsgDirect:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__AlertMsgDirect*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__AlertMsgDirect*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUnSendMsg:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetUnSendMsg*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetUnSendMsg*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__WriteLog:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__WriteLog*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__WriteLog*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetMobileByUserId:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetMobileByUserId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetMobileByUserId*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctionsByUserId:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetFunctionsByUserId*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetFunctionsByUserId*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctions3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetFunctions3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetFunctions3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetRegions*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetRegions*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetRegions3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetRegions3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetUserList3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetUserList3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetDepartmentList3:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetDepartmentList3*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetDepartmentList3*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAllUserID:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetAllUserID*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetAllUserID*)p->ptr);
		break;
	case SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList:
		if (p->size < 0)
			SOAP_DELETE((struct __Bsdsysservice__GetUserList*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __Bsdsysservice__GetUserList*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_Bsdsysservice_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, Bsdsysservice_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_Bsdsysservice_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_Bsdsysservice_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_Bsdsysservice_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_Bsdsysservice_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_Bsdsysservice_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_Bsdsysservice_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Bsdsysservice__LogType(struct soap *soap, enum Bsdsysservice__LogType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Bsdsysservice__LogType
	*a = SOAP_DEFAULT_Bsdsysservice__LogType;
#else
	*a = (enum Bsdsysservice__LogType)0;
#endif
}

static const struct soap_code_map soap_codes_Bsdsysservice__LogType[] =
{	{ (long)Bsdsysservice__LogType__Error, "Error" },
	{ (long)Bsdsysservice__LogType__Warning, "Warning" },
	{ (long)Bsdsysservice__LogType__Info, "Info" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_Bsdsysservice__LogType2s(struct soap *soap, enum Bsdsysservice__LogType n)
{	const char *s = soap_code_str(soap_codes_Bsdsysservice__LogType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__LogType(struct soap *soap, const char *tag, int id, const enum Bsdsysservice__LogType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType), type) || soap_send(soap, soap_Bsdsysservice__LogType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2Bsdsysservice__LogType(struct soap *soap, const char *s, enum Bsdsysservice__LogType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_Bsdsysservice__LogType, s);
	if (map)
		*a = (enum Bsdsysservice__LogType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 2)))
			return soap->error = SOAP_TYPE;
		*a = (enum Bsdsysservice__LogType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum Bsdsysservice__LogType * SOAP_FMAC4 soap_in_Bsdsysservice__LogType(struct soap *soap, const char *tag, enum Bsdsysservice__LogType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum Bsdsysservice__LogType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType, sizeof(enum Bsdsysservice__LogType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2Bsdsysservice__LogType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum Bsdsysservice__LogType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType, 0, sizeof(enum Bsdsysservice__LogType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Bsdsysservice__LogType(struct soap *soap, const enum Bsdsysservice__LogType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__LogType);
	if (soap_out_Bsdsysservice__LogType(soap, tag?tag:"Bsdsysservice:LogType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum Bsdsysservice__LogType * SOAP_FMAC4 soap_get_Bsdsysservice__LogType(struct soap *soap, enum Bsdsysservice__LogType *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__LogType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_Bsdsysservice__SourceType(struct soap *soap, enum Bsdsysservice__SourceType *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_Bsdsysservice__SourceType
	*a = SOAP_DEFAULT_Bsdsysservice__SourceType;
#else
	*a = (enum Bsdsysservice__SourceType)0;
#endif
}

static const struct soap_code_map soap_codes_Bsdsysservice__SourceType[] =
{	{ (long)Bsdsysservice__SourceType__xDMS, "xDMS" },
	{ (long)Bsdsysservice__SourceType__xRMS, "xRMS" },
	{ (long)Bsdsysservice__SourceType__xMAS, "xMAS" },
	{ (long)Bsdsysservice__SourceType__xECS, "xECS" },
	{ (long)Bsdsysservice__SourceType__xBSD, "xBSD" },
	{ (long)Bsdsysservice__SourceType__xFRS, "xFRS" },
	{ (long)Bsdsysservice__SourceType__xSMS, "xSMS" },
	{ (long)Bsdsysservice__SourceType__xLES, "xLES" },
	{ (long)Bsdsysservice__SourceType__xOAS, "xOAS" },
	{ (long)Bsdsysservice__SourceType__xGIS, "xGIS" },
	{ (long)Bsdsysservice__SourceType__xCASE, "xCASE" },
	{ (long)Bsdsysservice__SourceType__xWF, "xWF" },
	{ (long)Bsdsysservice__SourceType__xNULL, "xNULL" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_Bsdsysservice__SourceType2s(struct soap *soap, enum Bsdsysservice__SourceType n)
{	const char *s = soap_code_str(soap_codes_Bsdsysservice__SourceType, (long)n);
	if (s)
		return s;
	return soap_long2s(soap, (long)n);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__SourceType(struct soap *soap, const char *tag, int id, const enum Bsdsysservice__SourceType *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType), type) || soap_send(soap, soap_Bsdsysservice__SourceType2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2Bsdsysservice__SourceType(struct soap *soap, const char *s, enum Bsdsysservice__SourceType *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_Bsdsysservice__SourceType, s);
	if (map)
		*a = (enum Bsdsysservice__SourceType)map->code;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || ((soap->mode & SOAP_XML_STRICT) && (n < 0 || n > 12)))
			return soap->error = SOAP_TYPE;
		*a = (enum Bsdsysservice__SourceType)n;
	}
	return SOAP_OK;
}

SOAP_FMAC3 enum Bsdsysservice__SourceType * SOAP_FMAC4 soap_in_Bsdsysservice__SourceType(struct soap *soap, const char *tag, enum Bsdsysservice__SourceType *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (enum Bsdsysservice__SourceType *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType, sizeof(enum Bsdsysservice__SourceType), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2Bsdsysservice__SourceType(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (enum Bsdsysservice__SourceType *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType, 0, sizeof(enum Bsdsysservice__SourceType), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_Bsdsysservice__SourceType(struct soap *soap, const enum Bsdsysservice__SourceType *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__SourceType);
	if (soap_out_Bsdsysservice__SourceType(soap, tag?tag:"Bsdsysservice:SourceType", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 enum Bsdsysservice__SourceType * SOAP_FMAC4 soap_get_Bsdsysservice__SourceType(struct soap *soap, enum Bsdsysservice__SourceType *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__SourceType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _Bsdsysservice__GetUserListResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetUserListResponse::GetUserListResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUserListResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetUserListResponse::GetUserListResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetUserListResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUserListResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUserListResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUserListResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse), type))
		return soap->error;
	if (a->GetUserListResult)
		soap_element_result(soap, "Bsdsysservice:GetUserListResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetUserListResult", -1, &(a->_Bsdsysservice__GetUserListResponse::GetUserListResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUserListResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUserListResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserListResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetUserListResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetUserListResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUserListResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse, sizeof(_Bsdsysservice__GetUserListResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUserListResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetUserListResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetUserListResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetUserListResult", &(a->_Bsdsysservice__GetUserListResponse::GetUserListResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetUserListResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetUserListResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUserListResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse, 0, sizeof(_Bsdsysservice__GetUserListResponse), 0, soap_copy__Bsdsysservice__GetUserListResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUserListResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUserListResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUserListResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUserListResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserListResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetUserListResponse(struct soap *soap, _Bsdsysservice__GetUserListResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUserListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUserListResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUserListResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUserListResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserListResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUserListResponse);
		((_Bsdsysservice__GetUserListResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserListResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUserListResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUserListResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUserListResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUserListResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUserListResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUserListResponse*)p = *(_Bsdsysservice__GetUserListResponse*)q;
}

void _Bsdsysservice__GetUserList::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUserList::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetUserList::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUserList(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUserList(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUserList *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUserList::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUserList(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList * SOAP_FMAC4 soap_in__Bsdsysservice__GetUserList(struct soap *soap, const char *tag, _Bsdsysservice__GetUserList *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUserList *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList, sizeof(_Bsdsysservice__GetUserList), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUserList *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUserList *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList, 0, sizeof(_Bsdsysservice__GetUserList), 0, soap_copy__Bsdsysservice__GetUserList);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUserList::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUserList", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUserList::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUserList(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList * SOAP_FMAC4 soap_get__Bsdsysservice__GetUserList(struct soap *soap, _Bsdsysservice__GetUserList *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUserList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUserList * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUserList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUserList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserList);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUserList);
		((_Bsdsysservice__GetUserList*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserList[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUserList);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUserList*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUserList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUserList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUserList %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUserList*)p = *(_Bsdsysservice__GetUserList*)q;
}

void _Bsdsysservice__GetAllUserIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetAllUserIDResponse::GetAllUserIDResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetAllUserIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetAllUserIDResponse::GetAllUserIDResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetAllUserIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetAllUserIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetAllUserIDResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetAllUserIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse), type))
		return soap->error;
	if (a->GetAllUserIDResult)
		soap_element_result(soap, "Bsdsysservice:GetAllUserIDResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetAllUserIDResult", -1, &(a->_Bsdsysservice__GetAllUserIDResponse::GetAllUserIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetAllUserIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetAllUserIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserIDResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetAllUserIDResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetAllUserIDResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetAllUserIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse, sizeof(_Bsdsysservice__GetAllUserIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetAllUserIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAllUserIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAllUserIDResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetAllUserIDResult", &(a->_Bsdsysservice__GetAllUserIDResponse::GetAllUserIDResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetAllUserIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetAllUserIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetAllUserIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse, 0, sizeof(_Bsdsysservice__GetAllUserIDResponse), 0, soap_copy__Bsdsysservice__GetAllUserIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetAllUserIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetAllUserIDResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetAllUserIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetAllUserIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserIDResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetAllUserIDResponse(struct soap *soap, _Bsdsysservice__GetAllUserIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetAllUserIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetAllUserIDResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetAllUserIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetAllUserIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAllUserIDResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetAllUserIDResponse);
		((_Bsdsysservice__GetAllUserIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAllUserIDResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetAllUserIDResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetAllUserIDResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetAllUserIDResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetAllUserIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetAllUserIDResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetAllUserIDResponse*)p = *(_Bsdsysservice__GetAllUserIDResponse*)q;
}

void _Bsdsysservice__GetAllUserID::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdsysservice__GetAllUserID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetAllUserID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetAllUserID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetAllUserID(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetAllUserID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetAllUserID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetAllUserID(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserID * SOAP_FMAC4 soap_in__Bsdsysservice__GetAllUserID(struct soap *soap, const char *tag, _Bsdsysservice__GetAllUserID *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetAllUserID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID, sizeof(_Bsdsysservice__GetAllUserID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetAllUserID *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetAllUserID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID, 0, sizeof(_Bsdsysservice__GetAllUserID), 0, soap_copy__Bsdsysservice__GetAllUserID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetAllUserID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetAllUserID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetAllUserID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetAllUserID(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserID * SOAP_FMAC4 soap_get__Bsdsysservice__GetAllUserID(struct soap *soap, _Bsdsysservice__GetAllUserID *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetAllUserID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetAllUserID * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetAllUserID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetAllUserID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAllUserID);
		if (size)
			*size = sizeof(_Bsdsysservice__GetAllUserID);
		((_Bsdsysservice__GetAllUserID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAllUserID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetAllUserID);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetAllUserID*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetAllUserID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetAllUserID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetAllUserID %p -> %p\n", q, p));
	*(_Bsdsysservice__GetAllUserID*)p = *(_Bsdsysservice__GetAllUserID*)q;
}

void _Bsdsysservice__GetDepartmentList3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetDepartmentList3Response::GetDepartmentList3Result = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetDepartmentList3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, &this->_Bsdsysservice__GetDepartmentList3Response::GetDepartmentList3Result);
	/* transient soap skipped */
}

int _Bsdsysservice__GetDepartmentList3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetDepartmentList3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetDepartmentList3Response(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetDepartmentList3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response), type))
		return soap->error;
	if (a->GetDepartmentList3Result)
		soap_element_result(soap, "Bsdsysservice:GetDepartmentList3Result");
	if (soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, "Bsdsysservice:GetDepartmentList3Result", -1, &(a->_Bsdsysservice__GetDepartmentList3Response::GetDepartmentList3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetDepartmentList3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetDepartmentList3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3Response * SOAP_FMAC4 soap_in__Bsdsysservice__GetDepartmentList3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetDepartmentList3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetDepartmentList3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response, sizeof(_Bsdsysservice__GetDepartmentList3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetDepartmentList3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetDepartmentList3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetDepartmentList3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, "Bsdsysservice:GetDepartmentList3Result", &(a->_Bsdsysservice__GetDepartmentList3Response::GetDepartmentList3Result), "Bsdsysservice:OptResultOfComm_departmentEntity"))
				{	soap_flag_GetDepartmentList3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetDepartmentList3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetDepartmentList3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response, 0, sizeof(_Bsdsysservice__GetDepartmentList3Response), 0, soap_copy__Bsdsysservice__GetDepartmentList3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetDepartmentList3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetDepartmentList3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetDepartmentList3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetDepartmentList3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3Response * SOAP_FMAC4 soap_get__Bsdsysservice__GetDepartmentList3Response(struct soap *soap, _Bsdsysservice__GetDepartmentList3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetDepartmentList3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetDepartmentList3Response * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetDepartmentList3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetDepartmentList3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetDepartmentList3Response);
		if (size)
			*size = sizeof(_Bsdsysservice__GetDepartmentList3Response);
		((_Bsdsysservice__GetDepartmentList3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetDepartmentList3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetDepartmentList3Response);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetDepartmentList3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetDepartmentList3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetDepartmentList3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetDepartmentList3Response %p -> %p\n", q, p));
	*(_Bsdsysservice__GetDepartmentList3Response*)p = *(_Bsdsysservice__GetDepartmentList3Response*)q;
}

void _Bsdsysservice__GetDepartmentList3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetDepartmentList3::update);
	/* transient soap skipped */
}

void _Bsdsysservice__GetDepartmentList3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetDepartmentList3::update, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetDepartmentList3::update);
	/* transient soap skipped */
}

int _Bsdsysservice__GetDepartmentList3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetDepartmentList3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetDepartmentList3(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetDepartmentList3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:update", -1, &(a->_Bsdsysservice__GetDepartmentList3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetDepartmentList3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetDepartmentList3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3 * SOAP_FMAC4 soap_in__Bsdsysservice__GetDepartmentList3(struct soap *soap, const char *tag, _Bsdsysservice__GetDepartmentList3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetDepartmentList3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3, sizeof(_Bsdsysservice__GetDepartmentList3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetDepartmentList3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:update", &(a->_Bsdsysservice__GetDepartmentList3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetDepartmentList3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3, 0, sizeof(_Bsdsysservice__GetDepartmentList3), 0, soap_copy__Bsdsysservice__GetDepartmentList3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetDepartmentList3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetDepartmentList3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetDepartmentList3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetDepartmentList3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3 * SOAP_FMAC4 soap_get__Bsdsysservice__GetDepartmentList3(struct soap *soap, _Bsdsysservice__GetDepartmentList3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetDepartmentList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetDepartmentList3 * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetDepartmentList3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetDepartmentList3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetDepartmentList3);
		if (size)
			*size = sizeof(_Bsdsysservice__GetDepartmentList3);
		((_Bsdsysservice__GetDepartmentList3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetDepartmentList3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetDepartmentList3);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetDepartmentList3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetDepartmentList3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetDepartmentList3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetDepartmentList3 %p -> %p\n", q, p));
	*(_Bsdsysservice__GetDepartmentList3*)p = *(_Bsdsysservice__GetDepartmentList3*)q;
}

void _Bsdsysservice__GetUserList3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetUserList3Response::GetUserList3Result = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUserList3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, &this->_Bsdsysservice__GetUserList3Response::GetUserList3Result);
	/* transient soap skipped */
}

int _Bsdsysservice__GetUserList3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUserList3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUserList3Response(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUserList3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response), type))
		return soap->error;
	if (a->GetUserList3Result)
		soap_element_result(soap, "Bsdsysservice:GetUserList3Result");
	if (soap_out_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, "Bsdsysservice:GetUserList3Result", -1, &(a->_Bsdsysservice__GetUserList3Response::GetUserList3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUserList3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUserList3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3Response * SOAP_FMAC4 soap_in__Bsdsysservice__GetUserList3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetUserList3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUserList3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response, sizeof(_Bsdsysservice__GetUserList3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUserList3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetUserList3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetUserList3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, "Bsdsysservice:GetUserList3Result", &(a->_Bsdsysservice__GetUserList3Response::GetUserList3Result), "Bsdsysservice:OptResultOfV_Comm_UserListEntity"))
				{	soap_flag_GetUserList3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetUserList3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUserList3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response, 0, sizeof(_Bsdsysservice__GetUserList3Response), 0, soap_copy__Bsdsysservice__GetUserList3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUserList3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUserList3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUserList3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUserList3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3Response * SOAP_FMAC4 soap_get__Bsdsysservice__GetUserList3Response(struct soap *soap, _Bsdsysservice__GetUserList3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUserList3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUserList3Response * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUserList3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUserList3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserList3Response);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUserList3Response);
		((_Bsdsysservice__GetUserList3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserList3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUserList3Response);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUserList3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUserList3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUserList3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUserList3Response %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUserList3Response*)p = *(_Bsdsysservice__GetUserList3Response*)q;
}

void _Bsdsysservice__GetUserList3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetUserList3::update);
	/* transient soap skipped */
}

void _Bsdsysservice__GetUserList3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetUserList3::update, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetUserList3::update);
	/* transient soap skipped */
}

int _Bsdsysservice__GetUserList3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUserList3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUserList3(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUserList3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:update", -1, &(a->_Bsdsysservice__GetUserList3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUserList3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUserList3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3 * SOAP_FMAC4 soap_in__Bsdsysservice__GetUserList3(struct soap *soap, const char *tag, _Bsdsysservice__GetUserList3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUserList3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3, sizeof(_Bsdsysservice__GetUserList3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUserList3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:update", &(a->_Bsdsysservice__GetUserList3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUserList3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3, 0, sizeof(_Bsdsysservice__GetUserList3), 0, soap_copy__Bsdsysservice__GetUserList3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUserList3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUserList3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUserList3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUserList3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3 * SOAP_FMAC4 soap_get__Bsdsysservice__GetUserList3(struct soap *soap, _Bsdsysservice__GetUserList3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUserList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUserList3 * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUserList3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUserList3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserList3);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUserList3);
		((_Bsdsysservice__GetUserList3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUserList3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUserList3);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUserList3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUserList3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUserList3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUserList3 %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUserList3*)p = *(_Bsdsysservice__GetUserList3*)q;
}

void _Bsdsysservice__GetRegions3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetRegions3Response::GetRegions3Result = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetRegions3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, &this->_Bsdsysservice__GetRegions3Response::GetRegions3Result);
	/* transient soap skipped */
}

int _Bsdsysservice__GetRegions3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetRegions3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetRegions3Response(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetRegions3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response), type))
		return soap->error;
	if (a->GetRegions3Result)
		soap_element_result(soap, "Bsdsysservice:GetRegions3Result");
	if (soap_out_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, "Bsdsysservice:GetRegions3Result", -1, &(a->_Bsdsysservice__GetRegions3Response::GetRegions3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetRegions3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetRegions3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3Response * SOAP_FMAC4 soap_in__Bsdsysservice__GetRegions3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetRegions3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetRegions3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response, sizeof(_Bsdsysservice__GetRegions3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetRegions3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRegions3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRegions3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, "Bsdsysservice:GetRegions3Result", &(a->_Bsdsysservice__GetRegions3Response::GetRegions3Result), "Bsdsysservice:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetRegions3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetRegions3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetRegions3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response, 0, sizeof(_Bsdsysservice__GetRegions3Response), 0, soap_copy__Bsdsysservice__GetRegions3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetRegions3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetRegions3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetRegions3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetRegions3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3Response * SOAP_FMAC4 soap_get__Bsdsysservice__GetRegions3Response(struct soap *soap, _Bsdsysservice__GetRegions3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetRegions3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetRegions3Response * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetRegions3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetRegions3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegions3Response);
		if (size)
			*size = sizeof(_Bsdsysservice__GetRegions3Response);
		((_Bsdsysservice__GetRegions3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegions3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetRegions3Response);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetRegions3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetRegions3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetRegions3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetRegions3Response %p -> %p\n", q, p));
	*(_Bsdsysservice__GetRegions3Response*)p = *(_Bsdsysservice__GetRegions3Response*)q;
}

void _Bsdsysservice__GetRegions3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetRegions3::update);
	/* transient soap skipped */
}

void _Bsdsysservice__GetRegions3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetRegions3::update, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetRegions3::update);
	/* transient soap skipped */
}

int _Bsdsysservice__GetRegions3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetRegions3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetRegions3(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetRegions3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:update", -1, &(a->_Bsdsysservice__GetRegions3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetRegions3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetRegions3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3 * SOAP_FMAC4 soap_in__Bsdsysservice__GetRegions3(struct soap *soap, const char *tag, _Bsdsysservice__GetRegions3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetRegions3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3, sizeof(_Bsdsysservice__GetRegions3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetRegions3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:update", &(a->_Bsdsysservice__GetRegions3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetRegions3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3, 0, sizeof(_Bsdsysservice__GetRegions3), 0, soap_copy__Bsdsysservice__GetRegions3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetRegions3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetRegions3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetRegions3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetRegions3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3 * SOAP_FMAC4 soap_get__Bsdsysservice__GetRegions3(struct soap *soap, _Bsdsysservice__GetRegions3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetRegions3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetRegions3 * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetRegions3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetRegions3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegions3);
		if (size)
			*size = sizeof(_Bsdsysservice__GetRegions3);
		((_Bsdsysservice__GetRegions3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegions3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetRegions3);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetRegions3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetRegions3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetRegions3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetRegions3 %p -> %p\n", q, p));
	*(_Bsdsysservice__GetRegions3*)p = *(_Bsdsysservice__GetRegions3*)q;
}

void _Bsdsysservice__GetRegionsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetRegionsResponse::GetRegionsResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetRegionsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, &this->_Bsdsysservice__GetRegionsResponse::GetRegionsResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetRegionsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetRegionsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetRegionsResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetRegionsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse), type))
		return soap->error;
	if (a->GetRegionsResult)
		soap_element_result(soap, "Bsdsysservice:GetRegionsResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, "Bsdsysservice:GetRegionsResult", -1, &(a->_Bsdsysservice__GetRegionsResponse::GetRegionsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetRegionsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetRegionsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegionsResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetRegionsResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetRegionsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetRegionsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse, sizeof(_Bsdsysservice__GetRegionsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetRegionsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetRegionsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetRegionsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, "Bsdsysservice:GetRegionsResult", &(a->_Bsdsysservice__GetRegionsResponse::GetRegionsResult), "Bsdsysservice:OptResultOfRtmTypeEntity"))
				{	soap_flag_GetRegionsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetRegionsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetRegionsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse, 0, sizeof(_Bsdsysservice__GetRegionsResponse), 0, soap_copy__Bsdsysservice__GetRegionsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetRegionsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetRegionsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetRegionsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetRegionsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegionsResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetRegionsResponse(struct soap *soap, _Bsdsysservice__GetRegionsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetRegionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetRegionsResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetRegionsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetRegionsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegionsResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetRegionsResponse);
		((_Bsdsysservice__GetRegionsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegionsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetRegionsResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetRegionsResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetRegionsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetRegionsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetRegionsResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetRegionsResponse*)p = *(_Bsdsysservice__GetRegionsResponse*)q;
}

void _Bsdsysservice__GetRegions::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetRegions::update);
	/* transient soap skipped */
}

void _Bsdsysservice__GetRegions::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetRegions::update, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetRegions::update);
	/* transient soap skipped */
}

int _Bsdsysservice__GetRegions::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetRegions(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetRegions(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetRegions *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:update", -1, &(a->_Bsdsysservice__GetRegions::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetRegions::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetRegions(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions * SOAP_FMAC4 soap_in__Bsdsysservice__GetRegions(struct soap *soap, const char *tag, _Bsdsysservice__GetRegions *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetRegions *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions, sizeof(_Bsdsysservice__GetRegions), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetRegions *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:update", &(a->_Bsdsysservice__GetRegions::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetRegions *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions, 0, sizeof(_Bsdsysservice__GetRegions), 0, soap_copy__Bsdsysservice__GetRegions);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetRegions::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetRegions", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetRegions::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetRegions(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions * SOAP_FMAC4 soap_get__Bsdsysservice__GetRegions(struct soap *soap, _Bsdsysservice__GetRegions *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetRegions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetRegions * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetRegions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetRegions(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegions);
		if (size)
			*size = sizeof(_Bsdsysservice__GetRegions);
		((_Bsdsysservice__GetRegions*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetRegions[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetRegions);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetRegions*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetRegions*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetRegions(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetRegions %p -> %p\n", q, p));
	*(_Bsdsysservice__GetRegions*)p = *(_Bsdsysservice__GetRegions*)q;
}

void _Bsdsysservice__GetFunctions3Response::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetFunctions3Response::GetFunctions3Result = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetFunctions3Response::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetFunctions3Response::GetFunctions3Result);
	/* transient soap skipped */
}

int _Bsdsysservice__GetFunctions3Response::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetFunctions3Response(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetFunctions3Response(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetFunctions3Response *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response), type))
		return soap->error;
	if (a->GetFunctions3Result)
		soap_element_result(soap, "Bsdsysservice:GetFunctions3Result");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetFunctions3Result", -1, &(a->_Bsdsysservice__GetFunctions3Response::GetFunctions3Result), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetFunctions3Response::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetFunctions3Response(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3Response * SOAP_FMAC4 soap_in__Bsdsysservice__GetFunctions3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctions3Response *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetFunctions3Response *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response, sizeof(_Bsdsysservice__GetFunctions3Response), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetFunctions3Response *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetFunctions3Result1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetFunctions3Result1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetFunctions3Result", &(a->_Bsdsysservice__GetFunctions3Response::GetFunctions3Result), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetFunctions3Result1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetFunctions3Result");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetFunctions3Response *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response, 0, sizeof(_Bsdsysservice__GetFunctions3Response), 0, soap_copy__Bsdsysservice__GetFunctions3Response);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetFunctions3Response::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetFunctions3Response", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetFunctions3Response::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetFunctions3Response(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3Response * SOAP_FMAC4 soap_get__Bsdsysservice__GetFunctions3Response(struct soap *soap, _Bsdsysservice__GetFunctions3Response *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetFunctions3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetFunctions3Response * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetFunctions3Response(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetFunctions3Response(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctions3Response);
		if (size)
			*size = sizeof(_Bsdsysservice__GetFunctions3Response);
		((_Bsdsysservice__GetFunctions3Response*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctions3Response[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetFunctions3Response);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetFunctions3Response*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetFunctions3Response*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetFunctions3Response(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetFunctions3Response %p -> %p\n", q, p));
	*(_Bsdsysservice__GetFunctions3Response*)p = *(_Bsdsysservice__GetFunctions3Response*)q;
}

void _Bsdsysservice__GetFunctions3::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetFunctions3::userID);
	soap_default_std__string(soap, &this->_Bsdsysservice__GetFunctions3::update);
	/* transient soap skipped */
}

void _Bsdsysservice__GetFunctions3::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetFunctions3::userID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetFunctions3::userID);
	soap_embedded(soap, &this->_Bsdsysservice__GetFunctions3::update, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetFunctions3::update);
	/* transient soap skipped */
}

int _Bsdsysservice__GetFunctions3::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetFunctions3(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetFunctions3(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetFunctions3 *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userID", -1, &(a->_Bsdsysservice__GetFunctions3::userID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:update", -1, &(a->_Bsdsysservice__GetFunctions3::update), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetFunctions3::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetFunctions3(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3 * SOAP_FMAC4 soap_in__Bsdsysservice__GetFunctions3(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctions3 *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetFunctions3 *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3, sizeof(_Bsdsysservice__GetFunctions3), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetFunctions3 *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_update1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userID", &(a->_Bsdsysservice__GetFunctions3::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_update1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:update", &(a->_Bsdsysservice__GetFunctions3::update), "xsd:string"))
				{	soap_flag_update1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetFunctions3 *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3, 0, sizeof(_Bsdsysservice__GetFunctions3), 0, soap_copy__Bsdsysservice__GetFunctions3);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetFunctions3::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetFunctions3", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetFunctions3::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetFunctions3(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3 * SOAP_FMAC4 soap_get__Bsdsysservice__GetFunctions3(struct soap *soap, _Bsdsysservice__GetFunctions3 *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetFunctions3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetFunctions3 * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetFunctions3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetFunctions3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctions3);
		if (size)
			*size = sizeof(_Bsdsysservice__GetFunctions3);
		((_Bsdsysservice__GetFunctions3*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctions3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetFunctions3);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetFunctions3*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetFunctions3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetFunctions3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetFunctions3 %p -> %p\n", q, p));
	*(_Bsdsysservice__GetFunctions3*)p = *(_Bsdsysservice__GetFunctions3*)q;
}

void _Bsdsysservice__GetFunctionsByUserIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetFunctionsByUserIdResponse::GetFunctionsByUserIdResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetFunctionsByUserIdResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetFunctionsByUserIdResponse::GetFunctionsByUserIdResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetFunctionsByUserIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetFunctionsByUserIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetFunctionsByUserIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse), type))
		return soap->error;
	if (a->GetFunctionsByUserIdResult)
		soap_element_result(soap, "Bsdsysservice:GetFunctionsByUserIdResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetFunctionsByUserIdResult", -1, &(a->_Bsdsysservice__GetFunctionsByUserIdResponse::GetFunctionsByUserIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetFunctionsByUserIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetFunctionsByUserIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserIdResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctionsByUserIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetFunctionsByUserIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse, sizeof(_Bsdsysservice__GetFunctionsByUserIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetFunctionsByUserIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetFunctionsByUserIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetFunctionsByUserIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetFunctionsByUserIdResult", &(a->_Bsdsysservice__GetFunctionsByUserIdResponse::GetFunctionsByUserIdResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetFunctionsByUserIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetFunctionsByUserIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetFunctionsByUserIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse, 0, sizeof(_Bsdsysservice__GetFunctionsByUserIdResponse), 0, soap_copy__Bsdsysservice__GetFunctionsByUserIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetFunctionsByUserIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetFunctionsByUserIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetFunctionsByUserIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetFunctionsByUserIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserIdResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, _Bsdsysservice__GetFunctionsByUserIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetFunctionsByUserIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetFunctionsByUserIdResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetFunctionsByUserIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctionsByUserIdResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetFunctionsByUserIdResponse);
		((_Bsdsysservice__GetFunctionsByUserIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctionsByUserIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetFunctionsByUserIdResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetFunctionsByUserIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetFunctionsByUserIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetFunctionsByUserIdResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetFunctionsByUserIdResponse*)p = *(_Bsdsysservice__GetFunctionsByUserIdResponse*)q;
}

void _Bsdsysservice__GetFunctionsByUserId::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetFunctionsByUserId::userID);
	/* transient soap skipped */
}

void _Bsdsysservice__GetFunctionsByUserId::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetFunctionsByUserId::userID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetFunctionsByUserId::userID);
	/* transient soap skipped */
}

int _Bsdsysservice__GetFunctionsByUserId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetFunctionsByUserId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetFunctionsByUserId *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userID", -1, &(a->_Bsdsysservice__GetFunctionsByUserId::userID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetFunctionsByUserId::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetFunctionsByUserId(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserId * SOAP_FMAC4 soap_in__Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctionsByUserId *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetFunctionsByUserId *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId, sizeof(_Bsdsysservice__GetFunctionsByUserId), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetFunctionsByUserId *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userID", &(a->_Bsdsysservice__GetFunctionsByUserId::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetFunctionsByUserId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId, 0, sizeof(_Bsdsysservice__GetFunctionsByUserId), 0, soap_copy__Bsdsysservice__GetFunctionsByUserId);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetFunctionsByUserId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetFunctionsByUserId", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetFunctionsByUserId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetFunctionsByUserId(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserId * SOAP_FMAC4 soap_get__Bsdsysservice__GetFunctionsByUserId(struct soap *soap, _Bsdsysservice__GetFunctionsByUserId *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetFunctionsByUserId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetFunctionsByUserId * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetFunctionsByUserId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetFunctionsByUserId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctionsByUserId);
		if (size)
			*size = sizeof(_Bsdsysservice__GetFunctionsByUserId);
		((_Bsdsysservice__GetFunctionsByUserId*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetFunctionsByUserId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetFunctionsByUserId);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetFunctionsByUserId*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetFunctionsByUserId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetFunctionsByUserId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetFunctionsByUserId %p -> %p\n", q, p));
	*(_Bsdsysservice__GetFunctionsByUserId*)p = *(_Bsdsysservice__GetFunctionsByUserId*)q;
}

void _Bsdsysservice__GetMobileByUserIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetMobileByUserIdResponse::GetMobileByUserIdResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetMobileByUserIdResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetMobileByUserIdResponse::GetMobileByUserIdResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetMobileByUserIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetMobileByUserIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetMobileByUserIdResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse), type))
		return soap->error;
	if (a->GetMobileByUserIdResult)
		soap_element_result(soap, "Bsdsysservice:GetMobileByUserIdResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetMobileByUserIdResult", -1, &(a->_Bsdsysservice__GetMobileByUserIdResponse::GetMobileByUserIdResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetMobileByUserIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetMobileByUserIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserIdResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetMobileByUserIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetMobileByUserIdResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse, sizeof(_Bsdsysservice__GetMobileByUserIdResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetMobileByUserIdResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetMobileByUserIdResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMobileByUserIdResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetMobileByUserIdResult", &(a->_Bsdsysservice__GetMobileByUserIdResponse::GetMobileByUserIdResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetMobileByUserIdResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetMobileByUserIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetMobileByUserIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse, 0, sizeof(_Bsdsysservice__GetMobileByUserIdResponse), 0, soap_copy__Bsdsysservice__GetMobileByUserIdResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetMobileByUserIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetMobileByUserIdResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetMobileByUserIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetMobileByUserIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserIdResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, _Bsdsysservice__GetMobileByUserIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetMobileByUserIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetMobileByUserIdResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetMobileByUserIdResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetMobileByUserIdResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetMobileByUserIdResponse);
		((_Bsdsysservice__GetMobileByUserIdResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetMobileByUserIdResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetMobileByUserIdResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetMobileByUserIdResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetMobileByUserIdResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetMobileByUserIdResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetMobileByUserIdResponse*)p = *(_Bsdsysservice__GetMobileByUserIdResponse*)q;
}

void _Bsdsysservice__GetMobileByUserId::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetMobileByUserId::userID);
	/* transient soap skipped */
}

void _Bsdsysservice__GetMobileByUserId::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetMobileByUserId::userID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetMobileByUserId::userID);
	/* transient soap skipped */
}

int _Bsdsysservice__GetMobileByUserId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetMobileByUserId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetMobileByUserId(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetMobileByUserId *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userID", -1, &(a->_Bsdsysservice__GetMobileByUserId::userID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetMobileByUserId::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetMobileByUserId(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserId * SOAP_FMAC4 soap_in__Bsdsysservice__GetMobileByUserId(struct soap *soap, const char *tag, _Bsdsysservice__GetMobileByUserId *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetMobileByUserId *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId, sizeof(_Bsdsysservice__GetMobileByUserId), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetMobileByUserId *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userID", &(a->_Bsdsysservice__GetMobileByUserId::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetMobileByUserId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId, 0, sizeof(_Bsdsysservice__GetMobileByUserId), 0, soap_copy__Bsdsysservice__GetMobileByUserId);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetMobileByUserId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetMobileByUserId", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetMobileByUserId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetMobileByUserId(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserId * SOAP_FMAC4 soap_get__Bsdsysservice__GetMobileByUserId(struct soap *soap, _Bsdsysservice__GetMobileByUserId *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetMobileByUserId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetMobileByUserId * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetMobileByUserId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetMobileByUserId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetMobileByUserId);
		if (size)
			*size = sizeof(_Bsdsysservice__GetMobileByUserId);
		((_Bsdsysservice__GetMobileByUserId*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetMobileByUserId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetMobileByUserId);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetMobileByUserId*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetMobileByUserId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetMobileByUserId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetMobileByUserId %p -> %p\n", q, p));
	*(_Bsdsysservice__GetMobileByUserId*)p = *(_Bsdsysservice__GetMobileByUserId*)q;
}

void _Bsdsysservice__WriteLogResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__WriteLogResponse::WriteLogResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__WriteLogResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__WriteLogResponse::WriteLogResult);
	/* transient soap skipped */
}

int _Bsdsysservice__WriteLogResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__WriteLogResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__WriteLogResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__WriteLogResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse), type))
		return soap->error;
	if (a->WriteLogResult)
		soap_element_result(soap, "Bsdsysservice:WriteLogResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:WriteLogResult", -1, &(a->_Bsdsysservice__WriteLogResponse::WriteLogResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__WriteLogResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__WriteLogResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__WriteLogResponse * SOAP_FMAC4 soap_in__Bsdsysservice__WriteLogResponse(struct soap *soap, const char *tag, _Bsdsysservice__WriteLogResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__WriteLogResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse, sizeof(_Bsdsysservice__WriteLogResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__WriteLogResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_WriteLogResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WriteLogResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:WriteLogResult", &(a->_Bsdsysservice__WriteLogResponse::WriteLogResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_WriteLogResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:WriteLogResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__WriteLogResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse, 0, sizeof(_Bsdsysservice__WriteLogResponse), 0, soap_copy__Bsdsysservice__WriteLogResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__WriteLogResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:WriteLogResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__WriteLogResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__WriteLogResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__WriteLogResponse * SOAP_FMAC4 soap_get__Bsdsysservice__WriteLogResponse(struct soap *soap, _Bsdsysservice__WriteLogResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__WriteLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__WriteLogResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__WriteLogResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__WriteLogResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__WriteLogResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__WriteLogResponse);
		((_Bsdsysservice__WriteLogResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__WriteLogResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__WriteLogResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__WriteLogResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__WriteLogResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__WriteLogResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__WriteLogResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__WriteLogResponse*)p = *(_Bsdsysservice__WriteLogResponse*)q;
}

void _Bsdsysservice__WriteLog::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__WriteLog::userID);
	soap_default_std__string(soap, &this->_Bsdsysservice__WriteLog::userName);
	soap_default_std__string(soap, &this->_Bsdsysservice__WriteLog::hostIP);
	soap_default_Bsdsysservice__SourceType(soap, &this->_Bsdsysservice__WriteLog::sourceType);
	soap_default_std__string(soap, &this->_Bsdsysservice__WriteLog::log);
	soap_default_Bsdsysservice__LogType(soap, &this->_Bsdsysservice__WriteLog::logtype);
	/* transient soap skipped */
}

void _Bsdsysservice__WriteLog::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__WriteLog::userID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__WriteLog::userID);
	soap_embedded(soap, &this->_Bsdsysservice__WriteLog::userName, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__WriteLog::userName);
	soap_embedded(soap, &this->_Bsdsysservice__WriteLog::hostIP, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__WriteLog::hostIP);
	soap_embedded(soap, &this->_Bsdsysservice__WriteLog::log, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__WriteLog::log);
	/* transient soap skipped */
}

int _Bsdsysservice__WriteLog::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__WriteLog(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__WriteLog(struct soap *soap, const char *tag, int id, const _Bsdsysservice__WriteLog *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userID", -1, &(a->_Bsdsysservice__WriteLog::userID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userName", -1, &(a->_Bsdsysservice__WriteLog::userName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:hostIP", -1, &(a->_Bsdsysservice__WriteLog::hostIP), ""))
		return soap->error;
	if (soap_out_Bsdsysservice__SourceType(soap, "Bsdsysservice:sourceType", -1, &(a->_Bsdsysservice__WriteLog::sourceType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:log", -1, &(a->_Bsdsysservice__WriteLog::log), ""))
		return soap->error;
	if (soap_out_Bsdsysservice__LogType(soap, "Bsdsysservice:logtype", -1, &(a->_Bsdsysservice__WriteLog::logtype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__WriteLog::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__WriteLog(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__WriteLog * SOAP_FMAC4 soap_in__Bsdsysservice__WriteLog(struct soap *soap, const char *tag, _Bsdsysservice__WriteLog *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__WriteLog *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog, sizeof(_Bsdsysservice__WriteLog), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__WriteLog *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_userName1 = 1;
	size_t soap_flag_hostIP1 = 1;
	size_t soap_flag_sourceType1 = 1;
	size_t soap_flag_log1 = 1;
	size_t soap_flag_logtype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userID", &(a->_Bsdsysservice__WriteLog::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_userName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userName", &(a->_Bsdsysservice__WriteLog::userName), "xsd:string"))
				{	soap_flag_userName1--;
					continue;
				}
			if (soap_flag_hostIP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:hostIP", &(a->_Bsdsysservice__WriteLog::hostIP), "xsd:string"))
				{	soap_flag_hostIP1--;
					continue;
				}
			if (soap_flag_sourceType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Bsdsysservice__SourceType(soap, "Bsdsysservice:sourceType", &(a->_Bsdsysservice__WriteLog::sourceType), "Bsdsysservice:SourceType"))
				{	soap_flag_sourceType1--;
					continue;
				}
			if (soap_flag_log1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:log", &(a->_Bsdsysservice__WriteLog::log), "xsd:string"))
				{	soap_flag_log1--;
					continue;
				}
			if (soap_flag_logtype1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_Bsdsysservice__LogType(soap, "Bsdsysservice:logtype", &(a->_Bsdsysservice__WriteLog::logtype), "Bsdsysservice:LogType"))
				{	soap_flag_logtype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__WriteLog *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog, 0, sizeof(_Bsdsysservice__WriteLog), 0, soap_copy__Bsdsysservice__WriteLog);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_sourceType1 > 0 || soap_flag_logtype1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdsysservice__WriteLog::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:WriteLog", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__WriteLog::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__WriteLog(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__WriteLog * SOAP_FMAC4 soap_get__Bsdsysservice__WriteLog(struct soap *soap, _Bsdsysservice__WriteLog *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__WriteLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__WriteLog * SOAP_FMAC2 soap_instantiate__Bsdsysservice__WriteLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__WriteLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__WriteLog);
		if (size)
			*size = sizeof(_Bsdsysservice__WriteLog);
		((_Bsdsysservice__WriteLog*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__WriteLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__WriteLog);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__WriteLog*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__WriteLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__WriteLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__WriteLog %p -> %p\n", q, p));
	*(_Bsdsysservice__WriteLog*)p = *(_Bsdsysservice__WriteLog*)q;
}

void _Bsdsysservice__GetUnSendMsgResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetUnSendMsgResponse::GetUnSendMsgResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUnSendMsgResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfAlertEntity(soap, &this->_Bsdsysservice__GetUnSendMsgResponse::GetUnSendMsgResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetUnSendMsgResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUnSendMsgResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUnSendMsgResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse), type))
		return soap->error;
	if (a->GetUnSendMsgResult)
		soap_element_result(soap, "Bsdsysservice:GetUnSendMsgResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfAlertEntity(soap, "Bsdsysservice:GetUnSendMsgResult", -1, &(a->_Bsdsysservice__GetUnSendMsgResponse::GetUnSendMsgResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUnSendMsgResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUnSendMsgResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsgResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetUnSendMsgResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUnSendMsgResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse, sizeof(_Bsdsysservice__GetUnSendMsgResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUnSendMsgResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetUnSendMsgResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetUnSendMsgResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfAlertEntity(soap, "Bsdsysservice:GetUnSendMsgResult", &(a->_Bsdsysservice__GetUnSendMsgResponse::GetUnSendMsgResult), "Bsdsysservice:OptResultOfAlertEntity"))
				{	soap_flag_GetUnSendMsgResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetUnSendMsgResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUnSendMsgResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse, 0, sizeof(_Bsdsysservice__GetUnSendMsgResponse), 0, soap_copy__Bsdsysservice__GetUnSendMsgResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUnSendMsgResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUnSendMsgResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUnSendMsgResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUnSendMsgResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsgResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, _Bsdsysservice__GetUnSendMsgResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUnSendMsgResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUnSendMsgResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUnSendMsgResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUnSendMsgResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUnSendMsgResponse);
		((_Bsdsysservice__GetUnSendMsgResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUnSendMsgResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUnSendMsgResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUnSendMsgResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUnSendMsgResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUnSendMsgResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUnSendMsgResponse*)p = *(_Bsdsysservice__GetUnSendMsgResponse*)q;
}

void _Bsdsysservice__GetUnSendMsg::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUnSendMsg::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetUnSendMsg::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUnSendMsg(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUnSendMsg(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUnSendMsg *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUnSendMsg::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUnSendMsg(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsg * SOAP_FMAC4 soap_in__Bsdsysservice__GetUnSendMsg(struct soap *soap, const char *tag, _Bsdsysservice__GetUnSendMsg *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUnSendMsg *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg, sizeof(_Bsdsysservice__GetUnSendMsg), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUnSendMsg *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUnSendMsg *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg, 0, sizeof(_Bsdsysservice__GetUnSendMsg), 0, soap_copy__Bsdsysservice__GetUnSendMsg);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUnSendMsg::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUnSendMsg", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUnSendMsg::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUnSendMsg(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsg * SOAP_FMAC4 soap_get__Bsdsysservice__GetUnSendMsg(struct soap *soap, _Bsdsysservice__GetUnSendMsg *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUnSendMsg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUnSendMsg * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUnSendMsg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUnSendMsg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUnSendMsg);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUnSendMsg);
		((_Bsdsysservice__GetUnSendMsg*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUnSendMsg[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUnSendMsg);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUnSendMsg*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUnSendMsg*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUnSendMsg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUnSendMsg %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUnSendMsg*)p = *(_Bsdsysservice__GetUnSendMsg*)q;
}

void _Bsdsysservice__AlertMsgDirectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__AlertMsgDirectResponse::AlertMsgDirectResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__AlertMsgDirectResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__AlertMsgDirectResponse::AlertMsgDirectResult);
	/* transient soap skipped */
}

int _Bsdsysservice__AlertMsgDirectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__AlertMsgDirectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__AlertMsgDirectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse), type))
		return soap->error;
	if (a->AlertMsgDirectResult)
		soap_element_result(soap, "Bsdsysservice:AlertMsgDirectResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:AlertMsgDirectResult", -1, &(a->_Bsdsysservice__AlertMsgDirectResponse::AlertMsgDirectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__AlertMsgDirectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__AlertMsgDirectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirectResponse * SOAP_FMAC4 soap_in__Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, const char *tag, _Bsdsysservice__AlertMsgDirectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__AlertMsgDirectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse, sizeof(_Bsdsysservice__AlertMsgDirectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__AlertMsgDirectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_AlertMsgDirectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AlertMsgDirectResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:AlertMsgDirectResult", &(a->_Bsdsysservice__AlertMsgDirectResponse::AlertMsgDirectResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_AlertMsgDirectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:AlertMsgDirectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__AlertMsgDirectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse, 0, sizeof(_Bsdsysservice__AlertMsgDirectResponse), 0, soap_copy__Bsdsysservice__AlertMsgDirectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__AlertMsgDirectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:AlertMsgDirectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__AlertMsgDirectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__AlertMsgDirectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirectResponse * SOAP_FMAC4 soap_get__Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, _Bsdsysservice__AlertMsgDirectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__AlertMsgDirectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__AlertMsgDirectResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__AlertMsgDirectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__AlertMsgDirectResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__AlertMsgDirectResponse);
		((_Bsdsysservice__AlertMsgDirectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__AlertMsgDirectResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__AlertMsgDirectResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__AlertMsgDirectResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__AlertMsgDirectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__AlertMsgDirectResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__AlertMsgDirectResponse*)p = *(_Bsdsysservice__AlertMsgDirectResponse*)q;
}

void _Bsdsysservice__AlertMsgDirect::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_Bsdsysservice__AlertMsgDirect::msgType);
	soap_default_std__string(soap, &this->_Bsdsysservice__AlertMsgDirect::target);
	soap_default_std__string(soap, &this->_Bsdsysservice__AlertMsgDirect::msg);
	/* transient soap skipped */
}

void _Bsdsysservice__AlertMsgDirect::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__AlertMsgDirect::target, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__AlertMsgDirect::target);
	soap_embedded(soap, &this->_Bsdsysservice__AlertMsgDirect::msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__AlertMsgDirect::msg);
	/* transient soap skipped */
}

int _Bsdsysservice__AlertMsgDirect::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__AlertMsgDirect(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__AlertMsgDirect(struct soap *soap, const char *tag, int id, const _Bsdsysservice__AlertMsgDirect *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect), type))
		return soap->error;
	if (soap_out_int(soap, "Bsdsysservice:msgType", -1, &(a->_Bsdsysservice__AlertMsgDirect::msgType), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:target", -1, &(a->_Bsdsysservice__AlertMsgDirect::target), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:msg", -1, &(a->_Bsdsysservice__AlertMsgDirect::msg), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__AlertMsgDirect::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__AlertMsgDirect(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirect * SOAP_FMAC4 soap_in__Bsdsysservice__AlertMsgDirect(struct soap *soap, const char *tag, _Bsdsysservice__AlertMsgDirect *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__AlertMsgDirect *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect, sizeof(_Bsdsysservice__AlertMsgDirect), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__AlertMsgDirect *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_msgType1 = 1;
	size_t soap_flag_target1 = 1;
	size_t soap_flag_msg1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_msgType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "Bsdsysservice:msgType", &(a->_Bsdsysservice__AlertMsgDirect::msgType), "xsd:int"))
				{	soap_flag_msgType1--;
					continue;
				}
			if (soap_flag_target1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:target", &(a->_Bsdsysservice__AlertMsgDirect::target), "xsd:string"))
				{	soap_flag_target1--;
					continue;
				}
			if (soap_flag_msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:msg", &(a->_Bsdsysservice__AlertMsgDirect::msg), "xsd:string"))
				{	soap_flag_msg1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__AlertMsgDirect *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect, 0, sizeof(_Bsdsysservice__AlertMsgDirect), 0, soap_copy__Bsdsysservice__AlertMsgDirect);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_msgType1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdsysservice__AlertMsgDirect::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:AlertMsgDirect", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__AlertMsgDirect::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__AlertMsgDirect(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirect * SOAP_FMAC4 soap_get__Bsdsysservice__AlertMsgDirect(struct soap *soap, _Bsdsysservice__AlertMsgDirect *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__AlertMsgDirect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__AlertMsgDirect * SOAP_FMAC2 soap_instantiate__Bsdsysservice__AlertMsgDirect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__AlertMsgDirect(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__AlertMsgDirect);
		if (size)
			*size = sizeof(_Bsdsysservice__AlertMsgDirect);
		((_Bsdsysservice__AlertMsgDirect*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__AlertMsgDirect[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__AlertMsgDirect);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__AlertMsgDirect*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__AlertMsgDirect*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__AlertMsgDirect(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__AlertMsgDirect %p -> %p\n", q, p));
	*(_Bsdsysservice__AlertMsgDirect*)p = *(_Bsdsysservice__AlertMsgDirect*)q;
}

void _Bsdsysservice__GetConnStringResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetConnStringResponse::GetConnStringResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetConnStringResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetConnStringResponse::GetConnStringResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetConnStringResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetConnStringResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetConnStringResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetConnStringResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse), type))
		return soap->error;
	if (a->GetConnStringResult)
		soap_element_result(soap, "Bsdsysservice:GetConnStringResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetConnStringResult", -1, &(a->_Bsdsysservice__GetConnStringResponse::GetConnStringResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetConnStringResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetConnStringResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetConnStringResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetConnStringResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetConnStringResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetConnStringResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse, sizeof(_Bsdsysservice__GetConnStringResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetConnStringResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetConnStringResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetConnStringResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetConnStringResult", &(a->_Bsdsysservice__GetConnStringResponse::GetConnStringResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetConnStringResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetConnStringResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetConnStringResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse, 0, sizeof(_Bsdsysservice__GetConnStringResponse), 0, soap_copy__Bsdsysservice__GetConnStringResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetConnStringResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetConnStringResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetConnStringResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetConnStringResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetConnStringResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetConnStringResponse(struct soap *soap, _Bsdsysservice__GetConnStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetConnStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetConnStringResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetConnStringResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetConnStringResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetConnStringResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetConnStringResponse);
		((_Bsdsysservice__GetConnStringResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetConnStringResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetConnStringResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetConnStringResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetConnStringResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetConnStringResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetConnStringResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetConnStringResponse*)p = *(_Bsdsysservice__GetConnStringResponse*)q;
}

void _Bsdsysservice__GetConnString::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdsysservice__GetConnString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetConnString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetConnString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetConnString(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetConnString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetConnString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetConnString(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetConnString * SOAP_FMAC4 soap_in__Bsdsysservice__GetConnString(struct soap *soap, const char *tag, _Bsdsysservice__GetConnString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetConnString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString, sizeof(_Bsdsysservice__GetConnString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetConnString *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetConnString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString, 0, sizeof(_Bsdsysservice__GetConnString), 0, soap_copy__Bsdsysservice__GetConnString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetConnString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetConnString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetConnString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetConnString(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetConnString * SOAP_FMAC4 soap_get__Bsdsysservice__GetConnString(struct soap *soap, _Bsdsysservice__GetConnString *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetConnString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetConnString * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetConnString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetConnString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetConnString);
		if (size)
			*size = sizeof(_Bsdsysservice__GetConnString);
		((_Bsdsysservice__GetConnString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetConnString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetConnString);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetConnString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetConnString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetConnString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetConnString %p -> %p\n", q, p));
	*(_Bsdsysservice__GetConnString*)p = *(_Bsdsysservice__GetConnString*)q;
}

void _Bsdsysservice__GetAppSettingResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetAppSettingResponse::GetAppSettingResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetAppSettingResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfString(soap, &this->_Bsdsysservice__GetAppSettingResponse::GetAppSettingResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetAppSettingResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetAppSettingResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetAppSettingResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetAppSettingResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse), type))
		return soap->error;
	if (a->GetAppSettingResult)
		soap_element_result(soap, "Bsdsysservice:GetAppSettingResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetAppSettingResult", -1, &(a->_Bsdsysservice__GetAppSettingResponse::GetAppSettingResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetAppSettingResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetAppSettingResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSettingResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetAppSettingResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetAppSettingResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetAppSettingResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse, sizeof(_Bsdsysservice__GetAppSettingResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetAppSettingResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAppSettingResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAppSettingResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfString(soap, "Bsdsysservice:GetAppSettingResult", &(a->_Bsdsysservice__GetAppSettingResponse::GetAppSettingResult), "Bsdsysservice:OptResultOfString"))
				{	soap_flag_GetAppSettingResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetAppSettingResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetAppSettingResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse, 0, sizeof(_Bsdsysservice__GetAppSettingResponse), 0, soap_copy__Bsdsysservice__GetAppSettingResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetAppSettingResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetAppSettingResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetAppSettingResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetAppSettingResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSettingResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetAppSettingResponse(struct soap *soap, _Bsdsysservice__GetAppSettingResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetAppSettingResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetAppSettingResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetAppSettingResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetAppSettingResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAppSettingResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetAppSettingResponse);
		((_Bsdsysservice__GetAppSettingResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAppSettingResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetAppSettingResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetAppSettingResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetAppSettingResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetAppSettingResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetAppSettingResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetAppSettingResponse*)p = *(_Bsdsysservice__GetAppSettingResponse*)q;
}

void _Bsdsysservice__GetAppSetting::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__GetAppSetting::key);
	/* transient soap skipped */
}

void _Bsdsysservice__GetAppSetting::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__GetAppSetting::key, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__GetAppSetting::key);
	/* transient soap skipped */
}

int _Bsdsysservice__GetAppSetting::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetAppSetting(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetAppSetting(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetAppSetting *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:key", -1, &(a->_Bsdsysservice__GetAppSetting::key), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetAppSetting::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetAppSetting(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSetting * SOAP_FMAC4 soap_in__Bsdsysservice__GetAppSetting(struct soap *soap, const char *tag, _Bsdsysservice__GetAppSetting *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetAppSetting *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting, sizeof(_Bsdsysservice__GetAppSetting), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetAppSetting *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_key1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_key1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:key", &(a->_Bsdsysservice__GetAppSetting::key), "xsd:string"))
				{	soap_flag_key1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetAppSetting *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting, 0, sizeof(_Bsdsysservice__GetAppSetting), 0, soap_copy__Bsdsysservice__GetAppSetting);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetAppSetting::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetAppSetting", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetAppSetting::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetAppSetting(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSetting * SOAP_FMAC4 soap_get__Bsdsysservice__GetAppSetting(struct soap *soap, _Bsdsysservice__GetAppSetting *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetAppSetting(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetAppSetting * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetAppSetting(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetAppSetting(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAppSetting);
		if (size)
			*size = sizeof(_Bsdsysservice__GetAppSetting);
		((_Bsdsysservice__GetAppSetting*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetAppSetting[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetAppSetting);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetAppSetting*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetAppSetting*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetAppSetting(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetAppSetting %p -> %p\n", q, p));
	*(_Bsdsysservice__GetAppSetting*)p = *(_Bsdsysservice__GetAppSetting*)q;
}

void _Bsdsysservice__GetServerTimeResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->_Bsdsysservice__GetServerTimeResponse::GetServerTimeResult);
	/* transient soap skipped */
}

void _Bsdsysservice__GetServerTimeResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetServerTimeResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetServerTimeResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetServerTimeResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetServerTimeResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse), type))
		return soap->error;
	soap_element_result(soap, "Bsdsysservice:GetServerTimeResult");
	if (soap_out_time(soap, "Bsdsysservice:GetServerTimeResult", -1, &(a->_Bsdsysservice__GetServerTimeResponse::GetServerTimeResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetServerTimeResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetServerTimeResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTimeResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetServerTimeResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetServerTimeResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetServerTimeResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse, sizeof(_Bsdsysservice__GetServerTimeResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetServerTimeResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetServerTimeResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetServerTimeResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdsysservice:GetServerTimeResult", &(a->_Bsdsysservice__GetServerTimeResponse::GetServerTimeResult), "xsd:dateTime"))
				{	soap_flag_GetServerTimeResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetServerTimeResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetServerTimeResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse, 0, sizeof(_Bsdsysservice__GetServerTimeResponse), 0, soap_copy__Bsdsysservice__GetServerTimeResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetServerTimeResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _Bsdsysservice__GetServerTimeResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetServerTimeResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetServerTimeResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetServerTimeResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTimeResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetServerTimeResponse(struct soap *soap, _Bsdsysservice__GetServerTimeResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetServerTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetServerTimeResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetServerTimeResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetServerTimeResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetServerTimeResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetServerTimeResponse);
		((_Bsdsysservice__GetServerTimeResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetServerTimeResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetServerTimeResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetServerTimeResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetServerTimeResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetServerTimeResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetServerTimeResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetServerTimeResponse*)p = *(_Bsdsysservice__GetServerTimeResponse*)q;
}

void _Bsdsysservice__GetServerTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdsysservice__GetServerTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetServerTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetServerTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetServerTime(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetServerTime *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetServerTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetServerTime(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTime * SOAP_FMAC4 soap_in__Bsdsysservice__GetServerTime(struct soap *soap, const char *tag, _Bsdsysservice__GetServerTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetServerTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime, sizeof(_Bsdsysservice__GetServerTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetServerTime *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetServerTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime, 0, sizeof(_Bsdsysservice__GetServerTime), 0, soap_copy__Bsdsysservice__GetServerTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetServerTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetServerTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetServerTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetServerTime(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTime * SOAP_FMAC4 soap_get__Bsdsysservice__GetServerTime(struct soap *soap, _Bsdsysservice__GetServerTime *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetServerTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetServerTime * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetServerTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetServerTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetServerTime);
		if (size)
			*size = sizeof(_Bsdsysservice__GetServerTime);
		((_Bsdsysservice__GetServerTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetServerTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetServerTime);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetServerTime*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetServerTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetServerTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetServerTime %p -> %p\n", q, p));
	*(_Bsdsysservice__GetServerTime*)p = *(_Bsdsysservice__GetServerTime*)q;
}

void _Bsdsysservice__VerifyFunctionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__VerifyFunctionResponse::VerifyFunctionResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__VerifyFunctionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfBoolean(soap, &this->_Bsdsysservice__VerifyFunctionResponse::VerifyFunctionResult);
	/* transient soap skipped */
}

int _Bsdsysservice__VerifyFunctionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__VerifyFunctionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__VerifyFunctionResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__VerifyFunctionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse), type))
		return soap->error;
	if (a->VerifyFunctionResult)
		soap_element_result(soap, "Bsdsysservice:VerifyFunctionResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfBoolean(soap, "Bsdsysservice:VerifyFunctionResult", -1, &(a->_Bsdsysservice__VerifyFunctionResponse::VerifyFunctionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__VerifyFunctionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__VerifyFunctionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunctionResponse * SOAP_FMAC4 soap_in__Bsdsysservice__VerifyFunctionResponse(struct soap *soap, const char *tag, _Bsdsysservice__VerifyFunctionResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__VerifyFunctionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse, sizeof(_Bsdsysservice__VerifyFunctionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__VerifyFunctionResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_VerifyFunctionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VerifyFunctionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfBoolean(soap, "Bsdsysservice:VerifyFunctionResult", &(a->_Bsdsysservice__VerifyFunctionResponse::VerifyFunctionResult), "Bsdsysservice:OptResultOfBoolean"))
				{	soap_flag_VerifyFunctionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:VerifyFunctionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__VerifyFunctionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse, 0, sizeof(_Bsdsysservice__VerifyFunctionResponse), 0, soap_copy__Bsdsysservice__VerifyFunctionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__VerifyFunctionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:VerifyFunctionResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__VerifyFunctionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__VerifyFunctionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunctionResponse * SOAP_FMAC4 soap_get__Bsdsysservice__VerifyFunctionResponse(struct soap *soap, _Bsdsysservice__VerifyFunctionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__VerifyFunctionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__VerifyFunctionResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__VerifyFunctionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__VerifyFunctionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyFunctionResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__VerifyFunctionResponse);
		((_Bsdsysservice__VerifyFunctionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyFunctionResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__VerifyFunctionResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__VerifyFunctionResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__VerifyFunctionResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__VerifyFunctionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__VerifyFunctionResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__VerifyFunctionResponse*)p = *(_Bsdsysservice__VerifyFunctionResponse*)q;
}

void _Bsdsysservice__VerifyFunction::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__VerifyFunction::userID);
	soap_default_std__string(soap, &this->_Bsdsysservice__VerifyFunction::functionID);
	/* transient soap skipped */
}

void _Bsdsysservice__VerifyFunction::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__VerifyFunction::userID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__VerifyFunction::userID);
	soap_embedded(soap, &this->_Bsdsysservice__VerifyFunction::functionID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__VerifyFunction::functionID);
	/* transient soap skipped */
}

int _Bsdsysservice__VerifyFunction::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__VerifyFunction(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__VerifyFunction(struct soap *soap, const char *tag, int id, const _Bsdsysservice__VerifyFunction *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userID", -1, &(a->_Bsdsysservice__VerifyFunction::userID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:functionID", -1, &(a->_Bsdsysservice__VerifyFunction::functionID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__VerifyFunction::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__VerifyFunction(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunction * SOAP_FMAC4 soap_in__Bsdsysservice__VerifyFunction(struct soap *soap, const char *tag, _Bsdsysservice__VerifyFunction *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__VerifyFunction *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction, sizeof(_Bsdsysservice__VerifyFunction), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__VerifyFunction *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_functionID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userID", &(a->_Bsdsysservice__VerifyFunction::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_functionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:functionID", &(a->_Bsdsysservice__VerifyFunction::functionID), "xsd:string"))
				{	soap_flag_functionID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__VerifyFunction *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction, 0, sizeof(_Bsdsysservice__VerifyFunction), 0, soap_copy__Bsdsysservice__VerifyFunction);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__VerifyFunction::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:VerifyFunction", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__VerifyFunction::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__VerifyFunction(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunction * SOAP_FMAC4 soap_get__Bsdsysservice__VerifyFunction(struct soap *soap, _Bsdsysservice__VerifyFunction *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__VerifyFunction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__VerifyFunction * SOAP_FMAC2 soap_instantiate__Bsdsysservice__VerifyFunction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__VerifyFunction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyFunction);
		if (size)
			*size = sizeof(_Bsdsysservice__VerifyFunction);
		((_Bsdsysservice__VerifyFunction*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyFunction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__VerifyFunction);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__VerifyFunction*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__VerifyFunction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__VerifyFunction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__VerifyFunction %p -> %p\n", q, p));
	*(_Bsdsysservice__VerifyFunction*)p = *(_Bsdsysservice__VerifyFunction*)q;
}

void _Bsdsysservice__GetUsersForAppleResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__GetUsersForAppleResponse::GetUsersForAppleResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUsersForAppleResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, &this->_Bsdsysservice__GetUsersForAppleResponse::GetUsersForAppleResult);
	/* transient soap skipped */
}

int _Bsdsysservice__GetUsersForAppleResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUsersForAppleResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUsersForAppleResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse), type))
		return soap->error;
	if (a->GetUsersForAppleResult)
		soap_element_result(soap, "Bsdsysservice:GetUsersForAppleResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, "Bsdsysservice:GetUsersForAppleResult", -1, &(a->_Bsdsysservice__GetUsersForAppleResponse::GetUsersForAppleResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUsersForAppleResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUsersForAppleResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForAppleResponse * SOAP_FMAC4 soap_in__Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetUsersForAppleResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUsersForAppleResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse, sizeof(_Bsdsysservice__GetUsersForAppleResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUsersForAppleResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetUsersForAppleResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetUsersForAppleResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, "Bsdsysservice:GetUsersForAppleResult", &(a->_Bsdsysservice__GetUsersForAppleResponse::GetUsersForAppleResult), "Bsdsysservice:OptResultOfUserForAppleEntity"))
				{	soap_flag_GetUsersForAppleResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:GetUsersForAppleResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUsersForAppleResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse, 0, sizeof(_Bsdsysservice__GetUsersForAppleResponse), 0, soap_copy__Bsdsysservice__GetUsersForAppleResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUsersForAppleResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUsersForAppleResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUsersForAppleResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUsersForAppleResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForAppleResponse * SOAP_FMAC4 soap_get__Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, _Bsdsysservice__GetUsersForAppleResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUsersForAppleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUsersForAppleResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUsersForAppleResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUsersForAppleResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUsersForAppleResponse);
		((_Bsdsysservice__GetUsersForAppleResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUsersForAppleResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUsersForAppleResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUsersForAppleResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUsersForAppleResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUsersForAppleResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUsersForAppleResponse*)p = *(_Bsdsysservice__GetUsersForAppleResponse*)q;
}

void _Bsdsysservice__GetUsersForApple::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _Bsdsysservice__GetUsersForApple::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _Bsdsysservice__GetUsersForApple::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__GetUsersForApple(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__GetUsersForApple(struct soap *soap, const char *tag, int id, const _Bsdsysservice__GetUsersForApple *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__GetUsersForApple::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__GetUsersForApple(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForApple * SOAP_FMAC4 soap_in__Bsdsysservice__GetUsersForApple(struct soap *soap, const char *tag, _Bsdsysservice__GetUsersForApple *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__GetUsersForApple *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple, sizeof(_Bsdsysservice__GetUsersForApple), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__GetUsersForApple *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__GetUsersForApple *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple, 0, sizeof(_Bsdsysservice__GetUsersForApple), 0, soap_copy__Bsdsysservice__GetUsersForApple);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__GetUsersForApple::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:GetUsersForApple", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__GetUsersForApple::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__GetUsersForApple(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForApple * SOAP_FMAC4 soap_get__Bsdsysservice__GetUsersForApple(struct soap *soap, _Bsdsysservice__GetUsersForApple *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__GetUsersForApple(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__GetUsersForApple * SOAP_FMAC2 soap_instantiate__Bsdsysservice__GetUsersForApple(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__GetUsersForApple(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUsersForApple);
		if (size)
			*size = sizeof(_Bsdsysservice__GetUsersForApple);
		((_Bsdsysservice__GetUsersForApple*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__GetUsersForApple[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__GetUsersForApple);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__GetUsersForApple*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__GetUsersForApple*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__GetUsersForApple(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__GetUsersForApple %p -> %p\n", q, p));
	*(_Bsdsysservice__GetUsersForApple*)p = *(_Bsdsysservice__GetUsersForApple*)q;
}

void _Bsdsysservice__VerifyUserResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_Bsdsysservice__VerifyUserResponse::VerifyUserResult = NULL;
	/* transient soap skipped */
}

void _Bsdsysservice__VerifyUserResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, &this->_Bsdsysservice__VerifyUserResponse::VerifyUserResult);
	/* transient soap skipped */
}

int _Bsdsysservice__VerifyUserResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__VerifyUserResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__VerifyUserResponse(struct soap *soap, const char *tag, int id, const _Bsdsysservice__VerifyUserResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse), type))
		return soap->error;
	if (a->VerifyUserResult)
		soap_element_result(soap, "Bsdsysservice:VerifyUserResult");
	if (soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, "Bsdsysservice:VerifyUserResult", -1, &(a->_Bsdsysservice__VerifyUserResponse::VerifyUserResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__VerifyUserResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__VerifyUserResponse(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUserResponse * SOAP_FMAC4 soap_in__Bsdsysservice__VerifyUserResponse(struct soap *soap, const char *tag, _Bsdsysservice__VerifyUserResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__VerifyUserResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse, sizeof(_Bsdsysservice__VerifyUserResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__VerifyUserResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_VerifyUserResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_VerifyUserResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, "Bsdsysservice:VerifyUserResult", &(a->_Bsdsysservice__VerifyUserResponse::VerifyUserResult), "Bsdsysservice:OptResultOfComm_userEntity"))
				{	soap_flag_VerifyUserResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "Bsdsysservice:VerifyUserResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__VerifyUserResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse, 0, sizeof(_Bsdsysservice__VerifyUserResponse), 0, soap_copy__Bsdsysservice__VerifyUserResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__VerifyUserResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:VerifyUserResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__VerifyUserResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__VerifyUserResponse(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUserResponse * SOAP_FMAC4 soap_get__Bsdsysservice__VerifyUserResponse(struct soap *soap, _Bsdsysservice__VerifyUserResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__VerifyUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__VerifyUserResponse * SOAP_FMAC2 soap_instantiate__Bsdsysservice__VerifyUserResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__VerifyUserResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyUserResponse);
		if (size)
			*size = sizeof(_Bsdsysservice__VerifyUserResponse);
		((_Bsdsysservice__VerifyUserResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyUserResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__VerifyUserResponse);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__VerifyUserResponse*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__VerifyUserResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__VerifyUserResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__VerifyUserResponse %p -> %p\n", q, p));
	*(_Bsdsysservice__VerifyUserResponse*)p = *(_Bsdsysservice__VerifyUserResponse*)q;
}

void _Bsdsysservice__VerifyUser::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_Bsdsysservice__VerifyUser::userID);
	soap_default_std__string(soap, &this->_Bsdsysservice__VerifyUser::password);
	/* transient soap skipped */
}

void _Bsdsysservice__VerifyUser::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_Bsdsysservice__VerifyUser::userID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__VerifyUser::userID);
	soap_embedded(soap, &this->_Bsdsysservice__VerifyUser::password, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->_Bsdsysservice__VerifyUser::password);
	/* transient soap skipped */
}

int _Bsdsysservice__VerifyUser::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__Bsdsysservice__VerifyUser(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__Bsdsysservice__VerifyUser(struct soap *soap, const char *tag, int id, const _Bsdsysservice__VerifyUser *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:userID", -1, &(a->_Bsdsysservice__VerifyUser::userID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:password", -1, &(a->_Bsdsysservice__VerifyUser::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_Bsdsysservice__VerifyUser::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__Bsdsysservice__VerifyUser(soap, tag, this, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUser * SOAP_FMAC4 soap_in__Bsdsysservice__VerifyUser(struct soap *soap, const char *tag, _Bsdsysservice__VerifyUser *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_Bsdsysservice__VerifyUser *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser, sizeof(_Bsdsysservice__VerifyUser), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_Bsdsysservice__VerifyUser *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_userID1 = 1;
	size_t soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_userID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:userID", &(a->_Bsdsysservice__VerifyUser::userID), "xsd:string"))
				{	soap_flag_userID1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:password", &(a->_Bsdsysservice__VerifyUser::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_Bsdsysservice__VerifyUser *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser, 0, sizeof(_Bsdsysservice__VerifyUser), 0, soap_copy__Bsdsysservice__VerifyUser);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _Bsdsysservice__VerifyUser::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:VerifyUser", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_Bsdsysservice__VerifyUser::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__Bsdsysservice__VerifyUser(soap, this, tag, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUser * SOAP_FMAC4 soap_get__Bsdsysservice__VerifyUser(struct soap *soap, _Bsdsysservice__VerifyUser *p, const char *tag, const char *type)
{
	if ((p = soap_in__Bsdsysservice__VerifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _Bsdsysservice__VerifyUser * SOAP_FMAC2 soap_instantiate__Bsdsysservice__VerifyUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__Bsdsysservice__VerifyUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyUser);
		if (size)
			*size = sizeof(_Bsdsysservice__VerifyUser);
		((_Bsdsysservice__VerifyUser*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_Bsdsysservice__VerifyUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_Bsdsysservice__VerifyUser);
		for (int i = 0; i < n; i++)
			((_Bsdsysservice__VerifyUser*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_Bsdsysservice__VerifyUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__Bsdsysservice__VerifyUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _Bsdsysservice__VerifyUser %p -> %p\n", q, p));
	*(_Bsdsysservice__VerifyUser*)p = *(_Bsdsysservice__VerifyUser*)q;
}

void Bsdsysservice__Comm_USCOREemployeeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Empno);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Name);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Sex);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Nationality);
	soap_default_time(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Birth);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Education);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Principalship);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Technicalpost);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Mobile);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Homeaddress);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Postalcode);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Hometel);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Email);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Note);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Delflag);
	/* transient soap skipped */
}

void Bsdsysservice__Comm_USCOREemployeeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Empno, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Empno);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Name, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Name);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Sex, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Sex);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Nationality, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Nationality);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Education, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Education);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Principalship, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Principalship);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Technicalpost, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Technicalpost);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Mobile, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Mobile);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Homeaddress, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Homeaddress);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Postalcode, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Postalcode);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Hometel, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Hometel);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Email, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Email);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Note, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Note);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Delflag, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREemployeeEntity::Delflag);
	/* transient soap skipped */
}

int Bsdsysservice__Comm_USCOREemployeeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__Comm_USCOREemployeeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__Comm_USCOREemployeeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Empno", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Empno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Name", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Sex", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Sex), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Nationality", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Nationality), ""))
		return soap->error;
	if (soap_out_time(soap, "Bsdsysservice:Birth", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Birth), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Education", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Education), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Principalship", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Principalship), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Technicalpost", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Technicalpost), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Mobile", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Mobile), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Homeaddress", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Homeaddress), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Postalcode", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Postalcode), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Hometel", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Hometel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Email", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Email), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Note", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Note), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Delflag", -1, &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Delflag), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__Comm_USCOREemployeeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__Comm_USCOREemployeeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREemployeeEntity * SOAP_FMAC4 soap_in_Bsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREemployeeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__Comm_USCOREemployeeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity, sizeof(Bsdsysservice__Comm_USCOREemployeeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__Comm_USCOREemployeeEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Empno1 = 1;
	size_t soap_flag_Name1 = 1;
	size_t soap_flag_Sex1 = 1;
	size_t soap_flag_Nationality1 = 1;
	size_t soap_flag_Birth1 = 1;
	size_t soap_flag_Education1 = 1;
	size_t soap_flag_Principalship1 = 1;
	size_t soap_flag_Technicalpost1 = 1;
	size_t soap_flag_Mobile1 = 1;
	size_t soap_flag_Homeaddress1 = 1;
	size_t soap_flag_Postalcode1 = 1;
	size_t soap_flag_Hometel1 = 1;
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_Note1 = 1;
	size_t soap_flag_Delflag1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Empno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Empno", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Empno), "xsd:string"))
				{	soap_flag_Empno1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Name", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			if (soap_flag_Sex1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Sex", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Sex), "xsd:string"))
				{	soap_flag_Sex1--;
					continue;
				}
			if (soap_flag_Nationality1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Nationality", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Nationality), "xsd:string"))
				{	soap_flag_Nationality1--;
					continue;
				}
			if (soap_flag_Birth1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "Bsdsysservice:Birth", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Birth), "xsd:dateTime"))
				{	soap_flag_Birth1--;
					continue;
				}
			if (soap_flag_Education1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Education", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Education), "xsd:string"))
				{	soap_flag_Education1--;
					continue;
				}
			if (soap_flag_Principalship1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Principalship", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Principalship), "xsd:string"))
				{	soap_flag_Principalship1--;
					continue;
				}
			if (soap_flag_Technicalpost1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Technicalpost", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Technicalpost), "xsd:string"))
				{	soap_flag_Technicalpost1--;
					continue;
				}
			if (soap_flag_Mobile1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Mobile", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Mobile), "xsd:string"))
				{	soap_flag_Mobile1--;
					continue;
				}
			if (soap_flag_Homeaddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Homeaddress", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Homeaddress), "xsd:string"))
				{	soap_flag_Homeaddress1--;
					continue;
				}
			if (soap_flag_Postalcode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Postalcode", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Postalcode), "xsd:string"))
				{	soap_flag_Postalcode1--;
					continue;
				}
			if (soap_flag_Hometel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Hometel", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Hometel), "xsd:string"))
				{	soap_flag_Hometel1--;
					continue;
				}
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Email", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Note", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Note), "xsd:string"))
				{	soap_flag_Note1--;
					continue;
				}
			if (soap_flag_Delflag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Delflag", &(a->Bsdsysservice__Comm_USCOREemployeeEntity::Delflag), "xsd:string"))
				{	soap_flag_Delflag1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__Comm_USCOREemployeeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity, 0, sizeof(Bsdsysservice__Comm_USCOREemployeeEntity), 0, soap_copy_Bsdsysservice__Comm_USCOREemployeeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Birth1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdsysservice__Comm_USCOREemployeeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:Comm_employeeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__Comm_USCOREemployeeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__Comm_USCOREemployeeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREemployeeEntity * SOAP_FMAC4 soap_get_Bsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, Bsdsysservice__Comm_USCOREemployeeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__Comm_USCOREemployeeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__Comm_USCOREemployeeEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__Comm_USCOREemployeeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__Comm_USCOREemployeeEntity);
		if (size)
			*size = sizeof(Bsdsysservice__Comm_USCOREemployeeEntity);
		((Bsdsysservice__Comm_USCOREemployeeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__Comm_USCOREemployeeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__Comm_USCOREemployeeEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__Comm_USCOREemployeeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__Comm_USCOREemployeeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__Comm_USCOREemployeeEntity %p -> %p\n", q, p));
	*(Bsdsysservice__Comm_USCOREemployeeEntity*)p = *(Bsdsysservice__Comm_USCOREemployeeEntity*)q;
}

void Bsdsysservice__Comm_USCOREdepartmentEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptname);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Parentid);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Tel);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Fax);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Email);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Manager);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Note);
	soap_default_xsd__decimal(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptlevel);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptid);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Delflag);
	this->Bsdsysservice__Comm_USCOREdepartmentEntity::Leader = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__Comm_USCOREdepartmentEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptname, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptname);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Parentid, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Parentid);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Tel, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Tel);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Fax, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Fax);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Email, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Email);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Manager, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Manager);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Note, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Note);
	soap_serialize_xsd__decimal(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptlevel);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptid, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptid);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Delflag, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Delflag);
	soap_serialize_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, &this->Bsdsysservice__Comm_USCOREdepartmentEntity::Leader);
	/* transient soap skipped */
}

int Bsdsysservice__Comm_USCOREdepartmentEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__Comm_USCOREdepartmentEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Deptname", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Parentid", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Parentid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Tel", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Tel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Fax", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Fax), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Email", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Email), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Manager", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Manager), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Note", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Note), ""))
		return soap->error;
	if (soap_out_xsd__decimal(soap, "Bsdsysservice:Deptlevel", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptlevel), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Deptid", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Delflag", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Delflag), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, "Bsdsysservice:Leader", -1, &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Leader), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__Comm_USCOREdepartmentEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREdepartmentEntity * SOAP_FMAC4 soap_in_Bsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREdepartmentEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__Comm_USCOREdepartmentEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__Comm_USCOREdepartmentEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Deptname1 = 1;
	size_t soap_flag_Parentid1 = 1;
	size_t soap_flag_Tel1 = 1;
	size_t soap_flag_Fax1 = 1;
	size_t soap_flag_Email1 = 1;
	size_t soap_flag_Manager1 = 1;
	size_t soap_flag_Note1 = 1;
	size_t soap_flag_Deptlevel1 = 1;
	size_t soap_flag_Deptid1 = 1;
	size_t soap_flag_Delflag1 = 1;
	size_t soap_flag_Leader1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Deptname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Deptname", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptname), "xsd:string"))
				{	soap_flag_Deptname1--;
					continue;
				}
			if (soap_flag_Parentid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Parentid", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Parentid), "xsd:string"))
				{	soap_flag_Parentid1--;
					continue;
				}
			if (soap_flag_Tel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Tel", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Tel), "xsd:string"))
				{	soap_flag_Tel1--;
					continue;
				}
			if (soap_flag_Fax1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Fax", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Fax), "xsd:string"))
				{	soap_flag_Fax1--;
					continue;
				}
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Email", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Manager1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Manager", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Manager), "xsd:string"))
				{	soap_flag_Manager1--;
					continue;
				}
			if (soap_flag_Note1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Note", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Note), "xsd:string"))
				{	soap_flag_Note1--;
					continue;
				}
			if (soap_flag_Deptlevel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__decimal(soap, "Bsdsysservice:Deptlevel", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptlevel), "xsd:decimal"))
				{	soap_flag_Deptlevel1--;
					continue;
				}
			if (soap_flag_Deptid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Deptid", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Deptid), "xsd:string"))
				{	soap_flag_Deptid1--;
					continue;
				}
			if (soap_flag_Delflag1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Delflag", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Delflag), "xsd:string"))
				{	soap_flag_Delflag1--;
					continue;
				}
			if (soap_flag_Leader1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, "Bsdsysservice:Leader", &(a->Bsdsysservice__Comm_USCOREdepartmentEntity::Leader), "Bsdsysservice:Comm_employeeEntity"))
				{	soap_flag_Leader1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__Comm_USCOREdepartmentEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity, 0, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity), 0, soap_copy_Bsdsysservice__Comm_USCOREdepartmentEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Deptlevel1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int Bsdsysservice__Comm_USCOREdepartmentEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:Comm_departmentEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__Comm_USCOREdepartmentEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREdepartmentEntity * SOAP_FMAC4 soap_get_Bsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__Comm_USCOREdepartmentEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__Comm_USCOREdepartmentEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__Comm_USCOREdepartmentEntity);
		if (size)
			*size = sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity);
		((Bsdsysservice__Comm_USCOREdepartmentEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__Comm_USCOREdepartmentEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__Comm_USCOREdepartmentEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__Comm_USCOREdepartmentEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__Comm_USCOREdepartmentEntity %p -> %p\n", q, p));
	*(Bsdsysservice__Comm_USCOREdepartmentEntity*)p = *(Bsdsysservice__Comm_USCOREdepartmentEntity*)q;
}

void Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::__sizeComm_USCOREdepartmentEntity = 0;
	this->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::__sizeComm_USCOREdepartmentEntity; i++)
		{
			soap_serialize_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, this->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::__sizeComm_USCOREdepartmentEntity; i++)
			if (soap_out_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, "Bsdsysservice:Comm_departmentEntity", -1, a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity, sizeof(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Comm_USCOREdepartmentEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:Comm_departmentEntity", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity == NULL)
				{	if (soap_blist_Comm_USCOREdepartmentEntity1 == NULL)
						soap_blist_Comm_USCOREdepartmentEntity1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity = (Bsdsysservice__Comm_USCOREdepartmentEntity **)soap_push_block(soap, soap_blist_Comm_USCOREdepartmentEntity1, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity *));
					if (a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity == NULL)
						return NULL;
					*a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, "Bsdsysservice:Comm_departmentEntity", a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity, "Bsdsysservice:Comm_departmentEntity"))
				{	a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::__sizeComm_USCOREdepartmentEntity++;
					a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity)
			soap_pop_block(soap, soap_blist_Comm_USCOREdepartmentEntity1);
		if (a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::__sizeComm_USCOREdepartmentEntity)
			a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity = (Bsdsysservice__Comm_USCOREdepartmentEntity **)soap_save_block(soap, soap_blist_Comm_USCOREdepartmentEntity1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::Comm_USCOREdepartmentEntity = NULL;
			if (soap_blist_Comm_USCOREdepartmentEntity1)
				soap_end_block(soap, soap_blist_Comm_USCOREdepartmentEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity, 0, sizeof(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity), 0, soap_copy_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfComm_departmentEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
		((Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)p = *(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity*)q;
}

void Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Msg);
	this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity, sizeof(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::Data), "Bsdsysservice:ArrayOfComm_departmentEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity, 0, sizeof(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity), 0, soap_copy_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfComm_departmentEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
		((Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)p = *(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity*)q;
}

void Bsdsysservice__V_USCOREComm_USCOREUserListEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserID);
	soap_default_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserName);
	soap_default_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::EmpNO);
	soap_default_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::AreaCode);
	soap_default_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptID);
	soap_default_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptName);
	/* transient soap skipped */
}

void Bsdsysservice__V_USCOREComm_USCOREUserListEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserID);
	soap_embedded(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserName, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserName);
	soap_embedded(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::EmpNO, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::EmpNO);
	soap_embedded(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::AreaCode, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::AreaCode);
	soap_embedded(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptID);
	soap_embedded(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptName, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptName);
	/* transient soap skipped */
}

int Bsdsysservice__V_USCOREComm_USCOREUserListEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__V_USCOREComm_USCOREUserListEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UserID", -1, &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UserName", -1, &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserName), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:EmpNO", -1, &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::EmpNO), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:AreaCode", -1, &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::AreaCode), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:DeptID", -1, &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:DeptName", -1, &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__V_USCOREComm_USCOREUserListEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__V_USCOREComm_USCOREUserListEntity * SOAP_FMAC4 soap_in_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__V_USCOREComm_USCOREUserListEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__V_USCOREComm_USCOREUserListEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_UserID1 = 1;
	size_t soap_flag_UserName1 = 1;
	size_t soap_flag_EmpNO1 = 1;
	size_t soap_flag_AreaCode1 = 1;
	size_t soap_flag_DeptID1 = 1;
	size_t soap_flag_DeptName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UserID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UserID", &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserID), "xsd:string"))
				{	soap_flag_UserID1--;
					continue;
				}
			if (soap_flag_UserName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UserName", &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::UserName), "xsd:string"))
				{	soap_flag_UserName1--;
					continue;
				}
			if (soap_flag_EmpNO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:EmpNO", &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::EmpNO), "xsd:string"))
				{	soap_flag_EmpNO1--;
					continue;
				}
			if (soap_flag_AreaCode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:AreaCode", &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::AreaCode), "xsd:string"))
				{	soap_flag_AreaCode1--;
					continue;
				}
			if (soap_flag_DeptID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:DeptID", &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptID), "xsd:string"))
				{	soap_flag_DeptID1--;
					continue;
				}
			if (soap_flag_DeptName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:DeptName", &(a->Bsdsysservice__V_USCOREComm_USCOREUserListEntity::DeptName), "xsd:string"))
				{	soap_flag_DeptName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity, 0, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity), 0, soap_copy_Bsdsysservice__V_USCOREComm_USCOREUserListEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__V_USCOREComm_USCOREUserListEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:V_Comm_UserListEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__V_USCOREComm_USCOREUserListEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__V_USCOREComm_USCOREUserListEntity * SOAP_FMAC4 soap_get_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__V_USCOREComm_USCOREUserListEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__V_USCOREComm_USCOREUserListEntity);
		if (size)
			*size = sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity);
		((Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__V_USCOREComm_USCOREUserListEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__V_USCOREComm_USCOREUserListEntity %p -> %p\n", q, p));
	*(Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)p = *(Bsdsysservice__V_USCOREComm_USCOREUserListEntity*)q;
}

void Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::__sizeV_USCOREComm_USCOREUserListEntity = 0;
	this->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::__sizeV_USCOREComm_USCOREUserListEntity; i++)
		{
			soap_serialize_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, this->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::__sizeV_USCOREComm_USCOREUserListEntity; i++)
			if (soap_out_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, "Bsdsysservice:V_Comm_UserListEntity", -1, a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_V_USCOREComm_USCOREUserListEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:V_Comm_UserListEntity", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity == NULL)
				{	if (soap_blist_V_USCOREComm_USCOREUserListEntity1 == NULL)
						soap_blist_V_USCOREComm_USCOREUserListEntity1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity **)soap_push_block(soap, soap_blist_V_USCOREComm_USCOREUserListEntity1, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity *));
					if (a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity == NULL)
						return NULL;
					*a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, "Bsdsysservice:V_Comm_UserListEntity", a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity, "Bsdsysservice:V_Comm_UserListEntity"))
				{	a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::__sizeV_USCOREComm_USCOREUserListEntity++;
					a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity)
			soap_pop_block(soap, soap_blist_V_USCOREComm_USCOREUserListEntity1);
		if (a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::__sizeV_USCOREComm_USCOREUserListEntity)
			a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity **)soap_save_block(soap, soap_blist_V_USCOREComm_USCOREUserListEntity1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::V_USCOREComm_USCOREUserListEntity = NULL;
			if (soap_blist_V_USCOREComm_USCOREUserListEntity1)
				soap_end_block(soap, soap_blist_V_USCOREComm_USCOREUserListEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity, 0, sizeof(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity), 0, soap_copy_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfV_Comm_UserListEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
		((Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)p = *(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity*)q;
}

void Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Msg);
	this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::Data), "Bsdsysservice:ArrayOfV_Comm_UserListEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity, 0, sizeof(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity), 0, soap_copy_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfV_Comm_UserListEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
		((Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)p = *(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity*)q;
}

void Bsdsysservice__RtmTypeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Itemid);
	soap_default_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Itemname);
	soap_default_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Desc);
	soap_default_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Opttype);
	/* transient soap skipped */
}

void Bsdsysservice__RtmTypeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__RtmTypeEntity::Itemid, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Itemid);
	soap_embedded(soap, &this->Bsdsysservice__RtmTypeEntity::Itemname, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Itemname);
	soap_embedded(soap, &this->Bsdsysservice__RtmTypeEntity::Desc, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Desc);
	soap_embedded(soap, &this->Bsdsysservice__RtmTypeEntity::Opttype, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__RtmTypeEntity::Opttype);
	/* transient soap skipped */
}

int Bsdsysservice__RtmTypeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__RtmTypeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__RtmTypeEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__RtmTypeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Itemid", -1, &(a->Bsdsysservice__RtmTypeEntity::Itemid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Itemname", -1, &(a->Bsdsysservice__RtmTypeEntity::Itemname), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Desc", -1, &(a->Bsdsysservice__RtmTypeEntity::Desc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Opttype", -1, &(a->Bsdsysservice__RtmTypeEntity::Opttype), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__RtmTypeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__RtmTypeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__RtmTypeEntity * SOAP_FMAC4 soap_in_Bsdsysservice__RtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__RtmTypeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__RtmTypeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity, sizeof(Bsdsysservice__RtmTypeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__RtmTypeEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Itemid1 = 1;
	size_t soap_flag_Itemname1 = 1;
	size_t soap_flag_Desc1 = 1;
	size_t soap_flag_Opttype1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Itemid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Itemid", &(a->Bsdsysservice__RtmTypeEntity::Itemid), "xsd:string"))
				{	soap_flag_Itemid1--;
					continue;
				}
			if (soap_flag_Itemname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Itemname", &(a->Bsdsysservice__RtmTypeEntity::Itemname), "xsd:string"))
				{	soap_flag_Itemname1--;
					continue;
				}
			if (soap_flag_Desc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Desc", &(a->Bsdsysservice__RtmTypeEntity::Desc), "xsd:string"))
				{	soap_flag_Desc1--;
					continue;
				}
			if (soap_flag_Opttype1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Opttype", &(a->Bsdsysservice__RtmTypeEntity::Opttype), "xsd:string"))
				{	soap_flag_Opttype1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__RtmTypeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity, 0, sizeof(Bsdsysservice__RtmTypeEntity), 0, soap_copy_Bsdsysservice__RtmTypeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__RtmTypeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:RtmTypeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__RtmTypeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__RtmTypeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__RtmTypeEntity * SOAP_FMAC4 soap_get_Bsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__RtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__RtmTypeEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__RtmTypeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__RtmTypeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__RtmTypeEntity);
		if (size)
			*size = sizeof(Bsdsysservice__RtmTypeEntity);
		((Bsdsysservice__RtmTypeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__RtmTypeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__RtmTypeEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__RtmTypeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__RtmTypeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__RtmTypeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__RtmTypeEntity %p -> %p\n", q, p));
	*(Bsdsysservice__RtmTypeEntity*)p = *(Bsdsysservice__RtmTypeEntity*)q;
}

void Bsdsysservice__ArrayOfRtmTypeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity = 0;
	this->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfRtmTypeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity; i++)
		{
			soap_serialize_PointerToBsdsysservice__RtmTypeEntity(soap, this->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfRtmTypeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfRtmTypeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfRtmTypeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity; i++)
			if (soap_out_PointerToBsdsysservice__RtmTypeEntity(soap, "Bsdsysservice:RtmTypeEntity", -1, a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfRtmTypeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfRtmTypeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfRtmTypeEntity * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfRtmTypeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfRtmTypeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity, sizeof(Bsdsysservice__ArrayOfRtmTypeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfRtmTypeEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_RtmTypeEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:RtmTypeEntity", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity == NULL)
				{	if (soap_blist_RtmTypeEntity1 == NULL)
						soap_blist_RtmTypeEntity1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity = (Bsdsysservice__RtmTypeEntity **)soap_push_block(soap, soap_blist_RtmTypeEntity1, sizeof(Bsdsysservice__RtmTypeEntity *));
					if (a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity == NULL)
						return NULL;
					*a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdsysservice__RtmTypeEntity(soap, "Bsdsysservice:RtmTypeEntity", a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity, "Bsdsysservice:RtmTypeEntity"))
				{	a->Bsdsysservice__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity++;
					a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity)
			soap_pop_block(soap, soap_blist_RtmTypeEntity1);
		if (a->Bsdsysservice__ArrayOfRtmTypeEntity::__sizeRtmTypeEntity)
			a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity = (Bsdsysservice__RtmTypeEntity **)soap_save_block(soap, soap_blist_RtmTypeEntity1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfRtmTypeEntity::RtmTypeEntity = NULL;
			if (soap_blist_RtmTypeEntity1)
				soap_end_block(soap, soap_blist_RtmTypeEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfRtmTypeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity, 0, sizeof(Bsdsysservice__ArrayOfRtmTypeEntity), 0, soap_copy_Bsdsysservice__ArrayOfRtmTypeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfRtmTypeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfRtmTypeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfRtmTypeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfRtmTypeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfRtmTypeEntity * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, Bsdsysservice__ArrayOfRtmTypeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfRtmTypeEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfRtmTypeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfRtmTypeEntity);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfRtmTypeEntity);
		((Bsdsysservice__ArrayOfRtmTypeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfRtmTypeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfRtmTypeEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfRtmTypeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfRtmTypeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfRtmTypeEntity %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfRtmTypeEntity*)p = *(Bsdsysservice__ArrayOfRtmTypeEntity*)q;
}

void Bsdsysservice__OptResultOfRtmTypeEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Msg);
	this->Bsdsysservice__OptResultOfRtmTypeEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfRtmTypeEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfRtmTypeEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfRtmTypeEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfRtmTypeEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfRtmTypeEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfRtmTypeEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfRtmTypeEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfRtmTypeEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfRtmTypeEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfRtmTypeEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfRtmTypeEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfRtmTypeEntity * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfRtmTypeEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfRtmTypeEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity, sizeof(Bsdsysservice__OptResultOfRtmTypeEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfRtmTypeEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfRtmTypeEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfRtmTypeEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfRtmTypeEntity::Data), "Bsdsysservice:ArrayOfRtmTypeEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfRtmTypeEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfRtmTypeEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity, 0, sizeof(Bsdsysservice__OptResultOfRtmTypeEntity), 0, soap_copy_Bsdsysservice__OptResultOfRtmTypeEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfRtmTypeEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfRtmTypeEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfRtmTypeEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfRtmTypeEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfRtmTypeEntity * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, Bsdsysservice__OptResultOfRtmTypeEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfRtmTypeEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfRtmTypeEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfRtmTypeEntity);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfRtmTypeEntity);
		((Bsdsysservice__OptResultOfRtmTypeEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfRtmTypeEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfRtmTypeEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfRtmTypeEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfRtmTypeEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfRtmTypeEntity %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfRtmTypeEntity*)p = *(Bsdsysservice__OptResultOfRtmTypeEntity*)q;
}

void Bsdsysservice__AlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__AlertEntity::Message);
	this->Bsdsysservice__AlertEntity::Users = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__AlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__AlertEntity::Message, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__AlertEntity::Message);
	soap_serialize_PointerToBsdsysservice__ArrayOfString(soap, &this->Bsdsysservice__AlertEntity::Users);
	/* transient soap skipped */
}

int Bsdsysservice__AlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__AlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__AlertEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__AlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Message", -1, &(a->Bsdsysservice__AlertEntity::Message), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfString(soap, "Bsdsysservice:Users", -1, &(a->Bsdsysservice__AlertEntity::Users), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__AlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__AlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__AlertEntity * SOAP_FMAC4 soap_in_Bsdsysservice__AlertEntity(struct soap *soap, const char *tag, Bsdsysservice__AlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__AlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity, sizeof(Bsdsysservice__AlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__AlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Message1 = 1;
	size_t soap_flag_Users1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Message1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Message", &(a->Bsdsysservice__AlertEntity::Message), "xsd:string"))
				{	soap_flag_Message1--;
					continue;
				}
			if (soap_flag_Users1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfString(soap, "Bsdsysservice:Users", &(a->Bsdsysservice__AlertEntity::Users), "Bsdsysservice:ArrayOfString"))
				{	soap_flag_Users1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__AlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity, 0, sizeof(Bsdsysservice__AlertEntity), 0, soap_copy_Bsdsysservice__AlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__AlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:AlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__AlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__AlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__AlertEntity * SOAP_FMAC4 soap_get_Bsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__AlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__AlertEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__AlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__AlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__AlertEntity);
		if (size)
			*size = sizeof(Bsdsysservice__AlertEntity);
		((Bsdsysservice__AlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__AlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__AlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__AlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__AlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__AlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__AlertEntity %p -> %p\n", q, p));
	*(Bsdsysservice__AlertEntity*)p = *(Bsdsysservice__AlertEntity*)q;
}

void Bsdsysservice__ArrayOfAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfAlertEntity::__sizeAlertEntity = 0;
	this->Bsdsysservice__ArrayOfAlertEntity::AlertEntity = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfAlertEntity::AlertEntity)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfAlertEntity::__sizeAlertEntity; i++)
		{
			soap_serialize_PointerToBsdsysservice__AlertEntity(soap, this->Bsdsysservice__ArrayOfAlertEntity::AlertEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfAlertEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfAlertEntity::__sizeAlertEntity; i++)
			if (soap_out_PointerToBsdsysservice__AlertEntity(soap, "Bsdsysservice:AlertEntity", -1, a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfAlertEntity * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfAlertEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity, sizeof(Bsdsysservice__ArrayOfAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_AlertEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:AlertEntity", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity == NULL)
				{	if (soap_blist_AlertEntity1 == NULL)
						soap_blist_AlertEntity1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity = (Bsdsysservice__AlertEntity **)soap_push_block(soap, soap_blist_AlertEntity1, sizeof(Bsdsysservice__AlertEntity *));
					if (a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity == NULL)
						return NULL;
					*a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdsysservice__AlertEntity(soap, "Bsdsysservice:AlertEntity", a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity, "Bsdsysservice:AlertEntity"))
				{	a->Bsdsysservice__ArrayOfAlertEntity::__sizeAlertEntity++;
					a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity)
			soap_pop_block(soap, soap_blist_AlertEntity1);
		if (a->Bsdsysservice__ArrayOfAlertEntity::__sizeAlertEntity)
			a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity = (Bsdsysservice__AlertEntity **)soap_save_block(soap, soap_blist_AlertEntity1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfAlertEntity::AlertEntity = NULL;
			if (soap_blist_AlertEntity1)
				soap_end_block(soap, soap_blist_AlertEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity, 0, sizeof(Bsdsysservice__ArrayOfAlertEntity), 0, soap_copy_Bsdsysservice__ArrayOfAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfAlertEntity * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfAlertEntity(struct soap *soap, Bsdsysservice__ArrayOfAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfAlertEntity);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfAlertEntity);
		((Bsdsysservice__ArrayOfAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfAlertEntity %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfAlertEntity*)p = *(Bsdsysservice__ArrayOfAlertEntity*)q;
}

void Bsdsysservice__OptResultOfAlertEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Msg);
	this->Bsdsysservice__OptResultOfAlertEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfAlertEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfAlertEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfAlertEntity(soap, &this->Bsdsysservice__OptResultOfAlertEntity::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfAlertEntity::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfAlertEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfAlertEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfAlertEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfAlertEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfAlertEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfAlertEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfAlertEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfAlertEntity(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfAlertEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfAlertEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfAlertEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfAlertEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfAlertEntity * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfAlertEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfAlertEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfAlertEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity, sizeof(Bsdsysservice__OptResultOfAlertEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfAlertEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfAlertEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfAlertEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfAlertEntity(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfAlertEntity::Data), "Bsdsysservice:ArrayOfAlertEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfAlertEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfAlertEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity, 0, sizeof(Bsdsysservice__OptResultOfAlertEntity), 0, soap_copy_Bsdsysservice__OptResultOfAlertEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfAlertEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfAlertEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfAlertEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfAlertEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfAlertEntity * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfAlertEntity(struct soap *soap, Bsdsysservice__OptResultOfAlertEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfAlertEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfAlertEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfAlertEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfAlertEntity);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfAlertEntity);
		((Bsdsysservice__OptResultOfAlertEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfAlertEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfAlertEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfAlertEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfAlertEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfAlertEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfAlertEntity %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfAlertEntity*)p = *(Bsdsysservice__OptResultOfAlertEntity*)q;
}

void Bsdsysservice__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfString::__sizestring = 0;
	this->Bsdsysservice__ArrayOfString::string = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfString::string)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfString::__sizestring; i++)
		{
			soap_embedded(soap, this->Bsdsysservice__ArrayOfString::string + i, SOAP_TYPE_Bsdsysservice_std__string);
			soap_serialize_std__string(soap, this->Bsdsysservice__ArrayOfString::string + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfString(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfString::string)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfString::__sizestring; i++)
			if (soap_out_std__string(soap, "Bsdsysservice:string", -1, a->Bsdsysservice__ArrayOfString::string + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfString * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfString(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString, sizeof(Bsdsysservice__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_string1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:string", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfString::string == NULL)
				{	if (soap_blist_string1 == NULL)
						soap_blist_string1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfString::string = (std::string *)soap_push_block(soap, soap_blist_string1, sizeof(std::string));
					if (a->Bsdsysservice__ArrayOfString::string == NULL)
						return NULL;
					std::string p;
					memcpy(a->Bsdsysservice__ArrayOfString::string, &p, sizeof(std::string)); // a bit rough but portable
					soap_default_std__string(soap, a->Bsdsysservice__ArrayOfString::string);
				}
				soap_revert(soap);
				if (soap_in_std__string(soap, "Bsdsysservice:string", a->Bsdsysservice__ArrayOfString::string, "xsd:string"))
				{	a->Bsdsysservice__ArrayOfString::__sizestring++;
					a->Bsdsysservice__ArrayOfString::string = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfString::string)
			soap_pop_block(soap, soap_blist_string1);
		if (a->Bsdsysservice__ArrayOfString::__sizestring)
			a->Bsdsysservice__ArrayOfString::string = (std::string *)soap_save_block(soap, soap_blist_string1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfString::string = NULL;
			if (soap_blist_string1)
				soap_end_block(soap, soap_blist_string1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString, 0, sizeof(Bsdsysservice__ArrayOfString), 0, soap_copy_Bsdsysservice__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfString * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfString(struct soap *soap, Bsdsysservice__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfString * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfString);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfString);
		((Bsdsysservice__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfString);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfString %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfString*)p = *(Bsdsysservice__ArrayOfString*)q;
}

void Bsdsysservice__OptResultOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfString::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfString::Msg);
	this->Bsdsysservice__OptResultOfString::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfString::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfString::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfString::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfString::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfString::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfString(soap, &this->Bsdsysservice__OptResultOfString::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfString::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfString::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfString(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfString::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfString::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfString(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfString::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfString::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfString(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfString * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfString(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfString *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString, sizeof(Bsdsysservice__OptResultOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfString *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfString::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfString::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfString(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfString::Data), "Bsdsysservice:ArrayOfString"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfString::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString, 0, sizeof(Bsdsysservice__OptResultOfString), 0, soap_copy_Bsdsysservice__OptResultOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfString", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfString(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfString * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfString(struct soap *soap, Bsdsysservice__OptResultOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfString * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfString);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfString);
		((Bsdsysservice__OptResultOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfString);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfString*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfString %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfString*)p = *(Bsdsysservice__OptResultOfString*)q;
}

void Bsdsysservice__ArrayOfBoolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfBoolean::__sizeboolean = 0;
	this->Bsdsysservice__ArrayOfBoolean::boolean = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfBoolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfBoolean::boolean)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfBoolean::__sizeboolean; i++)
		{
			soap_embedded(soap, this->Bsdsysservice__ArrayOfBoolean::boolean + i, SOAP_TYPE_Bsdsysservice_bool);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfBoolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfBoolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfBoolean(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfBoolean *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfBoolean::boolean)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfBoolean::__sizeboolean; i++)
			if (soap_out_bool(soap, "Bsdsysservice:boolean", -1, a->Bsdsysservice__ArrayOfBoolean::boolean + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfBoolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfBoolean(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfBoolean * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfBoolean(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfBoolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfBoolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean, sizeof(Bsdsysservice__ArrayOfBoolean), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfBoolean *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_boolean1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:boolean", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfBoolean::boolean == NULL)
				{	if (soap_blist_boolean1 == NULL)
						soap_blist_boolean1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfBoolean::boolean = (bool *)soap_push_block(soap, soap_blist_boolean1, sizeof(bool));
					if (a->Bsdsysservice__ArrayOfBoolean::boolean == NULL)
						return NULL;
					soap_default_bool(soap, a->Bsdsysservice__ArrayOfBoolean::boolean);
				}
				soap_revert(soap);
				if (soap_in_bool(soap, "Bsdsysservice:boolean", a->Bsdsysservice__ArrayOfBoolean::boolean, "xsd:boolean"))
				{	a->Bsdsysservice__ArrayOfBoolean::__sizeboolean++;
					a->Bsdsysservice__ArrayOfBoolean::boolean = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfBoolean::boolean)
			soap_pop_block(soap, soap_blist_boolean1);
		if (a->Bsdsysservice__ArrayOfBoolean::__sizeboolean)
			a->Bsdsysservice__ArrayOfBoolean::boolean = (bool *)soap_save_block(soap, soap_blist_boolean1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfBoolean::boolean = NULL;
			if (soap_blist_boolean1)
				soap_end_block(soap, soap_blist_boolean1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfBoolean *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean, 0, sizeof(Bsdsysservice__ArrayOfBoolean), 0, soap_copy_Bsdsysservice__ArrayOfBoolean);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfBoolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfBoolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfBoolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfBoolean(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfBoolean * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfBoolean(struct soap *soap, Bsdsysservice__ArrayOfBoolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfBoolean * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfBoolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfBoolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfBoolean);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfBoolean);
		((Bsdsysservice__ArrayOfBoolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfBoolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfBoolean);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfBoolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfBoolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfBoolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfBoolean %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfBoolean*)p = *(Bsdsysservice__ArrayOfBoolean*)q;
}

void Bsdsysservice__OptResultOfBoolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfBoolean::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfBoolean::Msg);
	this->Bsdsysservice__OptResultOfBoolean::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfBoolean::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfBoolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfBoolean::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfBoolean::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfBoolean::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfBoolean::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfBoolean(soap, &this->Bsdsysservice__OptResultOfBoolean::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfBoolean::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfBoolean::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfBoolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfBoolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfBoolean(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfBoolean *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfBoolean::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfBoolean::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfBoolean(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfBoolean::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfBoolean::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfBoolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfBoolean(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfBoolean * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfBoolean(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfBoolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfBoolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean, sizeof(Bsdsysservice__OptResultOfBoolean), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfBoolean *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfBoolean::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfBoolean::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfBoolean(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfBoolean::Data), "Bsdsysservice:ArrayOfBoolean"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfBoolean::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfBoolean *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean, 0, sizeof(Bsdsysservice__OptResultOfBoolean), 0, soap_copy_Bsdsysservice__OptResultOfBoolean);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfBoolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfBoolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfBoolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfBoolean(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfBoolean * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfBoolean(struct soap *soap, Bsdsysservice__OptResultOfBoolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfBoolean * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfBoolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfBoolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfBoolean);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfBoolean);
		((Bsdsysservice__OptResultOfBoolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfBoolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfBoolean);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfBoolean*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfBoolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfBoolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfBoolean %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfBoolean*)p = *(Bsdsysservice__OptResultOfBoolean*)q;
}

void Bsdsysservice__UserForAppleEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__UserForAppleEntity::Userid);
	soap_default_std__string(soap, &this->Bsdsysservice__UserForAppleEntity::Username);
	soap_default_std__string(soap, &this->Bsdsysservice__UserForAppleEntity::ApplePCID);
	/* transient soap skipped */
}

void Bsdsysservice__UserForAppleEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__UserForAppleEntity::Userid, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__UserForAppleEntity::Userid);
	soap_embedded(soap, &this->Bsdsysservice__UserForAppleEntity::Username, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__UserForAppleEntity::Username);
	soap_embedded(soap, &this->Bsdsysservice__UserForAppleEntity::ApplePCID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__UserForAppleEntity::ApplePCID);
	/* transient soap skipped */
}

int Bsdsysservice__UserForAppleEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__UserForAppleEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__UserForAppleEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__UserForAppleEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Userid", -1, &(a->Bsdsysservice__UserForAppleEntity::Userid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Username", -1, &(a->Bsdsysservice__UserForAppleEntity::Username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:ApplePCID", -1, &(a->Bsdsysservice__UserForAppleEntity::ApplePCID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__UserForAppleEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__UserForAppleEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__UserForAppleEntity * SOAP_FMAC4 soap_in_Bsdsysservice__UserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__UserForAppleEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__UserForAppleEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity, sizeof(Bsdsysservice__UserForAppleEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__UserForAppleEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Userid1 = 1;
	size_t soap_flag_Username1 = 1;
	size_t soap_flag_ApplePCID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Userid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Userid", &(a->Bsdsysservice__UserForAppleEntity::Userid), "xsd:string"))
				{	soap_flag_Userid1--;
					continue;
				}
			if (soap_flag_Username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Username", &(a->Bsdsysservice__UserForAppleEntity::Username), "xsd:string"))
				{	soap_flag_Username1--;
					continue;
				}
			if (soap_flag_ApplePCID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:ApplePCID", &(a->Bsdsysservice__UserForAppleEntity::ApplePCID), "xsd:string"))
				{	soap_flag_ApplePCID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__UserForAppleEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity, 0, sizeof(Bsdsysservice__UserForAppleEntity), 0, soap_copy_Bsdsysservice__UserForAppleEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__UserForAppleEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:UserForAppleEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__UserForAppleEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__UserForAppleEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__UserForAppleEntity * SOAP_FMAC4 soap_get_Bsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__UserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__UserForAppleEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__UserForAppleEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__UserForAppleEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__UserForAppleEntity);
		if (size)
			*size = sizeof(Bsdsysservice__UserForAppleEntity);
		((Bsdsysservice__UserForAppleEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__UserForAppleEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__UserForAppleEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__UserForAppleEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__UserForAppleEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__UserForAppleEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__UserForAppleEntity %p -> %p\n", q, p));
	*(Bsdsysservice__UserForAppleEntity*)p = *(Bsdsysservice__UserForAppleEntity*)q;
}

void Bsdsysservice__ArrayOfUserForAppleEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfUserForAppleEntity::__sizeUserForAppleEntity = 0;
	this->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfUserForAppleEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfUserForAppleEntity::__sizeUserForAppleEntity; i++)
		{
			soap_serialize_PointerToBsdsysservice__UserForAppleEntity(soap, this->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfUserForAppleEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfUserForAppleEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfUserForAppleEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfUserForAppleEntity::__sizeUserForAppleEntity; i++)
			if (soap_out_PointerToBsdsysservice__UserForAppleEntity(soap, "Bsdsysservice:UserForAppleEntity", -1, a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfUserForAppleEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfUserForAppleEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfUserForAppleEntity * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfUserForAppleEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfUserForAppleEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity, sizeof(Bsdsysservice__ArrayOfUserForAppleEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfUserForAppleEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_UserForAppleEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:UserForAppleEntity", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity == NULL)
				{	if (soap_blist_UserForAppleEntity1 == NULL)
						soap_blist_UserForAppleEntity1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity = (Bsdsysservice__UserForAppleEntity **)soap_push_block(soap, soap_blist_UserForAppleEntity1, sizeof(Bsdsysservice__UserForAppleEntity *));
					if (a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity == NULL)
						return NULL;
					*a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdsysservice__UserForAppleEntity(soap, "Bsdsysservice:UserForAppleEntity", a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity, "Bsdsysservice:UserForAppleEntity"))
				{	a->Bsdsysservice__ArrayOfUserForAppleEntity::__sizeUserForAppleEntity++;
					a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity)
			soap_pop_block(soap, soap_blist_UserForAppleEntity1);
		if (a->Bsdsysservice__ArrayOfUserForAppleEntity::__sizeUserForAppleEntity)
			a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity = (Bsdsysservice__UserForAppleEntity **)soap_save_block(soap, soap_blist_UserForAppleEntity1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfUserForAppleEntity::UserForAppleEntity = NULL;
			if (soap_blist_UserForAppleEntity1)
				soap_end_block(soap, soap_blist_UserForAppleEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfUserForAppleEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity, 0, sizeof(Bsdsysservice__ArrayOfUserForAppleEntity), 0, soap_copy_Bsdsysservice__ArrayOfUserForAppleEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfUserForAppleEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfUserForAppleEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfUserForAppleEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfUserForAppleEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfUserForAppleEntity * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, Bsdsysservice__ArrayOfUserForAppleEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfUserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfUserForAppleEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfUserForAppleEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfUserForAppleEntity);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfUserForAppleEntity);
		((Bsdsysservice__ArrayOfUserForAppleEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfUserForAppleEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfUserForAppleEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfUserForAppleEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfUserForAppleEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfUserForAppleEntity %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfUserForAppleEntity*)p = *(Bsdsysservice__ArrayOfUserForAppleEntity*)q;
}

void Bsdsysservice__OptResultOfUserForAppleEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Msg);
	this->Bsdsysservice__OptResultOfUserForAppleEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfUserForAppleEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfUserForAppleEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfUserForAppleEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfUserForAppleEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfUserForAppleEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfUserForAppleEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfUserForAppleEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfUserForAppleEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfUserForAppleEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfUserForAppleEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfUserForAppleEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfUserForAppleEntity * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfUserForAppleEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfUserForAppleEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity, sizeof(Bsdsysservice__OptResultOfUserForAppleEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfUserForAppleEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfUserForAppleEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfUserForAppleEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfUserForAppleEntity::Data), "Bsdsysservice:ArrayOfUserForAppleEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfUserForAppleEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfUserForAppleEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity, 0, sizeof(Bsdsysservice__OptResultOfUserForAppleEntity), 0, soap_copy_Bsdsysservice__OptResultOfUserForAppleEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfUserForAppleEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfUserForAppleEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfUserForAppleEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfUserForAppleEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfUserForAppleEntity * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, Bsdsysservice__OptResultOfUserForAppleEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfUserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfUserForAppleEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfUserForAppleEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfUserForAppleEntity);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfUserForAppleEntity);
		((Bsdsysservice__OptResultOfUserForAppleEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfUserForAppleEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfUserForAppleEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfUserForAppleEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfUserForAppleEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfUserForAppleEntity %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfUserForAppleEntity*)p = *(Bsdsysservice__OptResultOfUserForAppleEntity*)q;
}

void Bsdsysservice__Comm_USCOREuserEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Userid);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Username);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::ApplePCID);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Empno);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Userdesc);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Password);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Areacode);
	soap_default_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::UserToken);
	/* transient soap skipped */
}

void Bsdsysservice__Comm_USCOREuserEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Userid, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Userid);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Username, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Username);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::ApplePCID, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::ApplePCID);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Empno, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Empno);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Userdesc, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Userdesc);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Password, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Password);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Areacode, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::Areacode);
	soap_embedded(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::UserToken, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__Comm_USCOREuserEntity::UserToken);
	/* transient soap skipped */
}

int Bsdsysservice__Comm_USCOREuserEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__Comm_USCOREuserEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__Comm_USCOREuserEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__Comm_USCOREuserEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Userid", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::Userid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Username", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::Username), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:ApplePCID", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::ApplePCID), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Empno", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::Empno), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Userdesc", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::Userdesc), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Password", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::Password), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Areacode", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::Areacode), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UserToken", -1, &(a->Bsdsysservice__Comm_USCOREuserEntity::UserToken), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__Comm_USCOREuserEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__Comm_USCOREuserEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREuserEntity * SOAP_FMAC4 soap_in_Bsdsysservice__Comm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREuserEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__Comm_USCOREuserEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity, sizeof(Bsdsysservice__Comm_USCOREuserEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__Comm_USCOREuserEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Userid1 = 1;
	size_t soap_flag_Username1 = 1;
	size_t soap_flag_ApplePCID1 = 1;
	size_t soap_flag_Empno1 = 1;
	size_t soap_flag_Userdesc1 = 1;
	size_t soap_flag_Password1 = 1;
	size_t soap_flag_Areacode1 = 1;
	size_t soap_flag_UserToken1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Userid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Userid", &(a->Bsdsysservice__Comm_USCOREuserEntity::Userid), "xsd:string"))
				{	soap_flag_Userid1--;
					continue;
				}
			if (soap_flag_Username1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Username", &(a->Bsdsysservice__Comm_USCOREuserEntity::Username), "xsd:string"))
				{	soap_flag_Username1--;
					continue;
				}
			if (soap_flag_ApplePCID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:ApplePCID", &(a->Bsdsysservice__Comm_USCOREuserEntity::ApplePCID), "xsd:string"))
				{	soap_flag_ApplePCID1--;
					continue;
				}
			if (soap_flag_Empno1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Empno", &(a->Bsdsysservice__Comm_USCOREuserEntity::Empno), "xsd:string"))
				{	soap_flag_Empno1--;
					continue;
				}
			if (soap_flag_Userdesc1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Userdesc", &(a->Bsdsysservice__Comm_USCOREuserEntity::Userdesc), "xsd:string"))
				{	soap_flag_Userdesc1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Password", &(a->Bsdsysservice__Comm_USCOREuserEntity::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			if (soap_flag_Areacode1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Areacode", &(a->Bsdsysservice__Comm_USCOREuserEntity::Areacode), "xsd:string"))
				{	soap_flag_Areacode1--;
					continue;
				}
			if (soap_flag_UserToken1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UserToken", &(a->Bsdsysservice__Comm_USCOREuserEntity::UserToken), "xsd:string"))
				{	soap_flag_UserToken1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__Comm_USCOREuserEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity, 0, sizeof(Bsdsysservice__Comm_USCOREuserEntity), 0, soap_copy_Bsdsysservice__Comm_USCOREuserEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__Comm_USCOREuserEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:Comm_userEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__Comm_USCOREuserEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__Comm_USCOREuserEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREuserEntity * SOAP_FMAC4 soap_get_Bsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__Comm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__Comm_USCOREuserEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__Comm_USCOREuserEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__Comm_USCOREuserEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__Comm_USCOREuserEntity);
		if (size)
			*size = sizeof(Bsdsysservice__Comm_USCOREuserEntity);
		((Bsdsysservice__Comm_USCOREuserEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__Comm_USCOREuserEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__Comm_USCOREuserEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__Comm_USCOREuserEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__Comm_USCOREuserEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__Comm_USCOREuserEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__Comm_USCOREuserEntity %p -> %p\n", q, p));
	*(Bsdsysservice__Comm_USCOREuserEntity*)p = *(Bsdsysservice__Comm_USCOREuserEntity*)q;
}

void Bsdsysservice__ArrayOfComm_USCOREuserEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->Bsdsysservice__ArrayOfComm_USCOREuserEntity::__sizeComm_USCOREuserEntity = 0;
	this->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity = NULL;
	/* transient soap skipped */
}

void Bsdsysservice__ArrayOfComm_USCOREuserEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity)
	{	int i;
		for (i = 0; i < this->Bsdsysservice__ArrayOfComm_USCOREuserEntity::__sizeComm_USCOREuserEntity; i++)
		{
			soap_serialize_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, this->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity + i);
		}
	}
	/* transient soap skipped */
}

int Bsdsysservice__ArrayOfComm_USCOREuserEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__ArrayOfComm_USCOREuserEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity), type))
		return soap->error;
	if (a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity)
	{	int i;
		for (i = 0; i < a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::__sizeComm_USCOREuserEntity; i++)
			if (soap_out_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, "Bsdsysservice:Comm_userEntity", -1, a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__ArrayOfComm_USCOREuserEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREuserEntity * SOAP_FMAC4 soap_in_Bsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfComm_USCOREuserEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__ArrayOfComm_USCOREuserEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity, sizeof(Bsdsysservice__ArrayOfComm_USCOREuserEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__ArrayOfComm_USCOREuserEntity *)a->soap_in(soap, tag, type);
		}
	}
	struct soap_blist *soap_blist_Comm_USCOREuserEntity1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "Bsdsysservice:Comm_userEntity", 1, NULL))
			{	if (a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity == NULL)
				{	if (soap_blist_Comm_USCOREuserEntity1 == NULL)
						soap_blist_Comm_USCOREuserEntity1 = soap_new_block(soap);
					a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity = (Bsdsysservice__Comm_USCOREuserEntity **)soap_push_block(soap, soap_blist_Comm_USCOREuserEntity1, sizeof(Bsdsysservice__Comm_USCOREuserEntity *));
					if (a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity == NULL)
						return NULL;
					*a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, "Bsdsysservice:Comm_userEntity", a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity, "Bsdsysservice:Comm_userEntity"))
				{	a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::__sizeComm_USCOREuserEntity++;
					a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity = NULL;
					continue;
				}
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity)
			soap_pop_block(soap, soap_blist_Comm_USCOREuserEntity1);
		if (a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::__sizeComm_USCOREuserEntity)
			a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity = (Bsdsysservice__Comm_USCOREuserEntity **)soap_save_block(soap, soap_blist_Comm_USCOREuserEntity1, NULL, 1);
		else
		{	a->Bsdsysservice__ArrayOfComm_USCOREuserEntity::Comm_USCOREuserEntity = NULL;
			if (soap_blist_Comm_USCOREuserEntity1)
				soap_end_block(soap, soap_blist_Comm_USCOREuserEntity1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__ArrayOfComm_USCOREuserEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity, 0, sizeof(Bsdsysservice__ArrayOfComm_USCOREuserEntity), 0, soap_copy_Bsdsysservice__ArrayOfComm_USCOREuserEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__ArrayOfComm_USCOREuserEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:ArrayOfComm_userEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__ArrayOfComm_USCOREuserEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREuserEntity * SOAP_FMAC4 soap_get_Bsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREuserEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__ArrayOfComm_USCOREuserEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREuserEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfComm_USCOREuserEntity);
		if (size)
			*size = sizeof(Bsdsysservice__ArrayOfComm_USCOREuserEntity);
		((Bsdsysservice__ArrayOfComm_USCOREuserEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__ArrayOfComm_USCOREuserEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__ArrayOfComm_USCOREuserEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__ArrayOfComm_USCOREuserEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__ArrayOfComm_USCOREuserEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__ArrayOfComm_USCOREuserEntity %p -> %p\n", q, p));
	*(Bsdsysservice__ArrayOfComm_USCOREuserEntity*)p = *(Bsdsysservice__ArrayOfComm_USCOREuserEntity*)q;
}

void Bsdsysservice__OptResultOfComm_USCOREuserEntity::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Result);
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Msg);
	this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Data = NULL;
	soap_default_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::UpdateDate);
	/* transient soap skipped */
}

void Bsdsysservice__OptResultOfComm_USCOREuserEntity::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Result, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Result);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Msg, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Msg);
	soap_serialize_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Data);
	soap_embedded(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::UpdateDate, SOAP_TYPE_Bsdsysservice_std__string);
	soap_serialize_std__string(soap, &this->Bsdsysservice__OptResultOfComm_USCOREuserEntity::UpdateDate);
	/* transient soap skipped */
}

int Bsdsysservice__OptResultOfComm_USCOREuserEntity::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_Bsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, const char *tag, int id, const Bsdsysservice__OptResultOfComm_USCOREuserEntity *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity), type))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Result", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Result), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:Msg", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Msg), ""))
		return soap->error;
	if (soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, "Bsdsysservice:Data", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Data), ""))
		return soap->error;
	if (soap_out_std__string(soap, "Bsdsysservice:UpdateDate", -1, &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::UpdateDate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *Bsdsysservice__OptResultOfComm_USCOREuserEntity::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, tag, this, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREuserEntity * SOAP_FMAC4 soap_in_Bsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfComm_USCOREuserEntity *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (Bsdsysservice__OptResultOfComm_USCOREuserEntity *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity, sizeof(Bsdsysservice__OptResultOfComm_USCOREuserEntity), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (Bsdsysservice__OptResultOfComm_USCOREuserEntity *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_Result1 = 1;
	size_t soap_flag_Msg1 = 1;
	size_t soap_flag_Data1 = 1;
	size_t soap_flag_UpdateDate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Result1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Result", &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Result), "xsd:string"))
				{	soap_flag_Result1--;
					continue;
				}
			if (soap_flag_Msg1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:Msg", &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Msg), "xsd:string"))
				{	soap_flag_Msg1--;
					continue;
				}
			if (soap_flag_Data1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, "Bsdsysservice:Data", &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::Data), "Bsdsysservice:ArrayOfComm_userEntity"))
				{	soap_flag_Data1--;
					continue;
				}
			if (soap_flag_UpdateDate1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "Bsdsysservice:UpdateDate", &(a->Bsdsysservice__OptResultOfComm_USCOREuserEntity::UpdateDate), "xsd:string"))
				{	soap_flag_UpdateDate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__OptResultOfComm_USCOREuserEntity *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity, 0, sizeof(Bsdsysservice__OptResultOfComm_USCOREuserEntity), 0, soap_copy_Bsdsysservice__OptResultOfComm_USCOREuserEntity);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int Bsdsysservice__OptResultOfComm_USCOREuserEntity::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity);
	if (this->soap_out(soap, tag?tag:"Bsdsysservice:OptResultOfComm_userEntity", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *Bsdsysservice__OptResultOfComm_USCOREuserEntity::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, this, tag, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREuserEntity * SOAP_FMAC4 soap_get_Bsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREuserEntity *p, const char *tag, const char *type)
{
	if ((p = soap_in_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 Bsdsysservice__OptResultOfComm_USCOREuserEntity * SOAP_FMAC2 soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREuserEntity(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfComm_USCOREuserEntity);
		if (size)
			*size = sizeof(Bsdsysservice__OptResultOfComm_USCOREuserEntity);
		((Bsdsysservice__OptResultOfComm_USCOREuserEntity*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(Bsdsysservice__OptResultOfComm_USCOREuserEntity[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(Bsdsysservice__OptResultOfComm_USCOREuserEntity);
		for (int i = 0; i < n; i++)
			((Bsdsysservice__OptResultOfComm_USCOREuserEntity*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (Bsdsysservice__OptResultOfComm_USCOREuserEntity*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_Bsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying Bsdsysservice__OptResultOfComm_USCOREuserEntity %p -> %p\n", q, p));
	*(Bsdsysservice__OptResultOfComm_USCOREuserEntity*)p = *(Bsdsysservice__OptResultOfComm_USCOREuserEntity*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_Bsdsysservice_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdsysservice_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdsysservice_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_Bsdsysservice_xsd__decimal, 0, sizeof(std::string), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_Bsdsysservice_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdsysservice_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_string_in(soap, 1, 0, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_Bsdsysservice_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_Bsdsysservice_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_std__string, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Fault, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Header, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetUserList(struct soap *soap, struct __Bsdsysservice__GetUserList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetUserList = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetUserList(struct soap *soap, const struct __Bsdsysservice__GetUserList *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetUserList(soap, &a->Bsdsysservice__GetUserList);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetUserList(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetUserList *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetUserList(soap, "Bsdsysservice:GetUserList", -1, &a->Bsdsysservice__GetUserList, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUserList * SOAP_FMAC4 soap_in___Bsdsysservice__GetUserList(struct soap *soap, const char *tag, struct __Bsdsysservice__GetUserList *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetUserList = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetUserList *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList, sizeof(struct __Bsdsysservice__GetUserList), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetUserList(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetUserList && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetUserList(soap, "Bsdsysservice:GetUserList", &a->Bsdsysservice__GetUserList, ""))
				{	soap_flag_Bsdsysservice__GetUserList--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetUserList(struct soap *soap, const struct __Bsdsysservice__GetUserList *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetUserList(soap, tag?tag:"-Bsdsysservice:GetUserList", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUserList * SOAP_FMAC4 soap_get___Bsdsysservice__GetUserList(struct soap *soap, struct __Bsdsysservice__GetUserList *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetUserList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetUserList * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetUserList(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetUserList(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUserList);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetUserList);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUserList[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetUserList);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetUserList*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetUserList(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetUserList %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetUserList*)p = *(struct __Bsdsysservice__GetUserList*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetAllUserID(struct soap *soap, struct __Bsdsysservice__GetAllUserID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetAllUserID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetAllUserID(struct soap *soap, const struct __Bsdsysservice__GetAllUserID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetAllUserID(soap, &a->Bsdsysservice__GetAllUserID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetAllUserID(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetAllUserID *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetAllUserID(soap, "Bsdsysservice:GetAllUserID", -1, &a->Bsdsysservice__GetAllUserID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetAllUserID * SOAP_FMAC4 soap_in___Bsdsysservice__GetAllUserID(struct soap *soap, const char *tag, struct __Bsdsysservice__GetAllUserID *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetAllUserID = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetAllUserID *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAllUserID, sizeof(struct __Bsdsysservice__GetAllUserID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetAllUserID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetAllUserID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetAllUserID(soap, "Bsdsysservice:GetAllUserID", &a->Bsdsysservice__GetAllUserID, ""))
				{	soap_flag_Bsdsysservice__GetAllUserID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetAllUserID(struct soap *soap, const struct __Bsdsysservice__GetAllUserID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetAllUserID(soap, tag?tag:"-Bsdsysservice:GetAllUserID", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetAllUserID * SOAP_FMAC4 soap_get___Bsdsysservice__GetAllUserID(struct soap *soap, struct __Bsdsysservice__GetAllUserID *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetAllUserID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetAllUserID * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetAllUserID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetAllUserID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAllUserID, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetAllUserID);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetAllUserID);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetAllUserID[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetAllUserID);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetAllUserID*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetAllUserID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetAllUserID %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetAllUserID*)p = *(struct __Bsdsysservice__GetAllUserID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetDepartmentList3(struct soap *soap, struct __Bsdsysservice__GetDepartmentList3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetDepartmentList3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetDepartmentList3(struct soap *soap, const struct __Bsdsysservice__GetDepartmentList3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetDepartmentList3(soap, &a->Bsdsysservice__GetDepartmentList3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetDepartmentList3(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetDepartmentList3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetDepartmentList3(soap, "Bsdsysservice:GetDepartmentList3", -1, &a->Bsdsysservice__GetDepartmentList3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetDepartmentList3 * SOAP_FMAC4 soap_in___Bsdsysservice__GetDepartmentList3(struct soap *soap, const char *tag, struct __Bsdsysservice__GetDepartmentList3 *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetDepartmentList3 = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetDepartmentList3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetDepartmentList3, sizeof(struct __Bsdsysservice__GetDepartmentList3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetDepartmentList3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetDepartmentList3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetDepartmentList3(soap, "Bsdsysservice:GetDepartmentList3", &a->Bsdsysservice__GetDepartmentList3, ""))
				{	soap_flag_Bsdsysservice__GetDepartmentList3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetDepartmentList3(struct soap *soap, const struct __Bsdsysservice__GetDepartmentList3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetDepartmentList3(soap, tag?tag:"-Bsdsysservice:GetDepartmentList3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetDepartmentList3 * SOAP_FMAC4 soap_get___Bsdsysservice__GetDepartmentList3(struct soap *soap, struct __Bsdsysservice__GetDepartmentList3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetDepartmentList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetDepartmentList3 * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetDepartmentList3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetDepartmentList3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetDepartmentList3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetDepartmentList3);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetDepartmentList3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetDepartmentList3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetDepartmentList3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetDepartmentList3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetDepartmentList3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetDepartmentList3 %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetDepartmentList3*)p = *(struct __Bsdsysservice__GetDepartmentList3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetUserList3(struct soap *soap, struct __Bsdsysservice__GetUserList3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetUserList3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetUserList3(struct soap *soap, const struct __Bsdsysservice__GetUserList3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetUserList3(soap, &a->Bsdsysservice__GetUserList3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetUserList3(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetUserList3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetUserList3(soap, "Bsdsysservice:GetUserList3", -1, &a->Bsdsysservice__GetUserList3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUserList3 * SOAP_FMAC4 soap_in___Bsdsysservice__GetUserList3(struct soap *soap, const char *tag, struct __Bsdsysservice__GetUserList3 *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetUserList3 = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetUserList3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList3, sizeof(struct __Bsdsysservice__GetUserList3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetUserList3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetUserList3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetUserList3(soap, "Bsdsysservice:GetUserList3", &a->Bsdsysservice__GetUserList3, ""))
				{	soap_flag_Bsdsysservice__GetUserList3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetUserList3(struct soap *soap, const struct __Bsdsysservice__GetUserList3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetUserList3(soap, tag?tag:"-Bsdsysservice:GetUserList3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUserList3 * SOAP_FMAC4 soap_get___Bsdsysservice__GetUserList3(struct soap *soap, struct __Bsdsysservice__GetUserList3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetUserList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetUserList3 * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetUserList3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetUserList3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUserList3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUserList3);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetUserList3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUserList3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetUserList3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetUserList3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetUserList3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetUserList3 %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetUserList3*)p = *(struct __Bsdsysservice__GetUserList3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetRegions3(struct soap *soap, struct __Bsdsysservice__GetRegions3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetRegions3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetRegions3(struct soap *soap, const struct __Bsdsysservice__GetRegions3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetRegions3(soap, &a->Bsdsysservice__GetRegions3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetRegions3(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetRegions3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetRegions3(soap, "Bsdsysservice:GetRegions3", -1, &a->Bsdsysservice__GetRegions3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetRegions3 * SOAP_FMAC4 soap_in___Bsdsysservice__GetRegions3(struct soap *soap, const char *tag, struct __Bsdsysservice__GetRegions3 *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetRegions3 = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetRegions3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions3, sizeof(struct __Bsdsysservice__GetRegions3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetRegions3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetRegions3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetRegions3(soap, "Bsdsysservice:GetRegions3", &a->Bsdsysservice__GetRegions3, ""))
				{	soap_flag_Bsdsysservice__GetRegions3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetRegions3(struct soap *soap, const struct __Bsdsysservice__GetRegions3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetRegions3(soap, tag?tag:"-Bsdsysservice:GetRegions3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetRegions3 * SOAP_FMAC4 soap_get___Bsdsysservice__GetRegions3(struct soap *soap, struct __Bsdsysservice__GetRegions3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetRegions3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetRegions3 * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetRegions3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetRegions3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetRegions3);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetRegions3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetRegions3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetRegions3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetRegions3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetRegions3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetRegions3 %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetRegions3*)p = *(struct __Bsdsysservice__GetRegions3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetRegions(struct soap *soap, struct __Bsdsysservice__GetRegions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetRegions = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetRegions(struct soap *soap, const struct __Bsdsysservice__GetRegions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetRegions(soap, &a->Bsdsysservice__GetRegions);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetRegions(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetRegions *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetRegions(soap, "Bsdsysservice:GetRegions", -1, &a->Bsdsysservice__GetRegions, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetRegions * SOAP_FMAC4 soap_in___Bsdsysservice__GetRegions(struct soap *soap, const char *tag, struct __Bsdsysservice__GetRegions *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetRegions = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetRegions *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions, sizeof(struct __Bsdsysservice__GetRegions), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetRegions(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetRegions && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetRegions(soap, "Bsdsysservice:GetRegions", &a->Bsdsysservice__GetRegions, ""))
				{	soap_flag_Bsdsysservice__GetRegions--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetRegions(struct soap *soap, const struct __Bsdsysservice__GetRegions *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetRegions(soap, tag?tag:"-Bsdsysservice:GetRegions", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetRegions * SOAP_FMAC4 soap_get___Bsdsysservice__GetRegions(struct soap *soap, struct __Bsdsysservice__GetRegions *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetRegions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetRegions * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetRegions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetRegions(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetRegions, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetRegions);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetRegions);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetRegions[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetRegions);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetRegions*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetRegions(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetRegions %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetRegions*)p = *(struct __Bsdsysservice__GetRegions*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetFunctions3(struct soap *soap, struct __Bsdsysservice__GetFunctions3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetFunctions3 = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetFunctions3(struct soap *soap, const struct __Bsdsysservice__GetFunctions3 *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetFunctions3(soap, &a->Bsdsysservice__GetFunctions3);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetFunctions3(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetFunctions3 *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetFunctions3(soap, "Bsdsysservice:GetFunctions3", -1, &a->Bsdsysservice__GetFunctions3, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetFunctions3 * SOAP_FMAC4 soap_in___Bsdsysservice__GetFunctions3(struct soap *soap, const char *tag, struct __Bsdsysservice__GetFunctions3 *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetFunctions3 = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetFunctions3 *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctions3, sizeof(struct __Bsdsysservice__GetFunctions3), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetFunctions3(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetFunctions3 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetFunctions3(soap, "Bsdsysservice:GetFunctions3", &a->Bsdsysservice__GetFunctions3, ""))
				{	soap_flag_Bsdsysservice__GetFunctions3--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetFunctions3(struct soap *soap, const struct __Bsdsysservice__GetFunctions3 *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetFunctions3(soap, tag?tag:"-Bsdsysservice:GetFunctions3", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetFunctions3 * SOAP_FMAC4 soap_get___Bsdsysservice__GetFunctions3(struct soap *soap, struct __Bsdsysservice__GetFunctions3 *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetFunctions3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetFunctions3 * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetFunctions3(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetFunctions3(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctions3, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetFunctions3);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetFunctions3);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetFunctions3[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetFunctions3);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetFunctions3*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetFunctions3(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetFunctions3 %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetFunctions3*)p = *(struct __Bsdsysservice__GetFunctions3*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, struct __Bsdsysservice__GetFunctionsByUserId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetFunctionsByUserId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const struct __Bsdsysservice__GetFunctionsByUserId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, &a->Bsdsysservice__GetFunctionsByUserId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetFunctionsByUserId *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, "Bsdsysservice:GetFunctionsByUserId", -1, &a->Bsdsysservice__GetFunctionsByUserId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetFunctionsByUserId * SOAP_FMAC4 soap_in___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const char *tag, struct __Bsdsysservice__GetFunctionsByUserId *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetFunctionsByUserId = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetFunctionsByUserId *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctionsByUserId, sizeof(struct __Bsdsysservice__GetFunctionsByUserId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetFunctionsByUserId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetFunctionsByUserId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, "Bsdsysservice:GetFunctionsByUserId", &a->Bsdsysservice__GetFunctionsByUserId, ""))
				{	soap_flag_Bsdsysservice__GetFunctionsByUserId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const struct __Bsdsysservice__GetFunctionsByUserId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetFunctionsByUserId(soap, tag?tag:"-Bsdsysservice:GetFunctionsByUserId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetFunctionsByUserId * SOAP_FMAC4 soap_get___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, struct __Bsdsysservice__GetFunctionsByUserId *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetFunctionsByUserId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetFunctionsByUserId * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetFunctionsByUserId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetFunctionsByUserId, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetFunctionsByUserId);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetFunctionsByUserId);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetFunctionsByUserId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetFunctionsByUserId);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetFunctionsByUserId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetFunctionsByUserId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetFunctionsByUserId %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetFunctionsByUserId*)p = *(struct __Bsdsysservice__GetFunctionsByUserId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetMobileByUserId(struct soap *soap, struct __Bsdsysservice__GetMobileByUserId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetMobileByUserId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetMobileByUserId(struct soap *soap, const struct __Bsdsysservice__GetMobileByUserId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetMobileByUserId(soap, &a->Bsdsysservice__GetMobileByUserId);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetMobileByUserId(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetMobileByUserId *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetMobileByUserId(soap, "Bsdsysservice:GetMobileByUserId", -1, &a->Bsdsysservice__GetMobileByUserId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetMobileByUserId * SOAP_FMAC4 soap_in___Bsdsysservice__GetMobileByUserId(struct soap *soap, const char *tag, struct __Bsdsysservice__GetMobileByUserId *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetMobileByUserId = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetMobileByUserId *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetMobileByUserId, sizeof(struct __Bsdsysservice__GetMobileByUserId), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetMobileByUserId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetMobileByUserId && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetMobileByUserId(soap, "Bsdsysservice:GetMobileByUserId", &a->Bsdsysservice__GetMobileByUserId, ""))
				{	soap_flag_Bsdsysservice__GetMobileByUserId--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetMobileByUserId(struct soap *soap, const struct __Bsdsysservice__GetMobileByUserId *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetMobileByUserId(soap, tag?tag:"-Bsdsysservice:GetMobileByUserId", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetMobileByUserId * SOAP_FMAC4 soap_get___Bsdsysservice__GetMobileByUserId(struct soap *soap, struct __Bsdsysservice__GetMobileByUserId *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetMobileByUserId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetMobileByUserId * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetMobileByUserId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetMobileByUserId(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetMobileByUserId, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetMobileByUserId);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetMobileByUserId);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetMobileByUserId[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetMobileByUserId);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetMobileByUserId*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetMobileByUserId(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetMobileByUserId %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetMobileByUserId*)p = *(struct __Bsdsysservice__GetMobileByUserId*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__WriteLog(struct soap *soap, struct __Bsdsysservice__WriteLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__WriteLog = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__WriteLog(struct soap *soap, const struct __Bsdsysservice__WriteLog *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__WriteLog(soap, &a->Bsdsysservice__WriteLog);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__WriteLog(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__WriteLog *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__WriteLog(soap, "Bsdsysservice:WriteLog", -1, &a->Bsdsysservice__WriteLog, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__WriteLog * SOAP_FMAC4 soap_in___Bsdsysservice__WriteLog(struct soap *soap, const char *tag, struct __Bsdsysservice__WriteLog *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__WriteLog = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__WriteLog *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__WriteLog, sizeof(struct __Bsdsysservice__WriteLog), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__WriteLog(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__WriteLog && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__WriteLog(soap, "Bsdsysservice:WriteLog", &a->Bsdsysservice__WriteLog, ""))
				{	soap_flag_Bsdsysservice__WriteLog--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__WriteLog(struct soap *soap, const struct __Bsdsysservice__WriteLog *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__WriteLog(soap, tag?tag:"-Bsdsysservice:WriteLog", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__WriteLog * SOAP_FMAC4 soap_get___Bsdsysservice__WriteLog(struct soap *soap, struct __Bsdsysservice__WriteLog *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__WriteLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__WriteLog * SOAP_FMAC2 soap_instantiate___Bsdsysservice__WriteLog(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__WriteLog(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__WriteLog, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__WriteLog);
		if (size)
			*size = sizeof(struct __Bsdsysservice__WriteLog);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__WriteLog[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__WriteLog);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__WriteLog*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__WriteLog(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__WriteLog %p -> %p\n", q, p));
	*(struct __Bsdsysservice__WriteLog*)p = *(struct __Bsdsysservice__WriteLog*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetUnSendMsg(struct soap *soap, struct __Bsdsysservice__GetUnSendMsg *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetUnSendMsg = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetUnSendMsg(struct soap *soap, const struct __Bsdsysservice__GetUnSendMsg *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetUnSendMsg(soap, &a->Bsdsysservice__GetUnSendMsg);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetUnSendMsg(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetUnSendMsg *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetUnSendMsg(soap, "Bsdsysservice:GetUnSendMsg", -1, &a->Bsdsysservice__GetUnSendMsg, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUnSendMsg * SOAP_FMAC4 soap_in___Bsdsysservice__GetUnSendMsg(struct soap *soap, const char *tag, struct __Bsdsysservice__GetUnSendMsg *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetUnSendMsg = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetUnSendMsg *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUnSendMsg, sizeof(struct __Bsdsysservice__GetUnSendMsg), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetUnSendMsg(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetUnSendMsg && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetUnSendMsg(soap, "Bsdsysservice:GetUnSendMsg", &a->Bsdsysservice__GetUnSendMsg, ""))
				{	soap_flag_Bsdsysservice__GetUnSendMsg--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetUnSendMsg(struct soap *soap, const struct __Bsdsysservice__GetUnSendMsg *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetUnSendMsg(soap, tag?tag:"-Bsdsysservice:GetUnSendMsg", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUnSendMsg * SOAP_FMAC4 soap_get___Bsdsysservice__GetUnSendMsg(struct soap *soap, struct __Bsdsysservice__GetUnSendMsg *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetUnSendMsg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetUnSendMsg * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetUnSendMsg(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetUnSendMsg(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUnSendMsg, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUnSendMsg);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetUnSendMsg);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUnSendMsg[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetUnSendMsg);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetUnSendMsg*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetUnSendMsg(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetUnSendMsg %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetUnSendMsg*)p = *(struct __Bsdsysservice__GetUnSendMsg*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__AlertMsgDirect(struct soap *soap, struct __Bsdsysservice__AlertMsgDirect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__AlertMsgDirect = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__AlertMsgDirect(struct soap *soap, const struct __Bsdsysservice__AlertMsgDirect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__AlertMsgDirect(soap, &a->Bsdsysservice__AlertMsgDirect);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__AlertMsgDirect(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__AlertMsgDirect *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__AlertMsgDirect(soap, "Bsdsysservice:AlertMsgDirect", -1, &a->Bsdsysservice__AlertMsgDirect, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__AlertMsgDirect * SOAP_FMAC4 soap_in___Bsdsysservice__AlertMsgDirect(struct soap *soap, const char *tag, struct __Bsdsysservice__AlertMsgDirect *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__AlertMsgDirect = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__AlertMsgDirect *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__AlertMsgDirect, sizeof(struct __Bsdsysservice__AlertMsgDirect), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__AlertMsgDirect(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__AlertMsgDirect && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__AlertMsgDirect(soap, "Bsdsysservice:AlertMsgDirect", &a->Bsdsysservice__AlertMsgDirect, ""))
				{	soap_flag_Bsdsysservice__AlertMsgDirect--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__AlertMsgDirect(struct soap *soap, const struct __Bsdsysservice__AlertMsgDirect *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__AlertMsgDirect(soap, tag?tag:"-Bsdsysservice:AlertMsgDirect", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__AlertMsgDirect * SOAP_FMAC4 soap_get___Bsdsysservice__AlertMsgDirect(struct soap *soap, struct __Bsdsysservice__AlertMsgDirect *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__AlertMsgDirect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__AlertMsgDirect * SOAP_FMAC2 soap_instantiate___Bsdsysservice__AlertMsgDirect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__AlertMsgDirect(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__AlertMsgDirect, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__AlertMsgDirect);
		if (size)
			*size = sizeof(struct __Bsdsysservice__AlertMsgDirect);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__AlertMsgDirect[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__AlertMsgDirect);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__AlertMsgDirect*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__AlertMsgDirect(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__AlertMsgDirect %p -> %p\n", q, p));
	*(struct __Bsdsysservice__AlertMsgDirect*)p = *(struct __Bsdsysservice__AlertMsgDirect*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetConnString(struct soap *soap, struct __Bsdsysservice__GetConnString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetConnString = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetConnString(struct soap *soap, const struct __Bsdsysservice__GetConnString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetConnString(soap, &a->Bsdsysservice__GetConnString);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetConnString(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetConnString *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetConnString(soap, "Bsdsysservice:GetConnString", -1, &a->Bsdsysservice__GetConnString, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetConnString * SOAP_FMAC4 soap_in___Bsdsysservice__GetConnString(struct soap *soap, const char *tag, struct __Bsdsysservice__GetConnString *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetConnString = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetConnString *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetConnString, sizeof(struct __Bsdsysservice__GetConnString), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetConnString(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetConnString && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetConnString(soap, "Bsdsysservice:GetConnString", &a->Bsdsysservice__GetConnString, ""))
				{	soap_flag_Bsdsysservice__GetConnString--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetConnString(struct soap *soap, const struct __Bsdsysservice__GetConnString *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetConnString(soap, tag?tag:"-Bsdsysservice:GetConnString", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetConnString * SOAP_FMAC4 soap_get___Bsdsysservice__GetConnString(struct soap *soap, struct __Bsdsysservice__GetConnString *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetConnString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetConnString * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetConnString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetConnString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetConnString, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetConnString);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetConnString);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetConnString[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetConnString);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetConnString*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetConnString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetConnString %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetConnString*)p = *(struct __Bsdsysservice__GetConnString*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetAppSetting(struct soap *soap, struct __Bsdsysservice__GetAppSetting *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetAppSetting = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetAppSetting(struct soap *soap, const struct __Bsdsysservice__GetAppSetting *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetAppSetting(soap, &a->Bsdsysservice__GetAppSetting);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetAppSetting(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetAppSetting *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetAppSetting(soap, "Bsdsysservice:GetAppSetting", -1, &a->Bsdsysservice__GetAppSetting, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetAppSetting * SOAP_FMAC4 soap_in___Bsdsysservice__GetAppSetting(struct soap *soap, const char *tag, struct __Bsdsysservice__GetAppSetting *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetAppSetting = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetAppSetting *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAppSetting, sizeof(struct __Bsdsysservice__GetAppSetting), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetAppSetting(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetAppSetting && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetAppSetting(soap, "Bsdsysservice:GetAppSetting", &a->Bsdsysservice__GetAppSetting, ""))
				{	soap_flag_Bsdsysservice__GetAppSetting--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetAppSetting(struct soap *soap, const struct __Bsdsysservice__GetAppSetting *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetAppSetting(soap, tag?tag:"-Bsdsysservice:GetAppSetting", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetAppSetting * SOAP_FMAC4 soap_get___Bsdsysservice__GetAppSetting(struct soap *soap, struct __Bsdsysservice__GetAppSetting *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetAppSetting(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetAppSetting * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetAppSetting(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetAppSetting(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetAppSetting, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetAppSetting);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetAppSetting);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetAppSetting[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetAppSetting);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetAppSetting*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetAppSetting(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetAppSetting %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetAppSetting*)p = *(struct __Bsdsysservice__GetAppSetting*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetServerTime(struct soap *soap, struct __Bsdsysservice__GetServerTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetServerTime = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetServerTime(struct soap *soap, const struct __Bsdsysservice__GetServerTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetServerTime(soap, &a->Bsdsysservice__GetServerTime);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetServerTime(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetServerTime *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetServerTime(soap, "Bsdsysservice:GetServerTime", -1, &a->Bsdsysservice__GetServerTime, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetServerTime * SOAP_FMAC4 soap_in___Bsdsysservice__GetServerTime(struct soap *soap, const char *tag, struct __Bsdsysservice__GetServerTime *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetServerTime = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetServerTime *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetServerTime, sizeof(struct __Bsdsysservice__GetServerTime), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetServerTime(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetServerTime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetServerTime(soap, "Bsdsysservice:GetServerTime", &a->Bsdsysservice__GetServerTime, ""))
				{	soap_flag_Bsdsysservice__GetServerTime--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetServerTime(struct soap *soap, const struct __Bsdsysservice__GetServerTime *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetServerTime(soap, tag?tag:"-Bsdsysservice:GetServerTime", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetServerTime * SOAP_FMAC4 soap_get___Bsdsysservice__GetServerTime(struct soap *soap, struct __Bsdsysservice__GetServerTime *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetServerTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetServerTime * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetServerTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetServerTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetServerTime, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetServerTime);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetServerTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetServerTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetServerTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetServerTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetServerTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetServerTime %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetServerTime*)p = *(struct __Bsdsysservice__GetServerTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__VerifyFunction(struct soap *soap, struct __Bsdsysservice__VerifyFunction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__VerifyFunction = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__VerifyFunction(struct soap *soap, const struct __Bsdsysservice__VerifyFunction *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__VerifyFunction(soap, &a->Bsdsysservice__VerifyFunction);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__VerifyFunction(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__VerifyFunction *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__VerifyFunction(soap, "Bsdsysservice:VerifyFunction", -1, &a->Bsdsysservice__VerifyFunction, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__VerifyFunction * SOAP_FMAC4 soap_in___Bsdsysservice__VerifyFunction(struct soap *soap, const char *tag, struct __Bsdsysservice__VerifyFunction *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__VerifyFunction = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__VerifyFunction *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyFunction, sizeof(struct __Bsdsysservice__VerifyFunction), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__VerifyFunction(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__VerifyFunction && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__VerifyFunction(soap, "Bsdsysservice:VerifyFunction", &a->Bsdsysservice__VerifyFunction, ""))
				{	soap_flag_Bsdsysservice__VerifyFunction--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__VerifyFunction(struct soap *soap, const struct __Bsdsysservice__VerifyFunction *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__VerifyFunction(soap, tag?tag:"-Bsdsysservice:VerifyFunction", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__VerifyFunction * SOAP_FMAC4 soap_get___Bsdsysservice__VerifyFunction(struct soap *soap, struct __Bsdsysservice__VerifyFunction *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__VerifyFunction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__VerifyFunction * SOAP_FMAC2 soap_instantiate___Bsdsysservice__VerifyFunction(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__VerifyFunction(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyFunction, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__VerifyFunction);
		if (size)
			*size = sizeof(struct __Bsdsysservice__VerifyFunction);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__VerifyFunction[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__VerifyFunction);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__VerifyFunction*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__VerifyFunction(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__VerifyFunction %p -> %p\n", q, p));
	*(struct __Bsdsysservice__VerifyFunction*)p = *(struct __Bsdsysservice__VerifyFunction*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__GetUsersForApple(struct soap *soap, struct __Bsdsysservice__GetUsersForApple *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__GetUsersForApple = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__GetUsersForApple(struct soap *soap, const struct __Bsdsysservice__GetUsersForApple *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__GetUsersForApple(soap, &a->Bsdsysservice__GetUsersForApple);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__GetUsersForApple(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__GetUsersForApple *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__GetUsersForApple(soap, "Bsdsysservice:GetUsersForApple", -1, &a->Bsdsysservice__GetUsersForApple, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUsersForApple * SOAP_FMAC4 soap_in___Bsdsysservice__GetUsersForApple(struct soap *soap, const char *tag, struct __Bsdsysservice__GetUsersForApple *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__GetUsersForApple = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__GetUsersForApple *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUsersForApple, sizeof(struct __Bsdsysservice__GetUsersForApple), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__GetUsersForApple(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__GetUsersForApple && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__GetUsersForApple(soap, "Bsdsysservice:GetUsersForApple", &a->Bsdsysservice__GetUsersForApple, ""))
				{	soap_flag_Bsdsysservice__GetUsersForApple--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__GetUsersForApple(struct soap *soap, const struct __Bsdsysservice__GetUsersForApple *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__GetUsersForApple(soap, tag?tag:"-Bsdsysservice:GetUsersForApple", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__GetUsersForApple * SOAP_FMAC4 soap_get___Bsdsysservice__GetUsersForApple(struct soap *soap, struct __Bsdsysservice__GetUsersForApple *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__GetUsersForApple(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__GetUsersForApple * SOAP_FMAC2 soap_instantiate___Bsdsysservice__GetUsersForApple(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__GetUsersForApple(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__GetUsersForApple, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUsersForApple);
		if (size)
			*size = sizeof(struct __Bsdsysservice__GetUsersForApple);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__GetUsersForApple[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__GetUsersForApple);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__GetUsersForApple*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__GetUsersForApple(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__GetUsersForApple %p -> %p\n", q, p));
	*(struct __Bsdsysservice__GetUsersForApple*)p = *(struct __Bsdsysservice__GetUsersForApple*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___Bsdsysservice__VerifyUser(struct soap *soap, struct __Bsdsysservice__VerifyUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->Bsdsysservice__VerifyUser = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___Bsdsysservice__VerifyUser(struct soap *soap, const struct __Bsdsysservice__VerifyUser *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_Bsdsysservice__VerifyUser(soap, &a->Bsdsysservice__VerifyUser);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___Bsdsysservice__VerifyUser(struct soap *soap, const char *tag, int id, const struct __Bsdsysservice__VerifyUser *a, const char *type)
{
	if (soap_out_PointerTo_Bsdsysservice__VerifyUser(soap, "Bsdsysservice:VerifyUser", -1, &a->Bsdsysservice__VerifyUser, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__VerifyUser * SOAP_FMAC4 soap_in___Bsdsysservice__VerifyUser(struct soap *soap, const char *tag, struct __Bsdsysservice__VerifyUser *a, const char *type)
{
	size_t soap_flag_Bsdsysservice__VerifyUser = 1;
	short soap_flag;
	a = (struct __Bsdsysservice__VerifyUser *)soap_id_enter(soap, "", a, SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyUser, sizeof(struct __Bsdsysservice__VerifyUser), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___Bsdsysservice__VerifyUser(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Bsdsysservice__VerifyUser && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_Bsdsysservice__VerifyUser(soap, "Bsdsysservice:VerifyUser", &a->Bsdsysservice__VerifyUser, ""))
				{	soap_flag_Bsdsysservice__VerifyUser--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___Bsdsysservice__VerifyUser(struct soap *soap, const struct __Bsdsysservice__VerifyUser *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___Bsdsysservice__VerifyUser(soap, tag?tag:"-Bsdsysservice:VerifyUser", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __Bsdsysservice__VerifyUser * SOAP_FMAC4 soap_get___Bsdsysservice__VerifyUser(struct soap *soap, struct __Bsdsysservice__VerifyUser *p, const char *tag, const char *type)
{
	if ((p = soap_in___Bsdsysservice__VerifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __Bsdsysservice__VerifyUser * SOAP_FMAC2 soap_instantiate___Bsdsysservice__VerifyUser(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___Bsdsysservice__VerifyUser(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_Bsdsysservice___Bsdsysservice__VerifyUser, n, Bsdsysservice_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__VerifyUser);
		if (size)
			*size = sizeof(struct __Bsdsysservice__VerifyUser);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __Bsdsysservice__VerifyUser[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __Bsdsysservice__VerifyUser);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __Bsdsysservice__VerifyUser*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___Bsdsysservice__VerifyUser(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __Bsdsysservice__VerifyUser %p -> %p\n", q, p));
	*(struct __Bsdsysservice__VerifyUser*)p = *(struct __Bsdsysservice__VerifyUser*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUserListResponse(struct soap *soap, _Bsdsysservice__GetUserListResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUserListResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUserListResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserListResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUserListResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetUserListResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUserListResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUserListResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUserListResponse *)soap_instantiate__Bsdsysservice__GetUserListResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUserListResponse ** p = (_Bsdsysservice__GetUserListResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserListResponse, sizeof(_Bsdsysservice__GetUserListResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUserListResponse(struct soap *soap, _Bsdsysservice__GetUserListResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserListResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetUserListResponse(soap, tag?tag:"Bsdsysservice:GetUserListResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUserListResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUserListResponse(struct soap *soap, _Bsdsysservice__GetUserListResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUserListResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUserList(struct soap *soap, _Bsdsysservice__GetUserList *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUserList(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUserList *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUserList(struct soap *soap, const char *tag, _Bsdsysservice__GetUserList **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUserList **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUserList *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUserList *)soap_instantiate__Bsdsysservice__GetUserList(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUserList ** p = (_Bsdsysservice__GetUserList **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList, sizeof(_Bsdsysservice__GetUserList), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUserList(struct soap *soap, _Bsdsysservice__GetUserList *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList);
	if (soap_out_PointerTo_Bsdsysservice__GetUserList(soap, tag?tag:"Bsdsysservice:GetUserList", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUserList(struct soap *soap, _Bsdsysservice__GetUserList **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUserList(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetAllUserIDResponse(struct soap *soap, _Bsdsysservice__GetAllUserIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetAllUserIDResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetAllUserIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserIDResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetAllUserIDResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetAllUserIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetAllUserIDResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetAllUserIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetAllUserIDResponse *)soap_instantiate__Bsdsysservice__GetAllUserIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetAllUserIDResponse ** p = (_Bsdsysservice__GetAllUserIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserIDResponse, sizeof(_Bsdsysservice__GetAllUserIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetAllUserIDResponse(struct soap *soap, _Bsdsysservice__GetAllUserIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserIDResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetAllUserIDResponse(soap, tag?tag:"Bsdsysservice:GetAllUserIDResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserIDResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetAllUserIDResponse(struct soap *soap, _Bsdsysservice__GetAllUserIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetAllUserIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetAllUserID(struct soap *soap, _Bsdsysservice__GetAllUserID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetAllUserID(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetAllUserID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserID ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetAllUserID(struct soap *soap, const char *tag, _Bsdsysservice__GetAllUserID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetAllUserID **)soap_malloc(soap, sizeof(_Bsdsysservice__GetAllUserID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetAllUserID *)soap_instantiate__Bsdsysservice__GetAllUserID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetAllUserID ** p = (_Bsdsysservice__GetAllUserID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAllUserID, sizeof(_Bsdsysservice__GetAllUserID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetAllUserID(struct soap *soap, _Bsdsysservice__GetAllUserID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAllUserID);
	if (soap_out_PointerTo_Bsdsysservice__GetAllUserID(soap, tag?tag:"Bsdsysservice:GetAllUserID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetAllUserID ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetAllUserID(struct soap *soap, _Bsdsysservice__GetAllUserID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetAllUserID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetDepartmentList3Response(struct soap *soap, _Bsdsysservice__GetDepartmentList3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetDepartmentList3Response(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetDepartmentList3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetDepartmentList3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetDepartmentList3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetDepartmentList3Response **)soap_malloc(soap, sizeof(_Bsdsysservice__GetDepartmentList3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetDepartmentList3Response *)soap_instantiate__Bsdsysservice__GetDepartmentList3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetDepartmentList3Response ** p = (_Bsdsysservice__GetDepartmentList3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3Response, sizeof(_Bsdsysservice__GetDepartmentList3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetDepartmentList3Response(struct soap *soap, _Bsdsysservice__GetDepartmentList3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3Response);
	if (soap_out_PointerTo_Bsdsysservice__GetDepartmentList3Response(soap, tag?tag:"Bsdsysservice:GetDepartmentList3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetDepartmentList3Response(struct soap *soap, _Bsdsysservice__GetDepartmentList3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetDepartmentList3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetDepartmentList3(struct soap *soap, _Bsdsysservice__GetDepartmentList3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetDepartmentList3(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetDepartmentList3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetDepartmentList3(struct soap *soap, const char *tag, _Bsdsysservice__GetDepartmentList3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetDepartmentList3 **)soap_malloc(soap, sizeof(_Bsdsysservice__GetDepartmentList3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetDepartmentList3 *)soap_instantiate__Bsdsysservice__GetDepartmentList3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetDepartmentList3 ** p = (_Bsdsysservice__GetDepartmentList3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetDepartmentList3, sizeof(_Bsdsysservice__GetDepartmentList3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetDepartmentList3(struct soap *soap, _Bsdsysservice__GetDepartmentList3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetDepartmentList3);
	if (soap_out_PointerTo_Bsdsysservice__GetDepartmentList3(soap, tag?tag:"Bsdsysservice:GetDepartmentList3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetDepartmentList3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetDepartmentList3(struct soap *soap, _Bsdsysservice__GetDepartmentList3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetDepartmentList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUserList3Response(struct soap *soap, _Bsdsysservice__GetUserList3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUserList3Response(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUserList3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUserList3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetUserList3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUserList3Response **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUserList3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUserList3Response *)soap_instantiate__Bsdsysservice__GetUserList3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUserList3Response ** p = (_Bsdsysservice__GetUserList3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3Response, sizeof(_Bsdsysservice__GetUserList3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUserList3Response(struct soap *soap, _Bsdsysservice__GetUserList3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3Response);
	if (soap_out_PointerTo_Bsdsysservice__GetUserList3Response(soap, tag?tag:"Bsdsysservice:GetUserList3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUserList3Response(struct soap *soap, _Bsdsysservice__GetUserList3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUserList3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUserList3(struct soap *soap, _Bsdsysservice__GetUserList3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUserList3(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUserList3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUserList3(struct soap *soap, const char *tag, _Bsdsysservice__GetUserList3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUserList3 **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUserList3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUserList3 *)soap_instantiate__Bsdsysservice__GetUserList3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUserList3 ** p = (_Bsdsysservice__GetUserList3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUserList3, sizeof(_Bsdsysservice__GetUserList3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUserList3(struct soap *soap, _Bsdsysservice__GetUserList3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUserList3);
	if (soap_out_PointerTo_Bsdsysservice__GetUserList3(soap, tag?tag:"Bsdsysservice:GetUserList3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUserList3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUserList3(struct soap *soap, _Bsdsysservice__GetUserList3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUserList3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetRegions3Response(struct soap *soap, _Bsdsysservice__GetRegions3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetRegions3Response(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetRegions3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetRegions3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetRegions3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetRegions3Response **)soap_malloc(soap, sizeof(_Bsdsysservice__GetRegions3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetRegions3Response *)soap_instantiate__Bsdsysservice__GetRegions3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetRegions3Response ** p = (_Bsdsysservice__GetRegions3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3Response, sizeof(_Bsdsysservice__GetRegions3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetRegions3Response(struct soap *soap, _Bsdsysservice__GetRegions3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3Response);
	if (soap_out_PointerTo_Bsdsysservice__GetRegions3Response(soap, tag?tag:"Bsdsysservice:GetRegions3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetRegions3Response(struct soap *soap, _Bsdsysservice__GetRegions3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetRegions3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetRegions3(struct soap *soap, _Bsdsysservice__GetRegions3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetRegions3(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetRegions3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetRegions3(struct soap *soap, const char *tag, _Bsdsysservice__GetRegions3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetRegions3 **)soap_malloc(soap, sizeof(_Bsdsysservice__GetRegions3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetRegions3 *)soap_instantiate__Bsdsysservice__GetRegions3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetRegions3 ** p = (_Bsdsysservice__GetRegions3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions3, sizeof(_Bsdsysservice__GetRegions3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetRegions3(struct soap *soap, _Bsdsysservice__GetRegions3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions3);
	if (soap_out_PointerTo_Bsdsysservice__GetRegions3(soap, tag?tag:"Bsdsysservice:GetRegions3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetRegions3(struct soap *soap, _Bsdsysservice__GetRegions3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetRegions3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetRegionsResponse(struct soap *soap, _Bsdsysservice__GetRegionsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetRegionsResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetRegionsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegionsResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetRegionsResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetRegionsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetRegionsResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetRegionsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetRegionsResponse *)soap_instantiate__Bsdsysservice__GetRegionsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetRegionsResponse ** p = (_Bsdsysservice__GetRegionsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegionsResponse, sizeof(_Bsdsysservice__GetRegionsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetRegionsResponse(struct soap *soap, _Bsdsysservice__GetRegionsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegionsResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetRegionsResponse(soap, tag?tag:"Bsdsysservice:GetRegionsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetRegionsResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetRegionsResponse(struct soap *soap, _Bsdsysservice__GetRegionsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetRegionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetRegions(struct soap *soap, _Bsdsysservice__GetRegions *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetRegions(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetRegions *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetRegions(struct soap *soap, const char *tag, _Bsdsysservice__GetRegions **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetRegions **)soap_malloc(soap, sizeof(_Bsdsysservice__GetRegions *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetRegions *)soap_instantiate__Bsdsysservice__GetRegions(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetRegions ** p = (_Bsdsysservice__GetRegions **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetRegions, sizeof(_Bsdsysservice__GetRegions), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetRegions(struct soap *soap, _Bsdsysservice__GetRegions *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetRegions);
	if (soap_out_PointerTo_Bsdsysservice__GetRegions(soap, tag?tag:"Bsdsysservice:GetRegions", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetRegions ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetRegions(struct soap *soap, _Bsdsysservice__GetRegions **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetRegions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetFunctions3Response(struct soap *soap, _Bsdsysservice__GetFunctions3Response *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetFunctions3Response(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetFunctions3Response *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3Response ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetFunctions3Response(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctions3Response **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetFunctions3Response **)soap_malloc(soap, sizeof(_Bsdsysservice__GetFunctions3Response *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetFunctions3Response *)soap_instantiate__Bsdsysservice__GetFunctions3Response(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetFunctions3Response ** p = (_Bsdsysservice__GetFunctions3Response **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3Response, sizeof(_Bsdsysservice__GetFunctions3Response), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetFunctions3Response(struct soap *soap, _Bsdsysservice__GetFunctions3Response *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3Response);
	if (soap_out_PointerTo_Bsdsysservice__GetFunctions3Response(soap, tag?tag:"Bsdsysservice:GetFunctions3Response", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3Response ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetFunctions3Response(struct soap *soap, _Bsdsysservice__GetFunctions3Response **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetFunctions3Response(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetFunctions3(struct soap *soap, _Bsdsysservice__GetFunctions3 *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetFunctions3(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetFunctions3 *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3 ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetFunctions3(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctions3 **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetFunctions3 **)soap_malloc(soap, sizeof(_Bsdsysservice__GetFunctions3 *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetFunctions3 *)soap_instantiate__Bsdsysservice__GetFunctions3(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetFunctions3 ** p = (_Bsdsysservice__GetFunctions3 **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctions3, sizeof(_Bsdsysservice__GetFunctions3), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetFunctions3(struct soap *soap, _Bsdsysservice__GetFunctions3 *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctions3);
	if (soap_out_PointerTo_Bsdsysservice__GetFunctions3(soap, tag?tag:"Bsdsysservice:GetFunctions3", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctions3 ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetFunctions3(struct soap *soap, _Bsdsysservice__GetFunctions3 **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetFunctions3(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, _Bsdsysservice__GetFunctionsByUserIdResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetFunctionsByUserIdResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserIdResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctionsByUserIdResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetFunctionsByUserIdResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetFunctionsByUserIdResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetFunctionsByUserIdResponse *)soap_instantiate__Bsdsysservice__GetFunctionsByUserIdResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetFunctionsByUserIdResponse ** p = (_Bsdsysservice__GetFunctionsByUserIdResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserIdResponse, sizeof(_Bsdsysservice__GetFunctionsByUserIdResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, _Bsdsysservice__GetFunctionsByUserIdResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(soap, tag?tag:"Bsdsysservice:GetFunctionsByUserIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserIdResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(struct soap *soap, _Bsdsysservice__GetFunctionsByUserIdResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetFunctionsByUserId(struct soap *soap, _Bsdsysservice__GetFunctionsByUserId *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetFunctionsByUserId *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserId ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserId(struct soap *soap, const char *tag, _Bsdsysservice__GetFunctionsByUserId **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetFunctionsByUserId **)soap_malloc(soap, sizeof(_Bsdsysservice__GetFunctionsByUserId *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetFunctionsByUserId *)soap_instantiate__Bsdsysservice__GetFunctionsByUserId(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetFunctionsByUserId ** p = (_Bsdsysservice__GetFunctionsByUserId **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetFunctionsByUserId, sizeof(_Bsdsysservice__GetFunctionsByUserId), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetFunctionsByUserId(struct soap *soap, _Bsdsysservice__GetFunctionsByUserId *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetFunctionsByUserId);
	if (soap_out_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, tag?tag:"Bsdsysservice:GetFunctionsByUserId", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetFunctionsByUserId ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetFunctionsByUserId(struct soap *soap, _Bsdsysservice__GetFunctionsByUserId **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetFunctionsByUserId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, _Bsdsysservice__GetMobileByUserIdResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetMobileByUserIdResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserIdResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetMobileByUserIdResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetMobileByUserIdResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetMobileByUserIdResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetMobileByUserIdResponse *)soap_instantiate__Bsdsysservice__GetMobileByUserIdResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetMobileByUserIdResponse ** p = (_Bsdsysservice__GetMobileByUserIdResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserIdResponse, sizeof(_Bsdsysservice__GetMobileByUserIdResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, _Bsdsysservice__GetMobileByUserIdResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserIdResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(soap, tag?tag:"Bsdsysservice:GetMobileByUserIdResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserIdResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(struct soap *soap, _Bsdsysservice__GetMobileByUserIdResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetMobileByUserIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetMobileByUserId(struct soap *soap, _Bsdsysservice__GetMobileByUserId *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetMobileByUserId(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetMobileByUserId *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserId ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetMobileByUserId(struct soap *soap, const char *tag, _Bsdsysservice__GetMobileByUserId **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetMobileByUserId **)soap_malloc(soap, sizeof(_Bsdsysservice__GetMobileByUserId *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetMobileByUserId *)soap_instantiate__Bsdsysservice__GetMobileByUserId(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetMobileByUserId ** p = (_Bsdsysservice__GetMobileByUserId **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetMobileByUserId, sizeof(_Bsdsysservice__GetMobileByUserId), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetMobileByUserId(struct soap *soap, _Bsdsysservice__GetMobileByUserId *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetMobileByUserId);
	if (soap_out_PointerTo_Bsdsysservice__GetMobileByUserId(soap, tag?tag:"Bsdsysservice:GetMobileByUserId", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetMobileByUserId ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetMobileByUserId(struct soap *soap, _Bsdsysservice__GetMobileByUserId **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetMobileByUserId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__WriteLogResponse(struct soap *soap, _Bsdsysservice__WriteLogResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__WriteLogResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__WriteLogResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__WriteLogResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__WriteLogResponse(struct soap *soap, const char *tag, _Bsdsysservice__WriteLogResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__WriteLogResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__WriteLogResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__WriteLogResponse *)soap_instantiate__Bsdsysservice__WriteLogResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__WriteLogResponse ** p = (_Bsdsysservice__WriteLogResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLogResponse, sizeof(_Bsdsysservice__WriteLogResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__WriteLogResponse(struct soap *soap, _Bsdsysservice__WriteLogResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLogResponse);
	if (soap_out_PointerTo_Bsdsysservice__WriteLogResponse(soap, tag?tag:"Bsdsysservice:WriteLogResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__WriteLogResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__WriteLogResponse(struct soap *soap, _Bsdsysservice__WriteLogResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__WriteLogResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__WriteLog(struct soap *soap, _Bsdsysservice__WriteLog *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__WriteLog(struct soap *soap, const char *tag, int id, _Bsdsysservice__WriteLog *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__WriteLog ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__WriteLog(struct soap *soap, const char *tag, _Bsdsysservice__WriteLog **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__WriteLog **)soap_malloc(soap, sizeof(_Bsdsysservice__WriteLog *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__WriteLog *)soap_instantiate__Bsdsysservice__WriteLog(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__WriteLog ** p = (_Bsdsysservice__WriteLog **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__WriteLog, sizeof(_Bsdsysservice__WriteLog), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__WriteLog(struct soap *soap, _Bsdsysservice__WriteLog *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__WriteLog);
	if (soap_out_PointerTo_Bsdsysservice__WriteLog(soap, tag?tag:"Bsdsysservice:WriteLog", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__WriteLog ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__WriteLog(struct soap *soap, _Bsdsysservice__WriteLog **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__WriteLog(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, _Bsdsysservice__GetUnSendMsgResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUnSendMsgResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsgResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetUnSendMsgResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUnSendMsgResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUnSendMsgResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUnSendMsgResponse *)soap_instantiate__Bsdsysservice__GetUnSendMsgResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUnSendMsgResponse ** p = (_Bsdsysservice__GetUnSendMsgResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsgResponse, sizeof(_Bsdsysservice__GetUnSendMsgResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, _Bsdsysservice__GetUnSendMsgResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsgResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetUnSendMsgResponse(soap, tag?tag:"Bsdsysservice:GetUnSendMsgResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsgResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUnSendMsgResponse(struct soap *soap, _Bsdsysservice__GetUnSendMsgResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUnSendMsgResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUnSendMsg(struct soap *soap, _Bsdsysservice__GetUnSendMsg *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUnSendMsg(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUnSendMsg *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsg ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUnSendMsg(struct soap *soap, const char *tag, _Bsdsysservice__GetUnSendMsg **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUnSendMsg **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUnSendMsg *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUnSendMsg *)soap_instantiate__Bsdsysservice__GetUnSendMsg(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUnSendMsg ** p = (_Bsdsysservice__GetUnSendMsg **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUnSendMsg, sizeof(_Bsdsysservice__GetUnSendMsg), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUnSendMsg(struct soap *soap, _Bsdsysservice__GetUnSendMsg *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUnSendMsg);
	if (soap_out_PointerTo_Bsdsysservice__GetUnSendMsg(soap, tag?tag:"Bsdsysservice:GetUnSendMsg", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUnSendMsg ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUnSendMsg(struct soap *soap, _Bsdsysservice__GetUnSendMsg **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUnSendMsg(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, _Bsdsysservice__AlertMsgDirectResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__AlertMsgDirectResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirectResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, const char *tag, _Bsdsysservice__AlertMsgDirectResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__AlertMsgDirectResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__AlertMsgDirectResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__AlertMsgDirectResponse *)soap_instantiate__Bsdsysservice__AlertMsgDirectResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__AlertMsgDirectResponse ** p = (_Bsdsysservice__AlertMsgDirectResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirectResponse, sizeof(_Bsdsysservice__AlertMsgDirectResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, _Bsdsysservice__AlertMsgDirectResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirectResponse);
	if (soap_out_PointerTo_Bsdsysservice__AlertMsgDirectResponse(soap, tag?tag:"Bsdsysservice:AlertMsgDirectResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirectResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__AlertMsgDirectResponse(struct soap *soap, _Bsdsysservice__AlertMsgDirectResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__AlertMsgDirectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__AlertMsgDirect(struct soap *soap, _Bsdsysservice__AlertMsgDirect *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__AlertMsgDirect(struct soap *soap, const char *tag, int id, _Bsdsysservice__AlertMsgDirect *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirect ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__AlertMsgDirect(struct soap *soap, const char *tag, _Bsdsysservice__AlertMsgDirect **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__AlertMsgDirect **)soap_malloc(soap, sizeof(_Bsdsysservice__AlertMsgDirect *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__AlertMsgDirect *)soap_instantiate__Bsdsysservice__AlertMsgDirect(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__AlertMsgDirect ** p = (_Bsdsysservice__AlertMsgDirect **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__AlertMsgDirect, sizeof(_Bsdsysservice__AlertMsgDirect), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__AlertMsgDirect(struct soap *soap, _Bsdsysservice__AlertMsgDirect *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__AlertMsgDirect);
	if (soap_out_PointerTo_Bsdsysservice__AlertMsgDirect(soap, tag?tag:"Bsdsysservice:AlertMsgDirect", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__AlertMsgDirect ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__AlertMsgDirect(struct soap *soap, _Bsdsysservice__AlertMsgDirect **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__AlertMsgDirect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetConnStringResponse(struct soap *soap, _Bsdsysservice__GetConnStringResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetConnStringResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetConnStringResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetConnStringResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetConnStringResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetConnStringResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetConnStringResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetConnStringResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetConnStringResponse *)soap_instantiate__Bsdsysservice__GetConnStringResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetConnStringResponse ** p = (_Bsdsysservice__GetConnStringResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnStringResponse, sizeof(_Bsdsysservice__GetConnStringResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetConnStringResponse(struct soap *soap, _Bsdsysservice__GetConnStringResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnStringResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetConnStringResponse(soap, tag?tag:"Bsdsysservice:GetConnStringResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetConnStringResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetConnStringResponse(struct soap *soap, _Bsdsysservice__GetConnStringResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetConnStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetConnString(struct soap *soap, _Bsdsysservice__GetConnString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetConnString(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetConnString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetConnString ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetConnString(struct soap *soap, const char *tag, _Bsdsysservice__GetConnString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetConnString **)soap_malloc(soap, sizeof(_Bsdsysservice__GetConnString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetConnString *)soap_instantiate__Bsdsysservice__GetConnString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetConnString ** p = (_Bsdsysservice__GetConnString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetConnString, sizeof(_Bsdsysservice__GetConnString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetConnString(struct soap *soap, _Bsdsysservice__GetConnString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetConnString);
	if (soap_out_PointerTo_Bsdsysservice__GetConnString(soap, tag?tag:"Bsdsysservice:GetConnString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetConnString ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetConnString(struct soap *soap, _Bsdsysservice__GetConnString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetConnString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetAppSettingResponse(struct soap *soap, _Bsdsysservice__GetAppSettingResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetAppSettingResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetAppSettingResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSettingResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetAppSettingResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetAppSettingResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetAppSettingResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetAppSettingResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetAppSettingResponse *)soap_instantiate__Bsdsysservice__GetAppSettingResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetAppSettingResponse ** p = (_Bsdsysservice__GetAppSettingResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSettingResponse, sizeof(_Bsdsysservice__GetAppSettingResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetAppSettingResponse(struct soap *soap, _Bsdsysservice__GetAppSettingResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSettingResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetAppSettingResponse(soap, tag?tag:"Bsdsysservice:GetAppSettingResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSettingResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetAppSettingResponse(struct soap *soap, _Bsdsysservice__GetAppSettingResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetAppSettingResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetAppSetting(struct soap *soap, _Bsdsysservice__GetAppSetting *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetAppSetting(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetAppSetting *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSetting ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetAppSetting(struct soap *soap, const char *tag, _Bsdsysservice__GetAppSetting **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetAppSetting **)soap_malloc(soap, sizeof(_Bsdsysservice__GetAppSetting *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetAppSetting *)soap_instantiate__Bsdsysservice__GetAppSetting(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetAppSetting ** p = (_Bsdsysservice__GetAppSetting **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetAppSetting, sizeof(_Bsdsysservice__GetAppSetting), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetAppSetting(struct soap *soap, _Bsdsysservice__GetAppSetting *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetAppSetting);
	if (soap_out_PointerTo_Bsdsysservice__GetAppSetting(soap, tag?tag:"Bsdsysservice:GetAppSetting", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetAppSetting ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetAppSetting(struct soap *soap, _Bsdsysservice__GetAppSetting **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetAppSetting(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetServerTimeResponse(struct soap *soap, _Bsdsysservice__GetServerTimeResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetServerTimeResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetServerTimeResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTimeResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetServerTimeResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetServerTimeResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetServerTimeResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetServerTimeResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetServerTimeResponse *)soap_instantiate__Bsdsysservice__GetServerTimeResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetServerTimeResponse ** p = (_Bsdsysservice__GetServerTimeResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTimeResponse, sizeof(_Bsdsysservice__GetServerTimeResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetServerTimeResponse(struct soap *soap, _Bsdsysservice__GetServerTimeResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTimeResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetServerTimeResponse(soap, tag?tag:"Bsdsysservice:GetServerTimeResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTimeResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetServerTimeResponse(struct soap *soap, _Bsdsysservice__GetServerTimeResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetServerTimeResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetServerTime(struct soap *soap, _Bsdsysservice__GetServerTime *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetServerTime(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetServerTime *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTime ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetServerTime(struct soap *soap, const char *tag, _Bsdsysservice__GetServerTime **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetServerTime **)soap_malloc(soap, sizeof(_Bsdsysservice__GetServerTime *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetServerTime *)soap_instantiate__Bsdsysservice__GetServerTime(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetServerTime ** p = (_Bsdsysservice__GetServerTime **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetServerTime, sizeof(_Bsdsysservice__GetServerTime), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetServerTime(struct soap *soap, _Bsdsysservice__GetServerTime *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetServerTime);
	if (soap_out_PointerTo_Bsdsysservice__GetServerTime(soap, tag?tag:"Bsdsysservice:GetServerTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetServerTime ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetServerTime(struct soap *soap, _Bsdsysservice__GetServerTime **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetServerTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__VerifyFunctionResponse(struct soap *soap, _Bsdsysservice__VerifyFunctionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__VerifyFunctionResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__VerifyFunctionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunctionResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__VerifyFunctionResponse(struct soap *soap, const char *tag, _Bsdsysservice__VerifyFunctionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__VerifyFunctionResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__VerifyFunctionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__VerifyFunctionResponse *)soap_instantiate__Bsdsysservice__VerifyFunctionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__VerifyFunctionResponse ** p = (_Bsdsysservice__VerifyFunctionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunctionResponse, sizeof(_Bsdsysservice__VerifyFunctionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__VerifyFunctionResponse(struct soap *soap, _Bsdsysservice__VerifyFunctionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunctionResponse);
	if (soap_out_PointerTo_Bsdsysservice__VerifyFunctionResponse(soap, tag?tag:"Bsdsysservice:VerifyFunctionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunctionResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__VerifyFunctionResponse(struct soap *soap, _Bsdsysservice__VerifyFunctionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__VerifyFunctionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__VerifyFunction(struct soap *soap, _Bsdsysservice__VerifyFunction *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__VerifyFunction(struct soap *soap, const char *tag, int id, _Bsdsysservice__VerifyFunction *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunction ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__VerifyFunction(struct soap *soap, const char *tag, _Bsdsysservice__VerifyFunction **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__VerifyFunction **)soap_malloc(soap, sizeof(_Bsdsysservice__VerifyFunction *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__VerifyFunction *)soap_instantiate__Bsdsysservice__VerifyFunction(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__VerifyFunction ** p = (_Bsdsysservice__VerifyFunction **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyFunction, sizeof(_Bsdsysservice__VerifyFunction), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__VerifyFunction(struct soap *soap, _Bsdsysservice__VerifyFunction *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyFunction);
	if (soap_out_PointerTo_Bsdsysservice__VerifyFunction(soap, tag?tag:"Bsdsysservice:VerifyFunction", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__VerifyFunction ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__VerifyFunction(struct soap *soap, _Bsdsysservice__VerifyFunction **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__VerifyFunction(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, _Bsdsysservice__GetUsersForAppleResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUsersForAppleResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForAppleResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, const char *tag, _Bsdsysservice__GetUsersForAppleResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUsersForAppleResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUsersForAppleResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUsersForAppleResponse *)soap_instantiate__Bsdsysservice__GetUsersForAppleResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUsersForAppleResponse ** p = (_Bsdsysservice__GetUsersForAppleResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForAppleResponse, sizeof(_Bsdsysservice__GetUsersForAppleResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, _Bsdsysservice__GetUsersForAppleResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForAppleResponse);
	if (soap_out_PointerTo_Bsdsysservice__GetUsersForAppleResponse(soap, tag?tag:"Bsdsysservice:GetUsersForAppleResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForAppleResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUsersForAppleResponse(struct soap *soap, _Bsdsysservice__GetUsersForAppleResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUsersForAppleResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__GetUsersForApple(struct soap *soap, _Bsdsysservice__GetUsersForApple *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__GetUsersForApple(struct soap *soap, const char *tag, int id, _Bsdsysservice__GetUsersForApple *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForApple ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__GetUsersForApple(struct soap *soap, const char *tag, _Bsdsysservice__GetUsersForApple **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__GetUsersForApple **)soap_malloc(soap, sizeof(_Bsdsysservice__GetUsersForApple *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__GetUsersForApple *)soap_instantiate__Bsdsysservice__GetUsersForApple(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__GetUsersForApple ** p = (_Bsdsysservice__GetUsersForApple **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__GetUsersForApple, sizeof(_Bsdsysservice__GetUsersForApple), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__GetUsersForApple(struct soap *soap, _Bsdsysservice__GetUsersForApple *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__GetUsersForApple);
	if (soap_out_PointerTo_Bsdsysservice__GetUsersForApple(soap, tag?tag:"Bsdsysservice:GetUsersForApple", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__GetUsersForApple ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__GetUsersForApple(struct soap *soap, _Bsdsysservice__GetUsersForApple **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__GetUsersForApple(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__VerifyUserResponse(struct soap *soap, _Bsdsysservice__VerifyUserResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__VerifyUserResponse(struct soap *soap, const char *tag, int id, _Bsdsysservice__VerifyUserResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUserResponse ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__VerifyUserResponse(struct soap *soap, const char *tag, _Bsdsysservice__VerifyUserResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__VerifyUserResponse **)soap_malloc(soap, sizeof(_Bsdsysservice__VerifyUserResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__VerifyUserResponse *)soap_instantiate__Bsdsysservice__VerifyUserResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__VerifyUserResponse ** p = (_Bsdsysservice__VerifyUserResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUserResponse, sizeof(_Bsdsysservice__VerifyUserResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__VerifyUserResponse(struct soap *soap, _Bsdsysservice__VerifyUserResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUserResponse);
	if (soap_out_PointerTo_Bsdsysservice__VerifyUserResponse(soap, tag?tag:"Bsdsysservice:VerifyUserResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUserResponse ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__VerifyUserResponse(struct soap *soap, _Bsdsysservice__VerifyUserResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__VerifyUserResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_Bsdsysservice__VerifyUser(struct soap *soap, _Bsdsysservice__VerifyUser *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_Bsdsysservice__VerifyUser(struct soap *soap, const char *tag, int id, _Bsdsysservice__VerifyUser *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUser ** SOAP_FMAC4 soap_in_PointerTo_Bsdsysservice__VerifyUser(struct soap *soap, const char *tag, _Bsdsysservice__VerifyUser **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_Bsdsysservice__VerifyUser **)soap_malloc(soap, sizeof(_Bsdsysservice__VerifyUser *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_Bsdsysservice__VerifyUser *)soap_instantiate__Bsdsysservice__VerifyUser(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_Bsdsysservice__VerifyUser ** p = (_Bsdsysservice__VerifyUser **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice__Bsdsysservice__VerifyUser, sizeof(_Bsdsysservice__VerifyUser), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_Bsdsysservice__VerifyUser(struct soap *soap, _Bsdsysservice__VerifyUser *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTo_Bsdsysservice__VerifyUser);
	if (soap_out_PointerTo_Bsdsysservice__VerifyUser(soap, tag?tag:"Bsdsysservice:VerifyUser", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _Bsdsysservice__VerifyUser ** SOAP_FMAC4 soap_get_PointerTo_Bsdsysservice__VerifyUser(struct soap *soap, _Bsdsysservice__VerifyUser **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_Bsdsysservice__VerifyUser(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *)soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity ** p = (Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity, sizeof(Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity);
	if (soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, tag?tag:"Bsdsysservice:OptResultOfComm_departmentEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREdepartmentEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *)soap_instantiate_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity ** p = (Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity);
	if (soap_out_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, tag?tag:"Bsdsysservice:OptResultOfV_Comm_UserListEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfV_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, Bsdsysservice__OptResultOfRtmTypeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfRtmTypeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfRtmTypeEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfRtmTypeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfRtmTypeEntity **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfRtmTypeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfRtmTypeEntity *)soap_instantiate_Bsdsysservice__OptResultOfRtmTypeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfRtmTypeEntity ** p = (Bsdsysservice__OptResultOfRtmTypeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfRtmTypeEntity, sizeof(Bsdsysservice__OptResultOfRtmTypeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, Bsdsysservice__OptResultOfRtmTypeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfRtmTypeEntity);
	if (soap_out_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, tag?tag:"Bsdsysservice:OptResultOfRtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfRtmTypeEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfRtmTypeEntity(struct soap *soap, Bsdsysservice__OptResultOfRtmTypeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfAlertEntity(struct soap *soap, Bsdsysservice__OptResultOfAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfAlertEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfAlertEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfAlertEntity **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfAlertEntity *)soap_instantiate_Bsdsysservice__OptResultOfAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfAlertEntity ** p = (Bsdsysservice__OptResultOfAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfAlertEntity, sizeof(Bsdsysservice__OptResultOfAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfAlertEntity(struct soap *soap, Bsdsysservice__OptResultOfAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfAlertEntity);
	if (soap_out_PointerToBsdsysservice__OptResultOfAlertEntity(soap, tag?tag:"Bsdsysservice:OptResultOfAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfAlertEntity(struct soap *soap, Bsdsysservice__OptResultOfAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfString(struct soap *soap, Bsdsysservice__OptResultOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfString(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfString ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfString(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfString **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfString *)soap_instantiate_Bsdsysservice__OptResultOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfString ** p = (Bsdsysservice__OptResultOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfString, sizeof(Bsdsysservice__OptResultOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfString(struct soap *soap, Bsdsysservice__OptResultOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfString);
	if (soap_out_PointerToBsdsysservice__OptResultOfString(soap, tag?tag:"Bsdsysservice:OptResultOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfString ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfString(struct soap *soap, Bsdsysservice__OptResultOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfBoolean(struct soap *soap, Bsdsysservice__OptResultOfBoolean *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfBoolean(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfBoolean *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfBoolean ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfBoolean(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfBoolean **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfBoolean **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfBoolean *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfBoolean *)soap_instantiate_Bsdsysservice__OptResultOfBoolean(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfBoolean ** p = (Bsdsysservice__OptResultOfBoolean **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfBoolean, sizeof(Bsdsysservice__OptResultOfBoolean), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfBoolean(struct soap *soap, Bsdsysservice__OptResultOfBoolean *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfBoolean);
	if (soap_out_PointerToBsdsysservice__OptResultOfBoolean(soap, tag?tag:"Bsdsysservice:OptResultOfBoolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfBoolean ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfBoolean(struct soap *soap, Bsdsysservice__OptResultOfBoolean **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, Bsdsysservice__OptResultOfUserForAppleEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfUserForAppleEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfUserForAppleEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfUserForAppleEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfUserForAppleEntity **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfUserForAppleEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfUserForAppleEntity *)soap_instantiate_Bsdsysservice__OptResultOfUserForAppleEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfUserForAppleEntity ** p = (Bsdsysservice__OptResultOfUserForAppleEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfUserForAppleEntity, sizeof(Bsdsysservice__OptResultOfUserForAppleEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, Bsdsysservice__OptResultOfUserForAppleEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfUserForAppleEntity);
	if (soap_out_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, tag?tag:"Bsdsysservice:OptResultOfUserForAppleEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfUserForAppleEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfUserForAppleEntity(struct soap *soap, Bsdsysservice__OptResultOfUserForAppleEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfUserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREuserEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__OptResultOfComm_USCOREuserEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREuserEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__OptResultOfComm_USCOREuserEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__OptResultOfComm_USCOREuserEntity **)soap_malloc(soap, sizeof(Bsdsysservice__OptResultOfComm_USCOREuserEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__OptResultOfComm_USCOREuserEntity *)soap_instantiate_Bsdsysservice__OptResultOfComm_USCOREuserEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__OptResultOfComm_USCOREuserEntity ** p = (Bsdsysservice__OptResultOfComm_USCOREuserEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__OptResultOfComm_USCOREuserEntity, sizeof(Bsdsysservice__OptResultOfComm_USCOREuserEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREuserEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity);
	if (soap_out_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, tag?tag:"Bsdsysservice:OptResultOfComm_userEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__OptResultOfComm_USCOREuserEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__OptResultOfComm_USCOREuserEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__OptResultOfComm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, Bsdsysservice__Comm_USCOREemployeeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__Comm_USCOREemployeeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREemployeeEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREemployeeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__Comm_USCOREemployeeEntity **)soap_malloc(soap, sizeof(Bsdsysservice__Comm_USCOREemployeeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__Comm_USCOREemployeeEntity *)soap_instantiate_Bsdsysservice__Comm_USCOREemployeeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__Comm_USCOREemployeeEntity ** p = (Bsdsysservice__Comm_USCOREemployeeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREemployeeEntity, sizeof(Bsdsysservice__Comm_USCOREemployeeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, Bsdsysservice__Comm_USCOREemployeeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREemployeeEntity);
	if (soap_out_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, tag?tag:"Bsdsysservice:Comm_employeeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREemployeeEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__Comm_USCOREemployeeEntity(struct soap *soap, Bsdsysservice__Comm_USCOREemployeeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__Comm_USCOREemployeeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity))
		soap_serialize_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__Comm_USCOREdepartmentEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREdepartmentEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREdepartmentEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__Comm_USCOREdepartmentEntity ***)soap_malloc(soap, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__Comm_USCOREdepartmentEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity);
	if (soap_out_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag?tag:"Bsdsysservice:Comm_departmentEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREdepartmentEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__Comm_USCOREdepartmentEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREdepartmentEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREdepartmentEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__Comm_USCOREdepartmentEntity **)soap_malloc(soap, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__Comm_USCOREdepartmentEntity *)soap_instantiate_Bsdsysservice__Comm_USCOREdepartmentEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__Comm_USCOREdepartmentEntity ** p = (Bsdsysservice__Comm_USCOREdepartmentEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREdepartmentEntity, sizeof(Bsdsysservice__Comm_USCOREdepartmentEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREdepartmentEntity);
	if (soap_out_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag?tag:"Bsdsysservice:Comm_departmentEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREdepartmentEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__Comm_USCOREdepartmentEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__Comm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *)soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity ** p = (Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity, sizeof(Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity);
	if (soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, tag?tag:"Bsdsysservice:ArrayOfComm_departmentEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREdepartmentEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREdepartmentEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity))
		soap_serialize_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__V_USCOREComm_USCOREUserListEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdsysservice__V_USCOREComm_USCOREUserListEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__V_USCOREComm_USCOREUserListEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity ***)soap_malloc(soap, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity);
	if (soap_out_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag?tag:"Bsdsysservice:V_Comm_UserListEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__V_USCOREComm_USCOREUserListEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__V_USCOREComm_USCOREUserListEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__V_USCOREComm_USCOREUserListEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__V_USCOREComm_USCOREUserListEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity **)soap_malloc(soap, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity *)soap_instantiate_Bsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__V_USCOREComm_USCOREUserListEntity ** p = (Bsdsysservice__V_USCOREComm_USCOREUserListEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__V_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__V_USCOREComm_USCOREUserListEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity);
	if (soap_out_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag?tag:"Bsdsysservice:V_Comm_UserListEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__V_USCOREComm_USCOREUserListEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__V_USCOREComm_USCOREUserListEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__V_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *)soap_instantiate_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity ** p = (Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity, sizeof(Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity);
	if (soap_out_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, tag?tag:"Bsdsysservice:ArrayOfV_Comm_UserListEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(struct soap *soap, Bsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfV_USCOREComm_USCOREUserListEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity))
		soap_serialize_PointerToBsdsysservice__RtmTypeEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdsysservice__RtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__RtmTypeEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdsysservice__RtmTypeEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdsysservice__RtmTypeEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdsysservice__RtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__RtmTypeEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__RtmTypeEntity ***)soap_malloc(soap, sizeof(Bsdsysservice__RtmTypeEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdsysservice__RtmTypeEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__RtmTypeEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity, sizeof(Bsdsysservice__RtmTypeEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__RtmTypeEntity);
	if (soap_out_PointerToPointerToBsdsysservice__RtmTypeEntity(soap, tag?tag:"Bsdsysservice:RtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__RtmTypeEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdsysservice__RtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__RtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__RtmTypeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__RtmTypeEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__RtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__RtmTypeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__RtmTypeEntity **)soap_malloc(soap, sizeof(Bsdsysservice__RtmTypeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__RtmTypeEntity *)soap_instantiate_Bsdsysservice__RtmTypeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__RtmTypeEntity ** p = (Bsdsysservice__RtmTypeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__RtmTypeEntity, sizeof(Bsdsysservice__RtmTypeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__RtmTypeEntity);
	if (soap_out_PointerToBsdsysservice__RtmTypeEntity(soap, tag?tag:"Bsdsysservice:RtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__RtmTypeEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__RtmTypeEntity(struct soap *soap, Bsdsysservice__RtmTypeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__RtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, Bsdsysservice__ArrayOfRtmTypeEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfRtmTypeEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfRtmTypeEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfRtmTypeEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfRtmTypeEntity **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfRtmTypeEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfRtmTypeEntity *)soap_instantiate_Bsdsysservice__ArrayOfRtmTypeEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfRtmTypeEntity ** p = (Bsdsysservice__ArrayOfRtmTypeEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfRtmTypeEntity, sizeof(Bsdsysservice__ArrayOfRtmTypeEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, Bsdsysservice__ArrayOfRtmTypeEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfRtmTypeEntity);
	if (soap_out_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, tag?tag:"Bsdsysservice:ArrayOfRtmTypeEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfRtmTypeEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfRtmTypeEntity(struct soap *soap, Bsdsysservice__ArrayOfRtmTypeEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfRtmTypeEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity))
		soap_serialize_PointerToBsdsysservice__AlertEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdsysservice__AlertEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__AlertEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdsysservice__AlertEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdsysservice__AlertEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdsysservice__AlertEntity(struct soap *soap, const char *tag, Bsdsysservice__AlertEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__AlertEntity ***)soap_malloc(soap, sizeof(Bsdsysservice__AlertEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdsysservice__AlertEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__AlertEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity, sizeof(Bsdsysservice__AlertEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__AlertEntity);
	if (soap_out_PointerToPointerToBsdsysservice__AlertEntity(soap, tag?tag:"Bsdsysservice:AlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__AlertEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdsysservice__AlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__AlertEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__AlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__AlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__AlertEntity(struct soap *soap, const char *tag, Bsdsysservice__AlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__AlertEntity **)soap_malloc(soap, sizeof(Bsdsysservice__AlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__AlertEntity *)soap_instantiate_Bsdsysservice__AlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__AlertEntity ** p = (Bsdsysservice__AlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__AlertEntity, sizeof(Bsdsysservice__AlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__AlertEntity);
	if (soap_out_PointerToBsdsysservice__AlertEntity(soap, tag?tag:"Bsdsysservice:AlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__AlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__AlertEntity(struct soap *soap, Bsdsysservice__AlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__AlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfAlertEntity(struct soap *soap, Bsdsysservice__ArrayOfAlertEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfAlertEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfAlertEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfAlertEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfAlertEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfAlertEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfAlertEntity **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfAlertEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfAlertEntity *)soap_instantiate_Bsdsysservice__ArrayOfAlertEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfAlertEntity ** p = (Bsdsysservice__ArrayOfAlertEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfAlertEntity, sizeof(Bsdsysservice__ArrayOfAlertEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfAlertEntity(struct soap *soap, Bsdsysservice__ArrayOfAlertEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfAlertEntity);
	if (soap_out_PointerToBsdsysservice__ArrayOfAlertEntity(soap, tag?tag:"Bsdsysservice:ArrayOfAlertEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfAlertEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfAlertEntity(struct soap *soap, Bsdsysservice__ArrayOfAlertEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfAlertEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfString(struct soap *soap, Bsdsysservice__ArrayOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfString(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfString ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfString(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfString **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfString *)soap_instantiate_Bsdsysservice__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfString ** p = (Bsdsysservice__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfString, sizeof(Bsdsysservice__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfString(struct soap *soap, Bsdsysservice__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfString);
	if (soap_out_PointerToBsdsysservice__ArrayOfString(soap, tag?tag:"Bsdsysservice:ArrayOfString", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfString ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfString(struct soap *soap, Bsdsysservice__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap *soap, bool *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_bool);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap *soap, const char *tag, int id, bool *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_bool);
	if (id < 0)
		return soap->error;
	return soap_out_bool(soap, tag, id, *a, type);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap *soap, const char *tag, bool **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (bool **)soap_malloc(soap, sizeof(bool *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_bool(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (bool **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_bool, sizeof(bool), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap *soap, bool *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerTobool);
	if (soap_out_PointerTobool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap *soap, bool **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTobool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfBoolean(struct soap *soap, Bsdsysservice__ArrayOfBoolean *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfBoolean(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfBoolean *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfBoolean ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfBoolean(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfBoolean **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfBoolean **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfBoolean *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfBoolean *)soap_instantiate_Bsdsysservice__ArrayOfBoolean(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfBoolean ** p = (Bsdsysservice__ArrayOfBoolean **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfBoolean, sizeof(Bsdsysservice__ArrayOfBoolean), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfBoolean(struct soap *soap, Bsdsysservice__ArrayOfBoolean *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfBoolean);
	if (soap_out_PointerToBsdsysservice__ArrayOfBoolean(soap, tag?tag:"Bsdsysservice:ArrayOfBoolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfBoolean ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfBoolean(struct soap *soap, Bsdsysservice__ArrayOfBoolean **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfBoolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity))
		soap_serialize_PointerToBsdsysservice__UserForAppleEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdsysservice__UserForAppleEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__UserForAppleEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdsysservice__UserForAppleEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdsysservice__UserForAppleEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdsysservice__UserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__UserForAppleEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__UserForAppleEntity ***)soap_malloc(soap, sizeof(Bsdsysservice__UserForAppleEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdsysservice__UserForAppleEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__UserForAppleEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity, sizeof(Bsdsysservice__UserForAppleEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__UserForAppleEntity);
	if (soap_out_PointerToPointerToBsdsysservice__UserForAppleEntity(soap, tag?tag:"Bsdsysservice:UserForAppleEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__UserForAppleEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdsysservice__UserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__UserForAppleEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__UserForAppleEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__UserForAppleEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__UserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__UserForAppleEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__UserForAppleEntity **)soap_malloc(soap, sizeof(Bsdsysservice__UserForAppleEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__UserForAppleEntity *)soap_instantiate_Bsdsysservice__UserForAppleEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__UserForAppleEntity ** p = (Bsdsysservice__UserForAppleEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__UserForAppleEntity, sizeof(Bsdsysservice__UserForAppleEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__UserForAppleEntity);
	if (soap_out_PointerToBsdsysservice__UserForAppleEntity(soap, tag?tag:"Bsdsysservice:UserForAppleEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__UserForAppleEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__UserForAppleEntity(struct soap *soap, Bsdsysservice__UserForAppleEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__UserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, Bsdsysservice__ArrayOfUserForAppleEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfUserForAppleEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfUserForAppleEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfUserForAppleEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfUserForAppleEntity **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfUserForAppleEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfUserForAppleEntity *)soap_instantiate_Bsdsysservice__ArrayOfUserForAppleEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfUserForAppleEntity ** p = (Bsdsysservice__ArrayOfUserForAppleEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfUserForAppleEntity, sizeof(Bsdsysservice__ArrayOfUserForAppleEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, Bsdsysservice__ArrayOfUserForAppleEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfUserForAppleEntity);
	if (soap_out_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, tag?tag:"Bsdsysservice:ArrayOfUserForAppleEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfUserForAppleEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfUserForAppleEntity(struct soap *soap, Bsdsysservice__ArrayOfUserForAppleEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfUserForAppleEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity))
		soap_serialize_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__Comm_USCOREuserEntity **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity);
	if (id < 0)
		return soap->error;
	return soap_out_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag, id, *a, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREuserEntity *** SOAP_FMAC4 soap_in_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREuserEntity ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__Comm_USCOREuserEntity ***)soap_malloc(soap, sizeof(Bsdsysservice__Comm_USCOREuserEntity **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (Bsdsysservice__Comm_USCOREuserEntity ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity, sizeof(Bsdsysservice__Comm_USCOREuserEntity *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity);
	if (soap_out_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag?tag:"Bsdsysservice:Comm_userEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREuserEntity *** SOAP_FMAC4 soap_get_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__Comm_USCOREuserEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREuserEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__Comm_USCOREuserEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__Comm_USCOREuserEntity **)soap_malloc(soap, sizeof(Bsdsysservice__Comm_USCOREuserEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__Comm_USCOREuserEntity *)soap_instantiate_Bsdsysservice__Comm_USCOREuserEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__Comm_USCOREuserEntity ** p = (Bsdsysservice__Comm_USCOREuserEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__Comm_USCOREuserEntity, sizeof(Bsdsysservice__Comm_USCOREuserEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__Comm_USCOREuserEntity);
	if (soap_out_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag?tag:"Bsdsysservice:Comm_userEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__Comm_USCOREuserEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__Comm_USCOREuserEntity(struct soap *soap, Bsdsysservice__Comm_USCOREuserEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__Comm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREuserEntity *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, const char *tag, int id, Bsdsysservice__ArrayOfComm_USCOREuserEntity *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREuserEntity ** SOAP_FMAC4 soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, const char *tag, Bsdsysservice__ArrayOfComm_USCOREuserEntity **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (Bsdsysservice__ArrayOfComm_USCOREuserEntity **)soap_malloc(soap, sizeof(Bsdsysservice__ArrayOfComm_USCOREuserEntity *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (Bsdsysservice__ArrayOfComm_USCOREuserEntity *)soap_instantiate_Bsdsysservice__ArrayOfComm_USCOREuserEntity(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	Bsdsysservice__ArrayOfComm_USCOREuserEntity ** p = (Bsdsysservice__ArrayOfComm_USCOREuserEntity **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_Bsdsysservice_Bsdsysservice__ArrayOfComm_USCOREuserEntity, sizeof(Bsdsysservice__ArrayOfComm_USCOREuserEntity), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREuserEntity *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity);
	if (soap_out_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, tag?tag:"Bsdsysservice:ArrayOfComm_userEntity", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 Bsdsysservice__ArrayOfComm_USCOREuserEntity ** SOAP_FMAC4 soap_get_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(struct soap *soap, Bsdsysservice__ArrayOfComm_USCOREuserEntity **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToBsdsysservice__ArrayOfComm_USCOREuserEntity(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_Bsdsysservice__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_Bsdsysservice__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_Bsdsysservice_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_Bsdsysservice_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_Bsdsysservice_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_Bsdsysservice_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

} // namespace Bsdsysservice


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of BsdsysserviceC.cpp */
