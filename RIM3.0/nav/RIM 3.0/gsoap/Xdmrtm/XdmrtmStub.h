/* XdmrtmStub.h
   Generated by gSOAP 2.8.2 from Xdmrtm.h
   Copyright(C) 2000-2011, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL OR Genivia's license for commercial use.
*/

#ifndef XdmrtmStub_H
#define XdmrtmStub_H
#define SOAP_NAMESPACE_OF_Xdmrtm	"urn:Xdmrtm"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"

namespace Xdmrtm {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType (7)
/* Xdmrtm:RefStationType */
class SOAP_CMAC Xdmrtm__RefStationType
{
public:
	int nType;	/* required element of type xsd:int */
	std::string sName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefStationType() { Xdmrtm__RefStationType::soap_default(NULL); }
	virtual ~Xdmrtm__RefStationType() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray (8)
/* Xdmrtm:RefStationTypeArray */
class SOAP_CMAC Xdmrtm__RefStationTypeArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RefStationType **item;	/* optional element of type Xdmrtm:RefStationType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 8; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefStationTypeArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefStationTypeArray() { Xdmrtm__RefStationTypeArray::soap_default(NULL); }
	virtual ~Xdmrtm__RefStationTypeArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType (9)
/* Xdmrtm:RefDeviceType */
class SOAP_CMAC Xdmrtm__RefDeviceType
{
public:
	int nType;	/* required element of type xsd:int */
	std::string sName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 9; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceType() { Xdmrtm__RefDeviceType::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceType() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray (10)
/* Xdmrtm:RefDeviceTypeArray */
class SOAP_CMAC Xdmrtm__RefDeviceTypeArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RefDeviceType **item;	/* optional element of type Xdmrtm:RefDeviceType */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceTypeArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceTypeArray() { Xdmrtm__RefDeviceTypeArray::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceTypeArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol (11)
/* Xdmrtm:RefDeviceProtocol */
class SOAP_CMAC Xdmrtm__RefDeviceProtocol
{
public:
	int nProtocolType;	/* required element of type xsd:int */
	std::string sName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocol */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceProtocol() { Xdmrtm__RefDeviceProtocol::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceProtocol() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray (12)
/* Xdmrtm:RefDeviceProtocolArray */
class SOAP_CMAC Xdmrtm__RefDeviceProtocolArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RefDeviceProtocol **item;	/* optional element of type Xdmrtm:RefDeviceProtocol */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceProtocolArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceProtocolArray() { Xdmrtm__RefDeviceProtocolArray::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceProtocolArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel (13)
/* Xdmrtm:RefDeviceModel */
class SOAP_CMAC Xdmrtm__RefDeviceModel
{
public:
	std::string sModel;	/* required element of type xsd:string */
	std::string sName;	/* required element of type xsd:string */
	std::string sNote;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceModel() { Xdmrtm__RefDeviceModel::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceModel() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray (14)
/* Xdmrtm:RefDeviceModelArray */
class SOAP_CMAC Xdmrtm__RefDeviceModelArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RefDeviceModel **item;	/* optional element of type Xdmrtm:RefDeviceModel */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceModelArray() { Xdmrtm__RefDeviceModelArray::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceModelArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc (15)
/* Xdmrtm:RefDeviceFunc */
class SOAP_CMAC Xdmrtm__RefDeviceFunc
{
public:
	int nFuncID;	/* required element of type xsd:int */
	std::string sFuncName;	/* required element of type xsd:string */
	std::string sFuncKey;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFunc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceFunc() { Xdmrtm__RefDeviceFunc::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceFunc() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray (16)
/* Xdmrtm:RefDeviceFuncArray */
class SOAP_CMAC Xdmrtm__RefDeviceFuncArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RefDeviceFunc **item;	/* optional element of type Xdmrtm:RefDeviceFunc */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceFuncArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceFuncArray() { Xdmrtm__RefDeviceFuncArray::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceFuncArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam (17)
/* Xdmrtm:RefDeviceModelFuncParam */
class SOAP_CMAC Xdmrtm__RefDeviceModelFuncParam
{
public:
	std::string sModel;	/* required element of type xsd:string */
	int nFunc;	/* required element of type xsd:int */
	std::string sParam;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceModelFuncParam() { Xdmrtm__RefDeviceModelFuncParam::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceModelFuncParam() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray (18)
/* Xdmrtm:RefDeviceModelFuncParamArray */
class SOAP_CMAC Xdmrtm__RefDeviceModelFuncParamArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RefDeviceModelFuncParam **item;	/* optional element of type Xdmrtm:RefDeviceModelFuncParam */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RefDeviceModelFuncParamArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RefDeviceModelFuncParamArray() { Xdmrtm__RefDeviceModelFuncParamArray::soap_default(NULL); }
	virtual ~Xdmrtm__RefDeviceModelFuncParamArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization (19)
/* Xdmrtm:MonOrganization */
class SOAP_CMAC Xdmrtm__MonOrganization
{
public:
	std::string sOrgNO;	/* required element of type xsd:string */
	std::string sName;	/* required element of type xsd:string */
	std::string sAddress;	/* required element of type xsd:string */
	std::string sPost;	/* required element of type xsd:string */
	std::string sResponpersion;	/* required element of type xsd:string */
	std::string sContact;	/* required element of type xsd:string */
	std::string sBrief;	/* required element of type xsd:string */
	std::string sNote;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 19; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonOrganization() { Xdmrtm__MonOrganization::soap_default(NULL); }
	virtual ~Xdmrtm__MonOrganization() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray (20)
/* Xdmrtm:MonOrganizationArray */
class SOAP_CMAC Xdmrtm__MonOrganizationArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__MonOrganization **item;	/* optional element of type Xdmrtm:MonOrganization */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 20; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonOrganizationArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonOrganizationArray() { Xdmrtm__MonOrganizationArray::soap_default(NULL); }
	virtual ~Xdmrtm__MonOrganizationArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter (21)
/* Xdmrtm:MonControlCenter */
class SOAP_CMAC Xdmrtm__MonControlCenter
{
public:
	std::string sCenterNO;	/* required element of type xsd:string */
	std::string sName;	/* required element of type xsd:string */
	std::string sAddress;	/* required element of type xsd:string */
	double fLong;	/* required element of type xsd:double */
	double fLati;	/* required element of type xsd:double */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonControlCenter() { Xdmrtm__MonControlCenter::soap_default(NULL); }
	virtual ~Xdmrtm__MonControlCenter() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray (22)
/* Xdmrtm:MonControlCenterArray */
class SOAP_CMAC Xdmrtm__MonControlCenterArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__MonControlCenter **item;	/* optional element of type Xdmrtm:MonControlCenter */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonControlCenterArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonControlCenterArray() { Xdmrtm__MonControlCenterArray::soap_default(NULL); }
	virtual ~Xdmrtm__MonControlCenterArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog (23)
/* Xdmrtm:DeviceUsedLog */
class SOAP_CMAC Xdmrtm__DeviceUsedLog
{
public:
	std::string sUser;	/* required element of type xsd:string */
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sStationName;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	std::string sDeviceName;	/* required element of type xsd:string */
	int nFunc;	/* required element of type xsd:int */
	std::string sFuncName;	/* required element of type xsd:string */
	LONG64 nStartTime;	/* required element of type xsd:long */
	LONG64 nStopTime;	/* required element of type xsd:long */
	std::string sParam;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 23; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceUsedLog() { Xdmrtm__DeviceUsedLog::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceUsedLog() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray (24)
/* Xdmrtm:DeviceUsedLogArray */
class SOAP_CMAC Xdmrtm__DeviceUsedLogArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__DeviceUsedLog **item;	/* optional element of type Xdmrtm:DeviceUsedLog */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 24; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUsedLogArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceUsedLogArray() { Xdmrtm__DeviceUsedLogArray::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceUsedLogArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__Station
#define SOAP_TYPE_Xdmrtm_Xdmrtm__Station (25)
/* Xdmrtm:Station */
class SOAP_CMAC Xdmrtm__Station
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sName;	/* required element of type xsd:string */
	LONG64 nCreateTime;	/* required element of type xsd:long */
	std::string sAddress;	/* required element of type xsd:string */
	double fLong;	/* required element of type xsd:double */
	double fLati;	/* required element of type xsd:double */
	double fMonRange;	/* required element of type xsd:double */
	int nStationType;	/* required element of type xsd:int */
	std::string sContact;	/* required element of type xsd:string */
	std::string sDes;	/* required element of type xsd:string */
	std::string sGPSAddr;	/* required element of type xsd:string */
	short nGPSPort;	/* required element of type xsd:short */
	std::string sCompassAddr;	/* required element of type xsd:string */
	short nCompassPort;	/* required element of type xsd:short */
	int nGridNO;	/* required element of type xsd:int */
	std::string sNettype;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__Station */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__Station() { Xdmrtm__Station::soap_default(NULL); }
	virtual ~Xdmrtm__Station() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray (26)
/* Xdmrtm:StationArray */
class SOAP_CMAC Xdmrtm__StationArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__Station **item;	/* optional element of type Xdmrtm:Station */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__StationArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__StationArray() { Xdmrtm__StationArray::soap_default(NULL); }
	virtual ~Xdmrtm__StationArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__Device
#define SOAP_TYPE_Xdmrtm_Xdmrtm__Device (27)
/* Xdmrtm:Device */
class SOAP_CMAC Xdmrtm__Device
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	int nDeviceType;	/* required element of type xsd:int */
	std::string sDeviceModel;	/* required element of type xsd:string */
	std::string sName;	/* required element of type xsd:string */
	std::string sDesc;	/* required element of type xsd:string */
	LONG64 nBuyTime;	/* required element of type xsd:long */
	std::string sSupplier;	/* required element of type xsd:string */
	std::string sRepairTel;	/* required element of type xsd:string */
	std::string sDeviceCurAddress;	/* required element of type xsd:string */
	int nStatus;	/* required element of type xsd:int */
	std::string sResponer;	/* required element of type xsd:string */
	int nMaxRunNUM;	/* required element of type xsd:int */
	std::string sDriverIP;	/* required element of type xsd:string */
	short nDriverPort;	/* required element of type xsd:short */
	int nDeviceProtocol;	/* required element of type xsd:int */
	bool bIsintegrated;	/* required element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 27; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__Device */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__Device() { Xdmrtm__Device::soap_default(NULL); }
	virtual ~Xdmrtm__Device() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray (28)
/* Xdmrtm:DeviceArray */
class SOAP_CMAC Xdmrtm__DeviceArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__Device **item;	/* optional element of type Xdmrtm:Device */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 28; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceArray() { Xdmrtm__DeviceArray::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RNC
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RNC (29)
/* Xdmrtm:RNC */
class SOAP_CMAC Xdmrtm__RNC
{
public:
	std::string sRNCUID;	/* required element of type xsd:string */
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sRNCIP;	/* required element of type xsd:string */
	short nRNCPort;	/* required element of type xsd:short */
	std::string sRNCName;	/* required element of type xsd:string */
	std::string sCtrlDevice;	/* required element of type xsd:string */
	int nCtrlPort;	/* required element of type xsd:int */
	bool bCtrlOSHas;	/* required element of type xsd:boolean */
	std::string sCtrlOSIP;	/* required element of type xsd:string */
	short nCtrlOSPort;	/* required element of type xsd:short */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RNC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RNC() { Xdmrtm__RNC::soap_default(NULL); }
	virtual ~Xdmrtm__RNC() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray (30)
/* Xdmrtm:RNCArray */
class SOAP_CMAC Xdmrtm__RNCArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__RNC **item;	/* optional element of type Xdmrtm:RNC */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__RNCArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__RNCArray() { Xdmrtm__RNCArray::soap_default(NULL); }
	virtual ~Xdmrtm__RNCArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__Ant
#define SOAP_TYPE_Xdmrtm_Xdmrtm__Ant (31)
/* Xdmrtm:Ant */
class SOAP_CMAC Xdmrtm__Ant
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sAntName;	/* required element of type xsd:string */
	std::string sAntFactor;	/* required element of type xsd:string */
	LONG64 nBeginFreq;	/* required element of type xsd:long */
	LONG64 nEndFreq;	/* required element of type xsd:long */
	int nAntHeight;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 31; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__Ant */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__Ant() { Xdmrtm__Ant::soap_default(NULL); }
	virtual ~Xdmrtm__Ant() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray (32)
/* Xdmrtm:AntArray */
class SOAP_CMAC Xdmrtm__AntArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__Ant **item;	/* optional element of type Xdmrtm:Ant */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 32; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__AntArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__AntArray() { Xdmrtm__AntArray::soap_default(NULL); }
	virtual ~Xdmrtm__AntArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna (33)
/* Xdmrtm:DeviceFuncAntenna */
class SOAP_CMAC Xdmrtm__DeviceFuncAntenna
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	int nFunNO;	/* required element of type xsd:int */
	std::string sName;	/* required element of type xsd:string */
	std::string sDesc;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntenna */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceFuncAntenna() { Xdmrtm__DeviceFuncAntenna::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceFuncAntenna() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray (34)
/* Xdmrtm:DeviceFuncAntennaArray */
class SOAP_CMAC Xdmrtm__DeviceFuncAntennaArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__DeviceFuncAntenna **item;	/* optional element of type Xdmrtm:DeviceFuncAntenna */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncAntennaArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceFuncAntennaArray() { Xdmrtm__DeviceFuncAntennaArray::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceFuncAntennaArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc (35)
/* Xdmrtm:DeviceFunc */
class SOAP_CMAC Xdmrtm__DeviceFunc
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	int nFunNO;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 35; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFunc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceFunc() { Xdmrtm__DeviceFunc::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceFunc() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray (36)
/* Xdmrtm:DeviceFuncArray */
class SOAP_CMAC Xdmrtm__DeviceFuncArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__DeviceFunc **item;	/* optional element of type Xdmrtm:DeviceFunc */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceFuncArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceFuncArray() { Xdmrtm__DeviceFuncArray::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceFuncArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation
#define SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation (37)
/* Xdmrtm:LicenseStation */
class SOAP_CMAC Xdmrtm__LicenseStation
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__LicenseStation() { Xdmrtm__LicenseStation::soap_default(NULL); }
	virtual ~Xdmrtm__LicenseStation() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray (38)
/* Xdmrtm:LicenseStationArray */
class SOAP_CMAC Xdmrtm__LicenseStationArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__LicenseStation **item;	/* optional element of type Xdmrtm:LicenseStation */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 38; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__LicenseStationArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__LicenseStationArray() { Xdmrtm__LicenseStationArray::soap_default(NULL); }
	virtual ~Xdmrtm__LicenseStationArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer
#define SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer (39)
/* Xdmrtm:LoadbalancingServer */
class SOAP_CMAC Xdmrtm__LoadbalancingServer
{
public:
	std::string sName;	/* required element of type xsd:string */
	std::string sAddress;	/* required element of type xsd:string */
	short nPort;	/* required element of type xsd:short */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__LoadbalancingServer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__LoadbalancingServer() { Xdmrtm__LoadbalancingServer::soap_default(NULL); }
	virtual ~Xdmrtm__LoadbalancingServer() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo (40)
/* Xdmrtm:DeviceUseingInfo */
class SOAP_CMAC Xdmrtm__DeviceUseingInfo
{
public:
	std::string sUser;	/* required element of type xsd:string */
	std::string sLocaltion;	/* required element of type xsd:string */
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	int nFunc;	/* required element of type xsd:int */
	LONG64 nTaskID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 40; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceUseingInfo() { Xdmrtm__DeviceUseingInfo::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceUseingInfo() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray (41)
/* Xdmrtm:DeviceUseingInfoArray */
class SOAP_CMAC Xdmrtm__DeviceUseingInfoArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__DeviceUseingInfo **item;	/* optional element of type Xdmrtm:DeviceUseingInfo */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__DeviceUseingInfoArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__DeviceUseingInfoArray() { Xdmrtm__DeviceUseingInfoArray::soap_default(NULL); }
	virtual ~Xdmrtm__DeviceUseingInfoArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout
#define SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout (42)
/* Xdmrtm:FreqLayout */
class SOAP_CMAC Xdmrtm__FreqLayout
{
public:
	std::string sName;	/* required element of type xsd:string */
	LONG64 nBeginFreq;	/* required element of type xsd:long */
	LONG64 nEndFreq;	/* required element of type xsd:long */
	std::string sGroupName;	/* required element of type xsd:string */
	LONG64 nStep;	/* required element of type xsd:long */
	LONG64 nEmitWidth;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 42; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__FreqLayout() { Xdmrtm__FreqLayout::soap_default(NULL); }
	virtual ~Xdmrtm__FreqLayout() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray (43)
/* Xdmrtm:FreqLayoutArray */
class SOAP_CMAC Xdmrtm__FreqLayoutArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__FreqLayout **item;	/* optional element of type Xdmrtm:FreqLayout */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__FreqLayoutArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__FreqLayoutArray() { Xdmrtm__FreqLayoutArray::soap_default(NULL); }
	virtual ~Xdmrtm__FreqLayoutArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID
#define SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID (44)
/* Xdmrtm:PlanTaskID */
class SOAP_CMAC Xdmrtm__PlanTaskID
{
public:
	LONG64 nID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__PlanTaskID() { Xdmrtm__PlanTaskID::soap_default(NULL); }
	virtual ~Xdmrtm__PlanTaskID() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray (45)
/* Xdmrtm:PlanTaskIDArray */
class SOAP_CMAC Xdmrtm__PlanTaskIDArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__PlanTaskID **item;	/* optional element of type Xdmrtm:PlanTaskID */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskIDArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__PlanTaskIDArray() { Xdmrtm__PlanTaskIDArray::soap_default(NULL); }
	virtual ~Xdmrtm__PlanTaskIDArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask
#define SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask (46)
/* Xdmrtm:PlanTask */
class SOAP_CMAC Xdmrtm__PlanTask
{
public:
	std::string sName;	/* required element of type xsd:string */
	LONG64 nID;	/* required element of type xsd:long */
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	int nFunc;	/* required element of type xsd:int */
	LONG64 nBeginDateTime;	/* required element of type xsd:long */
	LONG64 nEndDateTime;	/* required element of type xsd:long */
	int nType;	/* required element of type xsd:int */
	std::string sTaskXMLInfo;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 46; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__PlanTask() { Xdmrtm__PlanTask::soap_default(NULL); }
	virtual ~Xdmrtm__PlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray (47)
/* Xdmrtm:PlanTaskArray */
class SOAP_CMAC Xdmrtm__PlanTaskArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__PlanTask **item;	/* optional element of type Xdmrtm:PlanTask */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__PlanTaskArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__PlanTaskArray() { Xdmrtm__PlanTaskArray::soap_default(NULL); }
	virtual ~Xdmrtm__PlanTaskArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport (48)
/* Xdmrtm:MonAnalysisReport */
class SOAP_CMAC Xdmrtm__MonAnalysisReport
{
public:
	std::string sReportID;	/* required element of type xsd:string */
	LONG64 nMonTime;	/* required element of type xsd:long */
	std::string sStationNO;	/* required element of type xsd:string */
	LONG64 nFreq;	/* required element of type xsd:long */
	int nLevel;	/* required element of type xsd:int */
	float fAzimuth;	/* required element of type xsd:float */
	int nType;	/* required element of type xsd:int */
	std::string sTypeDes;	/* required element of type xsd:string */
	std::string sLayoutDes;	/* required element of type xsd:string */
	LONG64 nWidth;	/* required element of type xsd:long */
	bool bUsed;	/* required element of type xsd:boolean */
	std::string sUserEva;	/* required element of type xsd:string */
	LONG64 sEffectiveDate;	/* required element of type xsd:long */
	bool bAck;	/* required element of type xsd:boolean */
	LONG64 nAckDate;	/* required element of type xsd:long */
	std::string sUser;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonAnalysisReport() { Xdmrtm__MonAnalysisReport::soap_default(NULL); }
	virtual ~Xdmrtm__MonAnalysisReport() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray (49)
/* Xdmrtm:MonAnalysisReportArray */
class SOAP_CMAC Xdmrtm__MonAnalysisReportArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__MonAnalysisReport **item;	/* optional element of type Xdmrtm:MonAnalysisReport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonAnalysisReportArray() { Xdmrtm__MonAnalysisReportArray::soap_default(NULL); }
	virtual ~Xdmrtm__MonAnalysisReportArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment (50)
/* Xdmrtm:MonAnalysisReportAttachment */
class SOAP_CMAC Xdmrtm__MonAnalysisReportAttachment
{
public:
	std::string sReportID;	/* required element of type xsd:string */
	std::string sAttachmentID;	/* required element of type xsd:string */
	std::string sFullPath;	/* required element of type xsd:string */
	std::string sName;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonAnalysisReportAttachment() { Xdmrtm__MonAnalysisReportAttachment::soap_default(NULL); }
	virtual ~Xdmrtm__MonAnalysisReportAttachment() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray (51)
/* Xdmrtm:MonAnalysisReportAttachmentArray */
class SOAP_CMAC Xdmrtm__MonAnalysisReportAttachmentArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__MonAnalysisReportAttachment **item;	/* optional element of type Xdmrtm:MonAnalysisReportAttachment */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__MonAnalysisReportAttachmentArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__MonAnalysisReportAttachmentArray() { Xdmrtm__MonAnalysisReportAttachmentArray::soap_default(NULL); }
	virtual ~Xdmrtm__MonAnalysisReportAttachmentArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm
#define SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm (52)
/* Xdmrtm:Alarm */
class SOAP_CMAC Xdmrtm__Alarm
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNo;	/* required element of type xsd:string */
	LONG64 nFreq;	/* required element of type xsd:long */
	LONG64 nDateTime;	/* required element of type xsd:long */
	std::string sContext;	/* required element of type xsd:string */
	std::string sUser;	/* required element of type xsd:string */
	std::string sDes;	/* required element of type xsd:string */
	float fLevel;	/* required element of type xsd:float */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__Alarm */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__Alarm() { Xdmrtm__Alarm::soap_default(NULL); }
	virtual ~Xdmrtm__Alarm() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray
#define SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray (53)
/* Xdmrtm:AlarmArray */
class SOAP_CMAC Xdmrtm__AlarmArray
{
public:
	int __sizeitem;	/* sequence of elements <item> */
	Xdmrtm__Alarm **item;	/* optional element of type Xdmrtm:Alarm */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE_Xdmrtm_Xdmrtm__AlarmArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         Xdmrtm__AlarmArray() { Xdmrtm__AlarmArray::soap_default(NULL); }
	virtual ~Xdmrtm__AlarmArray() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType (54)
/* Xdmrtm:QueryRefStationType */
class SOAP_CMAC _Xdmrtm__QueryRefStationType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefStationType() { _Xdmrtm__QueryRefStationType::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefStationType() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse (55)
/* Xdmrtm:QueryRefStationTypeResponse */
class SOAP_CMAC _Xdmrtm__QueryRefStationTypeResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RefStationTypeArray *RefStationTypeArray;	/* required element of type Xdmrtm:RefStationTypeArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefStationTypeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefStationTypeResponse() { _Xdmrtm__QueryRefStationTypeResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefStationTypeResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType (56)
/* Xdmrtm:QueryRefDeviceType */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceType() { _Xdmrtm__QueryRefDeviceType::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceType() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse (57)
/* Xdmrtm:QueryRefDeviceTypeResponse */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceTypeResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RefDeviceTypeArray *RefDeviceTypeArray;	/* required element of type Xdmrtm:RefDeviceTypeArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceTypeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceTypeResponse() { _Xdmrtm__QueryRefDeviceTypeResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceTypeResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType (58)
/* Xdmrtm:QueryRefDeviceProtocolType */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceProtocolType
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceProtocolType() { _Xdmrtm__QueryRefDeviceProtocolType::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceProtocolType() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse (59)
/* Xdmrtm:QueryRefDeviceProtocolTypeResponse */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceProtocolTypeResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RefDeviceProtocolArray *RefProtocolTypeArray;	/* required element of type Xdmrtm:RefDeviceProtocolArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceProtocolTypeResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceProtocolTypeResponse() { _Xdmrtm__QueryRefDeviceProtocolTypeResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceProtocolTypeResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel (60)
/* Xdmrtm:QueryRefDeviceModel */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceModel
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModel */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceModel() { _Xdmrtm__QueryRefDeviceModel::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceModel() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse (61)
/* Xdmrtm:QueryRefDeviceModelResponse */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceModelResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RefDeviceModelArray *RefDeviceModelArray;	/* required element of type Xdmrtm:RefDeviceModelArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceModelResponse() { _Xdmrtm__QueryRefDeviceModelResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceModelResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc (62)
/* Xdmrtm:QueryRefDeviceFunc */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceFunc
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFunc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceFunc() { _Xdmrtm__QueryRefDeviceFunc::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceFunc() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse (63)
/* Xdmrtm:QueryRefDeviceFuncResponse */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceFuncResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RefDeviceFuncArray *RefDeviceFuncArray;	/* required element of type Xdmrtm:RefDeviceFuncArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceFuncResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceFuncResponse() { _Xdmrtm__QueryRefDeviceFuncResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceFuncResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam (64)
/* Xdmrtm:QueryRefDeviceModelFuncParam */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceModelFuncParam
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParam */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceModelFuncParam() { _Xdmrtm__QueryRefDeviceModelFuncParam::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceModelFuncParam() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse (65)
/* Xdmrtm:QueryRefDeviceModelFuncParamResponse */
class SOAP_CMAC _Xdmrtm__QueryRefDeviceModelFuncParamResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RefDeviceModelFuncParamArray *RefDeviceModelFuncArray;	/* required element of type Xdmrtm:RefDeviceModelFuncParamArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRefDeviceModelFuncParamResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRefDeviceModelFuncParamResponse() { _Xdmrtm__QueryRefDeviceModelFuncParamResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRefDeviceModelFuncParamResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization (66)
/* Xdmrtm:QueryMonOrganization */
class SOAP_CMAC _Xdmrtm__QueryMonOrganization
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganization */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonOrganization() { _Xdmrtm__QueryMonOrganization::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonOrganization() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse (67)
/* Xdmrtm:QueryMonOrganizationResponse */
class SOAP_CMAC _Xdmrtm__QueryMonOrganizationResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__MonOrganizationArray *MonOrganizationArray;	/* required element of type Xdmrtm:MonOrganizationArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonOrganizationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonOrganizationResponse() { _Xdmrtm__QueryMonOrganizationResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonOrganizationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter (68)
/* Xdmrtm:QueryMonControlCenter */
class SOAP_CMAC _Xdmrtm__QueryMonControlCenter
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenter */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonControlCenter() { _Xdmrtm__QueryMonControlCenter::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonControlCenter() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse (69)
/* Xdmrtm:QueryMonControlCenterResponse */
class SOAP_CMAC _Xdmrtm__QueryMonControlCenterResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__MonControlCenterArray *MonControlCenterArray;	/* required element of type Xdmrtm:MonControlCenterArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonControlCenterResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonControlCenterResponse() { _Xdmrtm__QueryMonControlCenterResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonControlCenterResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation (70)
/* Xdmrtm:QueryStation */
class SOAP_CMAC _Xdmrtm__QueryStation
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryStation() { _Xdmrtm__QueryStation::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryStation() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse (71)
/* Xdmrtm:QueryStationResponse */
class SOAP_CMAC _Xdmrtm__QueryStationResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__StationArray *StationArray;	/* required element of type Xdmrtm:StationArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryStationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryStationResponse() { _Xdmrtm__QueryStationResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryStationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice (72)
/* Xdmrtm:QueryDevice */
class SOAP_CMAC _Xdmrtm__QueryDevice
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDevice() { _Xdmrtm__QueryDevice::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDevice() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse (73)
/* Xdmrtm:QueryDeviceResponse */
class SOAP_CMAC _Xdmrtm__QueryDeviceResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__DeviceArray *DeviceArray;	/* required element of type Xdmrtm:DeviceArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceResponse() { _Xdmrtm__QueryDeviceResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC (74)
/* Xdmrtm:QueryRNC */
class SOAP_CMAC _Xdmrtm__QueryRNC
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNC */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRNC() { _Xdmrtm__QueryRNC::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRNC() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse (75)
/* Xdmrtm:QueryRNCResponse */
class SOAP_CMAC _Xdmrtm__QueryRNCResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__RNCArray *RNCArray;	/* required element of type Xdmrtm:RNCArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryRNCResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryRNCResponse() { _Xdmrtm__QueryRNCResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryRNCResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt (76)
/* Xdmrtm:QueryAnt */
class SOAP_CMAC _Xdmrtm__QueryAnt
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAnt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryAnt() { _Xdmrtm__QueryAnt::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryAnt() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse (77)
/* Xdmrtm:QueryAntResponse */
class SOAP_CMAC _Xdmrtm__QueryAntResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__AntArray *AntArray;	/* required element of type Xdmrtm:AntArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryAntResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryAntResponse() { _Xdmrtm__QueryAntResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryAntResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc (78)
/* Xdmrtm:QueryDeviceFunc */
class SOAP_CMAC _Xdmrtm__QueryDeviceFunc
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFunc */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceFunc() { _Xdmrtm__QueryDeviceFunc::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceFunc() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse (79)
/* Xdmrtm:QueryDeviceFuncResponse */
class SOAP_CMAC _Xdmrtm__QueryDeviceFuncResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__DeviceFuncArray *DeviceFuncArray;	/* required element of type Xdmrtm:DeviceFuncArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceFuncResponse() { _Xdmrtm__QueryDeviceFuncResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceFuncResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt (80)
/* Xdmrtm:QueryDeviceFuncAnt */
class SOAP_CMAC _Xdmrtm__QueryDeviceFuncAnt
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAnt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceFuncAnt() { _Xdmrtm__QueryDeviceFuncAnt::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceFuncAnt() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse (81)
/* Xdmrtm:QueryDeviceFuncAntResponse */
class SOAP_CMAC _Xdmrtm__QueryDeviceFuncAntResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__DeviceFuncAntennaArray *DeviceFuncAntArray;	/* required element of type Xdmrtm:DeviceFuncAntennaArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceFuncAntResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceFuncAntResponse() { _Xdmrtm__QueryDeviceFuncAntResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceFuncAntResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation (82)
/* Xdmrtm:QueryUserLicenseStation */
class SOAP_CMAC _Xdmrtm__QueryUserLicenseStation
{
public:
	std::string sUser;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryUserLicenseStation() { _Xdmrtm__QueryUserLicenseStation::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryUserLicenseStation() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse (83)
/* Xdmrtm:QueryUserLicenseStationResponse */
class SOAP_CMAC _Xdmrtm__QueryUserLicenseStationResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__LicenseStationArray *StationArray;	/* required element of type Xdmrtm:LicenseStationArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryUserLicenseStationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryUserLicenseStationResponse() { _Xdmrtm__QueryUserLicenseStationResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryUserLicenseStationResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer
#define SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer (84)
/* Xdmrtm:AllocLoadbalancingServer */
class SOAP_CMAC _Xdmrtm__AllocLoadbalancingServer
{
public:
	std::string sRegionNo;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServer */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__AllocLoadbalancingServer() { _Xdmrtm__AllocLoadbalancingServer::soap_default(NULL); }
	virtual ~_Xdmrtm__AllocLoadbalancingServer() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse (85)
/* Xdmrtm:AllocLoadbalancingServerResponse */
class SOAP_CMAC _Xdmrtm__AllocLoadbalancingServerResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__LoadbalancingServer *LoadBalancingServer;	/* required element of type Xdmrtm:LoadbalancingServer */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__AllocLoadbalancingServerResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__AllocLoadbalancingServerResponse() { _Xdmrtm__AllocLoadbalancingServerResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__AllocLoadbalancingServerResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog (86)
/* Xdmrtm:SubmitDeviceUsedLog */
class SOAP_CMAC _Xdmrtm__SubmitDeviceUsedLog
{
public:
	Xdmrtm__DeviceUsedLog *DeviceUsedLog;	/* required element of type Xdmrtm:DeviceUsedLog */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitDeviceUsedLog() { _Xdmrtm__SubmitDeviceUsedLog::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitDeviceUsedLog() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse (87)
/* Xdmrtm:SubmitDeviceUsedLogResponse */
class SOAP_CMAC _Xdmrtm__SubmitDeviceUsedLogResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitDeviceUsedLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitDeviceUsedLogResponse() { _Xdmrtm__SubmitDeviceUsedLogResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitDeviceUsedLogResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo (88)
/* Xdmrtm:QueryDeviceUseingInfo */
class SOAP_CMAC _Xdmrtm__QueryDeviceUseingInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 88; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceUseingInfo() { _Xdmrtm__QueryDeviceUseingInfo::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceUseingInfo() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse (89)
/* Xdmrtm:QueryDeviceUseingInfoResponse */
class SOAP_CMAC _Xdmrtm__QueryDeviceUseingInfoResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__DeviceUseingInfoArray *DeviceUseingInfoArray;	/* required element of type Xdmrtm:DeviceUseingInfoArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceUseingInfoResponse() { _Xdmrtm__QueryDeviceUseingInfoResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceUseingInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice (90)
/* Xdmrtm:QueryDeviceUseingInfoByDevice */
class SOAP_CMAC _Xdmrtm__QueryDeviceUseingInfoByDevice
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	std::string sDeviceNO;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 90; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDevice */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceUseingInfoByDevice() { _Xdmrtm__QueryDeviceUseingInfoByDevice::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceUseingInfoByDevice() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse (91)
/* Xdmrtm:QueryDeviceUseingInfoByDeviceResponse */
class SOAP_CMAC _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__DeviceUseingInfoArray *DeviceUseingInfoArray;	/* required element of type Xdmrtm:DeviceUseingInfoArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByDeviceResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse() { _Xdmrtm__QueryDeviceUseingInfoByDeviceResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceUseingInfoByDeviceResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser (92)
/* Xdmrtm:QueryDeviceUseingInfoByUser */
class SOAP_CMAC _Xdmrtm__QueryDeviceUseingInfoByUser
{
public:
	std::string sUser;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 92; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUser */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceUseingInfoByUser() { _Xdmrtm__QueryDeviceUseingInfoByUser::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceUseingInfoByUser() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse (93)
/* Xdmrtm:QueryDeviceUseingInfoByUserResponse */
class SOAP_CMAC _Xdmrtm__QueryDeviceUseingInfoByUserResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__DeviceUseingInfoArray *DeviceUseingInfoArray;	/* required element of type Xdmrtm:DeviceUseingInfoArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryDeviceUseingInfoByUserResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryDeviceUseingInfoByUserResponse() { _Xdmrtm__QueryDeviceUseingInfoByUserResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryDeviceUseingInfoByUserResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout (94)
/* Xdmrtm:QueryFreqLayout */
class SOAP_CMAC _Xdmrtm__QueryFreqLayout
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 94; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayout */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryFreqLayout() { _Xdmrtm__QueryFreqLayout::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryFreqLayout() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse (95)
/* Xdmrtm:QueryFreqLayoutResponse */
class SOAP_CMAC _Xdmrtm__QueryFreqLayoutResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__FreqLayoutArray *FreqLayoutArray;	/* required element of type Xdmrtm:FreqLayoutArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 95; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryFreqLayoutResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryFreqLayoutResponse() { _Xdmrtm__QueryFreqLayoutResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryFreqLayoutResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID (96)
/* Xdmrtm:QueryCurExecPlanTaskID */
class SOAP_CMAC _Xdmrtm__QueryCurExecPlanTaskID
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 96; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskID */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryCurExecPlanTaskID() { _Xdmrtm__QueryCurExecPlanTaskID::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryCurExecPlanTaskID() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse (97)
/* Xdmrtm:QueryCurExecPlanTaskIDResponse */
class SOAP_CMAC _Xdmrtm__QueryCurExecPlanTaskIDResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__PlanTaskIDArray *PlanTaskIDArray;	/* required element of type Xdmrtm:PlanTaskIDArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 97; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskIDResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryCurExecPlanTaskIDResponse() { _Xdmrtm__QueryCurExecPlanTaskIDResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryCurExecPlanTaskIDResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask (98)
/* Xdmrtm:QueryPlanTask */
class SOAP_CMAC _Xdmrtm__QueryPlanTask
{
public:
	LONG64 nPlanTaskID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 98; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryPlanTask() { _Xdmrtm__QueryPlanTask::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryPlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse (99)
/* Xdmrtm:QueryPlanTaskResponse */
class SOAP_CMAC _Xdmrtm__QueryPlanTaskResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__PlanTask *PlanTask;	/* required element of type Xdmrtm:PlanTask */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 99; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryPlanTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryPlanTaskResponse() { _Xdmrtm__QueryPlanTaskResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryPlanTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask (100)
/* Xdmrtm:QueryCurExecPlanTask */
class SOAP_CMAC _Xdmrtm__QueryCurExecPlanTask
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 100; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryCurExecPlanTask() { _Xdmrtm__QueryCurExecPlanTask::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryCurExecPlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse (101)
/* Xdmrtm:QueryCurExecPlanTaskResponse */
class SOAP_CMAC _Xdmrtm__QueryCurExecPlanTaskResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__PlanTaskArray *PlanTaskArray;	/* required element of type Xdmrtm:PlanTaskArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 101; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryCurExecPlanTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryCurExecPlanTaskResponse() { _Xdmrtm__QueryCurExecPlanTaskResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryCurExecPlanTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask
#define SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask (102)
/* Xdmrtm:StartPlanTask */
class SOAP_CMAC _Xdmrtm__StartPlanTask
{
public:
	LONG64 nPlanTaskID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 102; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__StartPlanTask() { _Xdmrtm__StartPlanTask::soap_default(NULL); }
	virtual ~_Xdmrtm__StartPlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse (103)
/* Xdmrtm:StartPlanTaskResponse */
class SOAP_CMAC _Xdmrtm__StartPlanTaskResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 103; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__StartPlanTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__StartPlanTaskResponse() { _Xdmrtm__StartPlanTaskResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__StartPlanTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask
#define SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask (104)
/* Xdmrtm:StopPlanTask */
class SOAP_CMAC _Xdmrtm__StopPlanTask
{
public:
	LONG64 nPlanTaskID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 104; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__StopPlanTask() { _Xdmrtm__StopPlanTask::soap_default(NULL); }
	virtual ~_Xdmrtm__StopPlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse (105)
/* Xdmrtm:StopPlanTaskResponse */
class SOAP_CMAC _Xdmrtm__StopPlanTaskResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 105; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__StopPlanTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__StopPlanTaskResponse() { _Xdmrtm__StopPlanTaskResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__StopPlanTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask (106)
/* Xdmrtm:SuspendPlanTask */
class SOAP_CMAC _Xdmrtm__SuspendPlanTask
{
public:
	LONG64 nPlanTaskID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 106; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SuspendPlanTask() { _Xdmrtm__SuspendPlanTask::soap_default(NULL); }
	virtual ~_Xdmrtm__SuspendPlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse (107)
/* Xdmrtm:SuspendPlanTaskResponse */
class SOAP_CMAC _Xdmrtm__SuspendPlanTaskResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 107; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SuspendPlanTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SuspendPlanTaskResponse() { _Xdmrtm__SuspendPlanTaskResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__SuspendPlanTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask
#define SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask (108)
/* Xdmrtm:ResumePlanTask */
class SOAP_CMAC _Xdmrtm__ResumePlanTask
{
public:
	LONG64 nPlanTaskID;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 108; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTask */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__ResumePlanTask() { _Xdmrtm__ResumePlanTask::soap_default(NULL); }
	virtual ~_Xdmrtm__ResumePlanTask() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse (109)
/* Xdmrtm:ResumePlanTaskResponse */
class SOAP_CMAC _Xdmrtm__ResumePlanTaskResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 109; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__ResumePlanTaskResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__ResumePlanTaskResponse() { _Xdmrtm__ResumePlanTaskResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__ResumePlanTaskResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog (110)
/* Xdmrtm:SubmitPlanTaskLog */
class SOAP_CMAC _Xdmrtm__SubmitPlanTaskLog
{
public:
	LONG64 nPlanTaskID;	/* required element of type xsd:long */
	int nType;	/* required element of type xsd:int */
	std::string sLog;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 110; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLog */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitPlanTaskLog() { _Xdmrtm__SubmitPlanTaskLog::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitPlanTaskLog() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse (111)
/* Xdmrtm:SubmitPlanTaskLogResponse */
class SOAP_CMAC _Xdmrtm__SubmitPlanTaskLogResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 111; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitPlanTaskLogResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitPlanTaskLogResponse() { _Xdmrtm__SubmitPlanTaskLogResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitPlanTaskLogResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport (112)
/* Xdmrtm:SubmitMonAnalysisReport */
class SOAP_CMAC _Xdmrtm__SubmitMonAnalysisReport
{
public:
	Xdmrtm__MonAnalysisReport *Report;	/* required element of type Xdmrtm:MonAnalysisReport */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 112; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitMonAnalysisReport() { _Xdmrtm__SubmitMonAnalysisReport::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitMonAnalysisReport() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse (113)
/* Xdmrtm:SubmitMonAnalysisReportResponse */
class SOAP_CMAC _Xdmrtm__SubmitMonAnalysisReportResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 113; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitMonAnalysisReportResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitMonAnalysisReportResponse() { _Xdmrtm__SubmitMonAnalysisReportResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitMonAnalysisReportResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport (114)
/* Xdmrtm:QueryMonAnalysisReport */
class SOAP_CMAC _Xdmrtm__QueryMonAnalysisReport
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	LONG64 nFreq;	/* required element of type xsd:long */
	LONG64 nBeginDate;	/* required element of type xsd:long */
	LONG64 nEndDate;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 114; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonAnalysisReport() { _Xdmrtm__QueryMonAnalysisReport::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonAnalysisReport() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse (115)
/* Xdmrtm:QueryMonAnalysisReportResponse */
class SOAP_CMAC _Xdmrtm__QueryMonAnalysisReportResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__MonAnalysisReportArray *MonAnalysisReportArray;	/* required element of type Xdmrtm:MonAnalysisReportArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 115; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonAnalysisReportResponse() { _Xdmrtm__QueryMonAnalysisReportResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonAnalysisReportResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment (116)
/* Xdmrtm:QueryMonAnalysisReportAttachment */
class SOAP_CMAC _Xdmrtm__QueryMonAnalysisReportAttachment
{
public:
	std::string sReportID;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 116; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonAnalysisReportAttachment() { _Xdmrtm__QueryMonAnalysisReportAttachment::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonAnalysisReportAttachment() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse (117)
/* Xdmrtm:QueryMonAnalysisReportAttachmentResponse */
class SOAP_CMAC _Xdmrtm__QueryMonAnalysisReportAttachmentResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	Xdmrtm__MonAnalysisReportAttachmentArray *MonAnalysisReportAttachMentArray;	/* required element of type Xdmrtm:MonAnalysisReportAttachmentArray */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 117; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__QueryMonAnalysisReportAttachmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__QueryMonAnalysisReportAttachmentResponse() { _Xdmrtm__QueryMonAnalysisReportAttachmentResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__QueryMonAnalysisReportAttachmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment
#define SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment (118)
/* Xdmrtm:DownloadMonAnalysisReportAttachment */
class SOAP_CMAC _Xdmrtm__DownloadMonAnalysisReportAttachment
{
public:
	std::string sReportID;	/* required element of type xsd:string */
	std::string sAttchmentID;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 118; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachment */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__DownloadMonAnalysisReportAttachment() { _Xdmrtm__DownloadMonAnalysisReportAttachment::soap_default(NULL); }
	virtual ~_Xdmrtm__DownloadMonAnalysisReportAttachment() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse (119)
/* Xdmrtm:DownloadMonAnalysisReportAttachmentResponse */
class SOAP_CMAC _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	std::string sAttchmentFullPath;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 119; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__DownloadMonAnalysisReportAttachmentResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse() { _Xdmrtm__DownloadMonAnalysisReportAttachmentResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__DownloadMonAnalysisReportAttachmentResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport
#define SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport (120)
/* Xdmrtm:IsAnalysisReport */
class SOAP_CMAC _Xdmrtm__IsAnalysisReport
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	LONG64 nFreq;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 120; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__IsAnalysisReport() { _Xdmrtm__IsAnalysisReport::soap_default(NULL); }
	virtual ~_Xdmrtm__IsAnalysisReport() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse (121)
/* Xdmrtm:IsAnalysisReportResponse */
class SOAP_CMAC _Xdmrtm__IsAnalysisReportResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	int nStatus;	/* required element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 121; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__IsAnalysisReportResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__IsAnalysisReportResponse() { _Xdmrtm__IsAnalysisReportResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__IsAnalysisReportResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport
#define SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport (122)
/* Xdmrtm:DeleteMonAnalysisReport */
class SOAP_CMAC _Xdmrtm__DeleteMonAnalysisReport
{
public:
	std::string sStationNO;	/* required element of type xsd:string */
	LONG64 nFreq;	/* required element of type xsd:long */
	LONG64 nBeginDate;	/* required element of type xsd:long */
	LONG64 nEndDate;	/* required element of type xsd:long */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 122; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisReport */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__DeleteMonAnalysisReport() { _Xdmrtm__DeleteMonAnalysisReport::soap_default(NULL); }
	virtual ~_Xdmrtm__DeleteMonAnalysisReport() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse (123)
/* Xdmrtm:DeleteMonAnalysisResponse */
class SOAP_CMAC _Xdmrtm__DeleteMonAnalysisResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 123; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__DeleteMonAnalysisResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__DeleteMonAnalysisResponse() { _Xdmrtm__DeleteMonAnalysisResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__DeleteMonAnalysisResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo (124)
/* Xdmrtm:SubmitAlarmInfo */
class SOAP_CMAC _Xdmrtm__SubmitAlarmInfo
{
public:
	Xdmrtm__Alarm *Alarm;	/* required element of type Xdmrtm:Alarm */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 124; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitAlarmInfo() { _Xdmrtm__SubmitAlarmInfo::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitAlarmInfo() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse
#define SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse (125)
/* Xdmrtm:SubmitAlarmInfoResponse */
class SOAP_CMAC _Xdmrtm__SubmitAlarmInfoResponse
{
public:
	int nResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:int */
	std::string sResult;	/* required element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 125; } /* = unique id SOAP_TYPE_Xdmrtm__Xdmrtm__SubmitAlarmInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _Xdmrtm__SubmitAlarmInfoResponse() { _Xdmrtm__SubmitAlarmInfoResponse::soap_default(NULL); }
	virtual ~_Xdmrtm__SubmitAlarmInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefStationType (204)
/* Operation wrapper: */
struct __Xdmrtm__QueryRefStationType
{
public:
	_Xdmrtm__QueryRefStationType *Xdmrtm__QueryRefStationType;	/* optional element of type Xdmrtm:QueryRefStationType */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceType (208)
/* Operation wrapper: */
struct __Xdmrtm__QueryRefDeviceType
{
public:
	_Xdmrtm__QueryRefDeviceType *Xdmrtm__QueryRefDeviceType;	/* optional element of type Xdmrtm:QueryRefDeviceType */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceProtocolType (212)
/* Operation wrapper: */
struct __Xdmrtm__QueryRefDeviceProtocolType
{
public:
	_Xdmrtm__QueryRefDeviceProtocolType *Xdmrtm__QueryRefDeviceProtocolType;	/* optional element of type Xdmrtm:QueryRefDeviceProtocolType */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModel (216)
/* Operation wrapper: */
struct __Xdmrtm__QueryRefDeviceModel
{
public:
	_Xdmrtm__QueryRefDeviceModel *Xdmrtm__QueryRefDeviceModel;	/* optional element of type Xdmrtm:QueryRefDeviceModel */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceFunc (220)
/* Operation wrapper: */
struct __Xdmrtm__QueryRefDeviceFunc
{
public:
	_Xdmrtm__QueryRefDeviceFunc *Xdmrtm__QueryRefDeviceFunc;	/* optional element of type Xdmrtm:QueryRefDeviceFunc */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRefDeviceModelFuncParam (224)
/* Operation wrapper: */
struct __Xdmrtm__QueryRefDeviceModelFuncParam
{
public:
	_Xdmrtm__QueryRefDeviceModelFuncParam *Xdmrtm__QueryRefDeviceModelFuncParam;	/* optional element of type Xdmrtm:QueryRefDeviceModelFuncParam */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonOrganization (228)
/* Operation wrapper: */
struct __Xdmrtm__QueryMonOrganization
{
public:
	_Xdmrtm__QueryMonOrganization *Xdmrtm__QueryMonOrganization;	/* optional element of type Xdmrtm:QueryMonOrganization */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonControlCenter (232)
/* Operation wrapper: */
struct __Xdmrtm__QueryMonControlCenter
{
public:
	_Xdmrtm__QueryMonControlCenter *Xdmrtm__QueryMonControlCenter;	/* optional element of type Xdmrtm:QueryMonControlCenter */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryStation (236)
/* Operation wrapper: */
struct __Xdmrtm__QueryStation
{
public:
	_Xdmrtm__QueryStation *Xdmrtm__QueryStation;	/* optional element of type Xdmrtm:QueryStation */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDevice (240)
/* Operation wrapper: */
struct __Xdmrtm__QueryDevice
{
public:
	_Xdmrtm__QueryDevice *Xdmrtm__QueryDevice;	/* optional element of type Xdmrtm:QueryDevice */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryRNC (244)
/* Operation wrapper: */
struct __Xdmrtm__QueryRNC
{
public:
	_Xdmrtm__QueryRNC *Xdmrtm__QueryRNC;	/* optional element of type Xdmrtm:QueryRNC */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryAnt (248)
/* Operation wrapper: */
struct __Xdmrtm__QueryAnt
{
public:
	_Xdmrtm__QueryAnt *Xdmrtm__QueryAnt;	/* optional element of type Xdmrtm:QueryAnt */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFunc (252)
/* Operation wrapper: */
struct __Xdmrtm__QueryDeviceFunc
{
public:
	_Xdmrtm__QueryDeviceFunc *Xdmrtm__QueryDeviceFunc;	/* optional element of type Xdmrtm:QueryDeviceFunc */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceFuncAnt (256)
/* Operation wrapper: */
struct __Xdmrtm__QueryDeviceFuncAnt
{
public:
	_Xdmrtm__QueryDeviceFuncAnt *Xdmrtm__QueryDeviceFuncAnt;	/* optional element of type Xdmrtm:QueryDeviceFuncAnt */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryUserLicenseStation (260)
/* Operation wrapper: */
struct __Xdmrtm__QueryUserLicenseStation
{
public:
	_Xdmrtm__QueryUserLicenseStation *Xdmrtm__QueryUserLicenseStation;	/* optional element of type Xdmrtm:QueryUserLicenseStation */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer
#define SOAP_TYPE_Xdmrtm___Xdmrtm__AllocLoadbalancingServer (264)
/* Operation wrapper: */
struct __Xdmrtm__AllocLoadbalancingServer
{
public:
	_Xdmrtm__AllocLoadbalancingServer *Xdmrtm__AllocLoadbalancingServer;	/* optional element of type Xdmrtm:AllocLoadbalancingServer */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog
#define SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitDeviceUsedLog (268)
/* Operation wrapper: */
struct __Xdmrtm__SubmitDeviceUsedLog
{
public:
	_Xdmrtm__SubmitDeviceUsedLog *Xdmrtm__SubmitDeviceUsedLog;	/* optional element of type Xdmrtm:SubmitDeviceUsedLog */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfo (272)
/* Operation wrapper: */
struct __Xdmrtm__QueryDeviceUseingInfo
{
public:
	_Xdmrtm__QueryDeviceUseingInfo *Xdmrtm__QueryDeviceUseingInfo;	/* optional element of type Xdmrtm:QueryDeviceUseingInfo */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByDevice (276)
/* Operation wrapper: */
struct __Xdmrtm__QueryDeviceUseingInfoByDevice
{
public:
	_Xdmrtm__QueryDeviceUseingInfoByDevice *Xdmrtm__QueryDeviceUseingInfoByDevice;	/* optional element of type Xdmrtm:QueryDeviceUseingInfoByDevice */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryDeviceUseingInfoByUser (280)
/* Operation wrapper: */
struct __Xdmrtm__QueryDeviceUseingInfoByUser
{
public:
	_Xdmrtm__QueryDeviceUseingInfoByUser *Xdmrtm__QueryDeviceUseingInfoByUser;	/* optional element of type Xdmrtm:QueryDeviceUseingInfoByUser */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryFreqLayout (284)
/* Operation wrapper: */
struct __Xdmrtm__QueryFreqLayout
{
public:
	_Xdmrtm__QueryFreqLayout *Xdmrtm__QueryFreqLayout;	/* optional element of type Xdmrtm:QueryFreqLayout */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTaskID (288)
/* Operation wrapper: */
struct __Xdmrtm__QueryCurExecPlanTaskID
{
public:
	_Xdmrtm__QueryCurExecPlanTaskID *Xdmrtm__QueryCurExecPlanTaskID;	/* optional element of type Xdmrtm:QueryCurExecPlanTaskID */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryPlanTask (292)
/* Operation wrapper: */
struct __Xdmrtm__QueryPlanTask
{
public:
	_Xdmrtm__QueryPlanTask *Xdmrtm__QueryPlanTask;	/* optional element of type Xdmrtm:QueryPlanTask */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryCurExecPlanTask (296)
/* Operation wrapper: */
struct __Xdmrtm__QueryCurExecPlanTask
{
public:
	_Xdmrtm__QueryCurExecPlanTask *Xdmrtm__QueryCurExecPlanTask;	/* optional element of type Xdmrtm:QueryCurExecPlanTask */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask
#define SOAP_TYPE_Xdmrtm___Xdmrtm__StartPlanTask (300)
/* Operation wrapper: */
struct __Xdmrtm__StartPlanTask
{
public:
	_Xdmrtm__StartPlanTask *Xdmrtm__StartPlanTask;	/* optional element of type Xdmrtm:StartPlanTask */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask
#define SOAP_TYPE_Xdmrtm___Xdmrtm__StopPlanTask (304)
/* Operation wrapper: */
struct __Xdmrtm__StopPlanTask
{
public:
	_Xdmrtm__StopPlanTask *Xdmrtm__StopPlanTask;	/* optional element of type Xdmrtm:StopPlanTask */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask
#define SOAP_TYPE_Xdmrtm___Xdmrtm__SuspendPlanTask (308)
/* Operation wrapper: */
struct __Xdmrtm__SuspendPlanTask
{
public:
	_Xdmrtm__SuspendPlanTask *Xdmrtm__SuspendPlanTask;	/* optional element of type Xdmrtm:SuspendPlanTask */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask
#define SOAP_TYPE_Xdmrtm___Xdmrtm__ResumePlanTask (312)
/* Operation wrapper: */
struct __Xdmrtm__ResumePlanTask
{
public:
	_Xdmrtm__ResumePlanTask *Xdmrtm__ResumePlanTask;	/* optional element of type Xdmrtm:ResumePlanTask */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog
#define SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitPlanTaskLog (316)
/* Operation wrapper: */
struct __Xdmrtm__SubmitPlanTaskLog
{
public:
	_Xdmrtm__SubmitPlanTaskLog *Xdmrtm__SubmitPlanTaskLog;	/* optional element of type Xdmrtm:SubmitPlanTaskLog */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport
#define SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitMonAnalysisReport (320)
/* Operation wrapper: */
struct __Xdmrtm__SubmitMonAnalysisReport
{
public:
	_Xdmrtm__SubmitMonAnalysisReport *Xdmrtm__SubmitMonAnalysisReport;	/* optional element of type Xdmrtm:SubmitMonAnalysisReport */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReport (324)
/* Operation wrapper: */
struct __Xdmrtm__QueryMonAnalysisReport
{
public:
	_Xdmrtm__QueryMonAnalysisReport *Xdmrtm__QueryMonAnalysisReport;	/* optional element of type Xdmrtm:QueryMonAnalysisReport */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment
#define SOAP_TYPE_Xdmrtm___Xdmrtm__QueryMonAnalysisReportAttachment (328)
/* Operation wrapper: */
struct __Xdmrtm__QueryMonAnalysisReportAttachment
{
public:
	_Xdmrtm__QueryMonAnalysisReportAttachment *Xdmrtm__QueryMonAnalysisReportAttachment;	/* optional element of type Xdmrtm:QueryMonAnalysisReportAttachment */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment
#define SOAP_TYPE_Xdmrtm___Xdmrtm__DownloadMonAnalysisReportAttachment (332)
/* Operation wrapper: */
struct __Xdmrtm__DownloadMonAnalysisReportAttachment
{
public:
	_Xdmrtm__DownloadMonAnalysisReportAttachment *Xdmrtm__DownloadMonAnalysisReportAttachment;	/* optional element of type Xdmrtm:DownloadMonAnalysisReportAttachment */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport
#define SOAP_TYPE_Xdmrtm___Xdmrtm__IsAnalysisReport (336)
/* Operation wrapper: */
struct __Xdmrtm__IsAnalysisReport
{
public:
	_Xdmrtm__IsAnalysisReport *Xdmrtm__IsAnalysisReport;	/* optional element of type Xdmrtm:IsAnalysisReport */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport
#define SOAP_TYPE_Xdmrtm___Xdmrtm__DeleteMonAnalysisReport (340)
/* Operation wrapper: */
struct __Xdmrtm__DeleteMonAnalysisReport
{
public:
	_Xdmrtm__DeleteMonAnalysisReport *Xdmrtm__DeleteMonAnalysisReport;	/* optional element of type Xdmrtm:DeleteMonAnalysisReport */
};
#endif

#ifndef SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo
#define SOAP_TYPE_Xdmrtm___Xdmrtm__SubmitAlarmInfo (344)
/* Operation wrapper: */
struct __Xdmrtm__SubmitAlarmInfo
{
public:
	_Xdmrtm__SubmitAlarmInfo *Xdmrtm__SubmitAlarmInfo;	/* optional element of type Xdmrtm:SubmitAlarmInfo */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Xdmrtm_SOAP_ENV__Header
#define SOAP_TYPE_Xdmrtm_SOAP_ENV__Header (345)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Xdmrtm_SOAP_ENV__Code
#define SOAP_TYPE_Xdmrtm_SOAP_ENV__Code (346)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail
#define SOAP_TYPE_Xdmrtm_SOAP_ENV__Detail (348)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason
#define SOAP_TYPE_Xdmrtm_SOAP_ENV__Reason (351)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault
#define SOAP_TYPE_Xdmrtm_SOAP_ENV__Fault (352)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_Xdmrtm__QName
#define SOAP_TYPE_Xdmrtm__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_Xdmrtm__XML
#define SOAP_TYPE_Xdmrtm__XML (6)
typedef char *_XML;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace Xdmrtm


#endif

/* End of XdmrtmStub.h */
